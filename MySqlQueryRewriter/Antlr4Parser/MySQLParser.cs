//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySQLParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parsers {
/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MySQLParser : MySQLBaseRecognizer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCESSIBLE_SYMBOL=1, ACCOUNT_SYMBOL=2, ACTION_SYMBOL=3, ADD_SYMBOL=4, 
		ADDDATE_SYMBOL=5, AFTER_SYMBOL=6, AGAINST_SYMBOL=7, AGGREGATE_SYMBOL=8, 
		ALGORITHM_SYMBOL=9, ALL_SYMBOL=10, ALTER_SYMBOL=11, ALWAYS_SYMBOL=12, 
		ANALYSE_SYMBOL=13, ANALYZE_SYMBOL=14, AND_SYMBOL=15, ANY_SYMBOL=16, AS_SYMBOL=17, 
		ASC_SYMBOL=18, ASCII_SYMBOL=19, ASENSITIVE_SYMBOL=20, AT_SYMBOL=21, AUTHORS_SYMBOL=22, 
		AUTOEXTEND_SIZE_SYMBOL=23, AUTO_INCREMENT_SYMBOL=24, AVG_ROW_LENGTH_SYMBOL=25, 
		AVG_SYMBOL=26, BACKUP_SYMBOL=27, BEFORE_SYMBOL=28, BEGIN_SYMBOL=29, BETWEEN_SYMBOL=30, 
		BIGINT_SYMBOL=31, BINARY_SYMBOL=32, BINLOG_SYMBOL=33, BIN_NUM_SYMBOL=34, 
		BIT_AND_SYMBOL=35, BIT_OR_SYMBOL=36, BIT_SYMBOL=37, BIT_XOR_SYMBOL=38, 
		BLOB_SYMBOL=39, BLOCK_SYMBOL=40, BOOLEAN_SYMBOL=41, BOOL_SYMBOL=42, BOTH_SYMBOL=43, 
		BTREE_SYMBOL=44, BY_SYMBOL=45, BYTE_SYMBOL=46, CACHE_SYMBOL=47, CALL_SYMBOL=48, 
		CASCADE_SYMBOL=49, CASCADED_SYMBOL=50, CASE_SYMBOL=51, CAST_SYMBOL=52, 
		CATALOG_NAME_SYMBOL=53, CHAIN_SYMBOL=54, CHANGE_SYMBOL=55, CHANGED_SYMBOL=56, 
		CHANNEL_SYMBOL=57, CHARSET_SYMBOL=58, CHARACTER_SYMBOL=59, CHAR_SYMBOL=60, 
		CHECKSUM_SYMBOL=61, CHECK_SYMBOL=62, CIPHER_SYMBOL=63, CLASS_ORIGIN_SYMBOL=64, 
		CLIENT_SYMBOL=65, CLOSE_SYMBOL=66, COALESCE_SYMBOL=67, CODE_SYMBOL=68, 
		COLLATE_SYMBOL=69, COLLATION_SYMBOL=70, COLUMNS_SYMBOL=71, COLUMN_SYMBOL=72, 
		COLUMN_NAME_SYMBOL=73, COLUMN_FORMAT_SYMBOL=74, COMMENT_SYMBOL=75, COMMITTED_SYMBOL=76, 
		COMMIT_SYMBOL=77, COMPACT_SYMBOL=78, COMPLETION_SYMBOL=79, COMPRESSED_SYMBOL=80, 
		COMPRESSION_SYMBOL=81, CONCURRENT_SYMBOL=82, CONDITION_SYMBOL=83, CONNECTION_SYMBOL=84, 
		CONSISTENT_SYMBOL=85, CONSTRAINT_SYMBOL=86, CONSTRAINT_CATALOG_SYMBOL=87, 
		CONSTRAINT_NAME_SYMBOL=88, CONSTRAINT_SCHEMA_SYMBOL=89, CONTAINS_SYMBOL=90, 
		CONTEXT_SYMBOL=91, CONTINUE_SYMBOL=92, CONTRIBUTORS_SYMBOL=93, CONVERT_SYMBOL=94, 
		COUNT_SYMBOL=95, CPU_SYMBOL=96, CREATE_SYMBOL=97, CROSS_SYMBOL=98, CUBE_SYMBOL=99, 
		CURDATE_SYMBOL=100, CURRENT_SYMBOL=101, CURRENT_DATE_SYMBOL=102, CURRENT_TIME_SYMBOL=103, 
		CURRENT_TIMESTAMP_SYMBOL=104, CURRENT_USER_SYMBOL=105, CURSOR_SYMBOL=106, 
		CURSOR_NAME_SYMBOL=107, CURTIME_SYMBOL=108, DATABASE_SYMBOL=109, DATABASES_SYMBOL=110, 
		DATAFILE_SYMBOL=111, DATA_SYMBOL=112, DATETIME_SYMBOL=113, DATE_ADD_SYMBOL=114, 
		DATE_SUB_SYMBOL=115, DATE_SYMBOL=116, DAYOFMONTH_SYMBOL=117, DAY_HOUR_SYMBOL=118, 
		DAY_MICROSECOND_SYMBOL=119, DAY_MINUTE_SYMBOL=120, DAY_SECOND_SYMBOL=121, 
		DAY_SYMBOL=122, DEALLOCATE_SYMBOL=123, DEC_SYMBOL=124, DECIMAL_NUM_SYMBOL=125, 
		DECIMAL_SYMBOL=126, DECLARE_SYMBOL=127, DEFAULT_SYMBOL=128, DEFAULT_AUTH_SYMBOL=129, 
		DEFINER_SYMBOL=130, DELAYED_SYMBOL=131, DELAY_KEY_WRITE_SYMBOL=132, DELETE_SYMBOL=133, 
		DESC_SYMBOL=134, DESCRIBE_SYMBOL=135, DES_KEY_FILE_SYMBOL=136, DETERMINISTIC_SYMBOL=137, 
		DIAGNOSTICS_SYMBOL=138, DIRECTORY_SYMBOL=139, DISABLE_SYMBOL=140, DISCARD_SYMBOL=141, 
		DISK_SYMBOL=142, DISTINCT_SYMBOL=143, DISTINCTROW_SYMBOL=144, DIV_SYMBOL=145, 
		DOUBLE_SYMBOL=146, DO_SYMBOL=147, DROP_SYMBOL=148, DUAL_SYMBOL=149, DUMPFILE_SYMBOL=150, 
		DUPLICATE_SYMBOL=151, DYNAMIC_SYMBOL=152, EACH_SYMBOL=153, ELSE_SYMBOL=154, 
		ELSEIF_SYMBOL=155, ENABLE_SYMBOL=156, ENCLOSED_SYMBOL=157, ENCRYPTION_SYMBOL=158, 
		END_SYMBOL=159, ENDS_SYMBOL=160, END_OF_INPUT_SYMBOL=161, ENGINES_SYMBOL=162, 
		ENGINE_SYMBOL=163, ENUM_SYMBOL=164, ERROR_SYMBOL=165, ERRORS_SYMBOL=166, 
		ESCAPED_SYMBOL=167, ESCAPE_SYMBOL=168, EVENTS_SYMBOL=169, EVENT_SYMBOL=170, 
		EVERY_SYMBOL=171, EXCHANGE_SYMBOL=172, EXECUTE_SYMBOL=173, EXISTS_SYMBOL=174, 
		EXIT_SYMBOL=175, EXPANSION_SYMBOL=176, EXPIRE_SYMBOL=177, EXPLAIN_SYMBOL=178, 
		EXPORT_SYMBOL=179, EXTENDED_SYMBOL=180, EXTENT_SIZE_SYMBOL=181, EXTRACT_SYMBOL=182, 
		FALSE_SYMBOL=183, FAST_SYMBOL=184, FAULTS_SYMBOL=185, FETCH_SYMBOL=186, 
		FIELDS_SYMBOL=187, FILE_SYMBOL=188, FILE_BLOCK_SIZE_SYMBOL=189, FILTER_SYMBOL=190, 
		FIRST_SYMBOL=191, FIXED_SYMBOL=192, FLOAT4_SYMBOL=193, FLOAT8_SYMBOL=194, 
		FLOAT_SYMBOL=195, FLUSH_SYMBOL=196, FOLLOWS_SYMBOL=197, FORCE_SYMBOL=198, 
		FOREIGN_SYMBOL=199, FOR_SYMBOL=200, FORMAT_SYMBOL=201, FOUND_SYMBOL=202, 
		FROM_SYMBOL=203, FULL_SYMBOL=204, FULLTEXT_SYMBOL=205, FUNCTION_SYMBOL=206, 
		GET_SYMBOL=207, GENERAL_SYMBOL=208, GENERATED_SYMBOL=209, GROUP_REPLICATION_SYMBOL=210, 
		GEOMETRYCOLLECTION_SYMBOL=211, GEOMETRY_SYMBOL=212, GET_FORMAT_SYMBOL=213, 
		GLOBAL_SYMBOL=214, GRANT_SYMBOL=215, GRANTS_SYMBOL=216, GROUP_SYMBOL=217, 
		GROUP_CONCAT_SYMBOL=218, HANDLER_SYMBOL=219, HASH_SYMBOL=220, HAVING_SYMBOL=221, 
		HELP_SYMBOL=222, HIGH_PRIORITY_SYMBOL=223, HOST_SYMBOL=224, HOSTS_SYMBOL=225, 
		HOUR_MICROSECOND_SYMBOL=226, HOUR_MINUTE_SYMBOL=227, HOUR_SECOND_SYMBOL=228, 
		HOUR_SYMBOL=229, IDENTIFIED_SYMBOL=230, IF_SYMBOL=231, IGNORE_SYMBOL=232, 
		IGNORE_SERVER_IDS_SYMBOL=233, IMPORT_SYMBOL=234, INDEXES_SYMBOL=235, INDEX_SYMBOL=236, 
		INFILE_SYMBOL=237, INITIAL_SIZE_SYMBOL=238, INNER_SYMBOL=239, INOUT_SYMBOL=240, 
		INSENSITIVE_SYMBOL=241, INSERT_SYMBOL=242, INSERT_METHOD_SYMBOL=243, INSTANCE_SYMBOL=244, 
		INSTALL_SYMBOL=245, INTEGER_SYMBOL=246, INTERVAL_SYMBOL=247, INTO_SYMBOL=248, 
		INT_SYMBOL=249, INVOKER_SYMBOL=250, IN_SYMBOL=251, IO_AFTER_GTIDS_SYMBOL=252, 
		IO_BEFORE_GTIDS_SYMBOL=253, IO_THREAD_SYMBOL=254, IO_SYMBOL=255, IPC_SYMBOL=256, 
		IS_SYMBOL=257, ISOLATION_SYMBOL=258, ISSUER_SYMBOL=259, ITERATE_SYMBOL=260, 
		JOIN_SYMBOL=261, JSON_SYMBOL=262, KEYS_SYMBOL=263, KEY_BLOCK_SIZE_SYMBOL=264, 
		KEY_SYMBOL=265, KILL_SYMBOL=266, LANGUAGE_SYMBOL=267, LAST_SYMBOL=268, 
		LEADING_SYMBOL=269, LEAVES_SYMBOL=270, LEAVE_SYMBOL=271, LEFT_SYMBOL=272, 
		LESS_SYMBOL=273, LEVEL_SYMBOL=274, LIKE_SYMBOL=275, LIMIT_SYMBOL=276, 
		LINEAR_SYMBOL=277, LINES_SYMBOL=278, LINESTRING_SYMBOL=279, LIST_SYMBOL=280, 
		LOAD_SYMBOL=281, LOCALTIME_SYMBOL=282, LOCALTIMESTAMP_SYMBOL=283, LOCAL_SYMBOL=284, 
		LOCATOR_SYMBOL=285, LOCKS_SYMBOL=286, LOCK_SYMBOL=287, LOGFILE_SYMBOL=288, 
		LOGS_SYMBOL=289, LONGBLOB_SYMBOL=290, LONGTEXT_SYMBOL=291, LONG_NUM_SYMBOL=292, 
		LONG_SYMBOL=293, LOOP_SYMBOL=294, LOW_PRIORITY_SYMBOL=295, MASTER_AUTO_POSITION_SYMBOL=296, 
		MASTER_BIND_SYMBOL=297, MASTER_CONNECT_RETRY_SYMBOL=298, MASTER_DELAY_SYMBOL=299, 
		MASTER_HOST_SYMBOL=300, MASTER_LOG_FILE_SYMBOL=301, MASTER_LOG_POS_SYMBOL=302, 
		MASTER_PASSWORD_SYMBOL=303, MASTER_PORT_SYMBOL=304, MASTER_RETRY_COUNT_SYMBOL=305, 
		MASTER_SERVER_ID_SYMBOL=306, MASTER_SSL_CAPATH_SYMBOL=307, MASTER_SSL_CA_SYMBOL=308, 
		MASTER_SSL_CERT_SYMBOL=309, MASTER_SSL_CIPHER_SYMBOL=310, MASTER_SSL_CRL_SYMBOL=311, 
		MASTER_SSL_CRLPATH_SYMBOL=312, MASTER_SSL_KEY_SYMBOL=313, MASTER_SSL_SYMBOL=314, 
		MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315, MASTER_SYMBOL=316, MASTER_TLS_VERSION_SYMBOL=317, 
		MASTER_USER_SYMBOL=318, MASTER_HEARTBEAT_PERIOD_SYMBOL=319, MATCH_SYMBOL=320, 
		MAX_CONNECTIONS_PER_HOUR_SYMBOL=321, MAX_QUERIES_PER_HOUR_SYMBOL=322, 
		MAX_ROWS_SYMBOL=323, MAX_SIZE_SYMBOL=324, MAX_STATEMENT_TIME_SYMBOL=325, 
		MAX_SYMBOL=326, MAX_UPDATES_PER_HOUR_SYMBOL=327, MAX_USER_CONNECTIONS_SYMBOL=328, 
		MAXVALUE_SYMBOL=329, MEDIUMBLOB_SYMBOL=330, MEDIUMINT_SYMBOL=331, MEDIUMTEXT_SYMBOL=332, 
		MEDIUM_SYMBOL=333, MEMORY_SYMBOL=334, MERGE_SYMBOL=335, MESSAGE_TEXT_SYMBOL=336, 
		MICROSECOND_SYMBOL=337, MID_SYMBOL=338, MIDDLEINT_SYMBOL=339, MIGRATE_SYMBOL=340, 
		MINUTE_MICROSECOND_SYMBOL=341, MINUTE_SECOND_SYMBOL=342, MINUTE_SYMBOL=343, 
		MIN_ROWS_SYMBOL=344, MIN_SYMBOL=345, MODE_SYMBOL=346, MODIFIES_SYMBOL=347, 
		MODIFY_SYMBOL=348, MOD_SYMBOL=349, MONTH_SYMBOL=350, MULTILINESTRING_SYMBOL=351, 
		MULTIPOINT_SYMBOL=352, MULTIPOLYGON_SYMBOL=353, MUTEX_SYMBOL=354, MYSQL_ERRNO_SYMBOL=355, 
		NAMES_SYMBOL=356, NAME_SYMBOL=357, NATIONAL_SYMBOL=358, NATURAL_SYMBOL=359, 
		NCHAR_STRING_SYMBOL=360, NCHAR_SYMBOL=361, NDB_SYMBOL=362, NDBCLUSTER_SYMBOL=363, 
		NEG_SYMBOL=364, NEVER_SYMBOL=365, NEW_SYMBOL=366, NEXT_SYMBOL=367, NODEGROUP_SYMBOL=368, 
		NONE_SYMBOL=369, NONBLOCKING_SYMBOL=370, NOT_SYMBOL=371, NOW_SYMBOL=372, 
		NO_SYMBOL=373, NO_WAIT_SYMBOL=374, NO_WRITE_TO_BINLOG_SYMBOL=375, NULL_SYMBOL=376, 
		NUMBER_SYMBOL=377, NUMERIC_SYMBOL=378, NVARCHAR_SYMBOL=379, OFFLINE_SYMBOL=380, 
		OFFSET_SYMBOL=381, OLD_PASSWORD_SYMBOL=382, ON_SYMBOL=383, ONE_SYMBOL=384, 
		ONLINE_SYMBOL=385, ONLY_SYMBOL=386, OPEN_SYMBOL=387, OPTIMIZE_SYMBOL=388, 
		OPTIMIZER_COSTS_SYMBOL=389, OPTIONS_SYMBOL=390, OPTION_SYMBOL=391, OPTIONALLY_SYMBOL=392, 
		ORDER_SYMBOL=393, OR_SYMBOL=394, OUTER_SYMBOL=395, OUTFILE_SYMBOL=396, 
		OUT_SYMBOL=397, OWNER_SYMBOL=398, PACK_KEYS_SYMBOL=399, PAGE_SYMBOL=400, 
		PARSER_SYMBOL=401, PARTIAL_SYMBOL=402, PARTITIONING_SYMBOL=403, PARTITIONS_SYMBOL=404, 
		PARTITION_SYMBOL=405, PASSWORD_SYMBOL=406, PHASE_SYMBOL=407, PLUGINS_SYMBOL=408, 
		PLUGIN_DIR_SYMBOL=409, PLUGIN_SYMBOL=410, POINT_SYMBOL=411, POLYGON_SYMBOL=412, 
		PORT_SYMBOL=413, POSITION_SYMBOL=414, PRECEDES_SYMBOL=415, PRECISION_SYMBOL=416, 
		PREPARE_SYMBOL=417, PRESERVE_SYMBOL=418, PREV_SYMBOL=419, PRIMARY_SYMBOL=420, 
		PRIVILEGES_SYMBOL=421, PROCEDURE_SYMBOL=422, PROCESS_SYMBOL=423, PROCESSLIST_SYMBOL=424, 
		PROFILE_SYMBOL=425, PROFILES_SYMBOL=426, PROXY_SYMBOL=427, PURGE_SYMBOL=428, 
		QUARTER_SYMBOL=429, QUERY_SYMBOL=430, QUICK_SYMBOL=431, RANGE_SYMBOL=432, 
		READS_SYMBOL=433, READ_ONLY_SYMBOL=434, READ_SYMBOL=435, READ_WRITE_SYMBOL=436, 
		REAL_SYMBOL=437, REBUILD_SYMBOL=438, RECOVER_SYMBOL=439, REDOFILE_SYMBOL=440, 
		REDO_BUFFER_SIZE_SYMBOL=441, REDUNDANT_SYMBOL=442, REFERENCES_SYMBOL=443, 
		REGEXP_SYMBOL=444, RELAY_SYMBOL=445, RELAYLOG_SYMBOL=446, RELAY_LOG_FILE_SYMBOL=447, 
		RELAY_LOG_POS_SYMBOL=448, RELAY_THREAD_SYMBOL=449, RELEASE_SYMBOL=450, 
		RELOAD_SYMBOL=451, REMOVE_SYMBOL=452, RENAME_SYMBOL=453, REORGANIZE_SYMBOL=454, 
		REPAIR_SYMBOL=455, REPEATABLE_SYMBOL=456, REPEAT_SYMBOL=457, REPLACE_SYMBOL=458, 
		REPLICATION_SYMBOL=459, REPLICATE_DO_DB_SYMBOL=460, REPLICATE_IGNORE_DB_SYMBOL=461, 
		REPLICATE_DO_TABLE_SYMBOL=462, REPLICATE_IGNORE_TABLE_SYMBOL=463, REPLICATE_WILD_DO_TABLE_SYMBOL=464, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465, REPLICATE_REWRITE_DB_SYMBOL=466, 
		REQUIRE_SYMBOL=467, RESET_SYMBOL=468, RESIGNAL_SYMBOL=469, RESTORE_SYMBOL=470, 
		RESTRICT_SYMBOL=471, RESUME_SYMBOL=472, RETURNED_SQLSTATE_SYMBOL=473, 
		RETURNS_SYMBOL=474, RETURN_SYMBOL=475, REVERSE_SYMBOL=476, REVOKE_SYMBOL=477, 
		RIGHT_SYMBOL=478, RLIKE_SYMBOL=479, ROLLBACK_SYMBOL=480, ROLLUP_SYMBOL=481, 
		ROTATE_SYMBOL=482, ROUTINE_SYMBOL=483, ROWS_SYMBOL=484, ROW_COUNT_SYMBOL=485, 
		ROW_FORMAT_SYMBOL=486, ROW_SYMBOL=487, RTREE_SYMBOL=488, SAVEPOINT_SYMBOL=489, 
		SCHEDULE_SYMBOL=490, SCHEMA_SYMBOL=491, SCHEMA_NAME_SYMBOL=492, SCHEMAS_SYMBOL=493, 
		SECOND_MICROSECOND_SYMBOL=494, SECOND_SYMBOL=495, SECURITY_SYMBOL=496, 
		SELECT_SYMBOL=497, SENSITIVE_SYMBOL=498, SEPARATOR_SYMBOL=499, SERIALIZABLE_SYMBOL=500, 
		SERIAL_SYMBOL=501, SESSION_SYMBOL=502, SERVER_SYMBOL=503, SERVER_OPTIONS_SYMBOL=504, 
		SESSION_USER_SYMBOL=505, SET_SYMBOL=506, SET_VAR_SYMBOL=507, SHARE_SYMBOL=508, 
		SHOW_SYMBOL=509, SHUTDOWN_SYMBOL=510, SIGNAL_SYMBOL=511, SIGNED_SYMBOL=512, 
		SIMPLE_SYMBOL=513, SLAVE_SYMBOL=514, SLOW_SYMBOL=515, SMALLINT_SYMBOL=516, 
		SNAPSHOT_SYMBOL=517, SOME_SYMBOL=518, SOCKET_SYMBOL=519, SONAME_SYMBOL=520, 
		SOUNDS_SYMBOL=521, SOURCE_SYMBOL=522, SPATIAL_SYMBOL=523, SPECIFIC_SYMBOL=524, 
		SQLEXCEPTION_SYMBOL=525, SQLSTATE_SYMBOL=526, SQLWARNING_SYMBOL=527, SQL_AFTER_GTIDS_SYMBOL=528, 
		SQL_AFTER_MTS_GAPS_SYMBOL=529, SQL_BEFORE_GTIDS_SYMBOL=530, SQL_BIG_RESULT_SYMBOL=531, 
		SQL_BUFFER_RESULT_SYMBOL=532, SQL_CACHE_SYMBOL=533, SQL_CALC_FOUND_ROWS_SYMBOL=534, 
		SQL_NO_CACHE_SYMBOL=535, SQL_SMALL_RESULT_SYMBOL=536, SQL_SYMBOL=537, 
		SQL_THREAD_SYMBOL=538, SSL_SYMBOL=539, STACKED_SYMBOL=540, STARTING_SYMBOL=541, 
		STARTS_SYMBOL=542, START_SYMBOL=543, STATS_AUTO_RECALC_SYMBOL=544, STATS_PERSISTENT_SYMBOL=545, 
		STATS_SAMPLE_PAGES_SYMBOL=546, STATUS_SYMBOL=547, STDDEV_SAMP_SYMBOL=548, 
		STDDEV_SYMBOL=549, STDDEV_POP_SYMBOL=550, STD_SYMBOL=551, STOP_SYMBOL=552, 
		STORAGE_SYMBOL=553, STORED_SYMBOL=554, STRAIGHT_JOIN_SYMBOL=555, STRING_SYMBOL=556, 
		SUBCLASS_ORIGIN_SYMBOL=557, SUBDATE_SYMBOL=558, SUBJECT_SYMBOL=559, SUBPARTITIONS_SYMBOL=560, 
		SUBPARTITION_SYMBOL=561, SUBSTR_SYMBOL=562, SUBSTRING_SYMBOL=563, SUM_SYMBOL=564, 
		SUPER_SYMBOL=565, SUSPEND_SYMBOL=566, SWAPS_SYMBOL=567, SWITCHES_SYMBOL=568, 
		SYSDATE_SYMBOL=569, SYSTEM_USER_SYMBOL=570, TABLES_SYMBOL=571, TABLESPACE_SYMBOL=572, 
		TABLE_REF_PRIORITY_SYMBOL=573, TABLE_SYMBOL=574, TABLE_CHECKSUM_SYMBOL=575, 
		TABLE_NAME_SYMBOL=576, TEMPORARY_SYMBOL=577, TEMPTABLE_SYMBOL=578, TERMINATED_SYMBOL=579, 
		TEXT_SYMBOL=580, THAN_SYMBOL=581, THEN_SYMBOL=582, TIMESTAMP_SYMBOL=583, 
		TIMESTAMP_ADD_SYMBOL=584, TIMESTAMP_DIFF_SYMBOL=585, TIME_SYMBOL=586, 
		TINYBLOB_SYMBOL=587, TINYINT_SYMBOL=588, TINYTEXT_SYMBOL=589, TO_SYMBOL=590, 
		TRAILING_SYMBOL=591, TRANSACTION_SYMBOL=592, TRIGGERS_SYMBOL=593, TRIGGER_SYMBOL=594, 
		TRIM_SYMBOL=595, TRUE_SYMBOL=596, TRUNCATE_SYMBOL=597, TYPES_SYMBOL=598, 
		TYPE_SYMBOL=599, UDF_RETURNS_SYMBOL=600, UNCOMMITTED_SYMBOL=601, UNDEFINED_SYMBOL=602, 
		UNDOFILE_SYMBOL=603, UNDO_BUFFER_SIZE_SYMBOL=604, UNDO_SYMBOL=605, UNICODE_SYMBOL=606, 
		UNINSTALL_SYMBOL=607, UNION_SYMBOL=608, UNIQUE_SYMBOL=609, UNKNOWN_SYMBOL=610, 
		UNLOCK_SYMBOL=611, UNSIGNED_SYMBOL=612, UNTIL_SYMBOL=613, UPDATE_SYMBOL=614, 
		UPGRADE_SYMBOL=615, USAGE_SYMBOL=616, USER_RESOURCES_SYMBOL=617, USER_SYMBOL=618, 
		USE_FRM_SYMBOL=619, USE_SYMBOL=620, USING_SYMBOL=621, UTC_DATE_SYMBOL=622, 
		UTC_TIMESTAMP_SYMBOL=623, UTC_TIME_SYMBOL=624, VALIDATION_SYMBOL=625, 
		VALUES_SYMBOL=626, VALUE_SYMBOL=627, VARBINARY_SYMBOL=628, VARCHAR_SYMBOL=629, 
		VARCHARACTER_SYMBOL=630, VARIABLES_SYMBOL=631, VARIANCE_SYMBOL=632, VARYING_SYMBOL=633, 
		VAR_POP_SYMBOL=634, VAR_SAMP_SYMBOL=635, VIEW_SYMBOL=636, VIRTUAL_SYMBOL=637, 
		WAIT_SYMBOL=638, WARNINGS_SYMBOL=639, WEEK_SYMBOL=640, WEIGHT_STRING_SYMBOL=641, 
		WHEN_SYMBOL=642, WHERE_SYMBOL=643, WHILE_SYMBOL=644, WITH_SYMBOL=645, 
		WITHOUT_SYMBOL=646, WORK_SYMBOL=647, WRAPPER_SYMBOL=648, WRITE_SYMBOL=649, 
		X509_SYMBOL=650, XA_SYMBOL=651, XID_SYMBOL=652, XML_SYMBOL=653, XOR_SYMBOL=654, 
		YEAR_MONTH_SYMBOL=655, YEAR_SYMBOL=656, ZEROFILL_SYMBOL=657, PERSIST_SYMBOL=658, 
		ROLE_SYMBOL=659, ADMIN_SYMBOL=660, INVISIBLE_SYMBOL=661, VISIBLE_SYMBOL=662, 
		EXCEPT_SYMBOL=663, COMPONENT_SYMBOL=664, RECURSIVE_SYMBOL=665, JSON_OBJECTAGG_SYMBOL=666, 
		JSON_ARRAYAGG_SYMBOL=667, OF_SYMBOL=668, SKIP_SYMBOL=669, LOCKED_SYMBOL=670, 
		NOWAIT_SYMBOL=671, GROUPING_SYMBOL=672, PERSIST_ONLY_SYMBOL=673, HISTOGRAM_SYMBOL=674, 
		BUCKETS_SYMBOL=675, REMOTE_SYMBOL=676, CLONE_SYMBOL=677, CUME_DIST_SYMBOL=678, 
		DENSE_RANK_SYMBOL=679, EXCLUDE_SYMBOL=680, FIRST_VALUE_SYMBOL=681, FOLLOWING_SYMBOL=682, 
		GROUPS_SYMBOL=683, LAG_SYMBOL=684, LAST_VALUE_SYMBOL=685, LEAD_SYMBOL=686, 
		NTH_VALUE_SYMBOL=687, NTILE_SYMBOL=688, NULLS_SYMBOL=689, OTHERS_SYMBOL=690, 
		OVER_SYMBOL=691, PERCENT_RANK_SYMBOL=692, PRECEDING_SYMBOL=693, RANK_SYMBOL=694, 
		RESPECT_SYMBOL=695, ROW_NUMBER_SYMBOL=696, TIES_SYMBOL=697, UNBOUNDED_SYMBOL=698, 
		WINDOW_SYMBOL=699, EMPTY_SYMBOL=700, JSON_TABLE_SYMBOL=701, NESTED_SYMBOL=702, 
		ORDINALITY_SYMBOL=703, PATH_SYMBOL=704, HISTORY_SYMBOL=705, REUSE_SYMBOL=706, 
		SRID_SYMBOL=707, THREAD_PRIORITY_SYMBOL=708, RESOURCE_SYMBOL=709, SYSTEM_SYMBOL=710, 
		VCPU_SYMBOL=711, MASTER_PUBLIC_KEY_PATH_SYMBOL=712, GET_MASTER_PUBLIC_KEY_SYMBOL=713, 
		RESTART_SYMBOL=714, DEFINITION_SYMBOL=715, DESCRIPTION_SYMBOL=716, ORGANIZATION_SYMBOL=717, 
		REFERENCE_SYMBOL=718, OPTIONAL_SYMBOL=719, SECONDARY_SYMBOL=720, SECONDARY_ENGINE_SYMBOL=721, 
		SECONDARY_LOAD_SYMBOL=722, SECONDARY_UNLOAD_SYMBOL=723, ACTIVE_SYMBOL=724, 
		INACTIVE_SYMBOL=725, LATERAL_SYMBOL=726, RETAIN_SYMBOL=727, OLD_SYMBOL=728, 
		NETWORK_NAMESPACE_SYMBOL=729, ENFORCED_SYMBOL=730, ARRAY_SYMBOL=731, OJ_SYMBOL=732, 
		MEMBER_SYMBOL=733, RANDOM_SYMBOL=734, MASTER_COMPRESSION_ALGORITHM_SYMBOL=735, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736, PRIVILEGE_CHECKS_USER_SYMBOL=737, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=738, REQUIRE_ROW_FORMAT_SYMBOL=739, PASSWORD_LOCK_TIME_SYMBOL=740, 
		FAILED_LOGIN_ATTEMPTS_SYMBOL=741, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742, 
		STREAM_SYMBOL=743, OFF_SYMBOL=744, NOT2_SYMBOL=745, CONCAT_PIPES_SYMBOL=746, 
		INT_NUMBER=747, LONG_NUMBER=748, ULONGLONG_NUMBER=749, EQUAL_OPERATOR=750, 
		ASSIGN_OPERATOR=751, NULL_SAFE_EQUAL_OPERATOR=752, GREATER_OR_EQUAL_OPERATOR=753, 
		GREATER_THAN_OPERATOR=754, LESS_OR_EQUAL_OPERATOR=755, LESS_THAN_OPERATOR=756, 
		NOT_EQUAL_OPERATOR=757, PLUS_OPERATOR=758, MINUS_OPERATOR=759, MULT_OPERATOR=760, 
		DIV_OPERATOR=761, MOD_OPERATOR=762, LOGICAL_NOT_OPERATOR=763, BITWISE_NOT_OPERATOR=764, 
		SHIFT_LEFT_OPERATOR=765, SHIFT_RIGHT_OPERATOR=766, LOGICAL_AND_OPERATOR=767, 
		BITWISE_AND_OPERATOR=768, BITWISE_XOR_OPERATOR=769, LOGICAL_OR_OPERATOR=770, 
		BITWISE_OR_OPERATOR=771, DOT_SYMBOL=772, COMMA_SYMBOL=773, SEMICOLON_SYMBOL=774, 
		COLON_SYMBOL=775, OPEN_PAR_SYMBOL=776, CLOSE_PAR_SYMBOL=777, OPEN_CURLY_SYMBOL=778, 
		CLOSE_CURLY_SYMBOL=779, UNDERLINE_SYMBOL=780, JSON_SEPARATOR_SYMBOL=781, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=782, AT_SIGN_SYMBOL=783, AT_TEXT_SUFFIX=784, 
		AT_AT_SIGN_SYMBOL=785, NULL2_SYMBOL=786, PARAM_MARKER=787, HEX_NUMBER=788, 
		BIN_NUMBER=789, DECIMAL_NUMBER=790, FLOAT_NUMBER=791, WHITESPACE=792, 
		INVALID_INPUT=793, UNDERSCORE_CHARSET=794, IDENTIFIER=795, NCHAR_TEXT=796, 
		BACK_TICK_QUOTED_ID=797, DOUBLE_QUOTED_TEXT=798, SINGLE_QUOTED_TEXT=799, 
		VERSION_COMMENT_START=800, MYSQL_COMMENT_START=801, VERSION_COMMENT_END=802, 
		BLOCK_COMMENT=803, POUND_COMMENT=804, DASHDASH_COMMENT=805, NOT_EQUAL2_OPERATOR=806;
	public const int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_alterTablespace = 27, 
		RULE_alterUndoTablespace = 28, RULE_undoTableSpaceOptions = 29, RULE_undoTableSpaceOption = 30, 
		RULE_alterTablespaceOptions = 31, RULE_alterTablespaceOption = 32, RULE_changeTablespaceOption = 33, 
		RULE_alterView = 34, RULE_viewTail = 35, RULE_viewSelect = 36, RULE_viewCheckOption = 37, 
		RULE_createStatement = 38, RULE_createDatabase = 39, RULE_createDatabaseOption = 40, 
		RULE_createTable = 41, RULE_tableElementList = 42, RULE_tableElement = 43, 
		RULE_duplicateAsQueryExpression = 44, RULE_queryExpressionOrParens = 45, 
		RULE_createRoutine = 46, RULE_createProcedure = 47, RULE_createFunction = 48, 
		RULE_createUdf = 49, RULE_routineCreateOption = 50, RULE_routineAlterOptions = 51, 
		RULE_routineOption = 52, RULE_createIndex = 53, RULE_indexNameAndType = 54, 
		RULE_createIndexTarget = 55, RULE_createLogfileGroup = 56, RULE_logfileGroupOptions = 57, 
		RULE_logfileGroupOption = 58, RULE_createServer = 59, RULE_serverOptions = 60, 
		RULE_serverOption = 61, RULE_createTablespace = 62, RULE_createUndoTablespace = 63, 
		RULE_tsDataFileName = 64, RULE_tsDataFile = 65, RULE_tablespaceOptions = 66, 
		RULE_tablespaceOption = 67, RULE_tsOptionInitialSize = 68, RULE_tsOptionUndoRedoBufferSize = 69, 
		RULE_tsOptionAutoextendSize = 70, RULE_tsOptionMaxSize = 71, RULE_tsOptionExtentSize = 72, 
		RULE_tsOptionNodegroup = 73, RULE_tsOptionEngine = 74, RULE_tsOptionWait = 75, 
		RULE_tsOptionComment = 76, RULE_tsOptionFileblockSize = 77, RULE_tsOptionEncryption = 78, 
		RULE_createView = 79, RULE_viewReplaceOrAlgorithm = 80, RULE_viewAlgorithm = 81, 
		RULE_viewSuid = 82, RULE_createTrigger = 83, RULE_triggerFollowsPrecedesClause = 84, 
		RULE_createEvent = 85, RULE_createRole = 86, RULE_createSpatialReference = 87, 
		RULE_srsAttribute = 88, RULE_dropStatement = 89, RULE_dropDatabase = 90, 
		RULE_dropEvent = 91, RULE_dropFunction = 92, RULE_dropProcedure = 93, 
		RULE_dropIndex = 94, RULE_dropLogfileGroup = 95, RULE_dropLogfileGroupOption = 96, 
		RULE_dropServer = 97, RULE_dropTable = 98, RULE_dropTableSpace = 99, RULE_dropTrigger = 100, 
		RULE_dropView = 101, RULE_dropRole = 102, RULE_dropSpatialReference = 103, 
		RULE_dropUndoTablespace = 104, RULE_renameTableStatement = 105, RULE_renamePair = 106, 
		RULE_truncateTableStatement = 107, RULE_importStatement = 108, RULE_callStatement = 109, 
		RULE_deleteStatement = 110, RULE_partitionDelete = 111, RULE_deleteStatementOption = 112, 
		RULE_doStatement = 113, RULE_handlerStatement = 114, RULE_handlerReadOrScan = 115, 
		RULE_insertStatement = 116, RULE_insertLockOption = 117, RULE_insertFromConstructor = 118, 
		RULE_fields = 119, RULE_insertValues = 120, RULE_insertQueryExpression = 121, 
		RULE_valueList = 122, RULE_values = 123, RULE_valuesReference = 124, RULE_insertUpdateList = 125, 
		RULE_loadStatement = 126, RULE_dataOrXml = 127, RULE_xmlRowsIdentifiedBy = 128, 
		RULE_loadDataFileTail = 129, RULE_loadDataFileTargetList = 130, RULE_fieldOrVariableList = 131, 
		RULE_replaceStatement = 132, RULE_selectStatement = 133, RULE_selectStatementWithInto = 134, 
		RULE_queryExpression = 135, RULE_queryExpressionBody = 136, RULE_queryExpressionParens = 137, 
		RULE_queryPrimary = 138, RULE_querySpecification = 139, RULE_subquery = 140, 
		RULE_querySpecOption = 141, RULE_limitClause = 142, RULE_simpleLimitClause = 143, 
		RULE_limitOptions = 144, RULE_limitOption = 145, RULE_intoClause = 146, 
		RULE_procedureAnalyseClause = 147, RULE_havingClause = 148, RULE_windowClause = 149, 
		RULE_windowDefinition = 150, RULE_windowSpec = 151, RULE_windowSpecDetails = 152, 
		RULE_windowFrameClause = 153, RULE_windowFrameUnits = 154, RULE_windowFrameExtent = 155, 
		RULE_windowFrameStart = 156, RULE_windowFrameBetween = 157, RULE_windowFrameBound = 158, 
		RULE_windowFrameExclusion = 159, RULE_withClause = 160, RULE_commonTableExpression = 161, 
		RULE_groupByClause = 162, RULE_olapOption = 163, RULE_orderClause = 164, 
		RULE_direction = 165, RULE_fromClause = 166, RULE_tableReferenceList = 167, 
		RULE_tableValueConstructor = 168, RULE_explicitTable = 169, RULE_rowValueExplicit = 170, 
		RULE_selectOption = 171, RULE_lockingClauseList = 172, RULE_lockingClause = 173, 
		RULE_lockStrengh = 174, RULE_lockedRowAction = 175, RULE_selectItemList = 176, 
		RULE_selectItem = 177, RULE_selectAlias = 178, RULE_whereClause = 179, 
		RULE_tableReference = 180, RULE_escapedTableReference = 181, RULE_joinedTable = 182, 
		RULE_naturalJoinType = 183, RULE_innerJoinType = 184, RULE_outerJoinType = 185, 
		RULE_tableFactor = 186, RULE_singleTable = 187, RULE_singleTableParens = 188, 
		RULE_derivedTable = 189, RULE_tableReferenceListParens = 190, RULE_tableFunction = 191, 
		RULE_columnsClause = 192, RULE_jtColumn = 193, RULE_onEmptyOrError = 194, 
		RULE_onEmpty = 195, RULE_onError = 196, RULE_jtOnResponse = 197, RULE_unionOption = 198, 
		RULE_tableAlias = 199, RULE_indexHintList = 200, RULE_indexHint = 201, 
		RULE_indexHintType = 202, RULE_keyOrIndex = 203, RULE_constraintKeyType = 204, 
		RULE_indexHintClause = 205, RULE_indexList = 206, RULE_indexListElement = 207, 
		RULE_updateStatement = 208, RULE_transactionOrLockingStatement = 209, 
		RULE_transactionStatement = 210, RULE_beginWork = 211, RULE_transactionCharacteristic = 212, 
		RULE_savepointStatement = 213, RULE_lockStatement = 214, RULE_lockItem = 215, 
		RULE_lockOption = 216, RULE_xaStatement = 217, RULE_xaConvert = 218, RULE_xid = 219, 
		RULE_replicationStatement = 220, RULE_resetOption = 221, RULE_masterResetOptions = 222, 
		RULE_replicationLoad = 223, RULE_changeMaster = 224, RULE_changeMasterOptions = 225, 
		RULE_masterOption = 226, RULE_privilegeCheckDef = 227, RULE_tablePrimaryKeyCheckDef = 228, 
		RULE_masterTlsCiphersuitesDef = 229, RULE_masterFileDef = 230, RULE_serverIdList = 231, 
		RULE_changeReplication = 232, RULE_filterDefinition = 233, RULE_filterDbList = 234, 
		RULE_filterTableList = 235, RULE_filterStringList = 236, RULE_filterWildDbTableString = 237, 
		RULE_filterDbPairList = 238, RULE_slave = 239, RULE_slaveUntilOptions = 240, 
		RULE_slaveConnectionOptions = 241, RULE_slaveThreadOptions = 242, RULE_slaveThreadOption = 243, 
		RULE_groupReplication = 244, RULE_preparedStatement = 245, RULE_executeStatement = 246, 
		RULE_executeVarList = 247, RULE_cloneStatement = 248, RULE_dataDirSSL = 249, 
		RULE_ssl = 250, RULE_accountManagementStatement = 251, RULE_alterUser = 252, 
		RULE_alterUserTail = 253, RULE_userFunction = 254, RULE_createUser = 255, 
		RULE_createUserTail = 256, RULE_defaultRoleClause = 257, RULE_requireClause = 258, 
		RULE_connectOptions = 259, RULE_accountLockPasswordExpireOptions = 260, 
		RULE_dropUser = 261, RULE_grant = 262, RULE_grantTargetList = 263, RULE_grantOptions = 264, 
		RULE_exceptRoleList = 265, RULE_withRoles = 266, RULE_grantAs = 267, RULE_versionedRequireClause = 268, 
		RULE_renameUser = 269, RULE_revoke = 270, RULE_onTypeTo = 271, RULE_aclType = 272, 
		RULE_roleOrPrivilegesList = 273, RULE_roleOrPrivilege = 274, RULE_grantIdentifier = 275, 
		RULE_requireList = 276, RULE_requireListElement = 277, RULE_grantOption = 278, 
		RULE_setRole = 279, RULE_roleList = 280, RULE_role = 281, RULE_tableAdministrationStatement = 282, 
		RULE_histogram = 283, RULE_checkOption = 284, RULE_repairType = 285, RULE_installUninstallStatment = 286, 
		RULE_setStatement = 287, RULE_startOptionValueList = 288, RULE_transactionCharacteristics = 289, 
		RULE_transactionAccessMode = 290, RULE_isolationLevel = 291, RULE_optionValueListContinued = 292, 
		RULE_optionValueNoOptionType = 293, RULE_optionValue = 294, RULE_setSystemVariable = 295, 
		RULE_startOptionValueListFollowingOptionType = 296, RULE_optionValueFollowingOptionType = 297, 
		RULE_setExprOrDefault = 298, RULE_showStatement = 299, RULE_showCommandType = 300, 
		RULE_nonBlocking = 301, RULE_fromOrIn = 302, RULE_inDb = 303, RULE_profileType = 304, 
		RULE_otherAdministrativeStatement = 305, RULE_keyCacheListOrParts = 306, 
		RULE_keyCacheList = 307, RULE_assignToKeycache = 308, RULE_assignToKeycachePartition = 309, 
		RULE_cacheKeyList = 310, RULE_keyUsageElement = 311, RULE_keyUsageList = 312, 
		RULE_flushOption = 313, RULE_logType = 314, RULE_flushTables = 315, RULE_flushTablesOptions = 316, 
		RULE_preloadTail = 317, RULE_preloadList = 318, RULE_preloadKeys = 319, 
		RULE_adminPartition = 320, RULE_resourceGroupManagement = 321, RULE_createResourceGroup = 322, 
		RULE_resourceGroupVcpuList = 323, RULE_vcpuNumOrRange = 324, RULE_resourceGroupPriority = 325, 
		RULE_resourceGroupEnableDisable = 326, RULE_alterResourceGroup = 327, 
		RULE_setResourceGroup = 328, RULE_threadIdList = 329, RULE_dropResourceGroup = 330, 
		RULE_utilityStatement = 331, RULE_describeStatement = 332, RULE_explainStatement = 333, 
		RULE_explainableStatement = 334, RULE_helpCommand = 335, RULE_useCommand = 336, 
		RULE_restartServer = 337, RULE_expr = 338, RULE_boolPri = 339, RULE_compOp = 340, 
		RULE_predicate = 341, RULE_predicateOperations = 342, RULE_bitExpr = 343, 
		RULE_simpleExpr = 344, RULE_arrayCast = 345, RULE_jsonOperator = 346, 
		RULE_sumExpr = 347, RULE_groupingOperation = 348, RULE_windowFunctionCall = 349, 
		RULE_windowingClause = 350, RULE_leadLagInfo = 351, RULE_nullTreatment = 352, 
		RULE_jsonFunction = 353, RULE_inSumExpr = 354, RULE_identListArg = 355, 
		RULE_identList = 356, RULE_fulltextOptions = 357, RULE_runtimeFunctionCall = 358, 
		RULE_geometryFunction = 359, RULE_timeFunctionParameters = 360, RULE_fractionalPrecision = 361, 
		RULE_weightStringLevels = 362, RULE_weightStringLevelListItem = 363, RULE_dateTimeTtype = 364, 
		RULE_trimFunction = 365, RULE_substringFunction = 366, RULE_functionCall = 367, 
		RULE_udfExprList = 368, RULE_udfExpr = 369, RULE_variable = 370, RULE_userVariable = 371, 
		RULE_systemVariable = 372, RULE_internalVariableName = 373, RULE_whenExpression = 374, 
		RULE_thenExpression = 375, RULE_elseExpression = 376, RULE_castType = 377, 
		RULE_exprList = 378, RULE_charset = 379, RULE_notRule = 380, RULE_not2Rule = 381, 
		RULE_interval = 382, RULE_intervalTimeStamp = 383, RULE_exprListWithParentheses = 384, 
		RULE_exprWithParentheses = 385, RULE_simpleExprWithParentheses = 386, 
		RULE_orderList = 387, RULE_orderExpression = 388, RULE_groupList = 389, 
		RULE_groupingExpression = 390, RULE_channel = 391, RULE_compoundStatement = 392, 
		RULE_returnStatement = 393, RULE_ifStatement = 394, RULE_ifBody = 395, 
		RULE_thenStatement = 396, RULE_compoundStatementList = 397, RULE_caseStatement = 398, 
		RULE_elseStatement = 399, RULE_labeledBlock = 400, RULE_unlabeledBlock = 401, 
		RULE_label = 402, RULE_beginEndBlock = 403, RULE_labeledControl = 404, 
		RULE_unlabeledControl = 405, RULE_loopBlock = 406, RULE_whileDoBlock = 407, 
		RULE_repeatUntilBlock = 408, RULE_spDeclarations = 409, RULE_spDeclaration = 410, 
		RULE_variableDeclaration = 411, RULE_conditionDeclaration = 412, RULE_spCondition = 413, 
		RULE_sqlstate = 414, RULE_handlerDeclaration = 415, RULE_handlerCondition = 416, 
		RULE_cursorDeclaration = 417, RULE_iterateStatement = 418, RULE_leaveStatement = 419, 
		RULE_getDiagnostics = 420, RULE_signalAllowedExpr = 421, RULE_statementInformationItem = 422, 
		RULE_conditionInformationItem = 423, RULE_signalInformationItemName = 424, 
		RULE_signalStatement = 425, RULE_resignalStatement = 426, RULE_signalInformationItem = 427, 
		RULE_cursorOpen = 428, RULE_cursorClose = 429, RULE_cursorFetch = 430, 
		RULE_schedule = 431, RULE_columnDefinition = 432, RULE_checkOrReferences = 433, 
		RULE_checkConstraint = 434, RULE_constraintEnforcement = 435, RULE_tableConstraintDef = 436, 
		RULE_constraintName = 437, RULE_fieldDefinition = 438, RULE_columnAttribute = 439, 
		RULE_columnFormat = 440, RULE_storageMedia = 441, RULE_gcolAttribute = 442, 
		RULE_references = 443, RULE_deleteOption = 444, RULE_keyList = 445, RULE_keyPart = 446, 
		RULE_keyListWithExpression = 447, RULE_keyPartOrExpression = 448, RULE_keyListVariants = 449, 
		RULE_indexType = 450, RULE_indexOption = 451, RULE_commonIndexOption = 452, 
		RULE_visibility = 453, RULE_indexTypeClause = 454, RULE_fulltextIndexOption = 455, 
		RULE_spatialIndexOption = 456, RULE_dataTypeDefinition = 457, RULE_dataType = 458, 
		RULE_nchar = 459, RULE_realType = 460, RULE_fieldLength = 461, RULE_fieldOptions = 462, 
		RULE_charsetWithOptBinary = 463, RULE_ascii = 464, RULE_unicode = 465, 
		RULE_wsNumCodepoints = 466, RULE_typeDatetimePrecision = 467, RULE_charsetName = 468, 
		RULE_collationName = 469, RULE_createTableOptions = 470, RULE_createTableOptionsSpaceSeparated = 471, 
		RULE_createTableOption = 472, RULE_ternaryOption = 473, RULE_defaultCollation = 474, 
		RULE_defaultEncryption = 475, RULE_defaultCharset = 476, RULE_partitionClause = 477, 
		RULE_partitionTypeDef = 478, RULE_subPartitions = 479, RULE_partitionKeyAlgorithm = 480, 
		RULE_partitionDefinitions = 481, RULE_partitionDefinition = 482, RULE_partitionValuesIn = 483, 
		RULE_partitionOption = 484, RULE_subpartitionDefinition = 485, RULE_partitionValueItemListParen = 486, 
		RULE_partitionValueItem = 487, RULE_definerClause = 488, RULE_ifExists = 489, 
		RULE_ifNotExists = 490, RULE_procedureParameter = 491, RULE_functionParameter = 492, 
		RULE_collate = 493, RULE_typeWithOptCollate = 494, RULE_schemaIdentifierPair = 495, 
		RULE_viewRefList = 496, RULE_updateList = 497, RULE_updateElement = 498, 
		RULE_charsetClause = 499, RULE_fieldsClause = 500, RULE_fieldTerm = 501, 
		RULE_linesClause = 502, RULE_lineTerm = 503, RULE_userList = 504, RULE_createUserList = 505, 
		RULE_alterUserList = 506, RULE_createUserEntry = 507, RULE_alterUserEntry = 508, 
		RULE_retainCurrentPassword = 509, RULE_discardOldPassword = 510, RULE_replacePassword = 511, 
		RULE_userIdentifierOrText = 512, RULE_user = 513, RULE_likeClause = 514, 
		RULE_likeOrWhere = 515, RULE_onlineOption = 516, RULE_noWriteToBinLog = 517, 
		RULE_usePartition = 518, RULE_fieldIdentifier = 519, RULE_columnName = 520, 
		RULE_columnInternalRef = 521, RULE_columnInternalRefList = 522, RULE_columnRef = 523, 
		RULE_insertIdentifier = 524, RULE_indexName = 525, RULE_indexRef = 526, 
		RULE_tableWild = 527, RULE_schemaName = 528, RULE_schemaRef = 529, RULE_procedureName = 530, 
		RULE_procedureRef = 531, RULE_functionName = 532, RULE_functionRef = 533, 
		RULE_triggerName = 534, RULE_triggerRef = 535, RULE_viewName = 536, RULE_viewRef = 537, 
		RULE_tablespaceName = 538, RULE_tablespaceRef = 539, RULE_logfileGroupName = 540, 
		RULE_logfileGroupRef = 541, RULE_eventName = 542, RULE_eventRef = 543, 
		RULE_udfName = 544, RULE_serverName = 545, RULE_serverRef = 546, RULE_engineRef = 547, 
		RULE_tableName = 548, RULE_filterTableRef = 549, RULE_tableRefWithWildcard = 550, 
		RULE_tableRef = 551, RULE_tableRefList = 552, RULE_tableAliasRefList = 553, 
		RULE_parameterName = 554, RULE_labelIdentifier = 555, RULE_labelRef = 556, 
		RULE_roleIdentifier = 557, RULE_roleRef = 558, RULE_pluginRef = 559, RULE_componentRef = 560, 
		RULE_resourceGroupRef = 561, RULE_windowName = 562, RULE_pureIdentifier = 563, 
		RULE_identifier = 564, RULE_identifierList = 565, RULE_identifierListWithParentheses = 566, 
		RULE_qualifiedIdentifier = 567, RULE_simpleIdentifier = 568, RULE_dotIdentifier = 569, 
		RULE_ulong_number = 570, RULE_real_ulong_number = 571, RULE_ulonglong_number = 572, 
		RULE_real_ulonglong_number = 573, RULE_literal = 574, RULE_signedLiteral = 575, 
		RULE_stringList = 576, RULE_textStringLiteral = 577, RULE_textString = 578, 
		RULE_textStringHash = 579, RULE_textLiteral = 580, RULE_textStringNoLinebreak = 581, 
		RULE_textStringLiteralList = 582, RULE_numLiteral = 583, RULE_boolLiteral = 584, 
		RULE_nullLiteral = 585, RULE_temporalLiteral = 586, RULE_floatOptions = 587, 
		RULE_standardFloatOptions = 588, RULE_precision = 589, RULE_textOrIdentifier = 590, 
		RULE_lValueIdentifier = 591, RULE_roleIdentifierOrText = 592, RULE_sizeNumber = 593, 
		RULE_parentheses = 594, RULE_equal = 595, RULE_optionType = 596, RULE_varIdentType = 597, 
		RULE_setVarIdentType = 598, RULE_identifierKeyword = 599, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600, 
		RULE_identifierKeywordsAmbiguous2Labels = 601, RULE_labelKeyword = 602, 
		RULE_identifierKeywordsAmbiguous3Roles = 603, RULE_identifierKeywordsUnambiguous = 604, 
		RULE_roleKeyword = 605, RULE_lValueKeyword = 606, RULE_identifierKeywordsAmbiguous4SystemVariables = 607, 
		RULE_roleOrIdentifierKeyword = 608, RULE_roleOrLabelKeyword = 609;
	public static readonly string[] ruleNames = {
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "alterTablespace", 
		"alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
		"queryExpression", "queryExpressionBody", "queryExpressionParens", "queryPrimary", 
		"querySpecification", "subquery", "querySpecOption", "limitClause", "simpleLimitClause", 
		"limitOptions", "limitOption", "intoClause", "procedureAnalyseClause", 
		"havingClause", "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "tableValueConstructor", 
		"explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList", 
		"lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", "selectItem", 
		"selectAlias", "whereClause", "tableReference", "escapedTableReference", 
		"joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", 
		"singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens", 
		"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", 
		"onError", "jtOnResponse", "unionOption", "tableAlias", "indexHintList", 
		"indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
		"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
		"transactionStatement", "beginWork", "transactionCharacteristic", "savepointStatement", 
		"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert", 
		"xid", "replicationStatement", "resetOption", "masterResetOptions", "replicationLoad", 
		"changeMaster", "changeMasterOptions", "masterOption", "privilegeCheckDef", 
		"tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", "masterFileDef", 
		"serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
		"filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList", 
		"slave", "slaveUntilOptions", "slaveConnectionOptions", "slaveThreadOptions", 
		"slaveThreadOption", "groupReplication", "preparedStatement", "executeStatement", 
		"executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
		"alterUser", "alterUserTail", "userFunction", "createUser", "createUserTail", 
		"defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
		"dropUser", "grant", "grantTargetList", "grantOptions", "exceptRoleList", 
		"withRoles", "grantAs", "versionedRequireClause", "renameUser", "revoke", 
		"onTypeTo", "aclType", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
		"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
		"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
		"installUninstallStatment", "setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
		"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeStatement", "explainStatement", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType", 
		"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode", 
		"wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName", 
		"createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "alterUserList", 
		"createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword", 
		"replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'", 
		"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
		"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", 
		"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null, 
		"'@@'", "'\\N'", "'?'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", 
		"ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
		"ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", 
		"ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", 
		"BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
		"BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", 
		"BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
		"BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
		"CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", 
		"CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGE_SYMBOL", 
		"CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
		"CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
		"CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", 
		"COLLATION_SYMBOL", "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
		"COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
		"CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", "CPU_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
		"CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
		"CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
		"DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
		"DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DEC_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", 
		"DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
		"DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
		"DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", "DISTINCTROW_SYMBOL", 
		"DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
		"ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", 
		"END_SYMBOL", "ENDS_SYMBOL", "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", 
		"ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", 
		"EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", 
		"EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", 
		"FAULTS_SYMBOL", "FETCH_SYMBOL", "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
		"FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", "FLOAT8_SYMBOL", 
		"FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
		"FOR_SYMBOL", "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
		"FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
		"GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
		"GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
		"GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", 
		"HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", 
		"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
		"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
		"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
		"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTEGER_SYMBOL", "INTERVAL_SYMBOL", 
		"INTO_SYMBOL", "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", 
		"IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
		"LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", 
		"LINEAR_SYMBOL", "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", 
		"LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", "LOCAL_SYMBOL", "LOCATOR_SYMBOL", 
		"LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
		"LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
		"MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", 
		"MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
		"MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
		"MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
		"MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", "MAX_SYMBOL", 
		"MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", 
		"MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", 
		"MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
		"MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", 
		"MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
		"MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
		"MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
		"MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL", 
		"NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", "NCHAR_SYMBOL", "NDB_SYMBOL", 
		"NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", 
		"NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", 
		"NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
		"OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", 
		"OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
		"OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL", 
		"PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
		"PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", 
		"POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
		"PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
		"PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", 
		"PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
		"PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", 
		"READS_SYMBOL", "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", 
		"REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
		"REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", 
		"RELAY_THREAD_SYMBOL", "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
		"RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", 
		"REPEAT_SYMBOL", "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
		"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
		"RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
		"RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", 
		"ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
		"ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
		"SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", 
		"SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", "SERVER_SYMBOL", 
		"SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
		"SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", 
		"SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOME_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
		"STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
		"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
		"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", 
		"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", 
		"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
		"TABLE_REF_PRIORITY_SYMBOL", "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", 
		"TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
		"TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
		"TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", 
		"TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
		"TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
		"UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", 
		"UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
		"UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", 
		"USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", 
		"UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
		"VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARCHARACTER_SYMBOL", 
		"VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", 
		"VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
		"WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", 
		"WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", "WORK_SYMBOL", "WRAPPER_SYMBOL", 
		"WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
		"XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", 
		"ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
		"COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
		"OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
		"PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", 
		"CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
		"FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", 
		"LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", 
		"NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
		"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
		"STREAM_SYMBOL", "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", 
		"LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
		"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
		"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MySQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 1232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1220; Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 1221; simpleStatement();
					}
					break;
				case 2:
					{
					State = 1222; beginWork();
					}
					break;
				}
				State = 1230;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					State = 1225; Match(SEMICOLON_SYMBOL);
					State = 1227;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 1226; Match(Eof);
						}
						break;
					}
					}
					break;
				case Eof:
					{
					State = 1229; Match(Eof);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return GetRuleContext<RenameTableStatementContext>(0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return GetRuleContext<TransactionOrLockingStatementContext>(0);
		}
		public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		public CloneStatementContext cloneStatement() {
			return GetRuleContext<CloneStatementContext>(0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return GetRuleContext<AccountManagementStatementContext>(0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return GetRuleContext<TableAdministrationStatementContext>(0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return GetRuleContext<InstallUninstallStatmentContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return GetRuleContext<ResourceGroupManagementContext>(0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return GetRuleContext<OtherAdministrativeStatementContext>(0);
		}
		public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return GetRuleContext<GetDiagnosticsContext>(0);
		}
		public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleStatement);
		try {
			State = 1268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1234; alterStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235; createStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1236; dropStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1237; renameTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1238; truncateTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1239;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1240; importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1241; callStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1242; deleteStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1243; doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1244; handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1245; insertStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1246; loadStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1247; replaceStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1248; selectStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1249; updateStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1250; transactionOrLockingStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1251; replicationStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1252; preparedStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1253;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1254; cloneStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1255; accountManagementStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1256; tableAdministrationStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1257; installUninstallStatment();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1258; setStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1259; showStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1260;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1261; resourceGroupManagement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1262; otherAdministrativeStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1263; utilityStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1264;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 1265; getDiagnostics();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1266; signalStatement();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1267; resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return GetRuleContext<AlterUndoTablespaceContext>(0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return GetRuleContext<RoutineAlterOptionsContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(ALTER_SYMBOL);
			State = 1297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 1271; alterTable();
				}
				break;
			case 2:
				{
				State = 1272; alterDatabase();
				}
				break;
			case 3:
				{
				State = 1273; Match(PROCEDURE_SYMBOL);
				State = 1274; procedureRef();
				State = 1276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1275; routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				State = 1278; Match(FUNCTION_SYMBOL);
				State = 1279; functionRef();
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1280; routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				State = 1283; alterView();
				}
				break;
			case 6:
				{
				State = 1284; alterEvent();
				}
				break;
			case 7:
				{
				State = 1285; alterTablespace();
				}
				break;
			case 8:
				{
				State = 1286;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1287; alterUndoTablespace();
				}
				break;
			case 9:
				{
				State = 1288; alterLogfileGroup();
				}
				break;
			case 10:
				{
				State = 1289; alterServer();
				}
				break;
			case 11:
				{
				State = 1290;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 1291; Match(INSTANCE_SYMBOL);
				State = 1292; Match(ROTATE_SYMBOL);
				State = 1293; textOrIdentifier();
				State = 1294; Match(MASTER_SYMBOL);
				State = 1295; Match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 6, RULE_alterDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; Match(DATABASE_SYMBOL);
			State = 1300; schemaRef();
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 1302;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1301; createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1306;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1307; Match(UPGRADE_SYMBOL);
				State = 1308; Match(DATA_SYMBOL);
				State = 1309; Match(DIRECTORY_SYMBOL);
				State = 1310; Match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1313; definerClause();
				}
			}

			State = 1316; Match(EVENT_SYMBOL);
			State = 1317; eventRef();
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 1318; Match(ON_SYMBOL);
				State = 1319; Match(SCHEDULE_SYMBOL);
				State = 1320; schedule();
				}
				break;
			}
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 1323; Match(ON_SYMBOL);
				State = 1324; Match(COMPLETION_SYMBOL);
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 1325; Match(NOT_SYMBOL);
					}
				}

				State = 1328; Match(PRESERVE_SYMBOL);
				}
			}

			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				State = 1331; Match(RENAME_SYMBOL);
				State = 1332; Match(TO_SYMBOL);
				State = 1333; identifier();
				}
			}

			State = 1342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 1336; Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 1337; Match(DISABLE_SYMBOL);
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 1338; Match(ON_SYMBOL);
					State = 1339; Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case Eof:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 1344; Match(COMMENT_SYMBOL);
				State = 1345; textLiteral();
				}
			}

			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO_SYMBOL) {
				{
				State = 1348; Match(DO_SYMBOL);
				State = 1349; compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return GetRuleContext<AlterLogfileGroupOptionsContext>(0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352; Match(LOGFILE_SYMBOL);
			State = 1353; Match(GROUP_SYMBOL);
			State = 1354; logfileGroupRef();
			State = 1355; Match(ADD_SYMBOL);
			State = 1356; Match(UNDOFILE_SYMBOL);
			State = 1357; textLiteral();
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 1358; alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionsContext : ParserRuleContext {
		public AlterLogfileGroupOptionContext[] alterLogfileGroupOption() {
			return GetRuleContexts<AlterLogfileGroupOptionContext>();
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return GetRuleContext<AlterLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroupOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361; alterLogfileGroupOption();
			State = 1368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1362; Match(COMMA_SYMBOL);
					}
				}

				State = 1365; alterLogfileGroupOption();
				}
				}
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionContext alterLogfileGroupOption() {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		try {
			State = 1374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371; tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1373; tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 16, RULE_alterServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376; Match(SERVER_SYMBOL);
			State = 1377; serverRef();
			State = 1378; serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return GetRuleContext<AlterTableActionsContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 18, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1380; onlineOption();
				}
				break;
			}
			State = 1385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1383;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 1384; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 1387; Match(TABLE_SYMBOL);
			State = 1388; tableRef();
			State = 1390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1389; alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableActionsContext : ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return GetRuleContext<AlterCommandListContext>(0);
		}
		public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		public RemovePartitioningContext removePartitioning() {
			return GetRuleContext<RemovePartitioningContext>(0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return GetRuleContext<StandaloneAlterCommandsContext>(0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableActions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTableActions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTableActions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableActionsContext alterTableActions() {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_alterTableActions);
		try {
			State = 1405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1392; alterCommandList();
				State = 1395;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PARTITION_SYMBOL:
					{
					State = 1393; partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					State = 1394; removePartitioning();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1397; partitionClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1398; removePartitioning();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1399; alterCommandsModifierList();
					State = 1400; Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1404; standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandListContext : ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		public AlterListContext alterList() {
			return GetRuleContext<AlterListContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandListContext alterCommandList() {
		AlterCommandListContext _localctx = new AlterCommandListContext(Context, State);
		EnterRule(_localctx, 22, RULE_alterCommandList);
		try {
			State = 1414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1407; alterCommandsModifierList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 1408; alterCommandsModifierList();
					State = 1409; Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1413; alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierListContext : ParserRuleContext {
		public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandsModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierListContext alterCommandsModifierList() {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; alterCommandsModifier();
			State = 1421;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1417; Match(COMMA_SYMBOL);
					State = 1418; alterCommandsModifier();
					}
					} 
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneAlterCommandsContext : ParserRuleContext {
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return GetRuleContext<AlterPartitionContext>(0);
		}
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneAlterCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandaloneAlterCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandaloneAlterCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandaloneAlterCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneAlterCommandsContext standaloneAlterCommands() {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(Context, State);
		EnterRule(_localctx, 26, RULE_standaloneAlterCommands);
		int _la;
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1424; Match(DISCARD_SYMBOL);
				State = 1425; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1426; Match(IMPORT_SYMBOL);
				State = 1427; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1428; alterPartition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1429;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1430;
				_la = TokenStream.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public NoWriteToBinLogContext[] noWriteToBinLog() {
			return GetRuleContexts<NoWriteToBinLogContext>();
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return GetRuleContext<NoWriteToBinLogContext>(i);
		}
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionContext alterPartition() {
		AlterPartitionContext _localctx = new AlterPartitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			State = 1529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433; Match(ADD_SYMBOL);
				State = 1434; Match(PARTITION_SYMBOL);
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1435; noWriteToBinLog();
					}
				}

				State = 1441;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 1438; partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					State = 1439; Match(PARTITIONS_SYMBOL);
					State = 1440; real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1443; Match(DROP_SYMBOL);
				State = 1444; Match(PARTITION_SYMBOL);
				State = 1445; identifierList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1446; Match(REBUILD_SYMBOL);
				State = 1447; Match(PARTITION_SYMBOL);
				State = 1449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 1448; noWriteToBinLog();
					}
					break;
				}
				State = 1451; allOrPartitionNameList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1452; Match(OPTIMIZE_SYMBOL);
				State = 1453; Match(PARTITION_SYMBOL);
				State = 1455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 1454; noWriteToBinLog();
					}
					break;
				}
				State = 1457; allOrPartitionNameList();
				State = 1459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1458; noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1461; Match(ANALYZE_SYMBOL);
				State = 1462; Match(PARTITION_SYMBOL);
				State = 1464;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1463; noWriteToBinLog();
					}
					break;
				}
				State = 1466; allOrPartitionNameList();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1467; Match(CHECK_SYMBOL);
				State = 1468; Match(PARTITION_SYMBOL);
				State = 1469; allOrPartitionNameList();
				State = 1473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 1470; checkOption();
					}
					}
					State = 1475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1476; Match(REPAIR_SYMBOL);
				State = 1477; Match(PARTITION_SYMBOL);
				State = 1479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 1478; noWriteToBinLog();
					}
					break;
				}
				State = 1481; allOrPartitionNameList();
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 1482; repairType();
					}
					}
					State = 1487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1488; Match(COALESCE_SYMBOL);
				State = 1489; Match(PARTITION_SYMBOL);
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1490; noWriteToBinLog();
					}
				}

				State = 1493; real_ulong_number();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1494; Match(TRUNCATE_SYMBOL);
				State = 1495; Match(PARTITION_SYMBOL);
				State = 1496; allOrPartitionNameList();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1497; Match(REORGANIZE_SYMBOL);
				State = 1498; Match(PARTITION_SYMBOL);
				State = 1500;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 1499; noWriteToBinLog();
					}
					break;
				}
				State = 1506;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 1502; identifierList();
					State = 1503; Match(INTO_SYMBOL);
					State = 1504; partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1508; Match(EXCHANGE_SYMBOL);
				State = 1509; Match(PARTITION_SYMBOL);
				State = 1510; identifier();
				State = 1511; Match(WITH_SYMBOL);
				State = 1512; Match(TABLE_SYMBOL);
				State = 1513; tableRef();
				State = 1515;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1514; withValidation();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1517;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1518; Match(DISCARD_SYMBOL);
				State = 1519; Match(PARTITION_SYMBOL);
				State = 1520; allOrPartitionNameList();
				State = 1521; Match(TABLESPACE_SYMBOL);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1523;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1524; Match(IMPORT_SYMBOL);
				State = 1525; Match(PARTITION_SYMBOL);
				State = 1526; allOrPartitionNameList();
				State = 1527; Match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListContext : ParserRuleContext {
		public AlterListItemContext[] alterListItem() {
			return GetRuleContexts<AlterListItemContext>();
		}
		public AlterListItemContext alterListItem(int i) {
			return GetRuleContext<AlterListItemContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext[] createTableOptionsSpaceSeparated() {
			return GetRuleContexts<CreateTableOptionsSpaceSeparatedContext>();
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return GetRuleContext<CreateTableOptionsSpaceSeparatedContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterListContext alterList() {
		AlterListContext _localctx = new AlterListContext(Context, State);
		EnterRule(_localctx, 30, RULE_alterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1531; alterListItem();
				}
				break;
			case 2:
				{
				State = 1532; createTableOptionsSpaceSeparated();
				}
				break;
			}
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1535; Match(COMMA_SYMBOL);
				State = 1539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 1536; alterListItem();
					}
					break;
				case 2:
					{
					State = 1537; alterCommandsModifier();
					}
					break;
				case 3:
					{
					State = 1538; createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierContext : ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterCommandsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierContext alterCommandsModifier() {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			State = 1549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1546; alterAlgorithmOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1547; alterLockOption();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1548; withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListItemContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode COLUMN_SYMBOL() { return GetToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return GetRuleContext<ColumnInternalRefContext>(0);
		}
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public RestrictContext restrict() {
			return GetRuleContext<RestrictContext>(0);
		}
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return GetRuleContext<AlterOrderListContext>(0);
		}
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterListItemContext alterListItem() {
		AlterListItemContext _localctx = new AlterListItemContext(Context, State);
		EnterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			State = 1696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1551; Match(ADD_SYMBOL);
				State = 1553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 1552; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 1555; identifier();
					State = 1556; fieldDefinition();
					State = 1558;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
					case 1:
						{
						State = 1557; checkOrReferences();
						}
						break;
					}
					State = 1561;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						State = 1560; place();
						}
					}

					}
					break;
				case 2:
					{
					State = 1563; Match(OPEN_PAR_SYMBOL);
					State = 1564; tableElementList();
					State = 1565; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1569; Match(ADD_SYMBOL);
				State = 1570; tableConstraintDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1571; Match(CHANGE_SYMBOL);
				State = 1573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1572; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1575; columnInternalRef();
				State = 1576; identifier();
				State = 1577; fieldDefinition();
				State = 1579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1578; place();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1581; Match(MODIFY_SYMBOL);
				State = 1583;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1582; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1585; columnInternalRef();
				State = 1586; fieldDefinition();
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1587; place();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1590; Match(DROP_SYMBOL);
				State = 1619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1592;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						State = 1591; Match(COLUMN_SYMBOL);
						}
						break;
					}
					State = 1594; columnInternalRef();
					State = 1596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						State = 1595; restrict();
						}
					}

					}
					break;
				case 2:
					{
					State = 1598; Match(FOREIGN_SYMBOL);
					State = 1599; Match(KEY_SYMBOL);
					State = 1606;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 1600;
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						State = 1601; columnInternalRef();
						}
						break;
					case 2:
						{
						State = 1602;
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						State = 1604;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 1603; columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 1608; Match(PRIMARY_SYMBOL);
					State = 1609; Match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					State = 1610; keyOrIndex();
					State = 1611; indexRef();
					}
					break;
				case 5:
					{
					State = 1613;
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					State = 1614; Match(CHECK_SYMBOL);
					State = 1615; identifier();
					}
					break;
				case 6:
					{
					State = 1616;
					if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
					State = 1617; Match(CONSTRAINT_SYMBOL);
					State = 1618; identifier();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1621; Match(DISABLE_SYMBOL);
				State = 1622; Match(KEYS_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1623; Match(ENABLE_SYMBOL);
				State = 1624; Match(KEYS_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1625; Match(ALTER_SYMBOL);
				State = 1627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1626; Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1629; columnInternalRef();
				State = 1639;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET_SYMBOL:
					{
					State = 1630; Match(SET_SYMBOL);
					State = 1631; Match(DEFAULT_SYMBOL);
					State = 1635;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 1632;
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						State = 1633; exprWithParentheses();
						}
						break;
					case 2:
						{
						State = 1634; signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					State = 1637; Match(DROP_SYMBOL);
					State = 1638; Match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1641;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1642; Match(ALTER_SYMBOL);
				State = 1643; Match(INDEX_SYMBOL);
				State = 1644; indexRef();
				State = 1645; visibility();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1647;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 1648; Match(ALTER_SYMBOL);
				State = 1649; Match(CHECK_SYMBOL);
				State = 1650; identifier();
				State = 1651; constraintEnforcement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1653;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 1654; Match(ALTER_SYMBOL);
				State = 1655; Match(CONSTRAINT_SYMBOL);
				State = 1656; identifier();
				State = 1657; constraintEnforcement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1659;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1660; Match(RENAME_SYMBOL);
				State = 1661; Match(COLUMN_SYMBOL);
				State = 1662; columnInternalRef();
				State = 1663; Match(TO_SYMBOL);
				State = 1664; identifier();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1666; Match(RENAME_SYMBOL);
				State = 1668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 1667;
					_la = TokenStream.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1670; tableName();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1671;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 1672; Match(RENAME_SYMBOL);
				State = 1673; keyOrIndex();
				State = 1674; indexRef();
				State = 1675; Match(TO_SYMBOL);
				State = 1676; indexName();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1678; Match(CONVERT_SYMBOL);
				State = 1679; Match(TO_SYMBOL);
				State = 1680; charset();
				State = 1684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 1681;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 1682; Match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					State = 1683; charsetName();
					}
					break;
				}
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 1686; collate();
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1689; Match(FORCE_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1690; Match(ORDER_SYMBOL);
				State = 1691; Match(BY_SYMBOL);
				State = 1692; alterOrderList();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1693;
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				State = 1694; Match(UPGRADE_SYMBOL);
				State = 1695; Match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 36, RULE_place);
		try {
			State = 1701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1698; Match(AFTER_SYMBOL);
				State = 1699; identifier();
				}
				break;
			case FIRST_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1700; Match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictContext : ParserRuleContext {
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestrict(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestrict(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestrict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestrictContext restrict() {
		RestrictContext _localctx = new RestrictContext(Context, State);
		EnterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1703;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterOrderListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterOrderList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterOrderList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterOrderList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterOrderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterOrderListContext alterOrderList() {
		AlterOrderListContext _localctx = new AlterOrderListContext(Context, State);
		EnterRule(_localctx, 40, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; identifier();
			State = 1707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 1706; direction();
				}
			}

			State = 1716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1709; Match(COMMA_SYMBOL);
					State = 1710; identifier();
					State = 1712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						State = 1711; direction();
						}
					}

					}
					} 
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterAlgorithmOptionContext : ParserRuleContext {
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterAlgorithmOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterAlgorithmOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterAlgorithmOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterAlgorithmOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterAlgorithmOptionContext alterAlgorithmOption() {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(Context, State);
		EnterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719; Match(ALGORITHM_SYMBOL);
			State = 1721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1720; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1723; Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1724; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLockOptionContext : ParserRuleContext {
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLockOptionContext alterLockOption() {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_alterLockOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727; Match(LOCK_SYMBOL);
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1728; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1731; Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1732; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexLockAndAlgorithmContext : ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexLockAndAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexLockAndAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexLockAndAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexLockAndAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			State = 1743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1735; alterAlgorithmOption();
				State = 1737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					State = 1736; alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1739; alterLockOption();
				State = 1741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 1740; alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithValidationContext : ParserRuleContext {
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withValidation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithValidation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithValidation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithValidation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithValidationContext withValidation() {
		WithValidationContext _localctx = new WithValidationContext(Context, State);
		EnterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 1746;
			_la = TokenStream.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1747; Match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovePartitioningContext : ParserRuleContext {
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removePartitioning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRemovePartitioning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRemovePartitioning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemovePartitioningContext removePartitioning() {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(Context, State);
		EnterRule(_localctx, 50, RULE_removePartitioning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749; Match(REMOVE_SYMBOL);
			State = 1750; Match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllOrPartitionNameListContext : ParserRuleContext {
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allOrPartitionNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAllOrPartitionNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAllOrPartitionNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllOrPartitionNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllOrPartitionNameListContext allOrPartitionNameList() {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(Context, State);
		EnterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			State = 1754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1752; Match(ALL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1753; identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return GetRuleContext<AlterTablespaceOptionsContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode ACCESSIBLE_SYMBOL() { return GetToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode READ_WRITE_SYMBOL() { return GetToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
		public ChangeTablespaceOptionContext[] changeTablespaceOption() {
			return GetRuleContexts<ChangeTablespaceOptionContext>();
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return GetRuleContext<ChangeTablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 54, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756; Match(TABLESPACE_SYMBOL);
			State = 1757; tablespaceRef();
			State = 1791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1758;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1759; Match(DATAFILE_SYMBOL);
				State = 1760; textLiteral();
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					State = 1761; alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				State = 1764;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1784;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					State = 1766; Match(CHANGE_SYMBOL);
					State = 1767; Match(DATAFILE_SYMBOL);
					State = 1768; textLiteral();
					State = 1779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						State = 1769; changeTablespaceOption();
						State = 1776;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							State = 1771;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								State = 1770; Match(COMMA_SYMBOL);
								}
							}

							State = 1773; changeTablespaceOption();
							}
							}
							State = 1778;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					State = 1781;
					_la = TokenStream.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					State = 1782; Match(NOT_SYMBOL);
					State = 1783; Match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 1786; Match(RENAME_SYMBOL);
				State = 1787; Match(TO_SYMBOL);
				State = 1788; identifier();
				}
				break;
			case 4:
				{
				State = 1789;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1790; alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUndoTablespaceContext alterUndoTablespace() {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 56, RULE_alterUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793; Match(UNDO_SYMBOL);
			State = 1794; Match(TABLESPACE_SYMBOL);
			State = 1795; tablespaceRef();
			State = 1796; Match(SET_SYMBOL);
			State = 1797;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 1798; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionsContext : ParserRuleContext {
		public UndoTableSpaceOptionContext[] undoTableSpaceOption() {
			return GetRuleContexts<UndoTableSpaceOptionContext>();
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return GetRuleContext<UndoTableSpaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndoTableSpaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_undoTableSpaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; undoTableSpaceOption();
			State = 1808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1802; Match(COMMA_SYMBOL);
					}
				}

				State = 1805; undoTableSpaceOption();
				}
				}
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionContext : ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndoTableSpaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionContext undoTableSpaceOption() {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(Context, State);
		EnterRule(_localctx, 60, RULE_undoTableSpaceOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811; tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionsContext : ParserRuleContext {
		public AlterTablespaceOptionContext[] alterTablespaceOption() {
			return GetRuleContexts<AlterTablespaceOptionContext>();
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return GetRuleContext<AlterTablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionsContext alterTablespaceOptions() {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_alterTablespaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; alterTablespaceOption();
			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1814; Match(COMMA_SYMBOL);
					}
				}

				State = 1817; alterTablespaceOption();
				}
				}
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionContext alterTablespaceOption() {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_alterTablespaceOption);
		try {
			State = 1833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1823; Match(INITIAL_SIZE_SYMBOL);
				State = 1825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 1824; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1827; sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1828; tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1829; tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1830; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1831; tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1832; tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeTablespaceOptionContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeTablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeTablespaceOptionContext changeTablespaceOption() {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 66, RULE_changeTablespaceOption);
		try {
			State = 1842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1835; Match(INITIAL_SIZE_SYMBOL);
				State = 1837;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 1836; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1839; sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1840; tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1841; tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 68, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				State = 1844; viewAlgorithm();
				}
			}

			State = 1848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1847; definerClause();
				}
			}

			State = 1851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 1850; viewSuid();
				}
			}

			State = 1853; Match(VIEW_SYMBOL);
			State = 1854; viewRef();
			State = 1855; viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewTailContext : ParserRuleContext {
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return GetRuleContext<ViewSelectContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewTailContext viewTail() {
		ViewTailContext _localctx = new ViewTailContext(Context, State);
		EnterRule(_localctx, 70, RULE_viewTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 1857; columnInternalRefList();
				}
			}

			State = 1860; Match(AS_SYMBOL);
			State = 1861; viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSelectContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return GetRuleContext<ViewCheckOptionContext>(0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSelect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewSelectContext viewSelect() {
		ViewSelectContext _localctx = new ViewSelectContext(Context, State);
		EnterRule(_localctx, 72, RULE_viewSelect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863; queryExpressionOrParens();
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 1864; viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewCheckOptionContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewCheckOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewCheckOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewCheckOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewCheckOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewCheckOptionContext viewCheckOption() {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(Context, State);
		EnterRule(_localctx, 74, RULE_viewCheckOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; Match(WITH_SYMBOL);
			State = 1869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				State = 1868;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1871; Match(CHECK_SYMBOL);
			State = 1872; Match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		public CreateTablespaceContext createTablespace() {
			return GetRuleContext<CreateTablespaceContext>(0);
		}
		public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return GetRuleContext<CreateSpatialReferenceContext>(0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return GetRuleContext<CreateUndoTablespaceContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; Match(CREATE_SYMBOL);
			State = 1893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1875; createDatabase();
				}
				break;
			case 2:
				{
				State = 1876; createTable();
				}
				break;
			case 3:
				{
				State = 1877; createFunction();
				}
				break;
			case 4:
				{
				State = 1878; createProcedure();
				}
				break;
			case 5:
				{
				State = 1879; createUdf();
				}
				break;
			case 6:
				{
				State = 1880; createLogfileGroup();
				}
				break;
			case 7:
				{
				State = 1881; createView();
				}
				break;
			case 8:
				{
				State = 1882; createTrigger();
				}
				break;
			case 9:
				{
				State = 1883; createIndex();
				}
				break;
			case 10:
				{
				State = 1884; createServer();
				}
				break;
			case 11:
				{
				State = 1885; createTablespace();
				}
				break;
			case 12:
				{
				State = 1886; createEvent();
				}
				break;
			case 13:
				{
				State = 1887;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1888; createRole();
				}
				break;
			case 14:
				{
				State = 1889;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 1890; createSpatialReference();
				}
				break;
			case 15:
				{
				State = 1891;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1892; createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return GetRuleContext<SchemaNameContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 78, RULE_createDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895; Match(DATABASE_SYMBOL);
			State = 1897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1896; ifNotExists();
				}
				break;
			}
			State = 1899; schemaName();
			State = 1903;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1900; createDatabaseOption();
					}
					} 
				}
				State = 1905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return GetRuleContext<DefaultEncryptionContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 80, RULE_createDatabaseOption);
		try {
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906; defaultCharset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1907; defaultCollation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1908;
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				State = 1909; defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return GetRuleContext<CreateTableOptionsContext>(0);
		}
		public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return GetRuleContext<DuplicateAsQueryExpressionContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 82, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 1912; Match(TEMPORARY_SYMBOL);
				}
			}

			State = 1915; Match(TABLE_SYMBOL);
			State = 1917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1916; ifNotExists();
				}
				break;
			}
			State = 1919; tableName();
			State = 1942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1924;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 1920; Match(OPEN_PAR_SYMBOL);
					State = 1921; tableElementList();
					State = 1922; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 1927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 1926; createTableOptions();
					}
					break;
				}
				State = 1930;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1929; partitionClause();
					}
					break;
				}
				State = 1933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1932; duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1935; Match(LIKE_SYMBOL);
				State = 1936; tableRef();
				}
				break;
			case 3:
				{
				State = 1937; Match(OPEN_PAR_SYMBOL);
				State = 1938; Match(LIKE_SYMBOL);
				State = 1939; tableRef();
				State = 1940; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 84, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944; tableElement();
			State = 1949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1945; Match(COMMA_SYMBOL);
				State = 1946; tableElement();
				}
				}
				State = 1951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 86, RULE_tableElement);
		try {
			State = 1954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952; columnDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953; tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateAsQueryExpressionContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateAsQueryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDuplicateAsQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDuplicateAsQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuplicateAsQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1956;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1959; Match(AS_SYMBOL);
				}
				break;
			}
			State = 1962; queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionOrParensContext : ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionOrParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionOrParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionOrParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionOrParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionOrParensContext queryExpressionOrParens() {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(Context, State);
		EnterRule(_localctx, 90, RULE_queryExpressionOrParens);
		try {
			State = 1966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1964; queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1965; queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoutineContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoutine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRoutine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRoutine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoutineContext createRoutine() {
		CreateRoutineContext _localctx = new CreateRoutineContext(Context, State);
		EnterRule(_localctx, 92, RULE_createRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968; Match(CREATE_SYMBOL);
			State = 1972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1969; createProcedure();
				}
				break;
			case 2:
				{
				State = 1970; createFunction();
				}
				break;
			case 3:
				{
				State = 1971; createUdf();
				}
				break;
			}
			State = 1975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				State = 1974; Match(SEMICOLON_SYMBOL);
				}
			}

			State = 1977; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 94, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1979; definerClause();
				}
			}

			State = 1982; Match(PROCEDURE_SYMBOL);
			State = 1983; procedureName();
			State = 1984; Match(OPEN_PAR_SYMBOL);
			State = 1993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1985; procedureParameter();
				State = 1990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 1986; Match(COMMA_SYMBOL);
					State = 1987; procedureParameter();
					}
					}
					State = 1992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1995; Match(CLOSE_PAR_SYMBOL);
			State = 1999;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1996; routineCreateOption();
					}
					} 
				}
				State = 2001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			State = 2002; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 96, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2004; definerClause();
				}
			}

			State = 2007; Match(FUNCTION_SYMBOL);
			State = 2008; functionName();
			State = 2009; Match(OPEN_PAR_SYMBOL);
			State = 2018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 2010; functionParameter();
				State = 2015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2011; Match(COMMA_SYMBOL);
					State = 2012; functionParameter();
					}
					}
					State = 2017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2020; Match(CLOSE_PAR_SYMBOL);
			State = 2021; Match(RETURNS_SYMBOL);
			State = 2022; typeWithOptCollate();
			State = 2026;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2023; routineCreateOption();
					}
					} 
				}
				State = 2028;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			State = 2029; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return GetRuleContext<UdfNameContext>(0);
		}
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUdf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUdf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfContext createUdf() {
		CreateUdfContext _localctx = new CreateUdfContext(Context, State);
		EnterRule(_localctx, 98, RULE_createUdf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				State = 2031; Match(AGGREGATE_SYMBOL);
				}
			}

			State = 2034; Match(FUNCTION_SYMBOL);
			State = 2035; udfName();
			State = 2036; Match(RETURNS_SYMBOL);
			State = 2037;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2038; Match(SONAME_SYMBOL);
			State = 2039; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCreateOptionContext : ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return GetRuleContext<RoutineOptionContext>(0);
		}
		public ITerminalNode DETERMINISTIC_SYMBOL() { return GetToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCreateOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineCreateOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineCreateOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCreateOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCreateOptionContext routineCreateOption() {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(Context, State);
		EnterRule(_localctx, 100, RULE_routineCreateOption);
		int _la;
		try {
			State = 2046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041; routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2042; Match(NOT_SYMBOL);
					}
				}

				State = 2045; Match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineAlterOptionsContext : ParserRuleContext {
		public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineAlterOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineAlterOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineAlterOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineAlterOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineAlterOptionsContext routineAlterOptions() {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(Context, State);
		EnterRule(_localctx, 102, RULE_routineAlterOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2048; routineCreateOption();
				}
				}
				State = 2051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public IToken option;
		public IToken security;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode READS_SYMBOL() { return GetToken(MySQLParser.READS_SYMBOL, 0); }
		public ITerminalNode MODIFIES_SYMBOL() { return GetToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoutineOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoutineOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 104, RULE_routineOption);
		int _la;
		try {
			State = 2070;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053; _localctx.option = Match(COMMENT_SYMBOL);
				State = 2054; textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055; _localctx.option = Match(LANGUAGE_SYMBOL);
				State = 2056; Match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2057; _localctx.option = Match(NO_SYMBOL);
				State = 2058; Match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2059; _localctx.option = Match(CONTAINS_SYMBOL);
				State = 2060; Match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2061; _localctx.option = Match(READS_SYMBOL);
				State = 2062; Match(SQL_SYMBOL);
				State = 2063; Match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2064; _localctx.option = Match(MODIFIES_SYMBOL);
				State = 2065; Match(SQL_SYMBOL);
				State = 2066; Match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2067; _localctx.option = Match(SQL_SYMBOL);
				State = 2068; Match(SECURITY_SYMBOL);
				State = 2069;
				_localctx.security = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 106, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2072; onlineOption();
				}
			}

			State = 2116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 2076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					State = 2075; Match(UNIQUE_SYMBOL);
					}
				}

				State = 2078; _localctx.type = Match(INDEX_SYMBOL);
				State = 2087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
				case 1:
					{
					State = 2079;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 2080; indexName();
					State = 2082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						State = 2081; indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2085;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
					case 1:
						{
						State = 2084; indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				State = 2089; createIndexTarget();
				State = 2093;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2090; indexOption();
						}
						} 
					}
					State = 2095;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				State = 2096; _localctx.type = Match(FULLTEXT_SYMBOL);
				State = 2097; Match(INDEX_SYMBOL);
				State = 2098; indexName();
				State = 2099; createIndexTarget();
				State = 2103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2100; fulltextIndexOption();
						}
						} 
					}
					State = 2105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				State = 2106; _localctx.type = Match(SPATIAL_SYMBOL);
				State = 2107; Match(INDEX_SYMBOL);
				State = 2108; indexName();
				State = 2109; createIndexTarget();
				State = 2113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2110; spatialIndexOption();
						}
						} 
					}
					State = 2115;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2118; indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameAndTypeContext : ParserRuleContext {
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNameAndType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexNameAndType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexNameAndType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexNameAndType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameAndTypeContext indexNameAndType() {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_indexNameAndType);
		try {
			State = 2130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2121; indexName();
				State = 2124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 2122; Match(USING_SYMBOL);
					State = 2123; indexType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2126; indexName();
				State = 2127; Match(TYPE_SYMBOL);
				State = 2128; indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 110, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132; Match(ON_SYMBOL);
			State = 2133; tableRef();
			State = 2134; keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return GetRuleContext<LogfileGroupNameContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return GetRuleContext<LogfileGroupOptionsContext>(0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 112, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136; Match(LOGFILE_SYMBOL);
			State = 2137; Match(GROUP_SYMBOL);
			State = 2138; logfileGroupName();
			State = 2139; Match(ADD_SYMBOL);
			State = 2140;
			_la = TokenStream.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2141; textLiteral();
			State = 2143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2142; logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionsContext : ParserRuleContext {
		public LogfileGroupOptionContext[] logfileGroupOption() {
			return GetRuleContexts<LogfileGroupOptionContext>();
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return GetRuleContext<LogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionsContext logfileGroupOptions() {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 114, RULE_logfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145; logfileGroupOption();
			State = 2152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 2147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2146; Match(COMMA_SYMBOL);
					}
				}

				State = 2149; logfileGroupOption();
				}
				}
				State = 2154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return GetRuleContext<TsOptionUndoRedoBufferSizeContext>(0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionContext logfileGroupOption() {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 116, RULE_logfileGroupOption);
		try {
			State = 2161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2155; tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2156; tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2157; tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2158; tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2159; tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2160; tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return GetRuleContext<ServerNameContext>(0);
		}
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 118, RULE_createServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163; Match(SERVER_SYMBOL);
			State = 2164; serverName();
			State = 2165; Match(FOREIGN_SYMBOL);
			State = 2166; Match(DATA_SYMBOL);
			State = 2167; Match(WRAPPER_SYMBOL);
			State = 2168; textOrIdentifier();
			State = 2169; serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionsContext : ParserRuleContext {
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionsContext serverOptions() {
		ServerOptionsContext _localctx = new ServerOptionsContext(Context, State);
		EnterRule(_localctx, 120, RULE_serverOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171; Match(OPTIONS_SYMBOL);
			State = 2172; Match(OPEN_PAR_SYMBOL);
			State = 2173; serverOption();
			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2174; Match(COMMA_SYMBOL);
				State = 2175; serverOption();
				}
				}
				State = 2180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2181; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public IToken option;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_serverOption);
		try {
			State = 2197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2183; _localctx.option = Match(HOST_SYMBOL);
				State = 2184; textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2185; _localctx.option = Match(DATABASE_SYMBOL);
				State = 2186; textLiteral();
				}
				break;
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2187; _localctx.option = Match(USER_SYMBOL);
				State = 2188; textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2189; _localctx.option = Match(PASSWORD_SYMBOL);
				State = 2190; textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2191; _localctx.option = Match(SOCKET_SYMBOL);
				State = 2192; textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2193; _localctx.option = Match(OWNER_SYMBOL);
				State = 2194; textLiteral();
				}
				break;
			case PORT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2195; _localctx.option = Match(PORT_SYMBOL);
				State = 2196; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return GetRuleContext<TsDataFileNameContext>(0);
		}
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return GetRuleContext<TablespaceOptionsContext>(0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceContext createTablespace() {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(Context, State);
		EnterRule(_localctx, 124, RULE_createTablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; Match(TABLESPACE_SYMBOL);
			State = 2200; tablespaceName();
			State = 2201; tsDataFileName();
			State = 2206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 2202; Match(USE_SYMBOL);
				State = 2203; Match(LOGFILE_SYMBOL);
				State = 2204; Match(GROUP_SYMBOL);
				State = 2205; logfileGroupRef();
				}
				break;
			}
			State = 2209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 2208; tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUndoTablespaceContext createUndoTablespace() {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 126, RULE_createUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; Match(UNDO_SYMBOL);
			State = 2212; Match(TABLESPACE_SYMBOL);
			State = 2213; tablespaceName();
			State = 2214; Match(ADD_SYMBOL);
			State = 2215; tsDataFile();
			State = 2217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2216; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileNameContext : ParserRuleContext {
		public ITerminalNode ADD_SYMBOL() { return GetToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFileName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFileName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFileName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsDataFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileNameContext tsDataFileName() {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(Context, State);
		EnterRule(_localctx, 128, RULE_tsDataFileName);
		try {
			State = 2226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2219;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 2220; Match(ADD_SYMBOL);
					State = 2221; tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2224; Match(ADD_SYMBOL);
				State = 2225; tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileContext : ParserRuleContext {
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsDataFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsDataFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsDataFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileContext tsDataFile() {
		TsDataFileContext _localctx = new TsDataFileContext(Context, State);
		EnterRule(_localctx, 130, RULE_tsDataFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228; Match(DATAFILE_SYMBOL);
			State = 2229; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionsContext : ParserRuleContext {
		public TablespaceOptionContext[] tablespaceOption() {
			return GetRuleContexts<TablespaceOptionContext>();
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return GetRuleContext<TablespaceOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionsContext tablespaceOptions() {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 132, RULE_tablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231; tablespaceOption();
			State = 2238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2233;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
					case 1:
						{
						State = 2232; Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2235; tablespaceOption();
					}
					} 
				}
				State = 2240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionContext : ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return GetRuleContext<TsOptionExtentSizeContext>(0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return GetRuleContext<TsOptionFileblockSizeContext>(0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionContext tablespaceOption() {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(Context, State);
		EnterRule(_localctx, 134, RULE_tablespaceOption);
		try {
			State = 2253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2241; tsOptionInitialSize();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2242; tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2243; tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2244; tsOptionExtentSize();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2245; tsOptionNodegroup();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2246; tsOptionEngine();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2247; tsOptionWait();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2248; tsOptionComment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2249;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 2250; tsOptionFileblockSize();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2251;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2252; tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionInitialSizeContext : ParserRuleContext {
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionInitialSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionInitialSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionInitialSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionInitialSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionInitialSizeContext tsOptionInitialSize() {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(Context, State);
		EnterRule(_localctx, 136, RULE_tsOptionInitialSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255; Match(INITIAL_SIZE_SYMBOL);
			State = 2257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2256; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2259; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionUndoRedoBufferSizeContext : ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionUndoRedoBufferSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionUndoRedoBufferSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionUndoRedoBufferSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionUndoRedoBufferSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(Context, State);
		EnterRule(_localctx, 138, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261;
			_la = TokenStream.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2262; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2265; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionAutoextendSizeContext : ParserRuleContext {
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionAutoextendSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionAutoextendSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionAutoextendSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionAutoextendSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(Context, State);
		EnterRule(_localctx, 140, RULE_tsOptionAutoextendSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267; Match(AUTOEXTEND_SIZE_SYMBOL);
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2268; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2271; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionMaxSizeContext : ParserRuleContext {
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionMaxSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionMaxSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionMaxSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionMaxSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionMaxSizeContext tsOptionMaxSize() {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(Context, State);
		EnterRule(_localctx, 142, RULE_tsOptionMaxSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2273; Match(MAX_SIZE_SYMBOL);
			State = 2275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 2274; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2277; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionExtentSizeContext : ParserRuleContext {
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionExtentSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionExtentSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionExtentSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionExtentSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionExtentSizeContext tsOptionExtentSize() {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(Context, State);
		EnterRule(_localctx, 144, RULE_tsOptionExtentSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2279; Match(EXTENT_SIZE_SYMBOL);
			State = 2281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 2280; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2283; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionNodegroupContext : ParserRuleContext {
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionNodegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionNodegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionNodegroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionNodegroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionNodegroupContext tsOptionNodegroup() {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(Context, State);
		EnterRule(_localctx, 146, RULE_tsOptionNodegroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; Match(NODEGROUP_SYMBOL);
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				State = 2286; Match(EQUAL_OPERATOR);
				}
			}

			State = 2289; real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineContext : ParserRuleContext {
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineContext tsOptionEngine() {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(Context, State);
		EnterRule(_localctx, 148, RULE_tsOptionEngine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 2291; Match(STORAGE_SYMBOL);
				}
			}

			State = 2294; Match(ENGINE_SYMBOL);
			State = 2296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 2295; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2298; engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionWaitContext : ParserRuleContext {
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionWait; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionWait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionWait(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionWaitContext tsOptionWait() {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(Context, State);
		EnterRule(_localctx, 150, RULE_tsOptionWait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			_la = TokenStream.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionCommentContext : ParserRuleContext {
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionCommentContext tsOptionComment() {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(Context, State);
		EnterRule(_localctx, 152, RULE_tsOptionComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; Match(COMMENT_SYMBOL);
			State = 2304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2303; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2306; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionFileblockSizeContext : ParserRuleContext {
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionFileblockSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionFileblockSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionFileblockSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionFileblockSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionFileblockSizeContext tsOptionFileblockSize() {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(Context, State);
		EnterRule(_localctx, 154, RULE_tsOptionFileblockSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308; Match(FILE_BLOCK_SIZE_SYMBOL);
			State = 2310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 2309; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2312; sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEncryptionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEncryption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEncryption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEncryption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEncryptionContext tsOptionEncryption() {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(Context, State);
		EnterRule(_localctx, 156, RULE_tsOptionEncryption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314; Match(ENCRYPTION_SYMBOL);
			State = 2316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2315; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2318; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return GetRuleContext<ViewReplaceOrAlgorithmContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 158, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				State = 2320; viewReplaceOrAlgorithm();
				}
			}

			State = 2324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2323; definerClause();
				}
			}

			State = 2327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2326; viewSuid();
				}
			}

			State = 2329; Match(VIEW_SYMBOL);
			State = 2330; viewName();
			State = 2331; viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewReplaceOrAlgorithmContext : ParserRuleContext {
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewReplaceOrAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewReplaceOrAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewReplaceOrAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewReplaceOrAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(Context, State);
		EnterRule(_localctx, 160, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			State = 2339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2333; Match(OR_SYMBOL);
				State = 2334; Match(REPLACE_SYMBOL);
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2335; viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2338; viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewAlgorithmContext : ParserRuleContext {
		public IToken algorithm;
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewAlgorithmContext viewAlgorithm() {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(Context, State);
		EnterRule(_localctx, 162, RULE_viewAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341; Match(ALGORITHM_SYMBOL);
			State = 2342; Match(EQUAL_OPERATOR);
			State = 2343;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSuidContext : ParserRuleContext {
		public ITerminalNode SQL_SYMBOL() { return GetToken(MySQLParser.SQL_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSuid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewSuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewSuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewSuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewSuidContext viewSuid() {
		ViewSuidContext _localctx = new ViewSuidContext(Context, State);
		EnterRule(_localctx, 164, RULE_viewSuid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345; Match(SQL_SYMBOL);
			State = 2346; Match(SECURITY_SYMBOL);
			State = 2347;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public IToken timing;
		public IToken @event;
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return GetRuleContext<TriggerNameContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode EACH_SYMBOL() { return GetToken(MySQLParser.EACH_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return GetRuleContext<TriggerFollowsPrecedesClauseContext>(0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 166, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2349; definerClause();
				}
			}

			State = 2352; Match(TRIGGER_SYMBOL);
			State = 2353; triggerName();
			State = 2354;
			_localctx.timing = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2355;
			_localctx.@event = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.@event = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2356; Match(ON_SYMBOL);
			State = 2357; tableRef();
			State = 2358; Match(FOR_SYMBOL);
			State = 2359; Match(EACH_SYMBOL);
			State = 2360; Match(ROW_SYMBOL);
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 2361; triggerFollowsPrecedesClause();
				}
				break;
			}
			State = 2364; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerFollowsPrecedesClauseContext : ParserRuleContext {
		public IToken ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerFollowsPrecedesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerFollowsPrecedesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerFollowsPrecedesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerFollowsPrecedesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(Context, State);
		EnterRule(_localctx, 168, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 2367;
			_localctx.ordering = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2368; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 170, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2370; definerClause();
				}
			}

			State = 2373; Match(EVENT_SYMBOL);
			State = 2375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2374; ifNotExists();
				}
				break;
			}
			State = 2377; eventName();
			State = 2378; Match(ON_SYMBOL);
			State = 2379; Match(SCHEDULE_SYMBOL);
			State = 2380; schedule();
			State = 2387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2381; Match(ON_SYMBOL);
				State = 2382; Match(COMPLETION_SYMBOL);
				State = 2384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2383; Match(NOT_SYMBOL);
					}
				}

				State = 2386; Match(PRESERVE_SYMBOL);
				}
			}

			State = 2395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 2389; Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 2390; Match(DISABLE_SYMBOL);
				State = 2393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 2391; Match(ON_SYMBOL);
					State = 2392; Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 2399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 2397; Match(COMMENT_SYMBOL);
				State = 2398; textLiteral();
				}
			}

			State = 2401; Match(DO_SYMBOL);
			State = 2402; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 172, RULE_createRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404; Match(ROLE_SYMBOL);
			State = 2406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 2405; ifNotExists();
				}
				break;
			}
			State = 2408; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpatialReferenceContext : ParserRuleContext {
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public SrsAttributeContext[] srsAttribute() {
			return GetRuleContexts<SrsAttributeContext>();
		}
		public SrsAttributeContext srsAttribute(int i) {
			return GetRuleContext<SrsAttributeContext>(i);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpatialReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateSpatialReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateSpatialReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpatialReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpatialReferenceContext createSpatialReference() {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 174, RULE_createSpatialReference);
		int _la;
		try {
			State = 2435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2410; Match(OR_SYMBOL);
				State = 2411; Match(REPLACE_SYMBOL);
				State = 2412; Match(SPATIAL_SYMBOL);
				State = 2413; Match(REFERENCE_SYMBOL);
				State = 2414; Match(SYSTEM_SYMBOL);
				State = 2415; real_ulonglong_number();
				State = 2419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					State = 2416; srsAttribute();
					}
					}
					State = 2421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2422; Match(SPATIAL_SYMBOL);
				State = 2423; Match(REFERENCE_SYMBOL);
				State = 2424; Match(SYSTEM_SYMBOL);
				State = 2426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 2425; ifNotExists();
					}
					break;
				}
				State = 2428; real_ulonglong_number();
				State = 2432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					State = 2429; srsAttribute();
					}
					}
					State = 2434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrsAttributeContext : ParserRuleContext {
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srsAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSrsAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSrsAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSrsAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SrsAttributeContext srsAttribute() {
		SrsAttributeContext _localctx = new SrsAttributeContext(Context, State);
		EnterRule(_localctx, 176, RULE_srsAttribute);
		try {
			State = 2452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2437; Match(NAME_SYMBOL);
				State = 2438; Match(TEXT_SYMBOL);
				State = 2439; textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2440; Match(DEFINITION_SYMBOL);
				State = 2441; Match(TEXT_SYMBOL);
				State = 2442; textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2443; Match(ORGANIZATION_SYMBOL);
				State = 2444; textStringNoLinebreak();
				State = 2445; Match(IDENTIFIED_SYMBOL);
				State = 2446; Match(BY_SYMBOL);
				State = 2447; real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2449; Match(DESCRIPTION_SYMBOL);
				State = 2450; Match(TEXT_SYMBOL);
				State = 2451; textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return GetRuleContext<DropTableSpaceContext>(0);
		}
		public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return GetRuleContext<DropSpatialReferenceContext>(0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return GetRuleContext<DropUndoTablespaceContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2454; Match(DROP_SYMBOL);
			State = 2472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 2455; dropDatabase();
				}
				break;
			case 2:
				{
				State = 2456; dropEvent();
				}
				break;
			case 3:
				{
				State = 2457; dropFunction();
				}
				break;
			case 4:
				{
				State = 2458; dropProcedure();
				}
				break;
			case 5:
				{
				State = 2459; dropIndex();
				}
				break;
			case 6:
				{
				State = 2460; dropLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2461; dropServer();
				}
				break;
			case 8:
				{
				State = 2462; dropTable();
				}
				break;
			case 9:
				{
				State = 2463; dropTableSpace();
				}
				break;
			case 10:
				{
				State = 2464; dropTrigger();
				}
				break;
			case 11:
				{
				State = 2465; dropView();
				}
				break;
			case 12:
				{
				State = 2466;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2467; dropRole();
				}
				break;
			case 13:
				{
				State = 2468;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 2469; dropSpatialReference();
				}
				break;
			case 14:
				{
				State = 2470;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2471; dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 180, RULE_dropDatabase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474; Match(DATABASE_SYMBOL);
			State = 2476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 2475; ifExists();
				}
				break;
			}
			State = 2478; schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 182, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480; Match(EVENT_SYMBOL);
			State = 2482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2481; ifExists();
				}
				break;
			}
			State = 2484; eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 184, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2486; Match(FUNCTION_SYMBOL);
			State = 2488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2487; ifExists();
				}
				break;
			}
			State = 2490; functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 186, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492; Match(PROCEDURE_SYMBOL);
			State = 2494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2493; ifExists();
				}
				break;
			}
			State = 2496; procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 188, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2498; onlineOption();
				}
			}

			State = 2501; _localctx.type = Match(INDEX_SYMBOL);
			State = 2502; indexRef();
			State = 2503; Match(ON_SYMBOL);
			State = 2504; tableRef();
			State = 2506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2505; indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 190, RULE_dropLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508; Match(LOGFILE_SYMBOL);
			State = 2509; Match(GROUP_SYMBOL);
			State = 2510; logfileGroupRef();
			State = 2521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2511; dropLogfileGroupOption();
				State = 2518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2512; Match(COMMA_SYMBOL);
						}
					}

					State = 2515; dropLogfileGroupOption();
					}
					}
					State = 2520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupOptionContext : ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroupOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroupOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroupOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroupOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupOptionContext dropLogfileGroupOption() {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 192, RULE_dropLogfileGroupOption);
		try {
			State = 2525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2523; tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2524; tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 194, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(SERVER_SYMBOL);
			State = 2529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2528; ifExists();
				}
				break;
			}
			State = 2531; serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 196, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2533; Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2536;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2537; ifExists();
				}
				break;
			}
			State = 2540; tableRefList();
			State = 2542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2541;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableSpaceContext : ParserRuleContext {
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableSpace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTableSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTableSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTableSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableSpaceContext dropTableSpace() {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(Context, State);
		EnterRule(_localctx, 198, RULE_dropTableSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544; Match(TABLESPACE_SYMBOL);
			State = 2545; tablespaceRef();
			State = 2556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2546; dropLogfileGroupOption();
				State = 2553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2547; Match(COMMA_SYMBOL);
						}
					}

					State = 2550; dropLogfileGroupOption();
					}
					}
					State = 2555;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 200, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558; Match(TRIGGER_SYMBOL);
			State = 2560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 2559; ifExists();
				}
				break;
			}
			State = 2562; triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return GetRuleContext<ViewRefListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2564; Match(VIEW_SYMBOL);
			State = 2566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				{
				State = 2565; ifExists();
				}
				break;
			}
			State = 2568; viewRefList();
			State = 2570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2569;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 204, RULE_dropRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2572; Match(ROLE_SYMBOL);
			State = 2574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2573; ifExists();
				}
				break;
			}
			State = 2576; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSpatialReferenceContext : ParserRuleContext {
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSpatialReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropSpatialReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropSpatialReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropSpatialReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropSpatialReferenceContext dropSpatialReference() {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 206, RULE_dropSpatialReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578; Match(SPATIAL_SYMBOL);
			State = 2579; Match(REFERENCE_SYMBOL);
			State = 2580; Match(SYSTEM_SYMBOL);
			State = 2582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				State = 2581; ifExists();
				}
				break;
			}
			State = 2584; real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUndoTablespaceContext : ParserRuleContext {
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUndoTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUndoTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUndoTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUndoTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUndoTablespaceContext dropUndoTablespace() {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 208, RULE_dropUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586; Match(UNDO_SYMBOL);
			State = 2587; Match(TABLESPACE_SYMBOL);
			State = 2588; tablespaceRef();
			State = 2590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2589; undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableStatementContext : ParserRuleContext {
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public RenamePairContext[] renamePair() {
			return GetRuleContexts<RenamePairContext>();
		}
		public RenamePairContext renamePair(int i) {
			return GetRuleContext<RenamePairContext>(i);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameTableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameTableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableStatementContext renameTableStatement() {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_renameTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592; Match(RENAME_SYMBOL);
			State = 2593;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2594; renamePair();
			State = 2599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2595; Match(COMMA_SYMBOL);
				State = 2596; renamePair();
				}
				}
				State = 2601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamePairContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenamePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenamePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenamePairContext renamePair() {
		RenamePairContext _localctx = new RenamePairContext(Context, State);
		EnterRule(_localctx, 212, RULE_renamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2602; tableRef();
			State = 2603; Match(TO_SYMBOL);
			State = 2604; tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_truncateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606; Match(TRUNCATE_SYMBOL);
			State = 2608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 2607; Match(TABLE_SYMBOL);
				}
				break;
			}
			State = 2610; tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612; Match(IMPORT_SYMBOL);
			State = 2613; Match(TABLE_SYMBOL);
			State = 2614; Match(FROM_SYMBOL);
			State = 2615; textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode CALL_SYMBOL() { return GetToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617; Match(CALL_SYMBOL);
			State = 2618; procedureRef();
			State = 2624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2619; Match(OPEN_PAR_SYMBOL);
				State = 2621;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 2620; exprList();
					}
					break;
				}
				State = 2623; Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public DeleteStatementOptionContext[] deleteStatementOption() {
			return GetRuleContexts<DeleteStatementOptionContext>();
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return GetRuleContext<DeleteStatementOptionContext>(i);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public PartitionDeleteContext partitionDelete() {
			return GetRuleContext<PartitionDeleteContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 2626;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2627; withClause();
				}
				break;
			}
			State = 2630; Match(DELETE_SYMBOL);
			State = 2634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2631; deleteStatementOption();
					}
					} 
				}
				State = 2636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			State = 2669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 2637; Match(FROM_SYMBOL);
				State = 2661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
				case 1:
					{
					State = 2638; tableAliasRefList();
					State = 2639; Match(USING_SYMBOL);
					State = 2640; tableReferenceList();
					State = 2642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2641; whereClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2644; tableRef();
					State = 2647;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
					case 1:
						{
						State = 2645;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 2646; tableAlias();
						}
						break;
					}
					State = 2650;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
					case 1:
						{
						State = 2649; partitionDelete();
						}
						break;
					}
					State = 2653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2652; whereClause();
						}
					}

					State = 2656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						State = 2655; orderClause();
						}
					}

					State = 2659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2658; simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2663; tableAliasRefList();
				State = 2664; Match(FROM_SYMBOL);
				State = 2665; tableReferenceList();
				State = 2667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 2666; whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDeleteContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDelete; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDelete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDelete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDeleteContext partitionDelete() {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(Context, State);
		EnterRule(_localctx, 222, RULE_partitionDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2671;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 2672; Match(PARTITION_SYMBOL);
			State = 2673; Match(OPEN_PAR_SYMBOL);
			State = 2674; identifierList();
			State = 2675; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementOptionContext : ParserRuleContext {
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementOptionContext deleteStatementOption() {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(Context, State);
		EnterRule(_localctx, 224, RULE_deleteStatementOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2677;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2679; Match(DO_SYMBOL);
			State = 2684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 2680;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 2681; exprList();
				}
				break;
			case 2:
				{
				State = 2682;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 2683; selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return GetRuleContext<HandlerReadOrScanContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_handlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686; Match(HANDLER_SYMBOL);
			State = 2704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				{
				State = 2687; tableRef();
				State = 2688; Match(OPEN_SYMBOL);
				State = 2690;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 2689; tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2692; identifier();
				State = 2702;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLOSE_SYMBOL:
					{
					State = 2693; Match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					State = 2694; Match(READ_SYMBOL);
					State = 2695; handlerReadOrScan();
					State = 2697;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2696; whereClause();
						}
					}

					State = 2700;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2699; limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadOrScanContext : ParserRuleContext {
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadOrScan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadOrScan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadOrScan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadOrScan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadOrScanContext handlerReadOrScan() {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(Context, State);
		EnterRule(_localctx, 230, RULE_handlerReadOrScan);
		int _la;
		try {
			State = 2716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2706;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2707; identifier();
				State = 2714;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					State = 2708;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					State = 2709;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2710; Match(OPEN_PAR_SYMBOL);
					State = 2711; @values();
					State = 2712; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		public InsertLockOptionContext insertLockOption() {
			return GetRuleContext<InsertLockOptionContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return GetRuleContext<InsertUpdateListContext>(0);
		}
		public ValuesReferenceContext valuesReference() {
			return GetRuleContext<ValuesReferenceContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2718; Match(INSERT_SYMBOL);
			State = 2720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2719; insertLockOption();
				}
				break;
			}
			State = 2723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 2722; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 2726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 2725; Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2728; tableRef();
			State = 2730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 2729; usePartition();
				}
				break;
			}
			State = 2744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 2732; insertFromConstructor();
				State = 2735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
				case 1:
					{
					State = 2733;
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					State = 2734; valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2737; Match(SET_SYMBOL);
				State = 2738; updateList();
				State = 2741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
				case 1:
					{
					State = 2739;
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					State = 2740; valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 2743; insertQueryExpression();
				}
				break;
			}
			State = 2747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2746; insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertLockOptionContext : ParserRuleContext {
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertLockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertLockOptionContext insertLockOption() {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(Context, State);
		EnterRule(_localctx, 234, RULE_insertLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2749;
			_la = TokenStream.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromConstructorContext : ParserRuleContext {
		public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromConstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertFromConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertFromConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertFromConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromConstructorContext insertFromConstructor() {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(Context, State);
		EnterRule(_localctx, 236, RULE_insertFromConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2751; Match(OPEN_PAR_SYMBOL);
				State = 2753;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 2752; fields();
					}
					break;
				}
				State = 2755; Match(CLOSE_PAR_SYMBOL);
				}
			}

			State = 2758; insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public InsertIdentifierContext[] insertIdentifier() {
			return GetRuleContexts<InsertIdentifierContext>();
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return GetRuleContext<InsertIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 238, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2760; insertIdentifier();
			State = 2765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2761; Match(COMMA_SYMBOL);
				State = 2762; insertIdentifier();
				}
				}
				State = 2767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 240, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2768;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2769; valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryExpressionContext : ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQueryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryExpressionContext insertQueryExpression() {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_insertQueryExpression);
		try {
			State = 2778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2771; queryExpressionOrParens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2772; Match(OPEN_PAR_SYMBOL);
				State = 2774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2773; fields();
					}
					break;
				}
				State = 2776; Match(CLOSE_PAR_SYMBOL);
				State = 2777; queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		public ITerminalNode[] OPEN_PAR_SYMBOL() { return GetTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public ITerminalNode OPEN_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public ITerminalNode[] CLOSE_PAR_SYMBOL() { return GetTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public ITerminalNode CLOSE_PAR_SYMBOL(int i) {
			return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public ValuesContext[] @values() {
			return GetRuleContexts<ValuesContext>();
		}
		public ValuesContext @values(int i) {
			return GetRuleContext<ValuesContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 244, RULE_valueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2780; Match(OPEN_PAR_SYMBOL);
			State = 2782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				{
				State = 2781; @values();
				}
				break;
			}
			State = 2784; Match(CLOSE_PAR_SYMBOL);
			State = 2793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2785; Match(COMMA_SYMBOL);
					State = 2786; Match(OPEN_PAR_SYMBOL);
					State = 2788;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
					case 1:
						{
						State = 2787; @values();
						}
						break;
					}
					State = 2790; Match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				State = 2795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DEFAULT_SYMBOL() { return GetTokens(MySQLParser.DEFAULT_SYMBOL); }
		public ITerminalNode DEFAULT_SYMBOL(int i) {
			return GetToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 246, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 2796; expr(0);
				}
				break;
			case 2:
				{
				State = 2797; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			State = 2807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2800; Match(COMMA_SYMBOL);
				State = 2803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 2801; expr(0);
					}
					break;
				case 2:
					{
					State = 2802; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				State = 2809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesReferenceContext : ParserRuleContext {
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterValuesReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitValuesReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesReferenceContext valuesReference() {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(Context, State);
		EnterRule(_localctx, 248, RULE_valuesReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810; Match(AS_SYMBOL);
			State = 2811; identifier();
			State = 2813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2812; columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertUpdateListContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertUpdateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertUpdateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertUpdateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertUpdateListContext insertUpdateList() {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(Context, State);
		EnterRule(_localctx, 250, RULE_insertUpdateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2815; Match(ON_SYMBOL);
			State = 2816; Match(DUPLICATE_SYMBOL);
			State = 2817; Match(KEY_SYMBOL);
			State = 2818; Match(UPDATE_SYMBOL);
			State = 2819; updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return GetRuleContext<DataOrXmlContext>(0);
		}
		public ITerminalNode INFILE_SYMBOL() { return GetToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return GetRuleContext<LoadDataFileTailContext>(0);
		}
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return GetRuleContext<XmlRowsIdentifiedByContext>(0);
		}
		public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 252, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821; Match(LOAD_SYMBOL);
			State = 2822; dataOrXml();
			State = 2824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				State = 2823;
				_la = TokenStream.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				State = 2826; Match(LOCAL_SYMBOL);
				}
			}

			State = 2829; Match(INFILE_SYMBOL);
			State = 2830; textLiteral();
			State = 2832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				State = 2831;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2834; Match(INTO_SYMBOL);
			State = 2835; Match(TABLE_SYMBOL);
			State = 2836; tableRef();
			State = 2838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 2837; usePartition();
				}
				break;
			}
			State = 2841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARSET_SYMBOL || _la==CHAR_SYMBOL) {
				{
				State = 2840; charsetClause();
				}
			}

			State = 2844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS_SYMBOL) {
				{
				State = 2843; xmlRowsIdentifiedBy();
				}
			}

			State = 2847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				State = 2846; fieldsClause();
				}
			}

			State = 2850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				State = 2849; linesClause();
				}
			}

			State = 2852; loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataOrXmlContext : ParserRuleContext {
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataOrXml; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataOrXml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataOrXml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataOrXml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataOrXmlContext dataOrXml() {
		DataOrXmlContext _localctx = new DataOrXmlContext(Context, State);
		EnterRule(_localctx, 254, RULE_dataOrXml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2854;
			_la = TokenStream.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlRowsIdentifiedByContext : ParserRuleContext {
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlRowsIdentifiedBy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXmlRowsIdentifiedBy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXmlRowsIdentifiedBy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlRowsIdentifiedBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(Context, State);
		EnterRule(_localctx, 256, RULE_xmlRowsIdentifiedBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856; Match(ROWS_SYMBOL);
			State = 2857; Match(IDENTIFIED_SYMBOL);
			State = 2858; Match(BY_SYMBOL);
			State = 2859; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTailContext : ParserRuleContext {
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return GetRuleContext<LoadDataFileTargetListContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataFileTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTailContext loadDataFileTail() {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(Context, State);
		EnterRule(_localctx, 258, RULE_loadDataFileTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 2861; Match(IGNORE_SYMBOL);
				State = 2862; Match(INT_NUMBER);
				State = 2863;
				_la = TokenStream.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2866; loadDataFileTargetList();
				}
			}

			State = 2871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 2869; Match(SET_SYMBOL);
				State = 2870; updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTargetListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return GetRuleContext<FieldOrVariableListContext>(0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTargetList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTargetList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTargetList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataFileTargetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTargetListContext loadDataFileTargetList() {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(Context, State);
		EnterRule(_localctx, 260, RULE_loadDataFileTargetList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2873; Match(OPEN_PAR_SYMBOL);
			State = 2875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2874; fieldOrVariableList();
				}
				break;
			}
			State = 2877; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrVariableListContext : ParserRuleContext {
		public ColumnRefContext[] columnRef() {
			return GetRuleContexts<ColumnRefContext>();
		}
		public ColumnRefContext columnRef(int i) {
			return GetRuleContext<ColumnRefContext>(i);
		}
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrVariableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOrVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOrVariableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOrVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrVariableListContext fieldOrVariableList() {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(Context, State);
		EnterRule(_localctx, 262, RULE_fieldOrVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 2879; columnRef();
				}
				break;
			case 2:
				{
				State = 2880; userVariable();
				}
				break;
			}
			State = 2890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2883; Match(COMMA_SYMBOL);
				State = 2886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2884; columnRef();
					}
					break;
				case 2:
					{
					State = 2885; userVariable();
					}
					break;
				}
				}
				}
				State = 2892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2893; Match(REPLACE_SYMBOL);
			State = 2895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 2894;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 2897; Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2900; tableRef();
			State = 2902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2901; usePartition();
				}
				break;
			}
			State = 2908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2904; insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 2905; Match(SET_SYMBOL);
				State = 2906; updateList();
				}
				break;
			case 3:
				{
				State = 2907; insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectStatement);
		int _la;
		try {
			State = 2916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910; queryExpression();
				State = 2912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2911; lockingClauseList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2914; queryExpressionParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2915; selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithIntoContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithInto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithInto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithInto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementWithInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithIntoContext selectStatementWithInto() {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(Context, State);
		EnterRule(_localctx, 268, RULE_selectStatementWithInto);
		int _la;
		try {
			State = 2930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2918; Match(OPEN_PAR_SYMBOL);
				State = 2919; selectStatementWithInto();
				State = 2920; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2922; queryExpression();
				State = 2923; intoClause();
				State = 2925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2924; lockingClauseList();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2927; lockingClauseList();
				State = 2928; intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return GetRuleContext<ProcedureAnalyseClauseContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_queryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 2932;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2933; withClause();
				}
				break;
			}
			State = 2950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 2936; queryExpressionBody();
				State = 2938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2937; orderClause();
					}
					break;
				}
				State = 2941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2940; limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2943; queryExpressionParens();
				State = 2945;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 2944; orderClause();
					}
					break;
				}
				State = 2948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2947; limitClause();
					}
					break;
				}
				}
				break;
			}
			State = 2954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 2952;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 2953; procedureAnalyseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionBodyContext : ParserRuleContext {
		public QueryPrimaryContext[] queryPrimary() {
			return GetRuleContexts<QueryPrimaryContext>();
		}
		public QueryPrimaryContext queryPrimary(int i) {
			return GetRuleContext<QueryPrimaryContext>(i);
		}
		public QueryExpressionParensContext[] queryExpressionParens() {
			return GetRuleContexts<QueryExpressionParensContext>();
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return GetRuleContext<QueryExpressionParensContext>(i);
		}
		public ITerminalNode[] UNION_SYMBOL() { return GetTokens(MySQLParser.UNION_SYMBOL); }
		public ITerminalNode UNION_SYMBOL(int i) {
			return GetToken(MySQLParser.UNION_SYMBOL, i);
		}
		public UnionOptionContext[] unionOption() {
			return GetRuleContexts<UnionOptionContext>();
		}
		public UnionOptionContext unionOption(int i) {
			return GetRuleContext<UnionOptionContext>(i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionBodyContext queryExpressionBody() {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(Context, State);
		EnterRule(_localctx, 272, RULE_queryExpressionBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				{
				State = 2956; queryPrimary();
				}
				break;
			case 2:
				{
				State = 2957; queryExpressionParens();
				State = 2958; Match(UNION_SYMBOL);
				State = 2960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2959; unionOption();
					}
					break;
				}
				State = 2964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					State = 2962; queryPrimary();
					}
					break;
				case 2:
					{
					State = 2963; queryExpressionParens();
					}
					break;
				}
				}
				break;
			}
			State = 2978;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2968; Match(UNION_SYMBOL);
					State = 2970;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
					case 1:
						{
						State = 2969; unionOption();
						}
						break;
					}
					State = 2974;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
					case 1:
						{
						State = 2972; queryPrimary();
						}
						break;
					case 2:
						{
						State = 2973; queryExpressionParens();
						}
						break;
					}
					}
					} 
				}
				State = 2980;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 274, RULE_queryExpressionParens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981; Match(OPEN_PAR_SYMBOL);
			State = 2987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				{
				State = 2982; queryExpressionParens();
				}
				break;
			case 2:
				{
				State = 2983; queryExpression();
				State = 2985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2984; lockingClauseList();
					}
				}

				}
				break;
			}
			State = 2989; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public TableValueConstructorContext tableValueConstructor() {
			return GetRuleContext<TableValueConstructorContext>(0);
		}
		public ExplicitTableContext explicitTable() {
			return GetRuleContext<ExplicitTableContext>(0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 276, RULE_queryPrimary);
		try {
			State = 2996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2991; querySpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2992;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 2993; tableValueConstructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2994;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 2995; explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public SelectOptionContext[] selectOption() {
			return GetRuleContexts<SelectOptionContext>();
		}
		public SelectOptionContext selectOption(int i) {
			return GetRuleContext<SelectOptionContext>(i);
		}
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 278, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998; Match(SELECT_SYMBOL);
			State = 3002;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2999; selectOption();
					}
					} 
				}
				State = 3004;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			}
			State = 3005; selectItemList();
			State = 3007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 3006; intoClause();
				}
				break;
			}
			State = 3010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 3009; fromClause();
				}
				break;
			}
			State = 3013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 3012; whereClause();
				}
				break;
			}
			State = 3016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 3015; groupByClause();
				}
				break;
			}
			State = 3019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 3018; havingClause();
				}
				break;
			}
			State = 3023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 3021;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3022; windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 280, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025; queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecOptionContext : ParserRuleContext {
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public ITerminalNode SQL_SMALL_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_BIG_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return GetToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecOptionContext querySpecOption() {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(Context, State);
		EnterRule(_localctx, 282, RULE_querySpecOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 531)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 531)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 531)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 531)) | (1L << (STRAIGHT_JOIN_SYMBOL - 531)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return GetRuleContext<LimitOptionsContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3029; Match(LIMIT_SYMBOL);
			State = 3030; limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLimitClauseContext : ParserRuleContext {
		public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return GetRuleContext<LimitOptionContext>(0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLimitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLimitClauseContext simpleLimitClause() {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_simpleLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032; Match(LIMIT_SYMBOL);
			State = 3033; limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionsContext : ParserRuleContext {
		public LimitOptionContext[] limitOption() {
			return GetRuleContexts<LimitOptionContext>();
		}
		public LimitOptionContext limitOption(int i) {
			return GetRuleContext<LimitOptionContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionsContext limitOptions() {
		LimitOptionsContext _localctx = new LimitOptionsContext(Context, State);
		EnterRule(_localctx, 288, RULE_limitOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3035; limitOption();
			State = 3038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 3036;
				_la = TokenStream.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3037; limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionContext limitOption() {
		LimitOptionContext _localctx = new LimitOptionContext(Context, State);
		EnterRule(_localctx, 290, RULE_limitOption);
		int _la;
		try {
			State = 3042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3040; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3041;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (PARAM_MARKER - 747)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public ITerminalNode OUTFILE_SYMBOL() { return GetToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(Context, State);
		EnterRule(_localctx, 292, RULE_intoClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3044; Match(INTO_SYMBOL);
			State = 3072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 3045; Match(OUTFILE_SYMBOL);
				State = 3046; textStringLiteral();
				State = 3048;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
				case 1:
					{
					State = 3047; charsetClause();
					}
					break;
				}
				State = 3051;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
				case 1:
					{
					State = 3050; fieldsClause();
					}
					break;
				}
				State = 3054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
				case 1:
					{
					State = 3053; linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3056; Match(DUMPFILE_SYMBOL);
				State = 3057; textStringLiteral();
				}
				break;
			case 3:
				{
				State = 3060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
				case 1:
					{
					State = 3058; textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 3059; userVariable();
					}
					break;
				}
				State = 3069;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3062; Match(COMMA_SYMBOL);
						State = 3065;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
						case 1:
							{
							State = 3063; textOrIdentifier();
							}
							break;
						case 2:
							{
							State = 3064; userVariable();
							}
							break;
						}
						}
						} 
					}
					State = 3071;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAnalyseClauseContext : ParserRuleContext {
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAnalyseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureAnalyseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureAnalyseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureAnalyseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAnalyseClauseContext procedureAnalyseClause() {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(Context, State);
		EnterRule(_localctx, 294, RULE_procedureAnalyseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3074; Match(PROCEDURE_SYMBOL);
			State = 3075; Match(ANALYSE_SYMBOL);
			State = 3076; Match(OPEN_PAR_SYMBOL);
			State = 3082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 3077; Match(INT_NUMBER);
				State = 3080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3078; Match(COMMA_SYMBOL);
					State = 3079; Match(INT_NUMBER);
					}
				}

				}
			}

			State = 3084; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ITerminalNode HAVING_SYMBOL() { return GetToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3086; Match(HAVING_SYMBOL);
			State = 3087; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		public ITerminalNode WINDOW_SYMBOL() { return GetToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 298, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3089; Match(WINDOW_SYMBOL);
			State = 3090; windowDefinition();
			State = 3095;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3091; Match(COMMA_SYMBOL);
					State = 3092; windowDefinition();
					}
					} 
				}
				State = 3097;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 300, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098; windowName();
			State = 3099; Match(AS_SYMBOL);
			State = 3100; windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return GetRuleContext<WindowSpecDetailsContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 302, RULE_windowSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3102; Match(OPEN_PAR_SYMBOL);
			State = 3103; windowSpecDetails();
			State = 3104; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecDetailsContext : ParserRuleContext {
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return GetRuleContext<WindowFrameClauseContext>(0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecDetails; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowSpecDetails(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowSpecDetails(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpecDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecDetailsContext windowSpecDetails() {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(Context, State);
		EnterRule(_localctx, 304, RULE_windowSpecDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 3106; windowName();
				}
				break;
			}
			State = 3112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				State = 3109; Match(PARTITION_SYMBOL);
				State = 3110; Match(BY_SYMBOL);
				State = 3111; orderList();
				}
			}

			State = 3115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3114; orderClause();
				}
			}

			State = 3118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				State = 3117; windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameClauseContext : ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return GetRuleContext<WindowFrameUnitsContext>(0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return GetRuleContext<WindowFrameExtentContext>(0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return GetRuleContext<WindowFrameExclusionContext>(0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameClauseContext windowFrameClause() {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_windowFrameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3120; windowFrameUnits();
			State = 3121; windowFrameExtent();
			State = 3123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				State = 3122; windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameUnitsContext : ParserRuleContext {
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		public ITerminalNode GROUPS_SYMBOL() { return GetToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameUnits; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameUnits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameUnits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameUnitsContext windowFrameUnits() {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(Context, State);
		EnterRule(_localctx, 308, RULE_windowFrameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExtentContext : ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return GetRuleContext<WindowFrameBetweenContext>(0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExtent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExtent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExtent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExtentContext windowFrameExtent() {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(Context, State);
		EnterRule(_localctx, 310, RULE_windowFrameExtent);
		try {
			State = 3129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3127; windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3128; windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameStartContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameStart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameStartContext windowFrameStart() {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(Context, State);
		EnterRule(_localctx, 312, RULE_windowFrameStart);
		try {
			State = 3145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3131; Match(UNBOUNDED_SYMBOL);
				State = 3132; Match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3133; ulonglong_number();
				State = 3134; Match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3136; Match(PARAM_MARKER);
				State = 3137; Match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3138; Match(INTERVAL_SYMBOL);
				State = 3139; expr(0);
				State = 3140; interval();
				State = 3141; Match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3143; Match(CURRENT_SYMBOL);
				State = 3144; Match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBetweenContext : ParserRuleContext {
		public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public WindowFrameBoundContext[] windowFrameBound() {
			return GetRuleContexts<WindowFrameBoundContext>();
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return GetRuleContext<WindowFrameBoundContext>(i);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBetween; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBetweenContext windowFrameBetween() {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(Context, State);
		EnterRule(_localctx, 314, RULE_windowFrameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3147; Match(BETWEEN_SYMBOL);
			State = 3148; windowFrameBound();
			State = 3149; Match(AND_SYMBOL);
			State = 3150; windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBoundContext : ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBoundContext windowFrameBound() {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(Context, State);
		EnterRule(_localctx, 316, RULE_windowFrameBound);
		try {
			State = 3165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3152; windowFrameStart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3153; Match(UNBOUNDED_SYMBOL);
				State = 3154; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3155; ulonglong_number();
				State = 3156; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3158; Match(PARAM_MARKER);
				State = 3159; Match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3160; Match(INTERVAL_SYMBOL);
				State = 3161; expr(0);
				State = 3162; interval();
				State = 3163; Match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExclusionContext : ParserRuleContext {
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExclusion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExclusion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExclusion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFrameExclusion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExclusionContext windowFrameExclusion() {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(Context, State);
		EnterRule(_localctx, 318, RULE_windowFrameExclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3167; Match(EXCLUDE_SYMBOL);
			State = 3174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
				{
				State = 3168; Match(CURRENT_SYMBOL);
				State = 3169; Match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3170; Match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				State = 3171; Match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				State = 3172; Match(NO_SYMBOL);
				State = 3173; Match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public CommonTableExpressionContext[] commonTableExpression() {
			return GetRuleContexts<CommonTableExpressionContext>();
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return GetRuleContext<CommonTableExpressionContext>(i);
		}
		public ITerminalNode RECURSIVE_SYMBOL() { return GetToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 320, RULE_withClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3176; Match(WITH_SYMBOL);
			State = 3178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 3177; Match(RECURSIVE_SYMBOL);
				}
				break;
			}
			State = 3180; commonTableExpression();
			State = 3185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3181; Match(COMMA_SYMBOL);
					State = 3182; commonTableExpression();
					}
					} 
				}
				State = 3187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3188; identifier();
			State = 3190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3189; columnInternalRefList();
				}
			}

			State = 3192; Match(AS_SYMBOL);
			State = 3193; subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OlapOptionContext olapOption() {
			return GetRuleContext<OlapOptionContext>(0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 324, RULE_groupByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3195; Match(GROUP_SYMBOL);
			State = 3196; Match(BY_SYMBOL);
			State = 3197; orderList();
			State = 3199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 3198; olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OlapOptionContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode CUBE_SYMBOL() { return GetToken(MySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_olapOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOlapOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOlapOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOlapOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OlapOptionContext olapOption() {
		OlapOptionContext _localctx = new OlapOptionContext(Context, State);
		EnterRule(_localctx, 326, RULE_olapOption);
		try {
			State = 3206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3201; Match(WITH_SYMBOL);
				State = 3202; Match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3203;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3204; Match(WITH_SYMBOL);
				State = 3205; Match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 328, RULE_orderClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208; Match(ORDER_SYMBOL);
			State = 3209; Match(BY_SYMBOL);
			State = 3210; orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 330, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3212;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode DUAL_SYMBOL() { return GetToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 332, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3214; Match(FROM_SYMBOL);
			State = 3217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3215; Match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3216; tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListContext : ParserRuleContext {
		public TableReferenceContext[] tableReference() {
			return GetRuleContexts<TableReferenceContext>();
		}
		public TableReferenceContext tableReference(int i) {
			return GetRuleContext<TableReferenceContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListContext tableReferenceList() {
		TableReferenceListContext _localctx = new TableReferenceListContext(Context, State);
		EnterRule(_localctx, 334, RULE_tableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3219; tableReference();
			State = 3224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3220; Match(COMMA_SYMBOL);
					State = 3221; tableReference();
					}
					} 
				}
				State = 3226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableValueConstructorContext : ParserRuleContext {
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public RowValueExplicitContext[] rowValueExplicit() {
			return GetRuleContexts<RowValueExplicitContext>();
		}
		public RowValueExplicitContext rowValueExplicit(int i) {
			return GetRuleContext<RowValueExplicitContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableValueConstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableValueConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableValueConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableValueConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableValueConstructorContext tableValueConstructor() {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(Context, State);
		EnterRule(_localctx, 336, RULE_tableValueConstructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3227; Match(VALUES_SYMBOL);
			State = 3228; rowValueExplicit();
			State = 3233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3229; Match(COMMA_SYMBOL);
					State = 3230; rowValueExplicit();
					}
					} 
				}
				State = 3235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplicitTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplicitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitTableContext explicitTable() {
		ExplicitTableContext _localctx = new ExplicitTableContext(Context, State);
		EnterRule(_localctx, 338, RULE_explicitTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236; Match(TABLE_SYMBOL);
			State = 3237; tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowValueExplicitContext : ParserRuleContext {
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowValueExplicit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRowValueExplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRowValueExplicit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowValueExplicit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowValueExplicitContext rowValueExplicit() {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(Context, State);
		EnterRule(_localctx, 340, RULE_rowValueExplicit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239; Match(ROW_SYMBOL);
			State = 3240; Match(OPEN_PAR_SYMBOL);
			State = 3242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				{
				State = 3241; @values();
				}
				break;
			}
			State = 3244; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return GetRuleContext<QuerySpecOptionContext>(0);
		}
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 342, RULE_selectOption);
		try {
			State = 3254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3246; querySpecOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3247; Match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3248;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3249; Match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3250;
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				State = 3251; Match(MAX_STATEMENT_TIME_SYMBOL);
				State = 3252; Match(EQUAL_OPERATOR);
				State = 3253; real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseListContext : ParserRuleContext {
		public LockingClauseContext[] lockingClause() {
			return GetRuleContexts<LockingClauseContext>();
		}
		public LockingClauseContext lockingClause(int i) {
			return GetRuleContext<LockingClauseContext>(i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClauseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockingClauseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockingClauseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockingClauseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseListContext lockingClauseList() {
		LockingClauseListContext _localctx = new LockingClauseListContext(Context, State);
		EnterRule(_localctx, 344, RULE_lockingClauseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3256; lockingClause();
				}
				}
				State = 3259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return GetRuleContext<LockStrenghContext>(0);
		}
		public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		public LockedRowActionContext lockedRowAction() {
			return GetRuleContext<LockedRowActionContext>(0);
		}
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseContext lockingClause() {
		LockingClauseContext _localctx = new LockingClauseContext(Context, State);
		EnterRule(_localctx, 346, RULE_lockingClause);
		try {
			State = 3276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3261; Match(FOR_SYMBOL);
				State = 3262; lockStrengh();
				State = 3266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
				case 1:
					{
					State = 3263;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3264; Match(OF_SYMBOL);
					State = 3265; tableAliasRefList();
					}
					break;
				}
				State = 3270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
				case 1:
					{
					State = 3268;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3269; lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3272; Match(LOCK_SYMBOL);
				State = 3273; Match(IN_SYMBOL);
				State = 3274; Match(SHARE_SYMBOL);
				State = 3275; Match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStrenghContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStrengh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStrengh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStrengh(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStrengh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStrenghContext lockStrengh() {
		LockStrenghContext _localctx = new LockStrenghContext(Context, State);
		EnterRule(_localctx, 348, RULE_lockStrengh);
		try {
			State = 3281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3278; Match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3279;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3280; Match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedRowActionContext : ParserRuleContext {
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockedRowAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockedRowAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockedRowAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockedRowAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockedRowActionContext lockedRowAction() {
		LockedRowActionContext _localctx = new LockedRowActionContext(Context, State);
		EnterRule(_localctx, 350, RULE_lockedRowAction);
		try {
			State = 3286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3283; Match(SKIP_SYMBOL);
				State = 3284; Match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3285; Match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemListContext : ParserRuleContext {
		public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemListContext selectItemList() {
		SelectItemListContext _localctx = new SelectItemListContext(Context, State);
		EnterRule(_localctx, 352, RULE_selectItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				{
				State = 3288; selectItem();
				}
				break;
			case 2:
				{
				State = 3289; Match(MULT_OPERATOR);
				}
				break;
			}
			State = 3296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3292; Match(COMMA_SYMBOL);
					State = 3293; selectItem();
					}
					} 
				}
				State = 3298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 354, RULE_selectItem);
		try {
			State = 3304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3299; tableWild();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3300; expr(0);
				State = 3302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
				case 1:
					{
					State = 3301; selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelectAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelectAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 356, RULE_selectAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 3306; Match(AS_SYMBOL);
				}
				break;
			}
			State = 3311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				{
				State = 3309; identifier();
				}
				break;
			case 2:
				{
				State = 3310; textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ITerminalNode WHERE_SYMBOL() { return GetToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3313; Match(WHERE_SYMBOL);
			State = 3314; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return GetRuleContext<EscapedTableReferenceContext>(0);
		}
		public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 360, RULE_tableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				{
				State = 3316; tableFactor();
				}
				break;
			case 2:
				{
				State = 3317; Match(OPEN_CURLY_SYMBOL);
				State = 3321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
				case 1:
					{
					State = 3318;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 3319; identifier();
					}
					break;
				case 2:
					{
					State = 3320; Match(OJ_SYMBOL);
					}
					break;
				}
				State = 3323; escapedTableReference();
				State = 3324; Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			State = 3331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3328; joinedTable();
					}
					} 
				}
				State = 3333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTableReferenceContext : ParserRuleContext {
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedTableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEscapedTableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEscapedTableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTableReferenceContext escapedTableReference() {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(Context, State);
		EnterRule(_localctx, 362, RULE_escapedTableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3334; tableFactor();
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (INNER_SYMBOL - 239)) | (1L << (JOIN_SYMBOL - 239)) | (1L << (LEFT_SYMBOL - 239)))) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				State = 3335; joinedTable();
				}
				}
				State = 3340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedTableContext : ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return GetRuleContext<InnerJoinTypeContext>(0);
		}
		public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return GetRuleContext<OuterJoinTypeContext>(0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return GetRuleContext<NaturalJoinTypeContext>(0);
		}
		public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJoinedTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJoinedTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinedTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinedTableContext joinedTable() {
		JoinedTableContext _localctx = new JoinedTableContext(Context, State);
		EnterRule(_localctx, 364, RULE_joinedTable);
		try {
			State = 3360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3341; innerJoinType();
				State = 3342; tableReference();
				State = 3347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3343; Match(ON_SYMBOL);
					State = 3344; expr(0);
					}
					break;
				case 2:
					{
					State = 3345; Match(USING_SYMBOL);
					State = 3346; identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3349; outerJoinType();
				State = 3350; tableReference();
				State = 3355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 3351; Match(ON_SYMBOL);
					State = 3352; expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					State = 3353; Match(USING_SYMBOL);
					State = 3354; identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3357; naturalJoinType();
				State = 3358; tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NaturalJoinTypeContext : ParserRuleContext {
		public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naturalJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NaturalJoinTypeContext naturalJoinType() {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(Context, State);
		EnterRule(_localctx, 366, RULE_naturalJoinType);
		int _la;
		try {
			State = 3373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3362; Match(NATURAL_SYMBOL);
				State = 3364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					State = 3363; Match(INNER_SYMBOL);
					}
				}

				State = 3366; Match(JOIN_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3367; Match(NATURAL_SYMBOL);
				State = 3368;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					State = 3369; Match(OUTER_SYMBOL);
					}
				}

				State = 3372; Match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerJoinTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode INNER_SYMBOL() { return GetToken(MySQLParser.INNER_SYMBOL, 0); }
		public ITerminalNode CROSS_SYMBOL() { return GetToken(MySQLParser.CROSS_SYMBOL, 0); }
		public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInnerJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInnerJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerJoinTypeContext innerJoinType() {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(Context, State);
		EnterRule(_localctx, 368, RULE_innerJoinType);
		int _la;
		try {
			State = 3380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					State = 3375;
					_localctx.type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3378; Match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3379; _localctx.type = Match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode OUTER_SYMBOL() { return GetToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOuterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOuterJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinTypeContext outerJoinType() {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(Context, State);
		EnterRule(_localctx, 370, RULE_outerJoinType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				State = 3383; Match(OUTER_SYMBOL);
				}
			}

			State = 3386; Match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFactorContext : ParserRuleContext {
		public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public DerivedTableContext derivedTable() {
			return GetRuleContext<DerivedTableContext>(0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableFunctionContext tableFunction() {
			return GetRuleContext<TableFunctionContext>(0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFactorContext tableFactor() {
		TableFactorContext _localctx = new TableFactorContext(Context, State);
		EnterRule(_localctx, 372, RULE_tableFactor);
		try {
			State = 3394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3388; singleTable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3389; singleTableParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3390; derivedTable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3391; tableReferenceListParens();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3392;
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				State = 3393; tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public IndexHintListContext indexHintList() {
			return GetRuleContext<IndexHintListContext>(0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableContext singleTable() {
		SingleTableContext _localctx = new SingleTableContext(Context, State);
		EnterRule(_localctx, 374, RULE_singleTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396; tableRef();
			State = 3398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 3397; usePartition();
				}
				break;
			}
			State = 3401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 3400; tableAlias();
				}
				break;
			}
			State = 3404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 3403; indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTableParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSingleTableParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSingleTableParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTableParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableParensContext singleTableParens() {
		SingleTableParensContext _localctx = new SingleTableParensContext(Context, State);
		EnterRule(_localctx, 376, RULE_singleTableParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3406; Match(OPEN_PAR_SYMBOL);
			State = 3409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3407; singleTable();
				}
				break;
			case 2:
				{
				State = 3408; singleTableParens();
				}
				break;
			}
			State = 3411; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ITerminalNode LATERAL_SYMBOL() { return GetToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDerivedTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDerivedTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTableContext derivedTable() {
		DerivedTableContext _localctx = new DerivedTableContext(Context, State);
		EnterRule(_localctx, 378, RULE_derivedTable);
		try {
			State = 3430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3413; subquery();
				State = 3415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 3414; tableAlias();
					}
					break;
				}
				State = 3419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
				case 1:
					{
					State = 3417;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3418; columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3421;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 3422; Match(LATERAL_SYMBOL);
				State = 3423; subquery();
				State = 3425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 3424; tableAlias();
					}
					break;
				}
				State = 3428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
				case 1:
					{
					State = 3427; columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceListParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceListParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceListParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReferenceListParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListParensContext tableReferenceListParens() {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(Context, State);
		EnterRule(_localctx, 380, RULE_tableReferenceListParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3432; Match(OPEN_PAR_SYMBOL);
			State = 3435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				{
				State = 3433; tableReferenceList();
				}
				break;
			case 2:
				{
				State = 3434; tableReferenceListParens();
				}
				break;
			}
			State = 3437; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionContext : ParserRuleContext {
		public ITerminalNode JSON_TABLE_SYMBOL() { return GetToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionContext tableFunction() {
		TableFunctionContext _localctx = new TableFunctionContext(Context, State);
		EnterRule(_localctx, 382, RULE_tableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439; Match(JSON_TABLE_SYMBOL);
			State = 3440; Match(OPEN_PAR_SYMBOL);
			State = 3441; expr(0);
			State = 3442; Match(COMMA_SYMBOL);
			State = 3443; textStringLiteral();
			State = 3444; columnsClause();
			State = 3445; Match(CLOSE_PAR_SYMBOL);
			State = 3447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 3446; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsClauseContext : ParserRuleContext {
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public JtColumnContext[] jtColumn() {
			return GetRuleContexts<JtColumnContext>();
		}
		public JtColumnContext jtColumn(int i) {
			return GetRuleContext<JtColumnContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnsClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnsClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnsClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsClauseContext columnsClause() {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(Context, State);
		EnterRule(_localctx, 384, RULE_columnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3449; Match(COLUMNS_SYMBOL);
			State = 3450; Match(OPEN_PAR_SYMBOL);
			State = 3451; jtColumn();
			State = 3456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3452; Match(COMMA_SYMBOL);
				State = 3453; jtColumn();
				}
				}
				State = 3458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3459; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtColumnContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJtColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJtColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJtColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JtColumnContext jtColumn() {
		JtColumnContext _localctx = new JtColumnContext(Context, State);
		EnterRule(_localctx, 386, RULE_jtColumn);
		int _la;
		try {
			State = 3484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3461; identifier();
				State = 3462; Match(FOR_SYMBOL);
				State = 3463; Match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3465; identifier();
				State = 3466; dataType();
				State = 3469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3467;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 3468; collate();
					}
					break;
				}
				State = 3472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 3471; Match(EXISTS_SYMBOL);
					}
				}

				State = 3474; Match(PATH_SYMBOL);
				State = 3475; textStringLiteral();
				State = 3477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3476; onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3479; Match(NESTED_SYMBOL);
				State = 3480; Match(PATH_SYMBOL);
				State = 3481; textStringLiteral();
				State = 3482; columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorContext : ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrError; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnEmptyOrError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorContext onEmptyOrError() {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(Context, State);
		EnterRule(_localctx, 388, RULE_onEmptyOrError);
		int _la;
		try {
			State = 3494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3486; onEmpty();
				State = 3488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3487; onError();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3490; onError();
				State = 3492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3491; onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyContext : ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode EMPTY_SYMBOL() { return GetToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmpty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyContext onEmpty() {
		OnEmptyContext _localctx = new OnEmptyContext(Context, State);
		EnterRule(_localctx, 390, RULE_onEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3496; jtOnResponse();
			State = 3497; Match(ON_SYMBOL);
			State = 3498; Match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorContext : ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onError; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorContext onError() {
		OnErrorContext _localctx = new OnErrorContext(Context, State);
		EnterRule(_localctx, 392, RULE_onError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3500; jtOnResponse();
			State = 3501; Match(ON_SYMBOL);
			State = 3502; Match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtOnResponseContext : ParserRuleContext {
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtOnResponse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJtOnResponse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJtOnResponse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJtOnResponse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JtOnResponseContext jtOnResponse() {
		JtOnResponseContext _localctx = new JtOnResponseContext(Context, State);
		EnterRule(_localctx, 394, RULE_jtOnResponse);
		try {
			State = 3508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3504; Match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3505; Match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3506; Match(DEFAULT_SYMBOL);
				State = 3507; textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOptionContext : ParserRuleContext {
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionOptionContext unionOption() {
		UnionOptionContext _localctx = new UnionOptionContext(Context, State);
		EnterRule(_localctx, 396, RULE_unionOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 398, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				{
				State = 3512; Match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3513;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3514; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 3517; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintListContext : ParserRuleContext {
		public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintListContext indexHintList() {
		IndexHintListContext _localctx = new IndexHintListContext(Context, State);
		EnterRule(_localctx, 400, RULE_indexHintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3519; indexHint();
			State = 3524;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3520; Match(COMMA_SYMBOL);
					State = 3521; indexHint();
					}
					} 
				}
				State = 3526;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return GetRuleContext<IndexListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return GetRuleContext<IndexHintClauseContext>(0);
		}
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 402, RULE_indexHint);
		int _la;
		try {
			State = 3547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3527; indexHintType();
				State = 3528; keyOrIndex();
				State = 3530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3529; indexHintClause();
					}
				}

				State = 3532; Match(OPEN_PAR_SYMBOL);
				State = 3533; indexList();
				State = 3534; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3536; Match(USE_SYMBOL);
				State = 3537; keyOrIndex();
				State = 3539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3538; indexHintClause();
					}
				}

				State = 3541; Match(OPEN_PAR_SYMBOL);
				State = 3543;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
				case 1:
					{
					State = 3542; indexList();
					}
					break;
				}
				State = 3545; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 404, RULE_indexHintType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyOrIndexContext : ParserRuleContext {
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyOrIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyOrIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyOrIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyOrIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyOrIndexContext keyOrIndex() {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(Context, State);
		EnterRule(_localctx, 406, RULE_keyOrIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3551;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintKeyTypeContext : ParserRuleContext {
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintKeyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintKeyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintKeyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintKeyTypeContext constraintKeyType() {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(Context, State);
		EnterRule(_localctx, 408, RULE_constraintKeyType);
		int _la;
		try {
			State = 3559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3553; Match(PRIMARY_SYMBOL);
				State = 3554; Match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3555; Match(UNIQUE_SYMBOL);
				State = 3557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 3556; keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintClauseContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode ORDER_SYMBOL() { return GetToken(MySQLParser.ORDER_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexHintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexHintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintClauseContext indexHintClause() {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(Context, State);
		EnterRule(_localctx, 410, RULE_indexHintClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561; Match(FOR_SYMBOL);
			State = 3567;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN_SYMBOL:
				{
				State = 3562; Match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				State = 3563; Match(ORDER_SYMBOL);
				State = 3564; Match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3565; Match(GROUP_SYMBOL);
				State = 3566; Match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListContext : ParserRuleContext {
		public IndexListElementContext[] indexListElement() {
			return GetRuleContexts<IndexListElementContext>();
		}
		public IndexListElementContext indexListElement(int i) {
			return GetRuleContext<IndexListElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexListContext indexList() {
		IndexListContext _localctx = new IndexListContext(Context, State);
		EnterRule(_localctx, 412, RULE_indexList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569; indexListElement();
			State = 3574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3570; Match(COMMA_SYMBOL);
				State = 3571; indexListElement();
				}
				}
				State = 3576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexListElementContext indexListElement() {
		IndexListElementContext _localctx = new IndexListElementContext(Context, State);
		EnterRule(_localctx, 414, RULE_indexListElement);
		try {
			State = 3579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3577; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3578; Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 416, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				{
				State = 3581;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3582; withClause();
				}
				break;
			}
			State = 3585; Match(UPDATE_SYMBOL);
			State = 3587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				{
				State = 3586; Match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			State = 3590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
			case 1:
				{
				State = 3589; Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3592; tableReferenceList();
			State = 3593; Match(SET_SYMBOL);
			State = 3594; updateList();
			State = 3596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 3595; whereClause();
				}
			}

			State = 3599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3598; orderClause();
				}
			}

			State = 3602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 3601; simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOrLockingStatementContext : ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		public XaStatementContext xaStatement() {
			return GetRuleContext<XaStatementContext>(0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOrLockingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionOrLockingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionOrLockingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOrLockingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOrLockingStatementContext transactionOrLockingStatement() {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(Context, State);
		EnterRule(_localctx, 418, RULE_transactionOrLockingStatement);
		try {
			State = 3608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3604; transactionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3605; savepointStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3606; lockStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3607; xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicContext[] transactionCharacteristic() {
			return GetRuleContexts<TransactionCharacteristicContext>();
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return GetRuleContext<TransactionCharacteristicContext>(i);
		}
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 420, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			State = 3635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3610; Match(START_SYMBOL);
				State = 3611; Match(TRANSACTION_SYMBOL);
				State = 3615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3612; transactionCharacteristic();
						}
						} 
					}
					State = 3617;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
				}
				}
				break;
			case COMMIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3618; Match(COMMIT_SYMBOL);
				State = 3620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3619; Match(WORK_SYMBOL);
					}
				}

				State = 3627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_SYMBOL) {
					{
					State = 3622; Match(AND_SYMBOL);
					State = 3624;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3623; Match(NO_SYMBOL);
						}
					}

					State = 3626; Match(CHAIN_SYMBOL);
					}
				}

				State = 3633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					State = 3630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3629; Match(NO_SYMBOL);
						}
					}

					State = 3632; Match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 422, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3637; Match(BEGIN_SYMBOL);
			State = 3639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				State = 3638; Match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionCharacteristic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicContext transactionCharacteristic() {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(Context, State);
		EnterRule(_localctx, 424, RULE_transactionCharacteristic);
		int _la;
		try {
			State = 3647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3641; Match(WITH_SYMBOL);
				State = 3642; Match(CONSISTENT_SYMBOL);
				State = 3643; Match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3644;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 3645; Match(READ_SYMBOL);
				State = 3646;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySQLParser.NO_SYMBOL); }
		public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 426, RULE_savepointStatement);
		int _la;
		try {
			State = 3678;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3649; Match(SAVEPOINT_SYMBOL);
				State = 3650; identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3651; Match(ROLLBACK_SYMBOL);
				State = 3653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3652; Match(WORK_SYMBOL);
					}
				}

				State = 3673;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3655; Match(TO_SYMBOL);
					State = 3657;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
					case 1:
						{
						State = 3656; Match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					State = 3659; identifier();
					}
					break;
				case Eof:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
				case SEMICOLON_SYMBOL:
					{
					State = 3665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 3660; Match(AND_SYMBOL);
						State = 3662;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3661; Match(NO_SYMBOL);
							}
						}

						State = 3664; Match(CHAIN_SYMBOL);
						}
					}

					State = 3671;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						State = 3668;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3667; Match(NO_SYMBOL);
							}
						}

						State = 3670; Match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3675; Match(RELEASE_SYMBOL);
				State = 3676; Match(SAVEPOINT_SYMBOL);
				State = 3677; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public LockItemContext[] lockItem() {
			return GetRuleContexts<LockItemContext>();
		}
		public LockItemContext lockItem(int i) {
			return GetRuleContext<LockItemContext>(i);
		}
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 428, RULE_lockStatement);
		int _la;
		try {
			State = 3702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3680; Match(LOCK_SYMBOL);
				State = 3681;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3682; lockItem();
				State = 3687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3683; Match(COMMA_SYMBOL);
					State = 3684; lockItem();
					}
					}
					State = 3689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3690;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3691; Match(LOCK_SYMBOL);
				State = 3692; Match(INSTANCE_SYMBOL);
				State = 3693; Match(FOR_SYMBOL);
				State = 3694; Match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3695; Match(UNLOCK_SYMBOL);
				State = 3700;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 3696; Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 3697; Match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 3698;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3699; Match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockItemContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockItemContext lockItem() {
		LockItemContext _localctx = new LockItemContext(Context, State);
		EnterRule(_localctx, 430, RULE_lockItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704; tableRef();
			State = 3706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
			case 1:
				{
				State = 3705; tableAlias();
				}
				break;
			}
			State = 3708; lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 432, RULE_lockOption);
		int _la;
		try {
			State = 3718;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3710; Match(READ_SYMBOL);
				State = 3712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					State = 3711; Match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					State = 3714; Match(LOW_PRIORITY_SYMBOL);
					}
				}

				State = 3717; Match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStatementContext : ParserRuleContext {
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return GetRuleContext<XaConvertContext>(0);
		}
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode JOIN_SYMBOL() { return GetToken(MySQLParser.JOIN_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStatementContext xaStatement() {
		XaStatementContext _localctx = new XaStatementContext(Context, State);
		EnterRule(_localctx, 434, RULE_xaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3720; Match(XA_SYMBOL);
			State = 3747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				State = 3721;
				_la = TokenStream.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3722; xid();
				State = 3724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					State = 3723;
					_la = TokenStream.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				State = 3726; Match(END_SYMBOL);
				State = 3727; xid();
				State = 3733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					State = 3728; Match(SUSPEND_SYMBOL);
					State = 3731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						State = 3729; Match(FOR_SYMBOL);
						State = 3730; Match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				State = 3735; Match(PREPARE_SYMBOL);
				State = 3736; xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				State = 3737; Match(COMMIT_SYMBOL);
				State = 3738; xid();
				State = 3741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					State = 3739; Match(ONE_SYMBOL);
					State = 3740; Match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				State = 3743; Match(ROLLBACK_SYMBOL);
				State = 3744; xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				State = 3745; Match(RECOVER_SYMBOL);
				State = 3746; xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaConvertContext : ParserRuleContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaConvert; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXaConvert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXaConvert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaConvertContext xaConvert() {
		XaConvertContext _localctx = new XaConvertContext(Context, State);
		EnterRule(_localctx, 436, RULE_xaConvert);
		int _la;
		try {
			State = 3755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3749;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 3752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					State = 3750; Match(CONVERT_SYMBOL);
					State = 3751; Match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 438, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3757; textString();
			State = 3764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 3758; Match(COMMA_SYMBOL);
				State = 3759; textString();
				State = 3762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3760; Match(COMMA_SYMBOL);
					State = 3761; ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		public ITerminalNode PURGE_SYMBOL() { return GetToken(MySQLParser.PURGE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ResetOptionContext[] resetOption() {
			return GetRuleContexts<ResetOptionContext>();
		}
		public ResetOptionContext resetOption(int i) {
			return GetRuleContext<ResetOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SlaveContext slave() {
			return GetRuleContext<SlaveContext>(0);
		}
		public ChangeReplicationContext changeReplication() {
			return GetRuleContext<ChangeReplicationContext>(0);
		}
		public ReplicationLoadContext replicationLoad() {
			return GetRuleContext<ReplicationLoadContext>(0);
		}
		public GroupReplicationContext groupReplication() {
			return GetRuleContext<GroupReplicationContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 440, RULE_replicationStatement);
		int _la;
		try {
			State = 3799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3766; Match(PURGE_SYMBOL);
				State = 3767;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3768; Match(LOGS_SYMBOL);
				State = 3773;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3769; Match(TO_SYMBOL);
					State = 3770; textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					State = 3771; Match(BEFORE_SYMBOL);
					State = 3772; expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3775; changeMaster();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3776; Match(RESET_SYMBOL);
				State = 3777; resetOption();
				State = 3782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3778; Match(COMMA_SYMBOL);
					State = 3779; resetOption();
					}
					}
					State = 3784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3785;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 3786; Match(RESET_SYMBOL);
				State = 3787; Match(PERSIST_SYMBOL);
				State = 3791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_SYMBOL) {
					{
					State = 3788; ifExists();
					State = 3789; identifier();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3793; slave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3794;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 3795; changeReplication();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3796; replicationLoad();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3797;
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				State = 3798; groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return GetRuleContext<MasterResetOptionsContext>(0);
		}
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResetOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResetOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetOptionContext resetOption() {
		ResetOptionContext _localctx = new ResetOptionContext(Context, State);
		EnterRule(_localctx, 442, RULE_resetOption);
		try {
			State = 3815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3801; _localctx.option = Match(MASTER_SYMBOL);
				State = 3803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
				case 1:
					{
					State = 3802; masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3805;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3806; _localctx.option = Match(QUERY_SYMBOL);
				State = 3807; Match(CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3808; _localctx.option = Match(SLAVE_SYMBOL);
				State = 3810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
				case 1:
					{
					State = 3809; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 3813;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
				case 1:
					{
					State = 3812; channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterResetOptionsContext : ParserRuleContext {
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterResetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterResetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterResetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterResetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterResetOptionsContext masterResetOptions() {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(Context, State);
		EnterRule(_localctx, 444, RULE_masterResetOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3817;
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			State = 3818; Match(TO_SYMBOL);
			State = 3823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				{
				State = 3819;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3820; real_ulong_number();
				}
				break;
			case 2:
				{
				State = 3821;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 3822; real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationLoadContext : ParserRuleContext {
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationLoad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplicationLoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplicationLoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationLoadContext replicationLoad() {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(Context, State);
		EnterRule(_localctx, 446, RULE_replicationLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3825; Match(LOAD_SYMBOL);
			State = 3829;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_SYMBOL:
				{
				State = 3826; Match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				State = 3827; Match(TABLE_SYMBOL);
				State = 3828; tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3831; Match(FROM_SYMBOL);
			State = 3832; Match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return GetRuleContext<ChangeMasterOptionsContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 448, RULE_changeMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3834; Match(CHANGE_SYMBOL);
			State = 3835; Match(MASTER_SYMBOL);
			State = 3836; Match(TO_SYMBOL);
			State = 3837; changeMasterOptions();
			State = 3839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				{
				State = 3838; channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterOptionsContext : ParserRuleContext {
		public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMasterOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeMasterOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeMasterOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMasterOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterOptionsContext changeMasterOptions() {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(Context, State);
		EnterRule(_localctx, 450, RULE_changeMasterOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3841; masterOption();
			State = 3846;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3842; Match(COMMA_SYMBOL);
					State = 3843; masterOption();
					}
					} 
				}
				State = 3848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public ITerminalNode MASTER_BIND_SYMBOL() { return GetToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
			return GetRuleContext<MasterTlsCiphersuitesDefContext>(0);
		}
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return GetRuleContext<ServerIdListContext>(0);
		}
		public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public PrivilegeCheckDefContext privilegeCheckDef() {
			return GetRuleContext<PrivilegeCheckDefContext>(0);
		}
		public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return GetRuleContext<TablePrimaryKeyCheckDefContext>(0);
		}
		public MasterFileDefContext masterFileDef() {
			return GetRuleContext<MasterFileDefContext>(0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 452, RULE_masterOption);
		try {
			State = 3940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3849; Match(MASTER_HOST_SYMBOL);
				State = 3850; Match(EQUAL_OPERATOR);
				State = 3851; textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3852; Match(NETWORK_NAMESPACE_SYMBOL);
				State = 3853; Match(EQUAL_OPERATOR);
				State = 3854; textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3855; Match(MASTER_BIND_SYMBOL);
				State = 3856; Match(EQUAL_OPERATOR);
				State = 3857; textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3858; Match(MASTER_USER_SYMBOL);
				State = 3859; Match(EQUAL_OPERATOR);
				State = 3860; textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3861; Match(MASTER_PASSWORD_SYMBOL);
				State = 3862; Match(EQUAL_OPERATOR);
				State = 3863; textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3864; Match(MASTER_PORT_SYMBOL);
				State = 3865; Match(EQUAL_OPERATOR);
				State = 3866; ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3867; Match(MASTER_CONNECT_RETRY_SYMBOL);
				State = 3868; Match(EQUAL_OPERATOR);
				State = 3869; ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3870; Match(MASTER_RETRY_COUNT_SYMBOL);
				State = 3871; Match(EQUAL_OPERATOR);
				State = 3872; ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3873; Match(MASTER_DELAY_SYMBOL);
				State = 3874; Match(EQUAL_OPERATOR);
				State = 3875; ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3876; Match(MASTER_SSL_SYMBOL);
				State = 3877; Match(EQUAL_OPERATOR);
				State = 3878; ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3879; Match(MASTER_SSL_CA_SYMBOL);
				State = 3880; Match(EQUAL_OPERATOR);
				State = 3881; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3882; Match(MASTER_SSL_CAPATH_SYMBOL);
				State = 3883; Match(EQUAL_OPERATOR);
				State = 3884; textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3885; Match(MASTER_TLS_VERSION_SYMBOL);
				State = 3886; Match(EQUAL_OPERATOR);
				State = 3887; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3888; Match(MASTER_SSL_CERT_SYMBOL);
				State = 3889; Match(EQUAL_OPERATOR);
				State = 3890; textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3891; Match(MASTER_TLS_CIPHERSUITES_SYMBOL);
				State = 3892; Match(EQUAL_OPERATOR);
				State = 3893; masterTlsCiphersuitesDef();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3894; Match(MASTER_SSL_CIPHER_SYMBOL);
				State = 3895; Match(EQUAL_OPERATOR);
				State = 3896; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3897; Match(MASTER_SSL_KEY_SYMBOL);
				State = 3898; Match(EQUAL_OPERATOR);
				State = 3899; textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3900; Match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				State = 3901; Match(EQUAL_OPERATOR);
				State = 3902; ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3903; Match(MASTER_SSL_CRL_SYMBOL);
				State = 3904; Match(EQUAL_OPERATOR);
				State = 3905; textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3906; Match(MASTER_SSL_CRLPATH_SYMBOL);
				State = 3907; Match(EQUAL_OPERATOR);
				State = 3908; textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3909; Match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				State = 3910; Match(EQUAL_OPERATOR);
				State = 3911; textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3912; Match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				State = 3913; Match(EQUAL_OPERATOR);
				State = 3914; ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3915; Match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				State = 3916; Match(EQUAL_OPERATOR);
				State = 3917; ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3918; Match(IGNORE_SERVER_IDS_SYMBOL);
				State = 3919; Match(EQUAL_OPERATOR);
				State = 3920; serverIdList();
				}
				break;
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3921; Match(MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				State = 3922; Match(EQUAL_OPERATOR);
				State = 3923; textStringLiteral();
				}
				break;
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 3924; Match(MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				State = 3925; Match(EQUAL_OPERATOR);
				State = 3926; ulong_number();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				EnterOuterAlt(_localctx, 27);
				{
				State = 3927; Match(MASTER_AUTO_POSITION_SYMBOL);
				State = 3928; Match(EQUAL_OPERATOR);
				State = 3929; ulong_number();
				}
				break;
			case PRIVILEGE_CHECKS_USER_SYMBOL:
				EnterOuterAlt(_localctx, 28);
				{
				State = 3930; Match(PRIVILEGE_CHECKS_USER_SYMBOL);
				State = 3931; Match(EQUAL_OPERATOR);
				State = 3932; privilegeCheckDef();
				}
				break;
			case REQUIRE_ROW_FORMAT_SYMBOL:
				EnterOuterAlt(_localctx, 29);
				{
				State = 3933; Match(REQUIRE_ROW_FORMAT_SYMBOL);
				State = 3934; Match(EQUAL_OPERATOR);
				State = 3935; ulong_number();
				}
				break;
			case REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 3936; Match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				State = 3937; Match(EQUAL_OPERATOR);
				State = 3938; tablePrimaryKeyCheckDef();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 3939; masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeCheckDefContext : ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeCheckDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeCheckDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeCheckDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegeCheckDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeCheckDefContext privilegeCheckDef() {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(Context, State);
		EnterRule(_localctx, 454, RULE_privilegeCheckDef);
		try {
			State = 3944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3942; userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3943; Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePrimaryKeyCheckDefContext : ParserRuleContext {
		public ITerminalNode STREAM_SYMBOL() { return GetToken(MySQLParser.STREAM_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode OFF_SYMBOL() { return GetToken(MySQLParser.OFF_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePrimaryKeyCheckDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablePrimaryKeyCheckDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablePrimaryKeyCheckDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePrimaryKeyCheckDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(Context, State);
		EnterRule(_localctx, 456, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3946;
			_la = TokenStream.LA(1);
			if ( !(_la==ON_SYMBOL || _la==STREAM_SYMBOL || _la==OFF_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterTlsCiphersuitesDefContext : ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterTlsCiphersuitesDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterTlsCiphersuitesDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterTlsCiphersuitesDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterTlsCiphersuitesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
		MasterTlsCiphersuitesDefContext _localctx = new MasterTlsCiphersuitesDefContext(Context, State);
		EnterRule(_localctx, 458, RULE_masterTlsCiphersuitesDef);
		try {
			State = 3950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3948; textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3949; Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterFileDefContext : ParserRuleContext {
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterFileDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterMasterFileDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitMasterFileDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterFileDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterFileDefContext masterFileDef() {
		MasterFileDefContext _localctx = new MasterFileDefContext(Context, State);
		EnterRule(_localctx, 460, RULE_masterFileDef);
		try {
			State = 3964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3952; Match(MASTER_LOG_FILE_SYMBOL);
				State = 3953; Match(EQUAL_OPERATOR);
				State = 3954; textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3955; Match(MASTER_LOG_POS_SYMBOL);
				State = 3956; Match(EQUAL_OPERATOR);
				State = 3957; ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3958; Match(RELAY_LOG_FILE_SYMBOL);
				State = 3959; Match(EQUAL_OPERATOR);
				State = 3960; textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3961; Match(RELAY_LOG_POS_SYMBOL);
				State = 3962; Match(EQUAL_OPERATOR);
				State = 3963; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerIdListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverIdList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerIdListContext serverIdList() {
		ServerIdListContext _localctx = new ServerIdListContext(Context, State);
		EnterRule(_localctx, 462, RULE_serverIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3966; Match(OPEN_PAR_SYMBOL);
			State = 3975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) {
				{
				State = 3967; ulong_number();
				State = 3972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3968; Match(COMMA_SYMBOL);
					State = 3969; ulong_number();
					}
					}
					State = 3974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3977; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationContext : ParserRuleContext {
		public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public FilterDefinitionContext[] filterDefinition() {
			return GetRuleContexts<FilterDefinitionContext>();
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return GetRuleContext<FilterDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChangeReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChangeReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationContext changeReplication() {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(Context, State);
		EnterRule(_localctx, 464, RULE_changeReplication);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3979; Match(CHANGE_SYMBOL);
			State = 3980; Match(REPLICATION_SYMBOL);
			State = 3981; Match(FILTER_SYMBOL);
			State = 3982; filterDefinition();
			State = 3987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,451,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3983; Match(COMMA_SYMBOL);
					State = 3984; filterDefinition();
					}
					} 
				}
				State = 3989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,451,Context);
			}
			State = 3992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				{
				State = 3990;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3991; channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDefinitionContext : ParserRuleContext {
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return GetRuleContext<FilterDbListContext>(0);
		}
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return GetRuleContext<FilterTableListContext>(0);
		}
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return GetRuleContext<FilterStringListContext>(0);
		}
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return GetRuleContext<FilterDbPairListContext>(0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDefinitionContext filterDefinition() {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(Context, State);
		EnterRule(_localctx, 466, RULE_filterDefinition);
		int _la;
		try {
			State = 4043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3994; Match(REPLICATE_DO_DB_SYMBOL);
				State = 3995; Match(EQUAL_OPERATOR);
				State = 3996; Match(OPEN_PAR_SYMBOL);
				State = 3998;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
				case 1:
					{
					State = 3997; filterDbList();
					}
					break;
				}
				State = 4000; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4001; Match(REPLICATE_IGNORE_DB_SYMBOL);
				State = 4002; Match(EQUAL_OPERATOR);
				State = 4003; Match(OPEN_PAR_SYMBOL);
				State = 4005;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
				case 1:
					{
					State = 4004; filterDbList();
					}
					break;
				}
				State = 4007; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4008; Match(REPLICATE_DO_TABLE_SYMBOL);
				State = 4009; Match(EQUAL_OPERATOR);
				State = 4010; Match(OPEN_PAR_SYMBOL);
				State = 4012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
				case 1:
					{
					State = 4011; filterTableList();
					}
					break;
				}
				State = 4014; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4015; Match(REPLICATE_IGNORE_TABLE_SYMBOL);
				State = 4016; Match(EQUAL_OPERATOR);
				State = 4017; Match(OPEN_PAR_SYMBOL);
				State = 4019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
				case 1:
					{
					State = 4018; filterTableList();
					}
					break;
				}
				State = 4021; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4022; Match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				State = 4023; Match(EQUAL_OPERATOR);
				State = 4024; Match(OPEN_PAR_SYMBOL);
				State = 4026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
				case 1:
					{
					State = 4025; filterStringList();
					}
					break;
				}
				State = 4028; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4029; Match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				State = 4030; Match(EQUAL_OPERATOR);
				State = 4031; Match(OPEN_PAR_SYMBOL);
				State = 4033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 4032; filterStringList();
					}
					break;
				}
				State = 4035; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4036; Match(REPLICATE_REWRITE_DB_SYMBOL);
				State = 4037; Match(EQUAL_OPERATOR);
				State = 4038; Match(OPEN_PAR_SYMBOL);
				State = 4040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 4039; filterDbPairList();
					}
				}

				State = 4042; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbListContext : ParserRuleContext {
		public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDbList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbListContext filterDbList() {
		FilterDbListContext _localctx = new FilterDbListContext(Context, State);
		EnterRule(_localctx, 468, RULE_filterDbList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4045; schemaRef();
			State = 4050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4046; Match(COMMA_SYMBOL);
				State = 4047; schemaRef();
				}
				}
				State = 4052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableListContext : ParserRuleContext {
		public FilterTableRefContext[] filterTableRef() {
			return GetRuleContexts<FilterTableRefContext>();
		}
		public FilterTableRefContext filterTableRef(int i) {
			return GetRuleContext<FilterTableRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterTableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableListContext filterTableList() {
		FilterTableListContext _localctx = new FilterTableListContext(Context, State);
		EnterRule(_localctx, 470, RULE_filterTableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053; filterTableRef();
			State = 4058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4054; Match(COMMA_SYMBOL);
				State = 4055; filterTableRef();
				}
				}
				State = 4060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterStringListContext : ParserRuleContext {
		public FilterWildDbTableStringContext[] filterWildDbTableString() {
			return GetRuleContexts<FilterWildDbTableStringContext>();
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return GetRuleContext<FilterWildDbTableStringContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterStringList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterStringList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterStringList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterStringListContext filterStringList() {
		FilterStringListContext _localctx = new FilterStringListContext(Context, State);
		EnterRule(_localctx, 472, RULE_filterStringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4061; filterWildDbTableString();
			State = 4066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4062; Match(COMMA_SYMBOL);
				State = 4063; filterWildDbTableString();
				}
				}
				State = 4068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterWildDbTableStringContext : ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterWildDbTableString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterWildDbTableString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterWildDbTableString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterWildDbTableString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterWildDbTableStringContext filterWildDbTableString() {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(Context, State);
		EnterRule(_localctx, 474, RULE_filterWildDbTableString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4069; textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbPairListContext : ParserRuleContext {
		public SchemaIdentifierPairContext[] schemaIdentifierPair() {
			return GetRuleContexts<SchemaIdentifierPairContext>();
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return GetRuleContext<SchemaIdentifierPairContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbPairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterDbPairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterDbPairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterDbPairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbPairListContext filterDbPairList() {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(Context, State);
		EnterRule(_localctx, 476, RULE_filterDbPairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4071; schemaIdentifierPair();
			State = 4076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4072; Match(COMMA_SYMBOL);
				State = 4073; schemaIdentifierPair();
				}
				}
				State = 4078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveContext : ParserRuleContext {
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return GetRuleContext<SlaveConnectionOptionsContext>(0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return GetRuleContext<SlaveThreadOptionsContext>(0);
		}
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return GetRuleContext<SlaveUntilOptionsContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slave; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlave(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlave(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveContext slave() {
		SlaveContext _localctx = new SlaveContext(Context, State);
		EnterRule(_localctx, 478, RULE_slave);
		try {
			State = 4100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4079; Match(START_SYMBOL);
				State = 4080; Match(SLAVE_SYMBOL);
				State = 4082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
				case 1:
					{
					State = 4081; slaveThreadOptions();
					}
					break;
				}
				State = 4086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,466,Context) ) {
				case 1:
					{
					State = 4084; Match(UNTIL_SYMBOL);
					State = 4085; slaveUntilOptions();
					}
					break;
				}
				State = 4088; slaveConnectionOptions();
				State = 4090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
				case 1:
					{
					State = 4089; channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4092; Match(STOP_SYMBOL);
				State = 4093; Match(SLAVE_SYMBOL);
				State = 4095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
				case 1:
					{
					State = 4094; slaveThreadOptions();
					}
					break;
				}
				State = 4098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
				case 1:
					{
					State = 4097; channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveUntilOptionsContext : ParserRuleContext {
		public MasterFileDefContext[] masterFileDef() {
			return GetRuleContexts<MasterFileDefContext>();
		}
		public MasterFileDefContext masterFileDef(int i) {
			return GetRuleContext<MasterFileDefContext>(i);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveUntilOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveUntilOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveUntilOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveUntilOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveUntilOptionsContext slaveUntilOptions() {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(Context, State);
		EnterRule(_localctx, 480, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				{
				State = 4102; masterFileDef();
				}
				break;
			case 2:
				{
				State = 4103;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4104;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4105; Match(EQUAL_OPERATOR);
				State = 4106; textString();
				}
				break;
			case 3:
				{
				State = 4107;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4108; Match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			State = 4115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4111; Match(COMMA_SYMBOL);
					State = 4112; masterFileDef();
					}
					} 
				}
				State = 4117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveConnectionOptionsContext : ParserRuleContext {
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode[] EQUAL_OPERATOR() { return GetTokens(MySQLParser.EQUAL_OPERATOR); }
		public ITerminalNode EQUAL_OPERATOR(int i) {
			return GetToken(MySQLParser.EQUAL_OPERATOR, i);
		}
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveConnectionOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveConnectionOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveConnectionOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveConnectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveConnectionOptionsContext slaveConnectionOptions() {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(Context, State);
		EnterRule(_localctx, 482, RULE_slaveConnectionOptions);
		try {
			State = 4140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,477,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4118;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 4122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
				case 1:
					{
					State = 4119; Match(USER_SYMBOL);
					State = 4120; Match(EQUAL_OPERATOR);
					State = 4121; textString();
					}
					break;
				}
				State = 4127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
				case 1:
					{
					State = 4124; Match(PASSWORD_SYMBOL);
					State = 4125; Match(EQUAL_OPERATOR);
					State = 4126; textString();
					}
					break;
				}
				State = 4132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
				case 1:
					{
					State = 4129; Match(DEFAULT_AUTH_SYMBOL);
					State = 4130; Match(EQUAL_OPERATOR);
					State = 4131; textString();
					}
					break;
				}
				State = 4137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
				case 1:
					{
					State = 4134; Match(PLUGIN_DIR_SYMBOL);
					State = 4135; Match(EQUAL_OPERATOR);
					State = 4136; textString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionsContext : ParserRuleContext {
		public SlaveThreadOptionContext[] slaveThreadOption() {
			return GetRuleContexts<SlaveThreadOptionContext>();
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return GetRuleContext<SlaveThreadOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveThreadOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionsContext slaveThreadOptions() {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(Context, State);
		EnterRule(_localctx, 484, RULE_slaveThreadOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4142; slaveThreadOption();
			State = 4147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4143; Match(COMMA_SYMBOL);
					State = 4144; slaveThreadOption();
					}
					} 
				}
				State = 4149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionContext : ParserRuleContext {
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlaveThreadOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionContext slaveThreadOption() {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(Context, State);
		EnterRule(_localctx, 486, RULE_slaveThreadOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150;
			_la = TokenStream.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationContext : ParserRuleContext {
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationContext groupReplication() {
		GroupReplicationContext _localctx = new GroupReplicationContext(Context, State);
		EnterRule(_localctx, 488, RULE_groupReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4152;
			_la = TokenStream.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4153; Match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public IToken type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_preparedStatement);
		int _la;
		try {
			State = 4166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4155; _localctx.type = Match(PREPARE_SYMBOL);
				State = 4156; identifier();
				State = 4157; Match(FROM_SYMBOL);
				State = 4160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
				case 1:
					{
					State = 4158; textLiteral();
					}
					break;
				case 2:
					{
					State = 4159; userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4162; executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4163;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4164; Match(PREPARE_SYMBOL);
				State = 4165; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return GetRuleContext<ExecuteVarListContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 492, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4168; Match(EXECUTE_SYMBOL);
			State = 4169; identifier();
			State = 4172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING_SYMBOL) {
				{
				State = 4170; Match(USING_SYMBOL);
				State = 4171; executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteVarListContext : ParserRuleContext {
		public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeVarList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExecuteVarList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExecuteVarList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteVarListContext executeVarList() {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(Context, State);
		EnterRule(_localctx, 494, RULE_executeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4174; userVariable();
			State = 4179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4175; Match(COMMA_SYMBOL);
				State = 4176; userVariable();
				}
				}
				State = 4181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloneStatementContext : ParserRuleContext {
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return GetRuleContext<DataDirSSLContext>(0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloneStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCloneStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCloneStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloneStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloneStatementContext cloneStatement() {
		CloneStatementContext _localctx = new CloneStatementContext(Context, State);
		EnterRule(_localctx, 496, RULE_cloneStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4182; Match(CLONE_SYMBOL);
			State = 4207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				{
				State = 4183; Match(LOCAL_SYMBOL);
				State = 4184; Match(DATA_SYMBOL);
				State = 4185; Match(DIRECTORY_SYMBOL);
				State = 4187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
				case 1:
					{
					State = 4186; equal();
					}
					break;
				}
				State = 4189; textStringLiteral();
				}
				break;
			case 2:
				{
				State = 4190; Match(REMOTE_SYMBOL);
				State = 4193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4191; Match(FOR_SYMBOL);
					State = 4192; Match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				State = 4195;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4196; Match(INSTANCE_SYMBOL);
				State = 4197; Match(FROM_SYMBOL);
				State = 4198; user();
				State = 4199; Match(COLON_SYMBOL);
				State = 4200; ulong_number();
				State = 4201; Match(IDENTIFIED_SYMBOL);
				State = 4202; Match(BY_SYMBOL);
				State = 4203; textStringLiteral();
				State = 4205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					State = 4204; dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataDirSSLContext : ParserRuleContext {
		public SslContext ssl() {
			return GetRuleContext<SslContext>(0);
		}
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataDirSSL; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataDirSSL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataDirSSL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataDirSSL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataDirSSLContext dataDirSSL() {
		DataDirSSLContext _localctx = new DataDirSSLContext(Context, State);
		EnterRule(_localctx, 498, RULE_dataDirSSL);
		int _la;
		try {
			State = 4219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4209; ssl();
				}
				break;
			case DATA_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4210; Match(DATA_SYMBOL);
				State = 4211; Match(DIRECTORY_SYMBOL);
				State = 4213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
				case 1:
					{
					State = 4212; equal();
					}
					break;
				}
				State = 4215; textStringLiteral();
				State = 4217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4216; ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SslContext : ParserRuleContext {
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSsl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSsl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SslContext ssl() {
		SslContext _localctx = new SslContext(Context, State);
		EnterRule(_localctx, 500, RULE_ssl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4221; Match(REQUIRE_SYMBOL);
			State = 4223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_SYMBOL) {
				{
				State = 4222; Match(NO_SYMBOL);
				}
			}

			State = 4225; Match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountManagementStatementContext : ParserRuleContext {
		public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		public GrantContext grant() {
			return GetRuleContext<GrantContext>(0);
		}
		public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		public RevokeContext revoke() {
			return GetRuleContext<RevokeContext>(0);
		}
		public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountManagementStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountManagementStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountManagementStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountManagementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountManagementStatementContext accountManagementStatement() {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(Context, State);
		EnterRule(_localctx, 502, RULE_accountManagementStatement);
		try {
			State = 4236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4227;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4228; alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4229; createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4230; dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4231; grant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4232; renameUser();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4233; revoke();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4234;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4235; setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return GetRuleContext<AlterUserTailContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 504, RULE_alterUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4238; Match(ALTER_SYMBOL);
			State = 4239; Match(USER_SYMBOL);
			State = 4242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
			case 1:
				{
				State = 4240;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4241; ifExists();
				}
				break;
			}
			State = 4244; alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserTailContext : ParserRuleContext {
		public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public AlterUserListContext alterUserList() {
			return GetRuleContext<AlterUserListContext>(0);
		}
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public AlterUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserTailContext alterUserTail() {
		AlterUserTailContext _localctx = new AlterUserTailContext(Context, State);
		EnterRule(_localctx, 506, RULE_alterUserTail);
		int _la;
		try {
			State = 4300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
				case 1:
					{
					State = 4246;
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					State = 4247; createUserList();
					}
					break;
				case 2:
					{
					State = 4248;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4249; alterUserList();
					}
					break;
				}
				State = 4252; createUserTail();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4254;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4255; user();
				State = 4256; Match(IDENTIFIED_SYMBOL);
				State = 4257; Match(BY_SYMBOL);
				State = 4258; textString();
				State = 4261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
				case 1:
					{
					State = 4259;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4260; replacePassword();
					}
					break;
				}
				State = 4265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
				case 1:
					{
					State = 4263;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4264; retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4267;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4268; user();
				State = 4269; discardOldPassword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4271;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4272; user();
				State = 4273; Match(DEFAULT_SYMBOL);
				State = 4274; Match(ROLE_SYMBOL);
				State = 4278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
				case 1:
					{
					State = 4275; Match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4276; Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4277; roleList();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4280;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 4281; user();
				State = 4282; Match(IDENTIFIED_SYMBOL);
				State = 4285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4283; Match(WITH_SYMBOL);
					State = 4284; textOrIdentifier();
					}
				}

				State = 4287; Match(BY_SYMBOL);
				State = 4288; Match(RANDOM_SYMBOL);
				State = 4289; Match(PASSWORD_SYMBOL);
				State = 4291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 4290; retainCurrentPassword();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4293; Match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				State = 4294; real_ulong_number();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4295; Match(PASSWORD_LOCK_TIME_SYMBOL);
				State = 4298;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					State = 4296; real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					State = 4297; Match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserFunctionContext : ParserRuleContext {
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionContext userFunction() {
		UserFunctionContext _localctx = new UserFunctionContext(Context, State);
		EnterRule(_localctx, 508, RULE_userFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4302; Match(USER_SYMBOL);
			State = 4303; parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return GetRuleContext<DefaultRoleClauseContext>(0);
		}
		public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 510, RULE_createUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4305; Match(CREATE_SYMBOL);
			State = 4306; Match(USER_SYMBOL);
			State = 4310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				{
				State = 4307;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4308; ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			State = 4312; createUserList();
			State = 4313; defaultRoleClause();
			State = 4314; createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserTailContext : ParserRuleContext {
		public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public ConnectOptionsContext connectOptions() {
			return GetRuleContext<ConnectOptionsContext>(0);
		}
		public AccountLockPasswordExpireOptionsContext[] accountLockPasswordExpireOptions() {
			return GetRuleContexts<AccountLockPasswordExpireOptionsContext>();
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return GetRuleContext<AccountLockPasswordExpireOptionsContext>(i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserTailContext createUserTail() {
		CreateUserTailContext _localctx = new CreateUserTailContext(Context, State);
		EnterRule(_localctx, 512, RULE_createUserTail);
		int _la;
		try {
			State = 4330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4316;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4317; requireClause();
					}
				}

				State = 4321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4320; connectOptions();
					}
				}

				State = 4326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					{
					State = 4323; accountLockPasswordExpireOptions();
					}
					}
					State = 4328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultRoleClauseContext : ParserRuleContext {
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultRoleClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultRoleClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultRoleClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultRoleClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultRoleClauseContext defaultRoleClause() {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_defaultRoleClause);
		try {
			State = 4339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4332;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
				case 1:
					{
					State = 4333; Match(DEFAULT_SYMBOL);
					State = 4334; Match(ROLE_SYMBOL);
					State = 4335; roleList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClauseContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return GetRuleContext<RequireListContext>(0);
		}
		public ITerminalNode SSL_SYMBOL() { return GetToken(MySQLParser.SSL_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireClauseContext requireClause() {
		RequireClauseContext _localctx = new RequireClauseContext(Context, State);
		EnterRule(_localctx, 516, RULE_requireClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4341; Match(REQUIRE_SYMBOL);
			State = 4344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				State = 4342; requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				State = 4343;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectOptionsContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode[] MAX_QUERIES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public ITerminalNode[] MAX_UPDATES_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public ITerminalNode[] MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public ITerminalNode[] MAX_USER_CONNECTIONS_SYMBOL() { return GetTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConnectOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConnectOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectOptionsContext connectOptions() {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(Context, State);
		EnterRule(_localctx, 518, RULE_connectOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4346; Match(WITH_SYMBOL);
			State = 4355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 4355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					State = 4347; Match(MAX_QUERIES_PER_HOUR_SYMBOL);
					State = 4348; ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					State = 4349; Match(MAX_UPDATES_PER_HOUR_SYMBOL);
					State = 4350; ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					State = 4351; Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					State = 4352; ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					State = 4353; Match(MAX_USER_CONNECTIONS_SYMBOL);
					State = 4354; ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountLockPasswordExpireOptionsContext : ParserRuleContext {
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountLockPasswordExpireOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAccountLockPasswordExpireOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAccountLockPasswordExpireOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountLockPasswordExpireOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(Context, State);
		EnterRule(_localctx, 520, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			State = 4392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4359; Match(ACCOUNT_SYMBOL);
				State = 4360;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4361; Match(PASSWORD_SYMBOL);
				State = 4390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
				case 1:
					{
					State = 4362; Match(EXPIRE_SYMBOL);
					State = 4369;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERVAL_SYMBOL:
						{
						State = 4363; Match(INTERVAL_SYMBOL);
						State = 4364; real_ulong_number();
						State = 4365; Match(DAY_SYMBOL);
						}
						break;
					case NEVER_SYMBOL:
						{
						State = 4367; Match(NEVER_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4368; Match(DEFAULT_SYMBOL);
						}
						break;
					case Eof:
					case ACCOUNT_SYMBOL:
					case PASSWORD_SYMBOL:
					case SEMICOLON_SYMBOL:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					State = 4371; Match(HISTORY_SYMBOL);
					State = 4374;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4372; real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4373; Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					State = 4376; Match(REUSE_SYMBOL);
					State = 4377; Match(INTERVAL_SYMBOL);
					State = 4382;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4378; real_ulong_number();
						State = 4379; Match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4381; Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					State = 4384;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4385; Match(REQUIRE_SYMBOL);
					State = 4386; Match(CURRENT_SYMBOL);
					State = 4388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) {
						{
						State = 4387;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 522, RULE_dropUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394; Match(DROP_SYMBOL);
			State = 4395; Match(USER_SYMBOL);
			State = 4398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				{
				State = 4396;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4397; ifExists();
				}
				break;
			}
			State = 4400; userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantContext : ParserRuleContext {
		public ITerminalNode[] GRANT_SYMBOL() { return GetTokens(MySQLParser.GRANT_SYMBOL); }
		public ITerminalNode GRANT_SYMBOL(int i) {
			return GetToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public GrantTargetListContext grantTargetList() {
			return GetRuleContext<GrantTargetListContext>(0);
		}
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return GetRuleContext<VersionedRequireClauseContext>(0);
		}
		public GrantOptionsContext grantOptions() {
			return GetRuleContext<GrantOptionsContext>(0);
		}
		public GrantAsContext grantAs() {
			return GetRuleContext<GrantAsContext>(0);
		}
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantContext grant() {
		GrantContext _localctx = new GrantContext(Context, State);
		EnterRule(_localctx, 524, RULE_grant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4402; Match(GRANT_SYMBOL);
			State = 4445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
			case 1:
				{
				State = 4403;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4404; roleOrPrivilegesList();
				State = 4405; Match(TO_SYMBOL);
				State = 4406; userList();
				State = 4410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4407; Match(WITH_SYMBOL);
					State = 4408; Match(ADMIN_SYMBOL);
					State = 4409; Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4417;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
				case 1:
					{
					State = 4412; roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					State = 4413; Match(ALL_SYMBOL);
					State = 4415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						State = 4414; Match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				State = 4419; Match(ON_SYMBOL);
				State = 4421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
				case 1:
					{
					State = 4420; aclType();
					}
					break;
				}
				State = 4423; grantIdentifier();
				State = 4424; Match(TO_SYMBOL);
				State = 4425; grantTargetList();
				State = 4427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
				case 1:
					{
					State = 4426; versionedRequireClause();
					}
					break;
				}
				State = 4430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
				case 1:
					{
					State = 4429; grantOptions();
					}
					break;
				}
				State = 4433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_SYMBOL) {
					{
					State = 4432; grantAs();
					}
				}

				}
				break;
			case 3:
				{
				State = 4435; Match(PROXY_SYMBOL);
				State = 4436; Match(ON_SYMBOL);
				State = 4437; user();
				State = 4438; Match(TO_SYMBOL);
				State = 4439; grantTargetList();
				State = 4443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4440; Match(WITH_SYMBOL);
					State = 4441; Match(GRANT_SYMBOL);
					State = 4442; Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantTargetListContext : ParserRuleContext {
		public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantTargetList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantTargetList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantTargetList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantTargetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantTargetListContext grantTargetList() {
		GrantTargetListContext _localctx = new GrantTargetListContext(Context, State);
		EnterRule(_localctx, 526, RULE_grantTargetList);
		try {
			State = 4451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4447;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4448; createUserList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4449;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4450; userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionsContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public GrantOptionContext[] grantOption() {
			return GetRuleContexts<GrantOptionContext>();
		}
		public GrantOptionContext grantOption(int i) {
			return GetRuleContext<GrantOptionContext>(i);
		}
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionsContext grantOptions() {
		GrantOptionsContext _localctx = new GrantOptionsContext(Context, State);
		EnterRule(_localctx, 528, RULE_grantOptions);
		int _la;
		try {
			State = 4464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4453;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4454; Match(WITH_SYMBOL);
				State = 4456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4455; grantOption();
					}
					}
					State = 4458;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==GRANT_SYMBOL || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4460;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4461; Match(WITH_SYMBOL);
				State = 4462; Match(GRANT_SYMBOL);
				State = 4463; Match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptRoleListContext : ParserRuleContext {
		public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptRoleList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExceptRoleList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExceptRoleList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptRoleList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptRoleListContext exceptRoleList() {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(Context, State);
		EnterRule(_localctx, 530, RULE_exceptRoleList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4466; Match(EXCEPT_SYMBOL);
			State = 4467; roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithRolesContext : ParserRuleContext {
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return GetRuleContext<ExceptRoleListContext>(0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withRoles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWithRoles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWithRoles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithRolesContext withRoles() {
		WithRolesContext _localctx = new WithRolesContext(Context, State);
		EnterRule(_localctx, 532, RULE_withRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4469; Match(WITH_SYMBOL);
			State = 4470; Match(ROLE_SYMBOL);
			State = 4478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 4471; roleList();
				}
				break;
			case 2:
				{
				State = 4472; Match(ALL_SYMBOL);
				State = 4474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4473; exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				State = 4476; Match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				State = 4477; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantAsContext : ParserRuleContext {
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return GetRuleContext<WithRolesContext>(0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantAs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantAs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantAs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantAs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantAsContext grantAs() {
		GrantAsContext _localctx = new GrantAsContext(Context, State);
		EnterRule(_localctx, 534, RULE_grantAs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4480; Match(AS_SYMBOL);
			State = 4481; Match(USER_SYMBOL);
			State = 4483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 4482; withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionedRequireClauseContext : ParserRuleContext {
		public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionedRequireClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVersionedRequireClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVersionedRequireClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionedRequireClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionedRequireClauseContext versionedRequireClause() {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(Context, State);
		EnterRule(_localctx, 536, RULE_versionedRequireClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4485;
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			State = 4486; requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		public ITerminalNode RENAME_SYMBOL() { return GetToken(MySQLParser.RENAME_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		public ITerminalNode[] TO_SYMBOL() { return GetTokens(MySQLParser.TO_SYMBOL); }
		public ITerminalNode TO_SYMBOL(int i) {
			return GetToken(MySQLParser.TO_SYMBOL, i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 538, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4488; Match(RENAME_SYMBOL);
			State = 4489; Match(USER_SYMBOL);
			State = 4490; user();
			State = 4491; Match(TO_SYMBOL);
			State = 4492; user();
			State = 4500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4493; Match(COMMA_SYMBOL);
				State = 4494; user();
				State = 4495; Match(TO_SYMBOL);
				State = 4496; user();
				}
				}
				State = 4502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeContext : ParserRuleContext {
		public ITerminalNode REVOKE_SYMBOL() { return GetToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public OnTypeToContext onTypeTo() {
			return GetRuleContext<OnTypeToContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRevoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRevoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeContext revoke() {
		RevokeContext _localctx = new RevokeContext(Context, State);
		EnterRule(_localctx, 540, RULE_revoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4503; Match(REVOKE_SYMBOL);
			State = 4537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
			case 1:
				{
				State = 4504;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4505; roleOrPrivilegesList();
				State = 4506; Match(FROM_SYMBOL);
				State = 4507; userList();
				}
				break;
			case 2:
				{
				State = 4509; roleOrPrivilegesList();
				State = 4510; onTypeTo();
				State = 4511; Match(FROM_SYMBOL);
				State = 4512; userList();
				}
				break;
			case 3:
				{
				State = 4514; Match(ALL_SYMBOL);
				State = 4516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
				case 1:
					{
					State = 4515; Match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				State = 4529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
				case 1:
					{
					State = 4518;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4519; Match(ON_SYMBOL);
					State = 4521;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
					case 1:
						{
						State = 4520; aclType();
						}
						break;
					}
					State = 4523; grantIdentifier();
					}
					break;
				case 2:
					{
					State = 4524; Match(COMMA_SYMBOL);
					State = 4525; Match(GRANT_SYMBOL);
					State = 4526; Match(OPTION_SYMBOL);
					State = 4527; Match(FROM_SYMBOL);
					State = 4528; userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 4531; Match(PROXY_SYMBOL);
				State = 4532; Match(ON_SYMBOL);
				State = 4533; user();
				State = 4534; Match(FROM_SYMBOL);
				State = 4535; userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnTypeToContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onTypeTo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnTypeTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnTypeTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnTypeTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnTypeToContext onTypeTo() {
		OnTypeToContext _localctx = new OnTypeToContext(Context, State);
		EnterRule(_localctx, 542, RULE_onTypeTo);
		int _la;
		try {
			State = 4553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4539;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 4540; Match(ON_SYMBOL);
				State = 4542;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
				case 1:
					{
					State = 4541; aclType();
					}
					break;
				}
				State = 4544; grantIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4545;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 4546; Match(ON_SYMBOL);
					State = 4548;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
					case 1:
						{
						State = 4547; aclType();
						}
						break;
					}
					State = 4550; grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AclTypeContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aclType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAclType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AclTypeContext aclType() {
		AclTypeContext _localctx = new AclTypeContext(Context, State);
		EnterRule(_localctx, 544, RULE_aclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4555;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegesListContext : ParserRuleContext {
		public RoleOrPrivilegeContext[] roleOrPrivilege() {
			return GetRuleContexts<RoleOrPrivilegeContext>();
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return GetRuleContext<RoleOrPrivilegeContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilegesList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilegesList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilegesList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrPrivilegesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegesListContext roleOrPrivilegesList() {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(Context, State);
		EnterRule(_localctx, 546, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4557; roleOrPrivilege();
			State = 4562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4558; Match(COMMA_SYMBOL);
					State = 4559; roleOrPrivilege();
					}
					} 
				}
				State = 4564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegeContext : ParserRuleContext {
		public IToken @object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ITerminalNode SELECT_SYMBOL() { return GetToken(MySQLParser.SELECT_SYMBOL, 0); }
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode USAGE_SYMBOL() { return GetToken(MySQLParser.USAGE_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilege; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilege(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilege(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegeContext roleOrPrivilege() {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(Context, State);
		EnterRule(_localctx, 548, RULE_roleOrPrivilege);
		int _la;
		try {
			State = 4606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4565;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
				case 1:
					{
					State = 4566; roleIdentifierOrText();
					State = 4568;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
					case 1:
						{
						State = 4567; columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4570; roleIdentifierOrText();
					State = 4574;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						State = 4571; Match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						State = 4572; Match(AT_SIGN_SYMBOL);
						State = 4573; textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4578;
				_la = TokenStream.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,546,Context) ) {
				case 1:
					{
					State = 4579; columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4582;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (DELETE_SYMBOL - 133)) | (1L << (DROP_SYMBOL - 133)) | (1L << (EVENT_SYMBOL - 133)) | (1L << (EXECUTE_SYMBOL - 133)) | (1L << (FILE_SYMBOL - 133)))) != 0) || _la==INDEX_SYMBOL || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (PROCESS_SYMBOL - 423)) | (1L << (PROXY_SYMBOL - 423)) | (1L << (RELOAD_SYMBOL - 423)))) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4583; Match(GRANT_SYMBOL);
				State = 4584; Match(OPTION_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4585; Match(SHOW_SYMBOL);
				State = 4586; Match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4587; Match(CREATE_SYMBOL);
				State = 4591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
				case 1:
					{
					State = 4588; Match(TEMPORARY_SYMBOL);
					State = 4589; _localctx.@object = Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4590;
					_localctx.@object = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						_localctx.@object = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4593; Match(LOCK_SYMBOL);
				State = 4594; Match(TABLES_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4595; Match(REPLICATION_SYMBOL);
				State = 4596;
				_localctx.@object = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT_SYMBOL || _la==SLAVE_SYMBOL) ) {
					_localctx.@object = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4597; Match(SHOW_SYMBOL);
				State = 4598; Match(VIEW_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4599; Match(ALTER_SYMBOL);
				State = 4601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
				case 1:
					{
					State = 4600; Match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4603;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4604;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4605; Match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantIdentifierContext : ParserRuleContext {
		public ITerminalNode[] MULT_OPERATOR() { return GetTokens(MySQLParser.MULT_OPERATOR); }
		public ITerminalNode MULT_OPERATOR(int i) {
			return GetToken(MySQLParser.MULT_OPERATOR, i);
		}
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantIdentifierContext grantIdentifier() {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(Context, State);
		EnterRule(_localctx, 550, RULE_grantIdentifier);
		int _la;
		try {
			State = 4624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,552,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4608; Match(MULT_OPERATOR);
				State = 4611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4609; Match(DOT_SYMBOL);
					State = 4610; Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4613; schemaRef();
				State = 4616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4614; Match(DOT_SYMBOL);
					State = 4615; Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4618; tableRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4619;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 4620; schemaRef();
				State = 4621; Match(DOT_SYMBOL);
				State = 4622; tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListContext : ParserRuleContext {
		public RequireListElementContext[] requireListElement() {
			return GetRuleContexts<RequireListElementContext>();
		}
		public RequireListElementContext requireListElement(int i) {
			return GetRuleContext<RequireListElementContext>(i);
		}
		public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySQLParser.AND_SYMBOL); }
		public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireListContext requireList() {
		RequireListContext _localctx = new RequireListContext(Context, State);
		EnterRule(_localctx, 552, RULE_requireList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626; requireListElement();
			State = 4633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,554,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 4627; Match(AND_SYMBOL);
						}
					}

					State = 4630; requireListElement();
					}
					} 
				}
				State = 4635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,554,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListElementContext : ParserRuleContext {
		public IToken element;
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRequireListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRequireListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireListElementContext requireListElement() {
		RequireListElementContext _localctx = new RequireListElementContext(Context, State);
		EnterRule(_localctx, 554, RULE_requireListElement);
		try {
			State = 4642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4636; _localctx.element = Match(CIPHER_SYMBOL);
				State = 4637; textString();
				}
				break;
			case ISSUER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4638; _localctx.element = Match(ISSUER_SYMBOL);
				State = 4639; textString();
				}
				break;
			case SUBJECT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4640; _localctx.element = Match(SUBJECT_SYMBOL);
				State = 4641; textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode OPTION_SYMBOL() { return GetToken(MySQLParser.OPTION_SYMBOL, 0); }
		public ITerminalNode GRANT_SYMBOL() { return GetToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGrantOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGrantOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionContext grantOption() {
		GrantOptionContext _localctx = new GrantOptionContext(Context, State);
		EnterRule(_localctx, 556, RULE_grantOption);
		try {
			State = 4654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4644; _localctx.option = Match(GRANT_SYMBOL);
				State = 4645; Match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4646; _localctx.option = Match(MAX_QUERIES_PER_HOUR_SYMBOL);
				State = 4647; ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4648; _localctx.option = Match(MAX_UPDATES_PER_HOUR_SYMBOL);
				State = 4649; ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4650; _localctx.option = Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				State = 4651; ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4652; _localctx.option = Match(MAX_USER_CONNECTIONS_SYMBOL);
				State = 4653; ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext[] roleList() {
			return GetRuleContexts<RoleListContext>();
		}
		public RoleListContext roleList(int i) {
			return GetRuleContext<RoleListContext>(i);
		}
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 558, RULE_setRole);
		int _la;
		try {
			State = 4679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4656; Match(SET_SYMBOL);
				State = 4657; Match(ROLE_SYMBOL);
				State = 4658; roleList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4659; Match(SET_SYMBOL);
				State = 4660; Match(ROLE_SYMBOL);
				State = 4661;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4662; Match(SET_SYMBOL);
				State = 4663; Match(DEFAULT_SYMBOL);
				State = 4664; Match(ROLE_SYMBOL);
				State = 4668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
				case 1:
					{
					State = 4665; roleList();
					}
					break;
				case 2:
					{
					State = 4666; Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4667; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4670; Match(TO_SYMBOL);
				State = 4671; roleList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4672; Match(SET_SYMBOL);
				State = 4673; Match(ROLE_SYMBOL);
				State = 4674; Match(ALL_SYMBOL);
				State = 4677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4675; Match(EXCEPT_SYMBOL);
					State = 4676; roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleListContext : ParserRuleContext {
		public RoleContext[] role() {
			return GetRuleContexts<RoleContext>();
		}
		public RoleContext role(int i) {
			return GetRuleContext<RoleContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleListContext roleList() {
		RoleListContext _localctx = new RoleListContext(Context, State);
		EnterRule(_localctx, 560, RULE_roleList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4681; role();
			State = 4686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4682; Match(COMMA_SYMBOL);
					State = 4683; role();
					}
					} 
				}
				State = 4688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleContext : ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public RoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleContext role() {
		RoleContext _localctx = new RoleContext(Context, State);
		EnterRule(_localctx, 562, RULE_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689; roleIdentifierOrText();
			State = 4693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
			case 1:
				{
				State = 4690; Match(AT_SIGN_SYMBOL);
				State = 4691; textOrIdentifier();
				}
				break;
			case 2:
				{
				State = 4692; Match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAdministrationStatementContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		public HistogramContext histogram() {
			return GetRuleContext<HistogramContext>(0);
		}
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAdministrationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAdministrationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAdministrationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAdministrationStatementContext tableAdministrationStatement() {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(Context, State);
		EnterRule(_localctx, 564, RULE_tableAdministrationStatement);
		int _la;
		try {
			State = 4738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4695; _localctx.type = Match(ANALYZE_SYMBOL);
				State = 4697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4696; noWriteToBinLog();
					}
				}

				State = 4699; Match(TABLE_SYMBOL);
				State = 4700; tableRefList();
				State = 4703;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
				case 1:
					{
					State = 4701;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4702; histogram();
					}
					break;
				}
				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4705; _localctx.type = Match(CHECK_SYMBOL);
				State = 4706; Match(TABLE_SYMBOL);
				State = 4707; tableRefList();
				State = 4711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 4708; checkOption();
					}
					}
					State = 4713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4714; _localctx.type = Match(CHECKSUM_SYMBOL);
				State = 4715; Match(TABLE_SYMBOL);
				State = 4716; tableRefList();
				State = 4718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					State = 4717;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4720; _localctx.type = Match(OPTIMIZE_SYMBOL);
				State = 4722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4721; noWriteToBinLog();
					}
				}

				State = 4724; Match(TABLE_SYMBOL);
				State = 4725; tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4726; _localctx.type = Match(REPAIR_SYMBOL);
				State = 4728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4727; noWriteToBinLog();
					}
				}

				State = 4730; Match(TABLE_SYMBOL);
				State = 4731; tableRefList();
				State = 4735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 4732; repairType();
					}
					}
					State = 4737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramContext : ParserRuleContext {
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogram; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHistogram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHistogram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHistogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HistogramContext histogram() {
		HistogramContext _localctx = new HistogramContext(Context, State);
		EnterRule(_localctx, 566, RULE_histogram);
		int _la;
		try {
			State = 4753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4740; Match(UPDATE_SYMBOL);
				State = 4741; Match(HISTOGRAM_SYMBOL);
				State = 4742; Match(ON_SYMBOL);
				State = 4743; identifierList();
				State = 4747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4744; Match(WITH_SYMBOL);
					State = 4745; Match(INT_NUMBER);
					State = 4746; Match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4749; Match(DROP_SYMBOL);
				State = 4750; Match(HISTOGRAM_SYMBOL);
				State = 4751; Match(ON_SYMBOL);
				State = 4752; identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOptionContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckOptionContext checkOption() {
		CheckOptionContext _localctx = new CheckOptionContext(Context, State);
		EnterRule(_localctx, 568, RULE_checkOption);
		int _la;
		try {
			State = 4758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4755; Match(FOR_SYMBOL);
				State = 4756; Match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4757;
				_la = TokenStream.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTypeContext : ParserRuleContext {
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepairType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepairType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTypeContext repairType() {
		RepairTypeContext _localctx = new RepairTypeContext(Context, State);
		EnterRule(_localctx, 570, RULE_repairType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4760;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallUninstallStatmentContext : ParserRuleContext {
		public IToken action;
		public IToken type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return GetRuleContext<PluginRefContext>(0);
		}
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ComponentRefContext[] componentRef() {
			return GetRuleContexts<ComponentRefContext>();
		}
		public ComponentRefContext componentRef(int i) {
			return GetRuleContext<ComponentRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installUninstallStatment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInstallUninstallStatment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInstallUninstallStatment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallUninstallStatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallUninstallStatmentContext installUninstallStatment() {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(Context, State);
		EnterRule(_localctx, 572, RULE_installUninstallStatment);
		int _la;
		try {
			State = 4784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4762; _localctx.action = Match(INSTALL_SYMBOL);
				State = 4763; _localctx.type = Match(PLUGIN_SYMBOL);
				State = 4764; identifier();
				State = 4765; Match(SONAME_SYMBOL);
				State = 4766; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4768; _localctx.action = Match(INSTALL_SYMBOL);
				State = 4769; _localctx.type = Match(COMPONENT_SYMBOL);
				State = 4770; textStringLiteralList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4771; _localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4772; _localctx.type = Match(PLUGIN_SYMBOL);
				State = 4773; pluginRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4774; _localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4775; _localctx.type = Match(COMPONENT_SYMBOL);
				State = 4776; componentRef();
				State = 4781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4777; Match(COMMA_SYMBOL);
					State = 4778; componentRef();
					}
					}
					State = 4783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public StartOptionValueListContext startOptionValueList() {
			return GetRuleContext<StartOptionValueListContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 574, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4786; Match(SET_SYMBOL);
			State = 4787; startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListContext : ParserRuleContext {
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return GetRuleContext<StartOptionValueListFollowingOptionTypeContext>(0);
		}
		public ITerminalNode[] PASSWORD_SYMBOL() { return GetTokens(MySQLParser.PASSWORD_SYMBOL); }
		public ITerminalNode PASSWORD_SYMBOL(int i) {
			return GetToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public ITerminalNode TO_SYMBOL() { return GetToken(MySQLParser.TO_SYMBOL, 0); }
		public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartOptionValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListContext startOptionValueList() {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(Context, State);
		EnterRule(_localctx, 576, RULE_startOptionValueList);
		int _la;
		try {
			State = 4845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4789; optionValueNoOptionType();
				State = 4790; optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4792; Match(TRANSACTION_SYMBOL);
				State = 4793; transactionCharacteristics();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4794; optionType();
				State = 4795; startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4797; Match(PASSWORD_SYMBOL);
				State = 4800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4798; Match(FOR_SYMBOL);
					State = 4799; user();
					}
				}

				State = 4802; equal();
				State = 4829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,580,Context) ) {
				case 1:
					{
					State = 4803; textString();
					State = 4805;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4804; replacePassword();
						}
					}

					State = 4808;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4807; retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					State = 4810; textString();
					State = 4812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4811; replacePassword();
						}
					}

					State = 4815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4814; retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					State = 4817;
					if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
					State = 4818; Match(OLD_PASSWORD_SYMBOL);
					State = 4819; Match(OPEN_PAR_SYMBOL);
					State = 4820; textString();
					State = 4821; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 4823;
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					State = 4824; Match(PASSWORD_SYMBOL);
					State = 4825; Match(OPEN_PAR_SYMBOL);
					State = 4826; textString();
					State = 4827; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4831;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 4832; Match(PASSWORD_SYMBOL);
				State = 4835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4833; Match(FOR_SYMBOL);
					State = 4834; user();
					}
				}

				State = 4837; Match(TO_SYMBOL);
				State = 4838; Match(RANDOM_SYMBOL);
				State = 4840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					State = 4839; replacePassword();
					}
				}

				State = 4843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 4842; retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicsContext : ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return GetRuleContext<TransactionAccessModeContext>(0);
		}
		public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristics; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionCharacteristics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicsContext transactionCharacteristics() {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(Context, State);
		EnterRule(_localctx, 578, RULE_transactionCharacteristics);
		int _la;
		try {
			State = 4856;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4847; transactionAccessMode();
				State = 4849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					State = 4848; isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4851; isolationLevel();
				State = 4854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 4852; Match(COMMA_SYMBOL);
					State = 4853; transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionAccessModeContext : ParserRuleContext {
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode WRITE_SYMBOL() { return GetToken(MySQLParser.WRITE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionAccessMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionAccessMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionAccessMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionAccessMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionAccessModeContext transactionAccessMode() {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(Context, State);
		EnterRule(_localctx, 580, RULE_transactionAccessMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4858; Match(READ_SYMBOL);
			State = 4859;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 582, RULE_isolationLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4861; Match(ISOLATION_SYMBOL);
			State = 4862; Match(LEVEL_SYMBOL);
			State = 4868;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				State = 4863; Match(REPEATABLE_SYMBOL);
				State = 4864; Match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				State = 4865; Match(READ_SYMBOL);
				State = 4866;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				State = 4867; Match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueListContinuedContext : ParserRuleContext {
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueListContinued; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueListContinued(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueListContinued(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueListContinued(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueListContinuedContext optionValueListContinued() {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(Context, State);
		EnterRule(_localctx, 584, RULE_optionValueListContinued);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4870; Match(COMMA_SYMBOL);
				State = 4871; optionValue();
				}
				}
				State = 4876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueNoOptionTypeContext : ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return GetRuleContext<SetSystemVariableContext>(0);
		}
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueNoOptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueNoOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueNoOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueNoOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueNoOptionTypeContext optionValueNoOptionType() {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(Context, State);
		EnterRule(_localctx, 586, RULE_optionValueNoOptionType);
		int _la;
		try {
			State = 4902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4877; internalVariableName();
				State = 4878; equal();
				State = 4879; setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4881; charsetClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4882; userVariable();
				State = 4883; equal();
				State = 4884; expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4886; setSystemVariable();
				State = 4887; equal();
				State = 4888; setExprOrDefault();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4890; Match(NAMES_SYMBOL);
				State = 4900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
				case 1:
					{
					State = 4891; equal();
					State = 4892; expr(0);
					}
					break;
				case 2:
					{
					State = 4894; charsetName();
					State = 4896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						State = 4895; collate();
						}
					}

					}
					break;
				case 3:
					{
					State = 4898;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 4899; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 588, RULE_optionValue);
		try {
			State = 4910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4904; optionType();
				State = 4905; internalVariableName();
				State = 4906; equal();
				State = 4907; setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4909; optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSystemVariableContext : ParserRuleContext {
		public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return GetRuleContext<SetVarIdentTypeContext>(0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSystemVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetSystemVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetSystemVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSystemVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSystemVariableContext setSystemVariable() {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(Context, State);
		EnterRule(_localctx, 590, RULE_setSystemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4912; Match(AT_AT_SIGN_SYMBOL);
			State = 4914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
			case 1:
				{
				State = 4913; setVarIdentType();
				}
				break;
			}
			State = 4916; internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListFollowingOptionTypeContext : ParserRuleContext {
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return GetRuleContext<OptionValueFollowingOptionTypeContext>(0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueListFollowingOptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueListFollowingOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueListFollowingOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartOptionValueListFollowingOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 592, RULE_startOptionValueListFollowingOptionType);
		try {
			State = 4923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4918; optionValueFollowingOptionType();
				State = 4919; optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4921; Match(TRANSACTION_SYMBOL);
				State = 4922; transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueFollowingOptionTypeContext : ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueFollowingOptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionValueFollowingOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionValueFollowingOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValueFollowingOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 594, RULE_optionValueFollowingOptionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4925; internalVariableName();
			State = 4926; equal();
			State = 4927; setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprOrDefaultContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExprOrDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetExprOrDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetExprOrDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExprOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExprOrDefaultContext setExprOrDefault() {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(Context, State);
		EnterRule(_localctx, 596, RULE_setExprOrDefault);
		int _la;
		try {
			State = 4933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4929; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4930;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==BINARY_SYMBOL || _la==DEFAULT_SYMBOL || _la==ON_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4931;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4932;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public IToken value;
		public IToken @object;
		public ITerminalNode SHOW_SYMBOL() { return GetToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return GetRuleContext<NonBlockingContext>(0);
		}
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode KEYS_SYMBOL() { return GetToken(MySQLParser.KEYS_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ProfileTypeContext[] profileType() {
			return GetRuleContexts<ProfileTypeContext>();
		}
		public ProfileTypeContext profileType(int i) {
			return GetRuleContext<ProfileTypeContext>(i);
		}
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 598, RULE_showStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4935; Match(SHOW_SYMBOL);
			State = 5155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
			case 1:
				{
				State = 4936;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 4937; _localctx.value = Match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 4938; _localctx.value = Match(DATABASES_SYMBOL);
				State = 4940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4939; likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				State = 4943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
				case 1:
					{
					State = 4942; showCommandType();
					}
					break;
				}
				State = 4945; _localctx.value = Match(TABLES_SYMBOL);
				State = 4947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4946; inDb();
					}
				}

				State = 4950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4949; likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				State = 4953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 4952; Match(FULL_SYMBOL);
					}
				}

				State = 4955; _localctx.value = Match(TRIGGERS_SYMBOL);
				State = 4957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4956; inDb();
					}
				}

				State = 4960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4959; likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				State = 4962; _localctx.value = Match(EVENTS_SYMBOL);
				State = 4964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4963; inDb();
					}
				}

				State = 4967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4966; likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				State = 4969; _localctx.value = Match(TABLE_SYMBOL);
				State = 4970; Match(STATUS_SYMBOL);
				State = 4972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4971; inDb();
					}
				}

				State = 4975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4974; likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				State = 4977; _localctx.value = Match(OPEN_SYMBOL);
				State = 4978; Match(TABLES_SYMBOL);
				State = 4980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4979; inDb();
					}
				}

				State = 4983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4982; likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				State = 4985; _localctx.value = Match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				State = 4986; _localctx.value = Match(ENGINE_SYMBOL);
				State = 4989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
				case 1:
					{
					State = 4987; engineRef();
					}
					break;
				case 2:
					{
					State = 4988; Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4991;
				_la = TokenStream.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				State = 4993;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
				case 1:
					{
					State = 4992; showCommandType();
					}
					break;
				}
				State = 4995; _localctx.value = Match(COLUMNS_SYMBOL);
				State = 4996;
				_la = TokenStream.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4997; tableRef();
				State = 4999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4998; inDb();
					}
				}

				State = 5002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5001; likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				State = 5004;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5005; _localctx.value = Match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				State = 5006; _localctx.value = Match(SLAVE_SYMBOL);
				State = 5013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOSTS_SYMBOL:
					{
					State = 5007; Match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					State = 5008; Match(STATUS_SYMBOL);
					State = 5009; nonBlocking();
					State = 5011;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,614,Context) ) {
					case 1:
						{
						State = 5010; channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				State = 5015;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5016; Match(EVENTS_SYMBOL);
				State = 5019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,616,Context) ) {
				case 1:
					{
					State = 5017; Match(IN_SYMBOL);
					State = 5018; textString();
					}
					break;
				}
				State = 5023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,617,Context) ) {
				case 1:
					{
					State = 5021; Match(FROM_SYMBOL);
					State = 5022; ulonglong_number();
					}
					break;
				}
				State = 5026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,618,Context) ) {
				case 1:
					{
					State = 5025; limitClause();
					}
					break;
				}
				State = 5029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
				case 1:
					{
					State = 5028; channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				State = 5033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,620,Context) ) {
				case 1:
					{
					State = 5031;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5032; Match(EXTENDED_SYMBOL);
					}
					break;
				}
				State = 5035;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (INDEXES_SYMBOL - 235)) | (1L << (INDEX_SYMBOL - 235)) | (1L << (KEYS_SYMBOL - 235)))) != 0)) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5036; fromOrIn();
				State = 5037; tableRef();
				State = 5039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 5038; inDb();
					}
				}

				State = 5042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 5041; whereClause();
					}
				}

				}
				break;
			case 15:
				{
				State = 5045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 5044; Match(STORAGE_SYMBOL);
					}
				}

				State = 5047; _localctx.value = Match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				State = 5048; Match(COUNT_SYMBOL);
				State = 5049; Match(OPEN_PAR_SYMBOL);
				State = 5050; Match(MULT_OPERATOR);
				State = 5051; Match(CLOSE_PAR_SYMBOL);
				State = 5052;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 17:
				{
				State = 5053; _localctx.value = Match(WARNINGS_SYMBOL);
				State = 5055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5054; limitClause();
					}
				}

				}
				break;
			case 18:
				{
				State = 5057; _localctx.value = Match(ERRORS_SYMBOL);
				State = 5059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5058; limitClause();
					}
				}

				}
				break;
			case 19:
				{
				State = 5061; _localctx.value = Match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				State = 5062; _localctx.value = Match(PROFILE_SYMBOL);
				State = 5071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL || _la==BLOCK_SYMBOL || _la==CONTEXT_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
					{
					State = 5063; profileType();
					State = 5068;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5064; Match(COMMA_SYMBOL);
						State = 5065; profileType();
						}
						}
						State = 5070;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 5076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5073; Match(FOR_SYMBOL);
					State = 5074; Match(QUERY_SYMBOL);
					State = 5075; Match(INT_NUMBER);
					}
				}

				State = 5079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5078; limitClause();
					}
				}

				}
				break;
			case 21:
				{
				State = 5082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					State = 5081; optionType();
					}
				}

				State = 5084;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5085; likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				State = 5089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5088; Match(FULL_SYMBOL);
					}
				}

				State = 5091; _localctx.value = Match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				State = 5092; charset();
				State = 5094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5093; likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				State = 5096; _localctx.value = Match(COLLATION_SYMBOL);
				State = 5098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5097; likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				State = 5100;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 5101; _localctx.value = Match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				State = 5102; _localctx.value = Match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				State = 5103; _localctx.value = Match(GRANTS_SYMBOL);
				State = 5106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5104; Match(FOR_SYMBOL);
					State = 5105; user();
					}
				}

				}
				break;
			case 28:
				{
				State = 5108; _localctx.value = Match(GRANTS_SYMBOL);
				State = 5109; Match(FOR_SYMBOL);
				State = 5110; user();
				State = 5111; Match(USING_SYMBOL);
				State = 5112; userList();
				}
				break;
			case 29:
				{
				State = 5114; _localctx.value = Match(MASTER_SYMBOL);
				State = 5115; Match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				State = 5116; _localctx.value = Match(CREATE_SYMBOL);
				State = 5137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 5117; _localctx.@object = Match(DATABASE_SYMBOL);
					State = 5119;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
					case 1:
						{
						State = 5118; ifNotExists();
						}
						break;
					}
					State = 5121; schemaRef();
					}
					break;
				case 2:
					{
					State = 5122; _localctx.@object = Match(EVENT_SYMBOL);
					State = 5123; eventRef();
					}
					break;
				case 3:
					{
					State = 5124; _localctx.@object = Match(FUNCTION_SYMBOL);
					State = 5125; functionRef();
					}
					break;
				case 4:
					{
					State = 5126; _localctx.@object = Match(PROCEDURE_SYMBOL);
					State = 5127; procedureRef();
					}
					break;
				case 5:
					{
					State = 5128; _localctx.@object = Match(TABLE_SYMBOL);
					State = 5129; tableRef();
					}
					break;
				case 6:
					{
					State = 5130; _localctx.@object = Match(TRIGGER_SYMBOL);
					State = 5131; triggerRef();
					}
					break;
				case 7:
					{
					State = 5132; _localctx.@object = Match(VIEW_SYMBOL);
					State = 5133; viewRef();
					}
					break;
				case 8:
					{
					State = 5134;
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					State = 5135; _localctx.@object = Match(USER_SYMBOL);
					State = 5136; user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				State = 5139; _localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5140; Match(STATUS_SYMBOL);
				State = 5142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5141; likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				State = 5144; _localctx.value = Match(FUNCTION_SYMBOL);
				State = 5145; Match(STATUS_SYMBOL);
				State = 5147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5146; likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				State = 5149; _localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5150; Match(CODE_SYMBOL);
				State = 5151; procedureRef();
				}
				break;
			case 34:
				{
				State = 5152; _localctx.value = Match(FUNCTION_SYMBOL);
				State = 5153; Match(CODE_SYMBOL);
				State = 5154; functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandTypeContext : ParserRuleContext {
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommandType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterShowCommandType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitShowCommandType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommandType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandTypeContext showCommandType() {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(Context, State);
		EnterRule(_localctx, 600, RULE_showCommandType);
		int _la;
		try {
			State = 5163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5157; Match(FULL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5158;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5159; Match(EXTENDED_SYMBOL);
				State = 5161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5160; Match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonBlockingContext : ParserRuleContext {
		public ITerminalNode NONBLOCKING_SYMBOL() { return GetToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonBlocking; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNonBlocking(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNonBlocking(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonBlocking(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonBlockingContext nonBlocking() {
		NonBlockingContext _localctx = new NonBlockingContext(Context, State);
		EnterRule(_localctx, 602, RULE_nonBlocking);
		try {
			State = 5170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5165;
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				State = 5167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
				case 1:
					{
					State = 5166; Match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromOrInContext : ParserRuleContext {
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromOrIn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFromOrIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFromOrIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromOrIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromOrInContext fromOrIn() {
		FromOrInContext _localctx = new FromOrInContext(Context, State);
		EnterRule(_localctx, 604, RULE_fromOrIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5172;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDbContext : ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInDb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInDb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInDb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InDbContext inDb() {
		InDbContext _localctx = new InDbContext(Context, State);
		EnterRule(_localctx, 606, RULE_inDb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5174; fromOrIn();
			State = 5175; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileTypeContext : ParserRuleContext {
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProfileType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProfileType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProfileTypeContext profileType() {
		ProfileTypeContext _localctx = new ProfileTypeContext(Context, State);
		EnterRule(_localctx, 608, RULE_profileType);
		int _la;
		try {
			State = 5184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5177; Match(BLOCK_SYMBOL);
				State = 5178; Match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5179; Match(CONTEXT_SYMBOL);
				State = 5180; Match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5181; Match(PAGE_SYMBOL);
				State = 5182; Match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5183;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherAdministrativeStatementContext : ParserRuleContext {
		public IToken type;
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return GetRuleContext<KeyCacheListOrPartsContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return GetRuleContext<FlushTablesContext>(0);
		}
		public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode KILL_SYMBOL() { return GetToken(MySQLParser.KILL_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return GetRuleContext<PreloadTailContext>(0);
		}
		public ITerminalNode LOAD_SYMBOL() { return GetToken(MySQLParser.LOAD_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAdministrativeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOtherAdministrativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOtherAdministrativeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherAdministrativeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherAdministrativeStatementContext otherAdministrativeStatement() {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(Context, State);
		EnterRule(_localctx, 610, RULE_otherAdministrativeStatement);
		int _la;
		try {
			State = 5223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5186; _localctx.type = Match(BINLOG_SYMBOL);
				State = 5187; textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5188; _localctx.type = Match(CACHE_SYMBOL);
				State = 5189; Match(INDEX_SYMBOL);
				State = 5190; keyCacheListOrParts();
				State = 5191; Match(IN_SYMBOL);
				State = 5194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,646,Context) ) {
				case 1:
					{
					State = 5192; identifier();
					}
					break;
				case 2:
					{
					State = 5193; Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5196; _localctx.type = Match(FLUSH_SYMBOL);
				State = 5198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,647,Context) ) {
				case 1:
					{
					State = 5197; noWriteToBinLog();
					}
					break;
				}
				State = 5209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
				case 1:
					{
					State = 5200; flushTables();
					}
					break;
				case 2:
					{
					State = 5201; flushOption();
					State = 5206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5202; Match(COMMA_SYMBOL);
						State = 5203; flushOption();
						}
						}
						State = 5208;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5211; _localctx.type = Match(KILL_SYMBOL);
				State = 5213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
				case 1:
					{
					State = 5212;
					_la = TokenStream.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5215; expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5216; _localctx.type = Match(LOAD_SYMBOL);
				State = 5217; Match(INDEX_SYMBOL);
				State = 5218; Match(INTO_SYMBOL);
				State = 5219; Match(CACHE_SYMBOL);
				State = 5220; preloadTail();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5221;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 5222; _localctx.type = Match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListOrPartsContext : ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return GetRuleContext<KeyCacheListContext>(0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return GetRuleContext<AssignToKeycachePartitionContext>(0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheListOrParts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheListOrParts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheListOrParts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyCacheListOrParts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListOrPartsContext keyCacheListOrParts() {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(Context, State);
		EnterRule(_localctx, 612, RULE_keyCacheListOrParts);
		try {
			State = 5227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,652,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5225; keyCacheList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5226; assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListContext : ParserRuleContext {
		public AssignToKeycacheContext[] assignToKeycache() {
			return GetRuleContexts<AssignToKeycacheContext>();
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return GetRuleContext<AssignToKeycacheContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyCacheList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListContext keyCacheList() {
		KeyCacheListContext _localctx = new KeyCacheListContext(Context, State);
		EnterRule(_localctx, 614, RULE_keyCacheList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5229; assignToKeycache();
			State = 5234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5230; Match(COMMA_SYMBOL);
				State = 5231; assignToKeycache();
				}
				}
				State = 5236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycacheContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycache; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycache(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignToKeycache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycacheContext assignToKeycache() {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(Context, State);
		EnterRule(_localctx, 616, RULE_assignToKeycache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5237; tableRef();
			State = 5239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5238; cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycachePartitionContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycachePartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycachePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycachePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignToKeycachePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycachePartitionContext assignToKeycachePartition() {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(Context, State);
		EnterRule(_localctx, 618, RULE_assignToKeycachePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5241; tableRef();
			State = 5242; Match(PARTITION_SYMBOL);
			State = 5243; Match(OPEN_PAR_SYMBOL);
			State = 5244; allOrPartitionNameList();
			State = 5245; Match(CLOSE_PAR_SYMBOL);
			State = 5247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5246; cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheKeyListContext : ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return GetRuleContext<KeyUsageListContext>(0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheKeyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCacheKeyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCacheKeyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheKeyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheKeyListContext cacheKeyList() {
		CacheKeyListContext _localctx = new CacheKeyListContext(Context, State);
		EnterRule(_localctx, 620, RULE_cacheKeyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5249; keyOrIndex();
			State = 5250; Match(OPEN_PAR_SYMBOL);
			State = 5252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,656,Context) ) {
			case 1:
				{
				State = 5251; keyUsageList();
				}
				break;
			}
			State = 5254; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyUsageElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageElementContext keyUsageElement() {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(Context, State);
		EnterRule(_localctx, 622, RULE_keyUsageElement);
		try {
			State = 5258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,657,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5256; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5257; Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageListContext : ParserRuleContext {
		public KeyUsageElementContext[] keyUsageElement() {
			return GetRuleContexts<KeyUsageElementContext>();
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return GetRuleContext<KeyUsageElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyUsageList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageListContext keyUsageList() {
		KeyUsageListContext _localctx = new KeyUsageListContext(Context, State);
		EnterRule(_localctx, 624, RULE_keyUsageList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5260; keyUsageElement();
			State = 5265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5261; Match(COMMA_SYMBOL);
				State = 5262; keyUsageElement();
				}
				}
				State = 5267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public IToken option;
		public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return GetRuleContext<LogTypeContext>(0);
		}
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode OPTIMIZER_COSTS_SYMBOL() { return GetToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 626, RULE_flushOption);
		int _la;
		try {
			State = 5283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5268;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) {
					{
					State = 5269; logType();
					}
				}

				State = 5272; _localctx.option = Match(LOGS_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5273; _localctx.option = Match(RELAY_SYMBOL);
				State = 5274; Match(LOGS_SYMBOL);
				State = 5276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
				case 1:
					{
					State = 5275; channel();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5278;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5279; _localctx.option = Match(QUERY_SYMBOL);
				State = 5280; Match(CACHE_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5281;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 5282; _localctx.option = Match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogTypeContext logType() {
		LogTypeContext _localctx = new LogTypeContext(Context, State);
		EnterRule(_localctx, 628, RULE_logType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5285;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesContext : ParserRuleContext {
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MySQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return GetRuleContext<FlushTablesOptionsContext>(0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesContext flushTables() {
		FlushTablesContext _localctx = new FlushTablesContext(Context, State);
		EnterRule(_localctx, 630, RULE_flushTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5287;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,663,Context) ) {
			case 1:
				{
				State = 5288; Match(WITH_SYMBOL);
				State = 5289; Match(READ_SYMBOL);
				State = 5290; Match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5291; identifierList();
				State = 5293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
				case 1:
					{
					State = 5292; flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesOptionsContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode READ_SYMBOL() { return GetToken(MySQLParser.READ_SYMBOL, 0); }
		public ITerminalNode LOCK_SYMBOL() { return GetToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTablesOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFlushTablesOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFlushTablesOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTablesOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesOptionsContext flushTablesOptions() {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(Context, State);
		EnterRule(_localctx, 632, RULE_flushTablesOptions);
		try {
			State = 5303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5297;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 5298; Match(FOR_SYMBOL);
				State = 5299; Match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5300; Match(WITH_SYMBOL);
				State = 5301; Match(READ_SYMBOL);
				State = 5302; Match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadTailContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public AdminPartitionContext adminPartition() {
			return GetRuleContext<AdminPartitionContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return GetRuleContext<PreloadListContext>(0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadTailContext preloadTail() {
		PreloadTailContext _localctx = new PreloadTailContext(Context, State);
		EnterRule(_localctx, 634, RULE_preloadTail);
		int _la;
		try {
			State = 5315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5305; tableRef();
				State = 5306; adminPartition();
				State = 5308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 5307; cacheKeyList();
					}
				}

				State = 5312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					State = 5310; Match(IGNORE_SYMBOL);
					State = 5311; Match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5314; preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadListContext : ParserRuleContext {
		public PreloadKeysContext[] preloadKeys() {
			return GetRuleContexts<PreloadKeysContext>();
		}
		public PreloadKeysContext preloadKeys(int i) {
			return GetRuleContext<PreloadKeysContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadListContext preloadList() {
		PreloadListContext _localctx = new PreloadListContext(Context, State);
		EnterRule(_localctx, 636, RULE_preloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5317; preloadKeys();
			State = 5322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5318; Match(COMMA_SYMBOL);
				State = 5319; preloadKeys();
				}
				}
				State = 5324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadKeysContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadKeys; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPreloadKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPreloadKeys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadKeys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadKeysContext preloadKeys() {
		PreloadKeysContext _localctx = new PreloadKeysContext(Context, State);
		EnterRule(_localctx, 638, RULE_preloadKeys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5325; tableRef();
			State = 5327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5326; cacheKeyList();
				}
			}

			State = 5331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 5329; Match(IGNORE_SYMBOL);
				State = 5330; Match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminPartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAdminPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAdminPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdminPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdminPartitionContext adminPartition() {
		AdminPartitionContext _localctx = new AdminPartitionContext(Context, State);
		EnterRule(_localctx, 640, RULE_adminPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5333; Match(PARTITION_SYMBOL);
			State = 5334; Match(OPEN_PAR_SYMBOL);
			State = 5335; allOrPartitionNameList();
			State = 5336; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupManagementContext : ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return GetRuleContext<CreateResourceGroupContext>(0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return GetRuleContext<AlterResourceGroupContext>(0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return GetRuleContext<SetResourceGroupContext>(0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return GetRuleContext<DropResourceGroupContext>(0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupManagement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupManagement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupManagement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupManagement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupManagementContext resourceGroupManagement() {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(Context, State);
		EnterRule(_localctx, 642, RULE_resourceGroupManagement);
		try {
			State = 5342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5338; createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5339; alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5340; setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5341; dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateResourceGroupContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MySQLParser.CREATE_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateResourceGroupContext createResourceGroup() {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(Context, State);
		EnterRule(_localctx, 644, RULE_createResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5344; Match(CREATE_SYMBOL);
			State = 5345; Match(RESOURCE_SYMBOL);
			State = 5346; Match(GROUP_SYMBOL);
			State = 5347; identifier();
			State = 5348; Match(TYPE_SYMBOL);
			State = 5350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5349; equal();
				}
			}

			State = 5352;
			_la = TokenStream.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5353; resourceGroupVcpuList();
				}
			}

			State = 5357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5356; resourceGroupPriority();
				}
			}

			State = 5360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5359; resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupVcpuListContext : ParserRuleContext {
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public VcpuNumOrRangeContext[] vcpuNumOrRange() {
			return GetRuleContexts<VcpuNumOrRangeContext>();
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return GetRuleContext<VcpuNumOrRangeContext>(i);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupVcpuList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupVcpuList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupVcpuList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupVcpuList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupVcpuListContext resourceGroupVcpuList() {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(Context, State);
		EnterRule(_localctx, 646, RULE_resourceGroupVcpuList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5362; Match(VCPU_SYMBOL);
			State = 5364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5363; equal();
				}
			}

			State = 5366; vcpuNumOrRange();
			State = 5373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				State = 5368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5367; Match(COMMA_SYMBOL);
					}
				}

				State = 5370; vcpuNumOrRange();
				}
				}
				State = 5375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcpuNumOrRangeContext : ParserRuleContext {
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcpuNumOrRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVcpuNumOrRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVcpuNumOrRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcpuNumOrRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcpuNumOrRangeContext vcpuNumOrRange() {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(Context, State);
		EnterRule(_localctx, 648, RULE_vcpuNumOrRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5376; Match(INT_NUMBER);
			State = 5379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				State = 5377; Match(MINUS_OPERATOR);
				State = 5378; Match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupPriorityContext : ParserRuleContext {
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupPriority; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupPriority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupPriority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupPriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupPriorityContext resourceGroupPriority() {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(Context, State);
		EnterRule(_localctx, 650, RULE_resourceGroupPriority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5381; Match(THREAD_PRIORITY_SYMBOL);
			State = 5383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5382; equal();
				}
			}

			State = 5385; Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupEnableDisableContext : ParserRuleContext {
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupEnableDisable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupEnableDisable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupEnableDisable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupEnableDisable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(Context, State);
		EnterRule(_localctx, 652, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5387;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterResourceGroupContext : ParserRuleContext {
		public ITerminalNode ALTER_SYMBOL() { return GetToken(MySQLParser.ALTER_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterResourceGroupContext alterResourceGroup() {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(Context, State);
		EnterRule(_localctx, 654, RULE_alterResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5389; Match(ALTER_SYMBOL);
			State = 5390; Match(RESOURCE_SYMBOL);
			State = 5391; Match(GROUP_SYMBOL);
			State = 5392; resourceGroupRef();
			State = 5394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5393; resourceGroupVcpuList();
				}
			}

			State = 5397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5396; resourceGroupPriority();
				}
			}

			State = 5400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5399; resourceGroupEnableDisable();
				}
			}

			State = 5403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5402; Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetResourceGroupContext : ParserRuleContext {
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return GetRuleContext<ThreadIdListContext>(0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetResourceGroupContext setResourceGroup() {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(Context, State);
		EnterRule(_localctx, 656, RULE_setResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5405; Match(SET_SYMBOL);
			State = 5406; Match(RESOURCE_SYMBOL);
			State = 5407; Match(GROUP_SYMBOL);
			State = 5408; identifier();
			State = 5411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5409; Match(FOR_SYMBOL);
				State = 5410; threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadIdListContext : ParserRuleContext {
		public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadIdList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThreadIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThreadIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadIdListContext threadIdList() {
		ThreadIdListContext _localctx = new ThreadIdListContext(Context, State);
		EnterRule(_localctx, 658, RULE_threadIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5413; real_ulong_number();
			State = 5420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (COMMA_SYMBOL - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) {
				{
				{
				State = 5415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5414; Match(COMMA_SYMBOL);
					}
				}

				State = 5417; real_ulong_number();
				}
				}
				State = 5422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropResourceGroupContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MySQLParser.DROP_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode GROUP_SYMBOL() { return GetToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		public ITerminalNode FORCE_SYMBOL() { return GetToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropResourceGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDropResourceGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDropResourceGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropResourceGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropResourceGroupContext dropResourceGroup() {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(Context, State);
		EnterRule(_localctx, 660, RULE_dropResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5423; Match(DROP_SYMBOL);
			State = 5424; Match(RESOURCE_SYMBOL);
			State = 5425; Match(GROUP_SYMBOL);
			State = 5426; resourceGroupRef();
			State = 5428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5427; Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		public DescribeStatementContext describeStatement() {
			return GetRuleContext<DescribeStatementContext>(0);
		}
		public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		public HelpCommandContext helpCommand() {
			return GetRuleContext<HelpCommandContext>(0);
		}
		public UseCommandContext useCommand() {
			return GetRuleContext<UseCommandContext>(0);
		}
		public RestartServerContext restartServer() {
			return GetRuleContext<RestartServerContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 662, RULE_utilityStatement);
		try {
			State = 5436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5430; describeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5431; explainStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5432; helpCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5433; useCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5434;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 5435; restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeStatementContext : ParserRuleContext {
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeStatementContext describeStatement() {
		DescribeStatementContext _localctx = new DescribeStatementContext(Context, State);
		EnterRule(_localctx, 664, RULE_describeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5438;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5439; tableRef();
			State = 5442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,690,Context) ) {
			case 1:
				{
				State = 5440; textString();
				}
				break;
			case 2:
				{
				State = 5441; columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return GetRuleContext<ExplainableStatementContext>(0);
		}
		public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 666, RULE_explainStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5444;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
			case 1:
				{
				State = 5445;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5446; Match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5447;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5448; Match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				State = 5449;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 5450; Match(FORMAT_SYMBOL);
				State = 5451; Match(EQUAL_OPERATOR);
				State = 5452; textOrIdentifier();
				}
				break;
			case 4:
				{
				State = 5453;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 5454; Match(ANALYZE_SYMBOL);
				}
				break;
			case 5:
				{
				State = 5455;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 5456; Match(ANALYZE_SYMBOL);
				State = 5457; Match(FORMAT_SYMBOL);
				State = 5458; Match(EQUAL_OPERATOR);
				State = 5459; textOrIdentifier();
				}
				break;
			}
			State = 5462; explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainableStatementContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExplainableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExplainableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainableStatementContext explainableStatement() {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(Context, State);
		EnterRule(_localctx, 668, RULE_explainableStatement);
		try {
			State = 5476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,693,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5464; selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5465;
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				State = 5470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,692,Context) ) {
				case 1:
					{
					State = 5466; deleteStatement();
					}
					break;
				case 2:
					{
					State = 5467; insertStatement();
					}
					break;
				case 3:
					{
					State = 5468; replaceStatement();
					}
					break;
				case 4:
					{
					State = 5469; updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5472;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 5473; Match(FOR_SYMBOL);
				State = 5474; Match(CONNECTION_SYMBOL);
				State = 5475; real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpCommandContext : ParserRuleContext {
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHelpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHelpCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpCommandContext helpCommand() {
		HelpCommandContext _localctx = new HelpCommandContext(Context, State);
		EnterRule(_localctx, 670, RULE_helpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5478; Match(HELP_SYMBOL);
			State = 5479; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseCommandContext : ParserRuleContext {
		public ITerminalNode USE_SYMBOL() { return GetToken(MySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUseCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUseCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseCommandContext useCommand() {
		UseCommandContext _localctx = new UseCommandContext(Context, State);
		EnterRule(_localctx, 672, RULE_useCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5481; Match(USE_SYMBOL);
			State = 5482; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestartServerContext : ParserRuleContext {
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restartServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRestartServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRestartServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestartServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestartServerContext restartServer() {
		RestartServerContext _localctx = new RestartServerContext(Context, State);
		EnterRule(_localctx, 674, RULE_restartServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5484; Match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR_SYMBOL() { return GetToken(MySQLParser.OR_SYMBOL, 0); }
		public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIsContext : ExprContext {
		public IToken type;
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ExprIsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode XOR_SYMBOL() { return GetToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 676;
		EnterRecursionRule(_localctx, 676, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5487; boolPri(0);
				State = 5493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,695,Context) ) {
				case 1:
					{
					State = 5488; Match(IS_SYMBOL);
					State = 5490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
						{
						State = 5489; notRule();
						}
					}

					State = 5492;
					((ExprIsContext)_localctx).type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5495; Match(NOT_SYMBOL);
				State = 5496; expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5510;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5508;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5499;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5500;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND_SYMBOL || _la==LOGICAL_AND_OPERATOR) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5501; expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5502;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5503; Match(XOR_SYMBOL);
						State = 5504; expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5505;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5506;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR_SYMBOL || _la==LOGICAL_OR_OPERATOR) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5507; expr(2);
						}
						break;
					}
					} 
				}
				State = 5512;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolPriContext : ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolPri; } }
	 
		public BoolPriContext() { }
		public virtual void CopyFrom(BoolPriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprPredicateContext : BoolPriContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprPredicateContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprCompareContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprCompareContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprAllAnyContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprAllAny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprAllAny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprAllAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprIsNullContext : BoolPriContext {
		public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		public ITerminalNode IS_SYMBOL() { return GetToken(MySQLParser.IS_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public PrimaryExprIsNullContext(BoolPriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprIsNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprIsNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExprIsNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolPriContext boolPri() {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolPriContext _localctx = new BoolPriContext(Context, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 678;
		EnterRecursionRule(_localctx, 678, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 5514; predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5533;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5531;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5516;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5517; Match(IS_SYMBOL);
						State = 5519;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
							{
							State = 5518; notRule();
							}
						}

						State = 5521; Match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5522;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5523; compOp();
						State = 5524; predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5526;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5527; compOp();
						State = 5528;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5529; subquery();
						}
						break;
					}
					} 
				}
				State = 5535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode NULL_SAFE_EQUAL_OPERATOR() { return GetToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 680, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5536;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)) | (1L << (NOT_EQUAL_OPERATOR - 750)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		public PredicateOperationsContext predicateOperations() {
			return GetRuleContext<PredicateOperationsContext>(0);
		}
		public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode OF_SYMBOL() { return GetToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 682, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5538; bitExpr(0);
			State = 5552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				{
				State = 5540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					State = 5539; notRule();
					}
				}

				State = 5542; predicateOperations();
				}
				break;
			case 2:
				{
				State = 5543;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 5544; Match(MEMBER_SYMBOL);
				State = 5546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 5545; Match(OF_SYMBOL);
					}
				}

				State = 5548; simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				State = 5549; Match(SOUNDS_SYMBOL);
				State = 5550; Match(LIKE_SYMBOL);
				State = 5551; bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOperationsContext : ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOperations; } }
	 
		public PredicateOperationsContext() { }
		public virtual void CopyFrom(PredicateOperationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprRegexContext : PredicateOperationsContext {
		public ITerminalNode REGEXP_SYMBOL() { return GetToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprBetweenContext : PredicateOperationsContext {
		public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprBetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprInContext : PredicateOperationsContext {
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExprLikeContext : PredicateOperationsContext {
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExprLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOperationsContext predicateOperations() {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(Context, State);
		EnterRule(_localctx, 684, RULE_predicateOperations);
		try {
			State = 5575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5554; Match(IN_SYMBOL);
				State = 5560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
				case 1:
					{
					State = 5555; subquery();
					}
					break;
				case 2:
					{
					State = 5556; Match(OPEN_PAR_SYMBOL);
					State = 5557; exprList();
					State = 5558; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5562; Match(BETWEEN_SYMBOL);
				State = 5563; bitExpr(0);
				State = 5564; Match(AND_SYMBOL);
				State = 5565; predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5567; Match(LIKE_SYMBOL);
				State = 5568; simpleExpr(0);
				State = 5571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
				case 1:
					{
					State = 5569; Match(ESCAPE_SYMBOL);
					State = 5570; simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5573; Match(REGEXP_SYMBOL);
				State = 5574; bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitExprContext : ParserRuleContext {
		public IToken op;
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		public ITerminalNode BITWISE_XOR_OPERATOR() { return GetToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode DIV_OPERATOR() { return GetToken(MySQLParser.DIV_OPERATOR, 0); }
		public ITerminalNode MOD_OPERATOR() { return GetToken(MySQLParser.MOD_OPERATOR, 0); }
		public ITerminalNode DIV_SYMBOL() { return GetToken(MySQLParser.DIV_SYMBOL, 0); }
		public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public ITerminalNode SHIFT_LEFT_OPERATOR() { return GetToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public ITerminalNode SHIFT_RIGHT_OPERATOR() { return GetToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public ITerminalNode BITWISE_AND_OPERATOR() { return GetToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public ITerminalNode BITWISE_OR_OPERATOR() { return GetToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitExprContext bitExpr() {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitExprContext _localctx = new BitExprContext(Context, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 686;
		EnterRecursionRule(_localctx, 686, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5578; simpleExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5606;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,709,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5604;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5580;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 5581; _localctx.op = Match(BITWISE_XOR_OPERATOR);
						State = 5582; bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5583;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 5584;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIV_SYMBOL || _la==MOD_SYMBOL || ((((_la - 760)) & ~0x3f) == 0 && ((1L << (_la - 760)) & ((1L << (MULT_OPERATOR - 760)) | (1L << (DIV_OPERATOR - 760)) | (1L << (MOD_OPERATOR - 760)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5585; bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5586;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 5587;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5588; bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5589;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5590;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5591; bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5592;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5593; _localctx.op = Match(BITWISE_AND_OPERATOR);
						State = 5594; bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5595;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5596; _localctx.op = Match(BITWISE_OR_OPERATOR);
						State = 5597; bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5598;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 5599;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5600; Match(INTERVAL_SYMBOL);
						State = 5601; expr(0);
						State = 5602; interval();
						}
						break;
					}
					} 
				}
				State = 5608;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,709,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
	 
		public SimpleExprContext() { }
		public virtual void CopyFrom(SimpleExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExprConvertContext : SimpleExprContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConvert(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprVariableContext : SimpleExprContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SimpleExprVariableContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCastContext : SimpleExprContext {
		public ITerminalNode CAST_SYMBOL() { return GetToken(MySQLParser.CAST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return GetRuleContext<ArrayCastContext>(0);
		}
		public SimpleExprCastContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprUnaryContext : SimpleExprContext {
		public IToken op;
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public ITerminalNode BITWISE_NOT_OPERATOR() { return GetToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprOdbcContext : SimpleExprContext {
		public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprOdbc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprOdbc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprOdbc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprRuntimeFunctionContext : SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return GetRuleContext<RuntimeFunctionCallContext>(0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprRuntimeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprRuntimeFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprRuntimeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprFunctionContext : SimpleExprContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExprFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCollateContext : SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public SimpleExprCollateContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprMatchContext : SimpleExprContext {
		public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return GetRuleContext<IdentListArgContext>(0);
		}
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return GetRuleContext<FulltextOptionsContext>(0);
		}
		public SimpleExprMatchContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprMatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprMatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprMatch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprWindowingFunctionContext : SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return GetRuleContext<WindowFunctionCallContext>(0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWindowingFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWindowingFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprWindowingFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprBinaryContext : SimpleExprContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprBinaryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprColumnRefContext : SimpleExprContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprColumnRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprColumnRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprColumnRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprParamMarkerContext : SimpleExprContext {
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprParamMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprParamMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprParamMarker(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprSumContext : SimpleExprContext {
		public SumExprContext sumExpr() {
			return GetRuleContext<SumExprContext>(0);
		}
		public SimpleExprSumContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprConvertUsingContext : SimpleExprContext {
		public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvertUsing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvertUsing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConvertUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprSubQueryContext : SimpleExprContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSubQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSubQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprSubQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprGroupingOperationContext : SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return GetRuleContext<GroupingOperationContext>(0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprGroupingOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprGroupingOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprNotContext : SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return GetRuleContext<Not2RuleContext>(0);
		}
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprNotContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprValuesContext : SimpleExprContext {
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprValues(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprDefaultContext : SimpleExprContext {
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprListContext : SimpleExprContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprIntervalContext : SimpleExprContext {
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprInterval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprInterval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprCaseContext : SimpleExprContext {
		public ITerminalNode CASE_SYMBOL() { return GetToken(MySQLParser.CASE_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		public ThenExpressionContext[] thenExpression() {
			return GetRuleContexts<ThenExpressionContext>();
		}
		public ThenExpressionContext thenExpression(int i) {
			return GetRuleContext<ThenExpressionContext>(i);
		}
		public ElseExpressionContext elseExpression() {
			return GetRuleContext<ElseExpressionContext>(0);
		}
		public SimpleExprCaseContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprConcatContext : SimpleExprContext {
		public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public ITerminalNode CONCAT_PIPES_SYMBOL() { return GetToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExprLiteralContext : SimpleExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExprLiteralContext(SimpleExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExprContext _localctx = new SimpleExprContext(Context, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 688;
		EnterRecursionRule(_localctx, 688, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,719,Context) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5610; variable();
				State = 5614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
				case 1:
					{
					State = 5611; equal();
					State = 5612; expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5616; columnRef();
				State = 5618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,711,Context) ) {
				case 1:
					{
					State = 5617; jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5620; runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5621; functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5622; literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5623; Match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5624; sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5625;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5626; groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5627;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5628; windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5629;
				((SimpleExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 758)) & ~0x3f) == 0 && ((1L << (_la - 758)) & ((1L << (PLUS_OPERATOR - 758)) | (1L << (MINUS_OPERATOR - 758)) | (1L << (BITWISE_NOT_OPERATOR - 758)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5630; simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5631; not2Rule();
				State = 5632; simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					State = 5634; Match(ROW_SYMBOL);
					}
				}

				State = 5637; Match(OPEN_PAR_SYMBOL);
				State = 5638; exprList();
				State = 5639; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 5641; Match(EXISTS_SYMBOL);
					}
				}

				State = 5644; subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5645; Match(OPEN_CURLY_SYMBOL);
				State = 5646; identifier();
				State = 5647; expr(0);
				State = 5648; Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5650; Match(MATCH_SYMBOL);
				State = 5651; identListArg();
				State = 5652; Match(AGAINST_SYMBOL);
				State = 5653; Match(OPEN_PAR_SYMBOL);
				State = 5654; bitExpr(0);
				State = 5656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 5655; fulltextOptions();
					}
				}

				State = 5658; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5660; Match(BINARY_SYMBOL);
				State = 5661; simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5662; Match(CAST_SYMBOL);
				State = 5663; Match(OPEN_PAR_SYMBOL);
				State = 5664; expr(0);
				State = 5665; Match(AS_SYMBOL);
				State = 5666; castType();
				State = 5668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,715,Context) ) {
				case 1:
					{
					State = 5667; arrayCast();
					}
					break;
				}
				State = 5670; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5672; Match(CASE_SYMBOL);
				State = 5674;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5673; expr(0);
					}
					break;
				}
				State = 5679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5676; whenExpression();
					State = 5677; thenExpression();
					}
					}
					State = 5681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_SYMBOL );
				State = 5684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					State = 5683; elseExpression();
					}
				}

				State = 5686; Match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5688; Match(CONVERT_SYMBOL);
				State = 5689; Match(OPEN_PAR_SYMBOL);
				State = 5690; expr(0);
				State = 5691; Match(COMMA_SYMBOL);
				State = 5692; castType();
				State = 5693; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5695; Match(CONVERT_SYMBOL);
				State = 5696; Match(OPEN_PAR_SYMBOL);
				State = 5697; expr(0);
				State = 5698; Match(USING_SYMBOL);
				State = 5699; charsetName();
				State = 5700; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5702; Match(DEFAULT_SYMBOL);
				State = 5703; Match(OPEN_PAR_SYMBOL);
				State = 5704; simpleIdentifier();
				State = 5705; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5707; Match(VALUES_SYMBOL);
				State = 5708; Match(OPEN_PAR_SYMBOL);
				State = 5709; simpleIdentifier();
				State = 5710; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5712; Match(INTERVAL_SYMBOL);
				State = 5713; expr(0);
				State = 5714; interval();
				State = 5715; Match(PLUS_OPERATOR);
				State = 5716; expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5726;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5720;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 5721; Match(CONCAT_PIPES_SYMBOL);
						State = 5722; simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5723;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 5724; Match(COLLATE_SYMBOL);
						State = 5725; textOrIdentifier();
						}
						break;
					}
					} 
				}
				State = 5730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayCastContext : ParserRuleContext {
		public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterArrayCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitArrayCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCastContext arrayCast() {
		ArrayCastContext _localctx = new ArrayCastContext(Context, State);
		EnterRule(_localctx, 690, RULE_arrayCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5731;
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			State = 5732; Match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		public ITerminalNode JSON_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return GetToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 692, RULE_jsonOperator);
		try {
			State = 5740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,722,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5734;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 5735; Match(JSON_SEPARATOR_SYMBOL);
				State = 5736; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5737;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 5738; Match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				State = 5739; textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExprContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return GetRuleContext<InSumExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode BIT_AND_SYMBOL() { return GetToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public ITerminalNode BIT_OR_SYMBOL() { return GetToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public ITerminalNode BIT_XOR_SYMBOL() { return GetToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return GetRuleContext<JsonFunctionContext>(0);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode COUNT_SYMBOL() { return GetToken(MySQLParser.COUNT_SYMBOL, 0); }
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode MIN_SYMBOL() { return GetToken(MySQLParser.MIN_SYMBOL, 0); }
		public ITerminalNode MAX_SYMBOL() { return GetToken(MySQLParser.MAX_SYMBOL, 0); }
		public ITerminalNode STD_SYMBOL() { return GetToken(MySQLParser.STD_SYMBOL, 0); }
		public ITerminalNode VARIANCE_SYMBOL() { return GetToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public ITerminalNode STDDEV_SAMP_SYMBOL() { return GetToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public ITerminalNode VAR_SAMP_SYMBOL() { return GetToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public ITerminalNode SUM_SYMBOL() { return GetToken(MySQLParser.SUM_SYMBOL, 0); }
		public ITerminalNode GROUP_CONCAT_SYMBOL() { return GetToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public ITerminalNode SEPARATOR_SYMBOL() { return GetToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSumExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSumExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExprContext sumExpr() {
		SumExprContext _localctx = new SumExprContext(Context, State);
		EnterRule(_localctx, 694, RULE_sumExpr);
		int _la;
		try {
			State = 5873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,745,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5742; _localctx.name = Match(AVG_SYMBOL);
				State = 5743; Match(OPEN_PAR_SYMBOL);
				State = 5745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
				case 1:
					{
					State = 5744; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5747; inSumExpr();
				State = 5748; Match(CLOSE_PAR_SYMBOL);
				State = 5751;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
				case 1:
					{
					State = 5749;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5750; windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5753;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIT_AND_SYMBOL) | (1L << BIT_OR_SYMBOL) | (1L << BIT_XOR_SYMBOL))) != 0)) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5754; Match(OPEN_PAR_SYMBOL);
				State = 5755; inSumExpr();
				State = 5756; Match(CLOSE_PAR_SYMBOL);
				State = 5759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,725,Context) ) {
				case 1:
					{
					State = 5757;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5758; windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5761;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5762; jsonFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5763; _localctx.name = Match(COUNT_SYMBOL);
				State = 5764; Match(OPEN_PAR_SYMBOL);
				State = 5766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					State = 5765; Match(ALL_SYMBOL);
					}
				}

				State = 5768; Match(MULT_OPERATOR);
				State = 5769; Match(CLOSE_PAR_SYMBOL);
				State = 5772;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
				case 1:
					{
					State = 5770;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5771; windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5774; _localctx.name = Match(COUNT_SYMBOL);
				State = 5775; Match(OPEN_PAR_SYMBOL);
				State = 5783;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,729,Context) ) {
				case 1:
					{
					State = 5777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						State = 5776; Match(ALL_SYMBOL);
						}
					}

					State = 5779; Match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					State = 5780; inSumExpr();
					}
					break;
				case 3:
					{
					State = 5781; Match(DISTINCT_SYMBOL);
					State = 5782; exprList();
					}
					break;
				}
				State = 5785; Match(CLOSE_PAR_SYMBOL);
				State = 5788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
				case 1:
					{
					State = 5786;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5787; windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5790; _localctx.name = Match(MIN_SYMBOL);
				State = 5791; Match(OPEN_PAR_SYMBOL);
				State = 5793;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
				case 1:
					{
					State = 5792; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5795; inSumExpr();
				State = 5796; Match(CLOSE_PAR_SYMBOL);
				State = 5799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
				case 1:
					{
					State = 5797;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5798; windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5801; _localctx.name = Match(MAX_SYMBOL);
				State = 5802; Match(OPEN_PAR_SYMBOL);
				State = 5804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,733,Context) ) {
				case 1:
					{
					State = 5803; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5806; inSumExpr();
				State = 5807; Match(CLOSE_PAR_SYMBOL);
				State = 5810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,734,Context) ) {
				case 1:
					{
					State = 5808;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5809; windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5812; _localctx.name = Match(STD_SYMBOL);
				State = 5813; Match(OPEN_PAR_SYMBOL);
				State = 5814; inSumExpr();
				State = 5815; Match(CLOSE_PAR_SYMBOL);
				State = 5818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,735,Context) ) {
				case 1:
					{
					State = 5816;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5817; windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5820; _localctx.name = Match(VARIANCE_SYMBOL);
				State = 5821; Match(OPEN_PAR_SYMBOL);
				State = 5822; inSumExpr();
				State = 5823; Match(CLOSE_PAR_SYMBOL);
				State = 5826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,736,Context) ) {
				case 1:
					{
					State = 5824;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5825; windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5828; _localctx.name = Match(STDDEV_SAMP_SYMBOL);
				State = 5829; Match(OPEN_PAR_SYMBOL);
				State = 5830; inSumExpr();
				State = 5831; Match(CLOSE_PAR_SYMBOL);
				State = 5834;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
				case 1:
					{
					State = 5832;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5833; windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5836; _localctx.name = Match(VAR_SAMP_SYMBOL);
				State = 5837; Match(OPEN_PAR_SYMBOL);
				State = 5838; inSumExpr();
				State = 5839; Match(CLOSE_PAR_SYMBOL);
				State = 5842;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
				case 1:
					{
					State = 5840;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5841; windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5844; _localctx.name = Match(SUM_SYMBOL);
				State = 5845; Match(OPEN_PAR_SYMBOL);
				State = 5847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
				case 1:
					{
					State = 5846; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5849; inSumExpr();
				State = 5850; Match(CLOSE_PAR_SYMBOL);
				State = 5853;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
				case 1:
					{
					State = 5851;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5852; windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5855; _localctx.name = Match(GROUP_CONCAT_SYMBOL);
				State = 5856; Match(OPEN_PAR_SYMBOL);
				State = 5858;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
				case 1:
					{
					State = 5857; Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5860; exprList();
				State = 5862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					State = 5861; orderClause();
					}
				}

				State = 5866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					State = 5864; Match(SEPARATOR_SYMBOL);
					State = 5865; textString();
					}
				}

				State = 5868; Match(CLOSE_PAR_SYMBOL);
				State = 5871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
				case 1:
					{
					State = 5869;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5870; windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingOperationContext : ParserRuleContext {
		public ITerminalNode GROUPING_SYMBOL() { return GetToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingOperationContext groupingOperation() {
		GroupingOperationContext _localctx = new GroupingOperationContext(Context, State);
		EnterRule(_localctx, 696, RULE_groupingOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5875; Match(GROUPING_SYMBOL);
			State = 5876; Match(OPEN_PAR_SYMBOL);
			State = 5877; exprList();
			State = 5878; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFunctionCallContext : ParserRuleContext {
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode ROW_NUMBER_SYMBOL() { return GetToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public ITerminalNode RANK_SYMBOL() { return GetToken(MySQLParser.RANK_SYMBOL, 0); }
		public ITerminalNode DENSE_RANK_SYMBOL() { return GetToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public ITerminalNode CUME_DIST_SYMBOL() { return GetToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public ITerminalNode PERCENT_RANK_SYMBOL() { return GetToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public ITerminalNode NTILE_SYMBOL() { return GetToken(MySQLParser.NTILE_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LEAD_SYMBOL() { return GetToken(MySQLParser.LEAD_SYMBOL, 0); }
		public ITerminalNode LAG_SYMBOL() { return GetToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return GetRuleContext<LeadLagInfoContext>(0);
		}
		public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ITerminalNode FIRST_VALUE_SYMBOL() { return GetToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public ITerminalNode LAST_VALUE_SYMBOL() { return GetToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		public ITerminalNode NTH_VALUE_SYMBOL() { return GetToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowFunctionCallContext windowFunctionCall() {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(Context, State);
		EnterRule(_localctx, 698, RULE_windowFunctionCall);
		int _la;
		try {
			State = 5922;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5880;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 678)) & ~0x3f) == 0 && ((1L << (_la - 678)) & ((1L << (CUME_DIST_SYMBOL - 678)) | (1L << (DENSE_RANK_SYMBOL - 678)) | (1L << (PERCENT_RANK_SYMBOL - 678)) | (1L << (RANK_SYMBOL - 678)) | (1L << (ROW_NUMBER_SYMBOL - 678)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5881; parentheses();
				State = 5882; windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5884; Match(NTILE_SYMBOL);
				State = 5885; simpleExprWithParentheses();
				State = 5886; windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5888;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5889; Match(OPEN_PAR_SYMBOL);
				State = 5890; expr(0);
				State = 5892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5891; leadLagInfo();
					}
				}

				State = 5894; Match(CLOSE_PAR_SYMBOL);
				State = 5896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5895; nullTreatment();
					}
				}

				State = 5898; windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5900;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5901; exprWithParentheses();
				State = 5903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5902; nullTreatment();
					}
				}

				State = 5905; windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5907; Match(NTH_VALUE_SYMBOL);
				State = 5908; Match(OPEN_PAR_SYMBOL);
				State = 5909; expr(0);
				State = 5910; Match(COMMA_SYMBOL);
				State = 5911; simpleExpr(0);
				State = 5912; Match(CLOSE_PAR_SYMBOL);
				State = 5915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 5913; Match(FROM_SYMBOL);
					State = 5914;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5917; nullTreatment();
					}
				}

				State = 5920; windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		public ITerminalNode OVER_SYMBOL() { return GetToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 700, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924; Match(OVER_SYMBOL);
			State = 5927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
			case 1:
				{
				State = 5925; windowName();
				}
				break;
			case 2:
				{
				State = 5926; windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadLagInfoContext : ParserRuleContext {
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode PARAM_MARKER() { return GetToken(MySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadLagInfo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeadLagInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeadLagInfo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeadLagInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeadLagInfoContext leadLagInfo() {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(Context, State);
		EnterRule(_localctx, 702, RULE_leadLagInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5929; Match(COMMA_SYMBOL);
			State = 5932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				State = 5930; ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				State = 5931; Match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 5934; Match(COMMA_SYMBOL);
				State = 5935; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullTreatment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullTreatment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullTreatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 704, RULE_nullTreatment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5938;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5939; Match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonFunctionContext : ParserRuleContext {
		public ITerminalNode JSON_ARRAYAGG_SYMBOL() { return GetToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext[] inSumExpr() {
			return GetRuleContexts<InSumExprContext>();
		}
		public InSumExprContext inSumExpr(int i) {
			return GetRuleContext<InSumExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public ITerminalNode JSON_OBJECTAGG_SYMBOL() { return GetToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJsonFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJsonFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonFunctionContext jsonFunction() {
		JsonFunctionContext _localctx = new JsonFunctionContext(Context, State);
		EnterRule(_localctx, 706, RULE_jsonFunction);
		try {
			State = 5957;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5941; Match(JSON_ARRAYAGG_SYMBOL);
				State = 5942; Match(OPEN_PAR_SYMBOL);
				State = 5943; inSumExpr();
				State = 5944; Match(CLOSE_PAR_SYMBOL);
				State = 5946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
				case 1:
					{
					State = 5945; windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5948; Match(JSON_OBJECTAGG_SYMBOL);
				State = 5949; Match(OPEN_PAR_SYMBOL);
				State = 5950; inSumExpr();
				State = 5951; Match(COMMA_SYMBOL);
				State = 5952; inSumExpr();
				State = 5953; Match(CLOSE_PAR_SYMBOL);
				State = 5955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 5954; windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSumExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ALL_SYMBOL() { return GetToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSumExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInSumExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInSumExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInSumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InSumExprContext inSumExpr() {
		InSumExprContext _localctx = new InSumExprContext(Context, State);
		EnterRule(_localctx, 708, RULE_inSumExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
			case 1:
				{
				State = 5959; Match(ALL_SYMBOL);
				}
				break;
			}
			State = 5962; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListArgContext : ParserRuleContext {
		public IdentListContext identList() {
			return GetRuleContext<IdentListContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identListArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentListArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentListArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentListArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentListArgContext identListArg() {
		IdentListArgContext _localctx = new IdentListArgContext(Context, State);
		EnterRule(_localctx, 710, RULE_identListArg);
		try {
			State = 5969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5964; identList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5965; Match(OPEN_PAR_SYMBOL);
				State = 5966; identList();
				State = 5967; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(Context, State);
		EnterRule(_localctx, 712, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5971; simpleIdentifier();
			State = 5976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5972; Match(COMMA_SYMBOL);
				State = 5973; simpleIdentifier();
				}
				}
				State = 5978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextOptionsContext : ParserRuleContext {
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFulltextOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FulltextOptionsContext fulltextOptions() {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(Context, State);
		EnterRule(_localctx, 714, RULE_fulltextOptions);
		int _la;
		try {
			State = 5994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5979; Match(IN_SYMBOL);
				State = 5980; Match(BOOLEAN_SYMBOL);
				State = 5981; Match(MODE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5982; Match(IN_SYMBOL);
				State = 5983; Match(NATURAL_SYMBOL);
				State = 5984; Match(LANGUAGE_SYMBOL);
				State = 5985; Match(MODE_SYMBOL);
				State = 5989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5986; Match(WITH_SYMBOL);
					State = 5987; Match(QUERY_SYMBOL);
					State = 5988; Match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5991; Match(WITH_SYMBOL);
				State = 5992; Match(QUERY_SYMBOL);
				State = 5993; Match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionCallContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MySQLParser.INSERT_SYMBOL, 0); }
		public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ITerminalNode LEFT_SYMBOL() { return GetToken(MySQLParser.LEFT_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode CURDATE_SYMBOL() { return GetToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public ITerminalNode CURTIME_SYMBOL() { return GetToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		public ITerminalNode DATE_ADD_SYMBOL() { return GetToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public ITerminalNode DATE_SUB_SYMBOL() { return GetToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode EXTRACT_SYMBOL() { return GetToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return GetRuleContext<DateTimeTtypeContext>(0);
		}
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode POSITION_SYMBOL() { return GetToken(MySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return GetRuleContext<SubstringFunctionContext>(0);
		}
		public ITerminalNode SYSDATE_SYMBOL() { return GetToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode UTC_DATE_SYMBOL() { return GetToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public ITerminalNode UTC_TIME_SYMBOL() { return GetToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public ITerminalNode UTC_TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MOD_SYMBOL() { return GetToken(MySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode REPEAT_SYMBOL() { return GetToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return GetRuleContext<WsNumCodepointsContext>(0);
		}
		public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return GetRuleContext<WeightStringLevelsContext>(0);
		}
		public GeometryFunctionContext geometryFunction() {
			return GetRuleContext<GeometryFunctionContext>(0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRuntimeFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRuntimeFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionCallContext runtimeFunctionCall() {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(Context, State);
		EnterRule(_localctx, 716, RULE_runtimeFunctionCall);
		int _la;
		try {
			State = 6269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,780,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5996; _localctx.name = Match(CHAR_SYMBOL);
				State = 5997; Match(OPEN_PAR_SYMBOL);
				State = 5998; exprList();
				State = 6001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 5999; Match(USING_SYMBOL);
					State = 6000; charsetName();
					}
				}

				State = 6003; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6005; _localctx.name = Match(CURRENT_USER_SYMBOL);
				State = 6007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
				case 1:
					{
					State = 6006; parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6009; _localctx.name = Match(DATE_SYMBOL);
				State = 6010; exprWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6011; _localctx.name = Match(DAY_SYMBOL);
				State = 6012; exprWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6013; _localctx.name = Match(HOUR_SYMBOL);
				State = 6014; exprWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6015; _localctx.name = Match(INSERT_SYMBOL);
				State = 6016; Match(OPEN_PAR_SYMBOL);
				State = 6017; expr(0);
				State = 6018; Match(COMMA_SYMBOL);
				State = 6019; expr(0);
				State = 6020; Match(COMMA_SYMBOL);
				State = 6021; expr(0);
				State = 6022; Match(COMMA_SYMBOL);
				State = 6023; expr(0);
				State = 6024; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6026; _localctx.name = Match(INTERVAL_SYMBOL);
				State = 6027; Match(OPEN_PAR_SYMBOL);
				State = 6028; expr(0);
				State = 6031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6029; Match(COMMA_SYMBOL);
					State = 6030; expr(0);
					}
					}
					State = 6033;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA_SYMBOL );
				State = 6035; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6037; _localctx.name = Match(LEFT_SYMBOL);
				State = 6038; Match(OPEN_PAR_SYMBOL);
				State = 6039; expr(0);
				State = 6040; Match(COMMA_SYMBOL);
				State = 6041; expr(0);
				State = 6042; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6044; _localctx.name = Match(MINUTE_SYMBOL);
				State = 6045; exprWithParentheses();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6046; _localctx.name = Match(MONTH_SYMBOL);
				State = 6047; exprWithParentheses();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6048; _localctx.name = Match(RIGHT_SYMBOL);
				State = 6049; Match(OPEN_PAR_SYMBOL);
				State = 6050; expr(0);
				State = 6051; Match(COMMA_SYMBOL);
				State = 6052; expr(0);
				State = 6053; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6055; _localctx.name = Match(SECOND_SYMBOL);
				State = 6056; exprWithParentheses();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6057; _localctx.name = Match(TIME_SYMBOL);
				State = 6058; exprWithParentheses();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6059; _localctx.name = Match(TIMESTAMP_SYMBOL);
				State = 6060; Match(OPEN_PAR_SYMBOL);
				State = 6061; expr(0);
				State = 6064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6062; Match(COMMA_SYMBOL);
					State = 6063; expr(0);
					}
				}

				State = 6066; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6068; trimFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6069; _localctx.name = Match(USER_SYMBOL);
				State = 6070; parentheses();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6071; _localctx.name = Match(VALUES_SYMBOL);
				State = 6072; exprWithParentheses();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6073; _localctx.name = Match(YEAR_SYMBOL);
				State = 6074; exprWithParentheses();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6075;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6076; Match(OPEN_PAR_SYMBOL);
				State = 6077; expr(0);
				State = 6078; Match(COMMA_SYMBOL);
				State = 6084;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
				case 1:
					{
					State = 6079; expr(0);
					}
					break;
				case 2:
					{
					State = 6080; Match(INTERVAL_SYMBOL);
					State = 6081; expr(0);
					State = 6082; interval();
					}
					break;
				}
				State = 6086; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6088; _localctx.name = Match(CURDATE_SYMBOL);
				State = 6090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 6089; parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6092; _localctx.name = Match(CURTIME_SYMBOL);
				State = 6094;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 6093; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6096;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6097; Match(OPEN_PAR_SYMBOL);
				State = 6098; expr(0);
				State = 6099; Match(COMMA_SYMBOL);
				State = 6100; Match(INTERVAL_SYMBOL);
				State = 6101; expr(0);
				State = 6102; interval();
				State = 6103; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6105; _localctx.name = Match(EXTRACT_SYMBOL);
				State = 6106; Match(OPEN_PAR_SYMBOL);
				State = 6107; interval();
				State = 6108; Match(FROM_SYMBOL);
				State = 6109; expr(0);
				State = 6110; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6112; _localctx.name = Match(GET_FORMAT_SYMBOL);
				State = 6113; Match(OPEN_PAR_SYMBOL);
				State = 6114; dateTimeTtype();
				State = 6115; Match(COMMA_SYMBOL);
				State = 6116; expr(0);
				State = 6117; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6119; _localctx.name = Match(NOW_SYMBOL);
				State = 6121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,770,Context) ) {
				case 1:
					{
					State = 6120; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6123; _localctx.name = Match(POSITION_SYMBOL);
				State = 6124; Match(OPEN_PAR_SYMBOL);
				State = 6125; bitExpr(0);
				State = 6126; Match(IN_SYMBOL);
				State = 6127; expr(0);
				State = 6128; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6130; substringFunction();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6131; _localctx.name = Match(SYSDATE_SYMBOL);
				State = 6133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
				case 1:
					{
					State = 6132; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6135;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6136; Match(OPEN_PAR_SYMBOL);
				State = 6137; intervalTimeStamp();
				State = 6138; Match(COMMA_SYMBOL);
				State = 6139; expr(0);
				State = 6140; Match(COMMA_SYMBOL);
				State = 6141; expr(0);
				State = 6142; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6144; _localctx.name = Match(UTC_DATE_SYMBOL);
				State = 6146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
				case 1:
					{
					State = 6145; parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6148; _localctx.name = Match(UTC_TIME_SYMBOL);
				State = 6150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
				case 1:
					{
					State = 6149; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6152; _localctx.name = Match(UTC_TIMESTAMP_SYMBOL);
				State = 6154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,774,Context) ) {
				case 1:
					{
					State = 6153; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6156; _localctx.name = Match(ASCII_SYMBOL);
				State = 6157; exprWithParentheses();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6158; _localctx.name = Match(CHARSET_SYMBOL);
				State = 6159; exprWithParentheses();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6160; _localctx.name = Match(COALESCE_SYMBOL);
				State = 6161; exprListWithParentheses();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6162; _localctx.name = Match(COLLATION_SYMBOL);
				State = 6163; exprWithParentheses();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6164; _localctx.name = Match(DATABASE_SYMBOL);
				State = 6165; parentheses();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6166; _localctx.name = Match(IF_SYMBOL);
				State = 6167; Match(OPEN_PAR_SYMBOL);
				State = 6168; expr(0);
				State = 6169; Match(COMMA_SYMBOL);
				State = 6170; expr(0);
				State = 6171; Match(COMMA_SYMBOL);
				State = 6172; expr(0);
				State = 6173; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6175; _localctx.name = Match(FORMAT_SYMBOL);
				State = 6176; Match(OPEN_PAR_SYMBOL);
				State = 6177; expr(0);
				State = 6178; Match(COMMA_SYMBOL);
				State = 6179; expr(0);
				State = 6182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6180; Match(COMMA_SYMBOL);
					State = 6181; expr(0);
					}
				}

				State = 6184; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6186; _localctx.name = Match(MICROSECOND_SYMBOL);
				State = 6187; exprWithParentheses();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6188; _localctx.name = Match(MOD_SYMBOL);
				State = 6189; Match(OPEN_PAR_SYMBOL);
				State = 6190; expr(0);
				State = 6191; Match(COMMA_SYMBOL);
				State = 6192; expr(0);
				State = 6193; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6195;
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				State = 6196; _localctx.name = Match(OLD_PASSWORD_SYMBOL);
				State = 6197; Match(OPEN_PAR_SYMBOL);
				State = 6198; textLiteral();
				State = 6199; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6201;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 6202; _localctx.name = Match(PASSWORD_SYMBOL);
				State = 6203; exprWithParentheses();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6204; _localctx.name = Match(QUARTER_SYMBOL);
				State = 6205; exprWithParentheses();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6206; _localctx.name = Match(REPEAT_SYMBOL);
				State = 6207; Match(OPEN_PAR_SYMBOL);
				State = 6208; expr(0);
				State = 6209; Match(COMMA_SYMBOL);
				State = 6210; expr(0);
				State = 6211; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6213; _localctx.name = Match(REPLACE_SYMBOL);
				State = 6214; Match(OPEN_PAR_SYMBOL);
				State = 6215; expr(0);
				State = 6216; Match(COMMA_SYMBOL);
				State = 6217; expr(0);
				State = 6218; Match(COMMA_SYMBOL);
				State = 6219; expr(0);
				State = 6220; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6222; _localctx.name = Match(REVERSE_SYMBOL);
				State = 6223; exprWithParentheses();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6224; _localctx.name = Match(ROW_COUNT_SYMBOL);
				State = 6225; parentheses();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6226; _localctx.name = Match(TRUNCATE_SYMBOL);
				State = 6227; Match(OPEN_PAR_SYMBOL);
				State = 6228; expr(0);
				State = 6229; Match(COMMA_SYMBOL);
				State = 6230; expr(0);
				State = 6231; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6233; _localctx.name = Match(WEEK_SYMBOL);
				State = 6234; Match(OPEN_PAR_SYMBOL);
				State = 6235; expr(0);
				State = 6238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6236; Match(COMMA_SYMBOL);
					State = 6237; expr(0);
					}
				}

				State = 6240; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6242; _localctx.name = Match(WEIGHT_STRING_SYMBOL);
				State = 6243; Match(OPEN_PAR_SYMBOL);
				State = 6244; expr(0);
				State = 6264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,779,Context) ) {
				case 1:
					{
					State = 6248;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
					case 1:
						{
						State = 6245; Match(AS_SYMBOL);
						State = 6246; Match(CHAR_SYMBOL);
						State = 6247; wsNumCodepoints();
						}
						break;
					}
					State = 6252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
					case 1:
						{
						State = 6250;
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						State = 6251; weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 6254; Match(AS_SYMBOL);
					State = 6255; Match(BINARY_SYMBOL);
					State = 6256; wsNumCodepoints();
					}
					break;
				case 3:
					{
					State = 6257; Match(COMMA_SYMBOL);
					State = 6258; ulong_number();
					State = 6259; Match(COMMA_SYMBOL);
					State = 6260; ulong_number();
					State = 6261; Match(COMMA_SYMBOL);
					State = 6262; ulong_number();
					}
					break;
				}
				State = 6266; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6268; geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeometryFunctionContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geometryFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGeometryFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGeometryFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeometryFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeometryFunctionContext geometryFunction() {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(Context, State);
		EnterRule(_localctx, 718, RULE_geometryFunction);
		try {
			State = 6302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,782,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6271;
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				State = 6272; _localctx.name = Match(CONTAINS_SYMBOL);
				State = 6273; Match(OPEN_PAR_SYMBOL);
				State = 6274; expr(0);
				State = 6275; Match(COMMA_SYMBOL);
				State = 6276; expr(0);
				State = 6277; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6279; _localctx.name = Match(GEOMETRYCOLLECTION_SYMBOL);
				State = 6280; Match(OPEN_PAR_SYMBOL);
				State = 6282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
				case 1:
					{
					State = 6281; exprList();
					}
					break;
				}
				State = 6284; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6285; _localctx.name = Match(LINESTRING_SYMBOL);
				State = 6286; exprListWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6287; _localctx.name = Match(MULTILINESTRING_SYMBOL);
				State = 6288; exprListWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6289; _localctx.name = Match(MULTIPOINT_SYMBOL);
				State = 6290; exprListWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6291; _localctx.name = Match(MULTIPOLYGON_SYMBOL);
				State = 6292; exprListWithParentheses();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6293; _localctx.name = Match(POINT_SYMBOL);
				State = 6294; Match(OPEN_PAR_SYMBOL);
				State = 6295; expr(0);
				State = 6296; Match(COMMA_SYMBOL);
				State = 6297; expr(0);
				State = 6298; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6300; _localctx.name = Match(POLYGON_SYMBOL);
				State = 6301; exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionParametersContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return GetRuleContext<FractionalPrecisionContext>(0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunctionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTimeFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTimeFunctionParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionParametersContext timeFunctionParameters() {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(Context, State);
		EnterRule(_localctx, 720, RULE_timeFunctionParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6304; Match(OPEN_PAR_SYMBOL);
			State = 6306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
			case 1:
				{
				State = 6305; fractionalPrecision();
				}
				break;
			}
			State = 6308; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalPrecisionContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionalPrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFractionalPrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFractionalPrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFractionalPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionalPrecisionContext fractionalPrecision() {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(Context, State);
		EnterRule(_localctx, 722, RULE_fractionalPrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6310;
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			State = 6311; Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelsContext : ParserRuleContext {
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public WeightStringLevelListItemContext[] weightStringLevelListItem() {
			return GetRuleContexts<WeightStringLevelListItemContext>();
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return GetRuleContext<WeightStringLevelListItemContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightStringLevels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelsContext weightStringLevels() {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(Context, State);
		EnterRule(_localctx, 724, RULE_weightStringLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6313; Match(LEVEL_SYMBOL);
			State = 6326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
			case 1:
				{
				State = 6314; real_ulong_number();
				State = 6315; Match(MINUS_OPERATOR);
				State = 6316; real_ulong_number();
				}
				break;
			case 2:
				{
				State = 6318; weightStringLevelListItem();
				State = 6323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6319; Match(COMMA_SYMBOL);
					State = 6320; weightStringLevelListItem();
					}
					}
					State = 6325;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelListItemContext : ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ASC_SYMBOL() { return GetToken(MySQLParser.ASC_SYMBOL, 0); }
		public ITerminalNode DESC_SYMBOL() { return GetToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevelListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevelListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevelListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightStringLevelListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelListItemContext weightStringLevelListItem() {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(Context, State);
		EnterRule(_localctx, 726, RULE_weightStringLevelListItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6328; real_ulong_number();
			State = 6334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				State = 6329;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					State = 6330; Match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				State = 6333; Match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeTtypeContext : ParserRuleContext {
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeTtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDateTimeTtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDateTimeTtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeTtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeTtypeContext dateTimeTtype() {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(Context, State);
		EnterRule(_localctx, 728, RULE_dateTimeTtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6336;
			_la = TokenStream.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		public ITerminalNode TRIM_SYMBOL() { return GetToken(MySQLParser.TRIM_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LEADING_SYMBOL() { return GetToken(MySQLParser.LEADING_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode TRAILING_SYMBOL() { return GetToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public ITerminalNode BOTH_SYMBOL() { return GetToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(Context, State);
		EnterRule(_localctx, 730, RULE_trimFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6338; Match(TRIM_SYMBOL);
			State = 6339; Match(OPEN_PAR_SYMBOL);
			State = 6363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,792,Context) ) {
			case 1:
				{
				State = 6340; expr(0);
				State = 6343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 6341; Match(FROM_SYMBOL);
					State = 6342; expr(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 6345; Match(LEADING_SYMBOL);
				State = 6347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,789,Context) ) {
				case 1:
					{
					State = 6346; expr(0);
					}
					break;
				}
				State = 6349; Match(FROM_SYMBOL);
				State = 6350; expr(0);
				}
				break;
			case 3:
				{
				State = 6351; Match(TRAILING_SYMBOL);
				State = 6353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
				case 1:
					{
					State = 6352; expr(0);
					}
					break;
				}
				State = 6355; Match(FROM_SYMBOL);
				State = 6356; expr(0);
				}
				break;
			case 4:
				{
				State = 6357; Match(BOTH_SYMBOL);
				State = 6359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
				case 1:
					{
					State = 6358; expr(0);
					}
					break;
				}
				State = 6361; Match(FROM_SYMBOL);
				State = 6362; expr(0);
				}
				break;
			}
			State = 6365; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringFunctionContext : ParserRuleContext {
		public ITerminalNode SUBSTRING_SYMBOL() { return GetToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringFunctionContext substringFunction() {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(Context, State);
		EnterRule(_localctx, 732, RULE_substringFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6367; Match(SUBSTRING_SYMBOL);
			State = 6368; Match(OPEN_PAR_SYMBOL);
			State = 6369; expr(0);
			State = 6382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA_SYMBOL:
				{
				State = 6370; Match(COMMA_SYMBOL);
				State = 6371; expr(0);
				State = 6374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6372; Match(COMMA_SYMBOL);
					State = 6373; expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				State = 6376; Match(FROM_SYMBOL);
				State = 6377; expr(0);
				State = 6380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 6378; Match(FOR_SYMBOL);
					State = 6379; expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6384; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return GetRuleContext<UdfExprListContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 734, RULE_functionCall);
		try {
			State = 6400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6386; pureIdentifier();
				State = 6387; Match(OPEN_PAR_SYMBOL);
				State = 6389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
				case 1:
					{
					State = 6388; udfExprList();
					}
					break;
				}
				State = 6391; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6393; qualifiedIdentifier();
				State = 6394; Match(OPEN_PAR_SYMBOL);
				State = 6396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,797,Context) ) {
				case 1:
					{
					State = 6395; exprList();
					}
					break;
				}
				State = 6398; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprListContext : ParserRuleContext {
		public UdfExprContext[] udfExpr() {
			return GetRuleContexts<UdfExprContext>();
		}
		public UdfExprContext udfExpr(int i) {
			return GetRuleContext<UdfExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprListContext udfExprList() {
		UdfExprListContext _localctx = new UdfExprListContext(Context, State);
		EnterRule(_localctx, 736, RULE_udfExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6402; udfExpr();
			State = 6407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6403; Match(COMMA_SYMBOL);
				State = 6404; udfExpr();
				}
				}
				State = 6409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprContext udfExpr() {
		UdfExprContext _localctx = new UdfExprContext(Context, State);
		EnterRule(_localctx, 738, RULE_udfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6410; expr(0);
			State = 6412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				{
				State = 6411; selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public SystemVariableContext systemVariable() {
			return GetRuleContext<SystemVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 740, RULE_variable);
		try {
			State = 6416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6414; userVariable();
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6415; systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariableContext : ParserRuleContext {
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariableContext userVariable() {
		UserVariableContext _localctx = new UserVariableContext(Context, State);
		EnterRule(_localctx, 742, RULE_userVariable);
		try {
			State = 6421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6418; Match(AT_SIGN_SYMBOL);
				State = 6419; textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6420; Match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemVariableContext : ParserRuleContext {
		public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public VarIdentTypeContext varIdentType() {
			return GetRuleContext<VarIdentTypeContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSystemVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSystemVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemVariableContext systemVariable() {
		SystemVariableContext _localctx = new SystemVariableContext(Context, State);
		EnterRule(_localctx, 744, RULE_systemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6423; Match(AT_AT_SIGN_SYMBOL);
			State = 6425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
			case 1:
				{
				State = 6424; varIdentType();
				}
				break;
			}
			State = 6427; textOrIdentifier();
			State = 6429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
			case 1:
				{
				State = 6428; dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return GetRuleContext<LValueIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInternalVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInternalVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableNameContext internalVariableName() {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(Context, State);
		EnterRule(_localctx, 746, RULE_internalVariableName);
		int _la;
		try {
			State = 6445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,807,Context) ) {
				case 1:
					{
					State = 6431;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 6432; identifier();
					State = 6434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6433; dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 6436;
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					State = 6437; lValueIdentifier();
					State = 6439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6438; dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6443; Match(DEFAULT_SYMBOL);
				State = 6444; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		public ITerminalNode WHEN_SYMBOL() { return GetToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 748, RULE_whenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6447; Match(WHEN_SYMBOL);
			State = 6448; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenExpressionContext : ParserRuleContext {
		public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenExpressionContext thenExpression() {
		ThenExpressionContext _localctx = new ThenExpressionContext(Context, State);
		EnterRule(_localctx, 750, RULE_thenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6450; Match(THEN_SYMBOL);
			State = 6451; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseExpressionContext : ParserRuleContext {
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseExpressionContext elseExpression() {
		ElseExpressionContext _localctx = new ElseExpressionContext(Context, State);
		EnterRule(_localctx, 752, RULE_elseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6453; Match(ELSE_SYMBOL);
			State = 6454; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode UNSIGNED_SYMBOL() { return GetToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return GetRuleContext<StandardFloatOptionsContext>(0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 754, RULE_castType);
		try {
			State = 6501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6456; Match(BINARY_SYMBOL);
				State = 6458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
				case 1:
					{
					State = 6457; fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6460; Match(CHAR_SYMBOL);
				State = 6462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,810,Context) ) {
				case 1:
					{
					State = 6461; fieldLength();
					}
					break;
				}
				State = 6465;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
				case 1:
					{
					State = 6464; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6467; nchar();
				State = 6469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,812,Context) ) {
				case 1:
					{
					State = 6468; fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6471; Match(SIGNED_SYMBOL);
				State = 6473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
				case 1:
					{
					State = 6472; Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6475; Match(UNSIGNED_SYMBOL);
				State = 6477;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 6476; Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6479; Match(DATE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6480; Match(TIME_SYMBOL);
				State = 6482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
				case 1:
					{
					State = 6481; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6484; Match(DATETIME_SYMBOL);
				State = 6486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 6485; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6488; Match(DECIMAL_SYMBOL);
				State = 6490;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
				case 1:
					{
					State = 6489; floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6492;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 6493; Match(JSON_SYMBOL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6494;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6495; realType();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6496;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6497; Match(FLOAT_SYMBOL);
				State = 6499;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
				case 1:
					{
					State = 6498; standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 756, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6503; expr(0);
			State = 6508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6504; Match(COMMA_SYMBOL);
				State = 6505; expr(0);
				}
				}
				State = 6510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 758, RULE_charset);
		try {
			State = 6514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6511; Match(CHAR_SYMBOL);
				State = 6512; Match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6513; Match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRuleContext : ParserRuleContext {
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNotRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNotRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotRuleContext notRule() {
		NotRuleContext _localctx = new NotRuleContext(Context, State);
		EnterRule(_localctx, 760, RULE_notRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6516;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT_SYMBOL || _la==NOT2_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not2RuleContext : ParserRuleContext {
		public ITerminalNode LOGICAL_NOT_OPERATOR() { return GetToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public ITerminalNode NOT2_SYMBOL() { return GetToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not2Rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNot2Rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNot2Rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot2Rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not2RuleContext not2Rule() {
		Not2RuleContext _localctx = new Not2RuleContext(Context, State);
		EnterRule(_localctx, 762, RULE_not2Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6518;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		public ITerminalNode SECOND_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_SECOND_SYMBOL() { return GetToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_SECOND_SYMBOL() { return GetToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public ITerminalNode HOUR_MINUTE_SYMBOL() { return GetToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public ITerminalNode DAY_MICROSECOND_SYMBOL() { return GetToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public ITerminalNode DAY_SECOND_SYMBOL() { return GetToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public ITerminalNode DAY_MINUTE_SYMBOL() { return GetToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public ITerminalNode DAY_HOUR_SYMBOL() { return GetToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public ITerminalNode YEAR_MONTH_SYMBOL() { return GetToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 764, RULE_interval);
		int _la;
		try {
			State = 6522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6520; intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6521;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (DAY_HOUR_SYMBOL - 118)) | (1L << (DAY_MICROSECOND_SYMBOL - 118)) | (1L << (DAY_MINUTE_SYMBOL - 118)) | (1L << (DAY_SECOND_SYMBOL - 118)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (HOUR_MICROSECOND_SYMBOL - 226)) | (1L << (HOUR_MINUTE_SYMBOL - 226)) | (1L << (HOUR_SECOND_SYMBOL - 226)))) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTimeStampContext : ParserRuleContext {
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTimeStamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIntervalTimeStamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIntervalTimeStamp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTimeStamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTimeStampContext intervalTimeStamp() {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(Context, State);
		EnterRule(_localctx, 766, RULE_intervalTimeStamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6524;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (MICROSECOND_SYMBOL - 337)) | (1L << (MINUTE_SYMBOL - 337)) | (1L << (MONTH_SYMBOL - 337)))) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprListWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprListWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprListWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprListWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListWithParenthesesContext exprListWithParentheses() {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 768, RULE_exprListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6526; Match(OPEN_PAR_SYMBOL);
			State = 6527; exprList();
			State = 6528; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExprWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExprWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprWithParenthesesContext exprWithParentheses() {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 770, RULE_exprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6530; Match(OPEN_PAR_SYMBOL);
			State = 6531; expr(0);
			State = 6532; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExprWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExprWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 772, RULE_simpleExprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6534; Match(OPEN_PAR_SYMBOL);
			State = 6535; simpleExpr(0);
			State = 6536; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderListContext : ParserRuleContext {
		public OrderExpressionContext[] orderExpression() {
			return GetRuleContexts<OrderExpressionContext>();
		}
		public OrderExpressionContext orderExpression(int i) {
			return GetRuleContext<OrderExpressionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderListContext orderList() {
		OrderListContext _localctx = new OrderListContext(Context, State);
		EnterRule(_localctx, 774, RULE_orderList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6538; orderExpression();
			State = 6543;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,823,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6539; Match(COMMA_SYMBOL);
					State = 6540; orderExpression();
					}
					} 
				}
				State = 6545;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,823,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderExpressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOrderExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOrderExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderExpressionContext orderExpression() {
		OrderExpressionContext _localctx = new OrderExpressionContext(Context, State);
		EnterRule(_localctx, 776, RULE_orderExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6546; expr(0);
			State = 6548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
			case 1:
				{
				State = 6547; direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupListContext : ParserRuleContext {
		public GroupingExpressionContext[] groupingExpression() {
			return GetRuleContexts<GroupingExpressionContext>();
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return GetRuleContext<GroupingExpressionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupListContext groupList() {
		GroupListContext _localctx = new GroupListContext(Context, State);
		EnterRule(_localctx, 778, RULE_groupList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6550; groupingExpression();
			State = 6555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6551; Match(COMMA_SYMBOL);
				State = 6552; groupingExpression();
				}
				}
				State = 6557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionContext groupingExpression() {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(Context, State);
		EnterRule(_localctx, 780, RULE_groupingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6558; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 782, RULE_channel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6560;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 6561; Match(FOR_SYMBOL);
			State = 6562; Match(CHANNEL_SYMBOL);
			State = 6563; textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public LabeledBlockContext labeledBlock() {
			return GetRuleContext<LabeledBlockContext>(0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return GetRuleContext<UnlabeledBlockContext>(0);
		}
		public LabeledControlContext labeledControl() {
			return GetRuleContext<LabeledControlContext>(0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 784, RULE_compoundStatement);
		try {
			State = 6578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6565; simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6566; returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6567; ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6568; caseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6569; labeledBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6570; unlabeledBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6571; labeledControl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6572; unlabeledControl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6573; leaveStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6574; iterateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6575; cursorOpen();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6576; cursorFetch();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6577; cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN_SYMBOL() { return GetToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 786, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6580; Match(RETURN_SYMBOL);
			State = 6581; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode[] IF_SYMBOL() { return GetTokens(MySQLParser.IF_SYMBOL); }
		public ITerminalNode IF_SYMBOL(int i) {
			return GetToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 788, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6583; Match(IF_SYMBOL);
			State = 6584; ifBody();
			State = 6585; Match(END_SYMBOL);
			State = 6586; Match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		public ITerminalNode ELSEIF_SYMBOL() { return GetToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 790, RULE_ifBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6588; expr(0);
			State = 6589; thenStatement();
			State = 6594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				State = 6590; Match(ELSEIF_SYMBOL);
				State = 6591; ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				State = 6592; Match(ELSE_SYMBOL);
				State = 6593; compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		public ITerminalNode THEN_SYMBOL() { return GetToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 792, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6596; Match(THEN_SYMBOL);
			State = 6597; compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementListContext : ParserRuleContext {
		public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementListContext compoundStatementList() {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(Context, State);
		EnterRule(_localctx, 794, RULE_compoundStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6602;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6599; compoundStatement();
					State = 6600; Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,828,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ITerminalNode[] CASE_SYMBOL() { return GetTokens(MySQLParser.CASE_SYMBOL); }
		public ITerminalNode CASE_SYMBOL(int i) {
			return GetToken(MySQLParser.CASE_SYMBOL, i);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		public ThenStatementContext[] thenStatement() {
			return GetRuleContexts<ThenStatementContext>();
		}
		public ThenStatementContext thenStatement(int i) {
			return GetRuleContext<ThenStatementContext>(i);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 796, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6606; Match(CASE_SYMBOL);
			State = 6608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6607; expr(0);
				}
				break;
			}
			State = 6613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6610; whenExpression();
				State = 6611; thenStatement();
				}
				}
				State = 6615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN_SYMBOL );
			State = 6618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				State = 6617; elseStatement();
				}
			}

			State = 6620; Match(END_SYMBOL);
			State = 6621; Match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE_SYMBOL() { return GetToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 798, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6623; Match(ELSE_SYMBOL);
			State = 6624; compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledBlockContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledBlockContext labeledBlock() {
		LabeledBlockContext _localctx = new LabeledBlockContext(Context, State);
		EnterRule(_localctx, 800, RULE_labeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6626; label();
			State = 6627; beginEndBlock();
			State = 6629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
			case 1:
				{
				State = 6628; labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledBlockContext : ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabeledBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledBlockContext unlabeledBlock() {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(Context, State);
		EnterRule(_localctx, 802, RULE_unlabeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6631; beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public ITerminalNode COLON_SYMBOL() { return GetToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 804, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6633; labelIdentifier();
			State = 6634; Match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginEndBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return GetRuleContext<SpDeclarationsContext>(0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginEndBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBeginEndBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBeginEndBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginEndBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginEndBlockContext beginEndBlock() {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(Context, State);
		EnterRule(_localctx, 806, RULE_beginEndBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6636; Match(BEGIN_SYMBOL);
			State = 6638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
			case 1:
				{
				State = 6637; spDeclarations();
				}
				break;
			}
			State = 6641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,834,Context) ) {
			case 1:
				{
				State = 6640; compoundStatementList();
				}
				break;
			}
			State = 6643; Match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledControlContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabeledControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabeledControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledControlContext labeledControl() {
		LabeledControlContext _localctx = new LabeledControlContext(Context, State);
		EnterRule(_localctx, 808, RULE_labeledControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6645; label();
			State = 6646; unlabeledControl();
			State = 6648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				{
				State = 6647; labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledControlContext : ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return GetRuleContext<WhileDoBlockContext>(0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return GetRuleContext<RepeatUntilBlockContext>(0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabeledControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledControlContext unlabeledControl() {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(Context, State);
		EnterRule(_localctx, 810, RULE_unlabeledControl);
		try {
			State = 6653;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6650; loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6651; whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6652; repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public ITerminalNode[] LOOP_SYMBOL() { return GetTokens(MySQLParser.LOOP_SYMBOL); }
		public ITerminalNode LOOP_SYMBOL(int i) {
			return GetToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 812, RULE_loopBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6655; Match(LOOP_SYMBOL);
			State = 6656; compoundStatementList();
			State = 6657; Match(END_SYMBOL);
			State = 6658; Match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileDoBlockContext : ParserRuleContext {
		public ITerminalNode[] WHILE_SYMBOL() { return GetTokens(MySQLParser.WHILE_SYMBOL); }
		public ITerminalNode WHILE_SYMBOL(int i) {
			return GetToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileDoBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhileDoBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhileDoBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileDoBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileDoBlockContext whileDoBlock() {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(Context, State);
		EnterRule(_localctx, 814, RULE_whileDoBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6660; Match(WHILE_SYMBOL);
			State = 6661; expr(0);
			State = 6662; Match(DO_SYMBOL);
			State = 6663; compoundStatementList();
			State = 6664; Match(END_SYMBOL);
			State = 6665; Match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilBlockContext : ParserRuleContext {
		public ITerminalNode[] REPEAT_SYMBOL() { return GetTokens(MySQLParser.REPEAT_SYMBOL); }
		public ITerminalNode REPEAT_SYMBOL(int i) {
			return GetToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRepeatUntilBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRepeatUntilBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatUntilBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilBlockContext repeatUntilBlock() {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(Context, State);
		EnterRule(_localctx, 816, RULE_repeatUntilBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6667; Match(REPEAT_SYMBOL);
			State = 6668; compoundStatementList();
			State = 6669; Match(UNTIL_SYMBOL);
			State = 6670; expr(0);
			State = 6671; Match(END_SYMBOL);
			State = 6672; Match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationsContext : ParserRuleContext {
		public SpDeclarationContext[] spDeclaration() {
			return GetRuleContexts<SpDeclarationContext>();
		}
		public SpDeclarationContext spDeclaration(int i) {
			return GetRuleContext<SpDeclarationContext>(i);
		}
		public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationsContext spDeclarations() {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(Context, State);
		EnterRule(_localctx, 818, RULE_spDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6677;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6674; spDeclaration();
					State = 6675; Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6679;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,837,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return GetRuleContext<ConditionDeclarationContext>(0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return GetRuleContext<HandlerDeclarationContext>(0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return GetRuleContext<CursorDeclarationContext>(0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationContext spDeclaration() {
		SpDeclarationContext _localctx = new SpDeclarationContext(Context, State);
		EnterRule(_localctx, 820, RULE_spDeclaration);
		try {
			State = 6685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6681; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6682; conditionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6683; handlerDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6684; cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 822, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6687; Match(DECLARE_SYMBOL);
			State = 6688; identifierList();
			State = 6689; dataType();
			State = 6691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				State = 6690; collate();
				}
			}

			State = 6695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 6693; Match(DEFAULT_SYMBOL);
				State = 6694; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionDeclarationContext conditionDeclaration() {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(Context, State);
		EnterRule(_localctx, 824, RULE_conditionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6697; Match(DECLARE_SYMBOL);
			State = 6698; identifier();
			State = 6699; Match(CONDITION_SYMBOL);
			State = 6700; Match(FOR_SYMBOL);
			State = 6701; spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpConditionContext : ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpConditionContext spCondition() {
		SpConditionContext _localctx = new SpConditionContext(Context, State);
		EnterRule(_localctx, 826, RULE_spCondition);
		try {
			State = 6705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6703; ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6704; sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstateContext : ParserRuleContext {
		public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSqlstate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSqlstate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlstate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlstateContext sqlstate() {
		SqlstateContext _localctx = new SqlstateContext(Context, State);
		EnterRule(_localctx, 828, RULE_sqlstate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6707; Match(SQLSTATE_SYMBOL);
			State = 6709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				{
				State = 6708; Match(VALUE_SYMBOL);
				}
				break;
			}
			State = 6711; textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public HandlerConditionContext[] handlerCondition() {
			return GetRuleContexts<HandlerConditionContext>();
		}
		public HandlerConditionContext handlerCondition(int i) {
			return GetRuleContext<HandlerConditionContext>(i);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode CONTINUE_SYMBOL() { return GetToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public ITerminalNode EXIT_SYMBOL() { return GetToken(MySQLParser.EXIT_SYMBOL, 0); }
		public ITerminalNode UNDO_SYMBOL() { return GetToken(MySQLParser.UNDO_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclarationContext handlerDeclaration() {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(Context, State);
		EnterRule(_localctx, 830, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6713; Match(DECLARE_SYMBOL);
			State = 6714;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6715; Match(HANDLER_SYMBOL);
			State = 6716; Match(FOR_SYMBOL);
			State = 6717; handlerCondition();
			State = 6722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6718; Match(COMMA_SYMBOL);
					State = 6719; handlerCondition();
					}
					} 
				}
				State = 6724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			}
			State = 6725; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionContext : ParserRuleContext {
		public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SQLWARNING_SYMBOL() { return GetToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode SQLEXCEPTION_SYMBOL() { return GetToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterHandlerCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitHandlerCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionContext handlerCondition() {
		HandlerConditionContext _localctx = new HandlerConditionContext(Context, State);
		EnterRule(_localctx, 832, RULE_handlerCondition);
		try {
			State = 6734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6727; spCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6728; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6729; Match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6730; notRule();
				State = 6731; Match(FOUND_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6733; Match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CURSOR_SYMBOL() { return GetToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public ITerminalNode FOR_SYMBOL() { return GetToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeclarationContext cursorDeclaration() {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(Context, State);
		EnterRule(_localctx, 834, RULE_cursorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6736; Match(DECLARE_SYMBOL);
			State = 6737; identifier();
			State = 6738; Match(CURSOR_SYMBOL);
			State = 6739; Match(FOR_SYMBOL);
			State = 6740; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		public ITerminalNode ITERATE_SYMBOL() { return GetToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 836, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6742; Match(ITERATE_SYMBOL);
			State = 6743; labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		public ITerminalNode LEAVE_SYMBOL() { return GetToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 838, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6745; Match(LEAVE_SYMBOL);
			State = 6746; labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDiagnosticsContext : ParserRuleContext {
		public ITerminalNode GET_SYMBOL() { return GetToken(MySQLParser.GET_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public StatementInformationItemContext[] statementInformationItem() {
			return GetRuleContexts<StatementInformationItemContext>();
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return GetRuleContext<StatementInformationItemContext>(i);
		}
		public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public ConditionInformationItemContext[] conditionInformationItem() {
			return GetRuleContexts<ConditionInformationItemContext>();
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return GetRuleContext<ConditionInformationItemContext>(i);
		}
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDiagnostics; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGetDiagnostics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGetDiagnostics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDiagnostics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetDiagnosticsContext getDiagnostics() {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(Context, State);
		EnterRule(_localctx, 840, RULE_getDiagnostics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6748; Match(GET_SYMBOL);
			State = 6752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
			case 1:
				{
				State = 6749; Match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 6750;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 6751; Match(STACKED_SYMBOL);
				}
				break;
			}
			State = 6754; Match(DIAGNOSTICS_SYMBOL);
			State = 6773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
			case 1:
				{
				State = 6755; statementInformationItem();
				State = 6760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6756; Match(COMMA_SYMBOL);
					State = 6757; statementInformationItem();
					}
					}
					State = 6762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 6763; Match(CONDITION_SYMBOL);
				State = 6764; signalAllowedExpr();
				State = 6765; conditionInformationItem();
				State = 6770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6766; Match(COMMA_SYMBOL);
					State = 6767; conditionInformationItem();
					}
					}
					State = 6772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalAllowedExprContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalAllowedExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalAllowedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalAllowedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalAllowedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalAllowedExprContext signalAllowedExpr() {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(Context, State);
		EnterRule(_localctx, 842, RULE_signalAllowedExpr);
		try {
			State = 6778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6775; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6776; variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6777; qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInformationItemContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStatementInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStatementInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementInformationItemContext statementInformationItem() {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(Context, State);
		EnterRule(_localctx, 844, RULE_statementInformationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
			case 1:
				{
				State = 6780; variable();
				}
				break;
			case 2:
				{
				State = 6781; identifier();
				}
				break;
			}
			State = 6784; Match(EQUAL_OPERATOR);
			State = 6785;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionInformationItemContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConditionInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConditionInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionInformationItemContext conditionInformationItem() {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(Context, State);
		EnterRule(_localctx, 846, RULE_conditionInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
			case 1:
				{
				State = 6787; variable();
				}
				break;
			case 2:
				{
				State = 6788; identifier();
				}
				break;
			}
			State = 6791; Match(EQUAL_OPERATOR);
			State = 6794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				State = 6792; signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				State = 6793; Match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemNameContext : ParserRuleContext {
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItemName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItemName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItemName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalInformationItemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemNameContext signalInformationItemName() {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(Context, State);
		EnterRule(_localctx, 848, RULE_signalInformationItemName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6796;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (CATALOG_NAME_SYMBOL - 53)) | (1L << (CLASS_ORIGIN_SYMBOL - 53)) | (1L << (COLUMN_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 53)) | (1L << (CONSTRAINT_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 53)) | (1L << (CURSOR_NAME_SYMBOL - 53)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		public ITerminalNode SIGNAL_SYMBOL() { return GetToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 850, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6798; Match(SIGNAL_SYMBOL);
			State = 6801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
			case 1:
				{
				State = 6799; identifier();
				}
				break;
			case 2:
				{
				State = 6800; sqlstate();
				}
				break;
			}
			State = 6812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6803; Match(SET_SYMBOL);
				State = 6804; signalInformationItem();
				State = 6809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6805; Match(COMMA_SYMBOL);
					State = 6806; signalInformationItem();
					}
					}
					State = 6811;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		public ITerminalNode RESIGNAL_SYMBOL() { return GetToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 852, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6814; Match(RESIGNAL_SYMBOL);
			State = 6817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
			case 1:
				{
				State = 6815; identifier();
				}
				break;
			case 2:
				{
				State = 6816; sqlstate();
				}
				break;
			}
			State = 6828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6819; Match(SET_SYMBOL);
				State = 6820; signalInformationItem();
				State = 6825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6821; Match(COMMA_SYMBOL);
					State = 6822; signalInformationItem();
					}
					}
					State = 6827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemContext : ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemContext signalInformationItem() {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(Context, State);
		EnterRule(_localctx, 854, RULE_signalInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6830; signalInformationItemName();
			State = 6831; Match(EQUAL_OPERATOR);
			State = 6832; signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(Context, State);
		EnterRule(_localctx, 856, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6834; Match(OPEN_SYMBOL);
			State = 6835; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(Context, State);
		EnterRule(_localctx, 858, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6837; Match(CLOSE_SYMBOL);
			State = 6838; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode FETCH_SYMBOL() { return GetToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode FROM_SYMBOL() { return GetToken(MySQLParser.FROM_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(Context, State);
		EnterRule(_localctx, 860, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6840; Match(FETCH_SYMBOL);
			State = 6845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
			case 1:
				{
				State = 6842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					State = 6841; Match(NEXT_SYMBOL);
					}
				}

				State = 6844; Match(FROM_SYMBOL);
				}
				break;
			}
			State = 6847; identifier();
			State = 6848; Match(INTO_SYMBOL);
			State = 6849; identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleContext : ParserRuleContext {
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schedule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchedule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchedule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleContext schedule() {
		ScheduleContext _localctx = new ScheduleContext(Context, State);
		EnterRule(_localctx, 862, RULE_schedule);
		int _la;
		try {
			State = 6864;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6851; Match(AT_SYMBOL);
				State = 6852; expr(0);
				}
				break;
			case EVERY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6853; Match(EVERY_SYMBOL);
				State = 6854; expr(0);
				State = 6855; interval();
				State = 6858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					State = 6856; Match(STARTS_SYMBOL);
					State = 6857; expr(0);
					}
				}

				State = 6862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					State = 6860; Match(ENDS_SYMBOL);
					State = 6861; expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 864, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6866; columnName();
			State = 6867; fieldDefinition();
			State = 6869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				State = 6868; checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrReferencesContext : ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrReferences; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckOrReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckOrReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckOrReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrReferencesContext checkOrReferences() {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(Context, State);
		EnterRule(_localctx, 866, RULE_checkOrReferences);
		try {
			State = 6874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6871;
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				State = 6872; checkConstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6873; references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckConstraintContext : ParserRuleContext {
		public ITerminalNode CHECK_SYMBOL() { return GetToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCheckConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCheckConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckConstraintContext checkConstraint() {
		CheckConstraintContext _localctx = new CheckConstraintContext(Context, State);
		EnterRule(_localctx, 868, RULE_checkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6876; Match(CHECK_SYMBOL);
			State = 6877; exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintEnforcementContext : ParserRuleContext {
		public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintEnforcement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintEnforcement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintEnforcement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintEnforcement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintEnforcementContext constraintEnforcement() {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(Context, State);
		EnterRule(_localctx, 870, RULE_constraintEnforcement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				State = 6879; Match(NOT_SYMBOL);
				}
			}

			State = 6882; Match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableConstraintDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 872, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			State = 6959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6884;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,867,Context) ) {
				case 1:
					{
					State = 6885; indexNameAndType();
					}
					break;
				}
				State = 6888; keyListVariants();
				State = 6892;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,868,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6889; indexOption();
						}
						} 
					}
					State = 6894;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,868,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6895; _localctx.type = Match(FULLTEXT_SYMBOL);
				State = 6897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
				case 1:
					{
					State = 6896; keyOrIndex();
					}
					break;
				}
				State = 6900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
				case 1:
					{
					State = 6899; indexName();
					}
					break;
				}
				State = 6902; keyListVariants();
				State = 6906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,871,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6903; fulltextIndexOption();
						}
						} 
					}
					State = 6908;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,871,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6909; _localctx.type = Match(SPATIAL_SYMBOL);
				State = 6911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,872,Context) ) {
				case 1:
					{
					State = 6910; keyOrIndex();
					}
					break;
				}
				State = 6914;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,873,Context) ) {
				case 1:
					{
					State = 6913; indexName();
					}
					break;
				}
				State = 6916; keyListVariants();
				State = 6920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6917; spatialIndexOption();
						}
						} 
					}
					State = 6922;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 6923; constraintName();
					}
				}

				State = 6957;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					State = 6932;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						State = 6926; _localctx.type = Match(PRIMARY_SYMBOL);
						State = 6927; Match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						State = 6928; _localctx.type = Match(UNIQUE_SYMBOL);
						State = 6930;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
						case 1:
							{
							State = 6929; keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6935;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
					case 1:
						{
						State = 6934; indexNameAndType();
						}
						break;
					}
					State = 6937; keyListVariants();
					State = 6941;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,879,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6938; indexOption();
							}
							} 
						}
						State = 6943;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,879,Context);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					State = 6944; _localctx.type = Match(FOREIGN_SYMBOL);
					State = 6945; Match(KEY_SYMBOL);
					State = 6947;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
					case 1:
						{
						State = 6946; indexName();
						}
						break;
					}
					State = 6949; keyList();
					State = 6950; references();
					}
					break;
				case CHECK_SYMBOL:
					{
					State = 6952; checkConstraint();
					State = 6955;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
					case 1:
						{
						State = 6953;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 6954; constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintNameContext : ParserRuleContext {
		public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintNameContext constraintName() {
		ConstraintNameContext _localctx = new ConstraintNameContext(Context, State);
		EnterRule(_localctx, 874, RULE_constraintName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6961; Match(CONSTRAINT_SYMBOL);
			State = 6963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				{
				State = 6962; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode GENERATED_SYMBOL() { return GetToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode VIRTUAL_SYMBOL() { return GetToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public ITerminalNode STORED_SYMBOL() { return GetToken(MySQLParser.STORED_SYMBOL, 0); }
		public GcolAttributeContext[] gcolAttribute() {
			return GetRuleContexts<GcolAttributeContext>();
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return GetRuleContext<GcolAttributeContext>(i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 876, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6965; dataType();
			State = 7001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,892,Context) ) {
			case 1:
				{
				State = 6969;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6966; columnAttribute();
						}
						} 
					}
					State = 6971;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				}
				}
				break;
			case 2:
				{
				State = 6972;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 6974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 6973; collate();
					}
				}

				State = 6978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					State = 6976; Match(GENERATED_SYMBOL);
					State = 6977; Match(ALWAYS_SYMBOL);
					}
				}

				State = 6980; Match(AS_SYMBOL);
				State = 6981; exprWithParentheses();
				State = 6983;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
				case 1:
					{
					State = 6982;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6999;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,891,Context) ) {
				case 1:
					{
					State = 6985;
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					State = 6989;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6986; gcolAttribute();
							}
							} 
						}
						State = 6991;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
					}
					}
					break;
				case 2:
					{
					State = 6992;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 6996;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,890,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6993; columnAttribute();
							}
							} 
						}
						State = 6998;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,890,Context);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public ITerminalNode NOT_SYMBOL() { return GetToken(MySQLParser.NOT_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		public ITerminalNode NOW_SYMBOL() { return GetToken(MySQLParser.NOW_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MySQLParser.ON_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ColumnFormatContext columnFormat() {
			return GetRuleContext<ColumnFormatContext>(0);
		}
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return GetRuleContext<StorageMediaContext>(0);
		}
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 878, RULE_columnAttribute);
		int _la;
		try {
			State = 7055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 7003; Match(NOT_SYMBOL);
					}
				}

				State = 7006; nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7007;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 7008; Match(NOT_SYMBOL);
				State = 7009; Match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7010; _localctx.value = Match(DEFAULT_SYMBOL);
				State = 7018;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 7011; signedLiteral();
					}
					break;
				case 2:
					{
					State = 7012; Match(NOW_SYMBOL);
					State = 7014;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,894,Context) ) {
					case 1:
						{
						State = 7013; timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 7016;
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					State = 7017; exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7020; _localctx.value = Match(ON_SYMBOL);
				State = 7021; Match(UPDATE_SYMBOL);
				State = 7022; Match(NOW_SYMBOL);
				State = 7024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
				case 1:
					{
					State = 7023; timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7026; _localctx.value = Match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7027; _localctx.value = Match(SERIAL_SYMBOL);
				State = 7028; Match(DEFAULT_SYMBOL);
				State = 7029; Match(VALUE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7030; Match(PRIMARY_SYMBOL);
					}
				}

				State = 7033; _localctx.value = Match(KEY_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7034; _localctx.value = Match(UNIQUE_SYMBOL);
				State = 7036;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,898,Context) ) {
				case 1:
					{
					State = 7035; Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7038; _localctx.value = Match(COMMENT_SYMBOL);
				State = 7039; textLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7040; collate();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7041; _localctx.value = Match(COLUMN_FORMAT_SYMBOL);
				State = 7042; columnFormat();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7043; _localctx.value = Match(STORAGE_SYMBOL);
				State = 7044; storageMedia();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7045;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7046; _localctx.value = Match(SRID_SYMBOL);
				State = 7047; real_ulonglong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7048;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 7050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7049; constraintName();
					}
				}

				State = 7052; checkConstraint();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7053;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 7054; constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnFormatContext : ParserRuleContext {
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnFormat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnFormat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnFormatContext columnFormat() {
		ColumnFormatContext _localctx = new ColumnFormatContext(Context, State);
		EnterRule(_localctx, 880, RULE_columnFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7057;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageMediaContext : ParserRuleContext {
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageMedia; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStorageMedia(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStorageMedia(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageMedia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageMediaContext storageMedia() {
		StorageMediaContext _localctx = new StorageMediaContext(Context, State);
		EnterRule(_localctx, 882, RULE_storageMedia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7059;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GcolAttributeContext : ParserRuleContext {
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcolAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterGcolAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitGcolAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGcolAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GcolAttributeContext gcolAttribute() {
		GcolAttributeContext _localctx = new GcolAttributeContext(Context, State);
		EnterRule(_localctx, 884, RULE_gcolAttribute);
		int _la;
		try {
			State = 7075;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7061; Match(UNIQUE_SYMBOL);
				State = 7063;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
				case 1:
					{
					State = 7062; Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7065; Match(COMMENT_SYMBOL);
				State = 7066; textString();
				}
				break;
			case NOT_SYMBOL:
			case NULL_SYMBOL:
			case NOT2_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					State = 7067; notRule();
					}
				}

				State = 7070; Match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7071; Match(PRIMARY_SYMBOL);
					}
				}

				State = 7074; Match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencesContext : ParserRuleContext {
		public IToken match;
		public IToken option;
		public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public ITerminalNode MATCH_SYMBOL() { return GetToken(MySQLParser.MATCH_SYMBOL, 0); }
		public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySQLParser.ON_SYMBOL); }
		public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySQLParser.ON_SYMBOL, i);
		}
		public DeleteOptionContext[] deleteOption() {
			return GetRuleContexts<DeleteOptionContext>();
		}
		public DeleteOptionContext deleteOption(int i) {
			return GetRuleContext<DeleteOptionContext>(i);
		}
		public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MySQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencesContext references() {
		ReferencesContext _localctx = new ReferencesContext(Context, State);
		EnterRule(_localctx, 886, RULE_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7077; Match(REFERENCES_SYMBOL);
			State = 7078; tableRef();
			State = 7080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7079; identifierListWithParentheses();
				}
			}

			State = 7084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				State = 7082; Match(MATCH_SYMBOL);
				State = 7083;
				_localctx.match = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,909,Context) ) {
			case 1:
				{
				State = 7086; Match(ON_SYMBOL);
				State = 7087; _localctx.option = Match(UPDATE_SYMBOL);
				State = 7088; deleteOption();
				State = 7092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7089; Match(ON_SYMBOL);
					State = 7090; Match(DELETE_SYMBOL);
					State = 7091; deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				State = 7094; Match(ON_SYMBOL);
				State = 7095; _localctx.option = Match(DELETE_SYMBOL);
				State = 7096; deleteOption();
				State = 7100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7097; Match(ON_SYMBOL);
					State = 7098; Match(UPDATE_SYMBOL);
					State = 7099; deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOptionContext : ParserRuleContext {
		public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOptionContext deleteOption() {
		DeleteOptionContext _localctx = new DeleteOptionContext(Context, State);
		EnterRule(_localctx, 888, RULE_deleteOption);
		int _la;
		try {
			State = 7109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7104;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7105; Match(SET_SYMBOL);
				State = 7106; nullLiteral();
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7107; Match(NO_SYMBOL);
				State = 7108; Match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public KeyPartContext[] keyPart() {
			return GetRuleContexts<KeyPartContext>();
		}
		public KeyPartContext keyPart(int i) {
			return GetRuleContext<KeyPartContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListContext keyList() {
		KeyListContext _localctx = new KeyListContext(Context, State);
		EnterRule(_localctx, 890, RULE_keyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7111; Match(OPEN_PAR_SYMBOL);
			State = 7112; keyPart();
			State = 7117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7113; Match(COMMA_SYMBOL);
				State = 7114; keyPart();
				}
				}
				State = 7119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7120; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 892, RULE_keyPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7122; identifier();
			State = 7124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7123; fieldLength();
				}
			}

			State = 7127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 7126; direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListWithExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public KeyPartOrExpressionContext[] keyPartOrExpression() {
			return GetRuleContexts<KeyPartOrExpressionContext>();
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return GetRuleContext<KeyPartOrExpressionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListWithExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyListWithExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyListWithExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyListWithExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListWithExpressionContext keyListWithExpression() {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(Context, State);
		EnterRule(_localctx, 894, RULE_keyListWithExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7129; Match(OPEN_PAR_SYMBOL);
			State = 7130; keyPartOrExpression();
			State = 7135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7131; Match(COMMA_SYMBOL);
				State = 7132; keyPartOrExpression();
				}
				}
				State = 7137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7138; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartOrExpressionContext : ParserRuleContext {
		public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPartOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyPartOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyPartOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPartOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartOrExpressionContext keyPartOrExpression() {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(Context, State);
		EnterRule(_localctx, 896, RULE_keyPartOrExpression);
		int _la;
		try {
			State = 7145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7140; keyPart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7141; exprWithParentheses();
				State = 7143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					State = 7142; direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListVariantsContext : ParserRuleContext {
		public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListVariants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterKeyListVariants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitKeyListVariants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyListVariants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListVariantsContext keyListVariants() {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(Context, State);
		EnterRule(_localctx, 898, RULE_keyListVariants);
		try {
			State = 7151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7147;
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				State = 7148; keyListWithExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7149;
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				State = 7150; keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public IToken algorithm;
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 900, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7153;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 902, RULE_indexOption);
		try {
			State = 7157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7155; commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7156; indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonIndexOptionContext : ParserRuleContext {
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCommonIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCommonIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonIndexOptionContext commonIndexOption() {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(Context, State);
		EnterRule(_localctx, 904, RULE_commonIndexOption);
		int _la;
		try {
			State = 7168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7159; Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7160; Match(EQUAL_OPERATOR);
					}
				}

				State = 7163; ulong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7164; Match(COMMENT_SYMBOL);
				State = 7165; textLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7166;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7167; visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 906, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7170;
			_la = TokenStream.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeClauseContext : ParserRuleContext {
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public ITerminalNode USING_SYMBOL() { return GetToken(MySQLParser.USING_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeClauseContext indexTypeClause() {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(Context, State);
		EnterRule(_localctx, 908, RULE_indexTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7172;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7173; indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextIndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFulltextIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFulltextIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFulltextIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FulltextIndexOptionContext fulltextIndexOption() {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(Context, State);
		EnterRule(_localctx, 910, RULE_fulltextIndexOption);
		try {
			State = 7179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7175; commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7176; Match(WITH_SYMBOL);
				State = 7177; Match(PARSER_SYMBOL);
				State = 7178; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpatialIndexOptionContext : ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spatialIndexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSpatialIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSpatialIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpatialIndexOptionContext spatialIndexOption() {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(Context, State);
		EnterRule(_localctx, 912, RULE_spatialIndexOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7181; commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MySQLParser.Eof, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDefinitionContext dataTypeDefinition() {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 914, RULE_dataTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7183; dataType();
			State = 7184; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_SYMBOL() { return GetToken(MySQLParser.INT_SYMBOL, 0); }
		public ITerminalNode TINYINT_SYMBOL() { return GetToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public ITerminalNode SMALLINT_SYMBOL() { return GetToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public ITerminalNode MEDIUMINT_SYMBOL() { return GetToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public ITerminalNode BIGINT_SYMBOL() { return GetToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public ITerminalNode NUMERIC_SYMBOL() { return GetToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode VARYING_SYMBOL() { return GetToken(MySQLParser.VARYING_SYMBOL, 0); }
		public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode VARBINARY_SYMBOL() { return GetToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode TINYBLOB_SYMBOL() { return GetToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public ITerminalNode BLOB_SYMBOL() { return GetToken(MySQLParser.BLOB_SYMBOL, 0); }
		public ITerminalNode MEDIUMBLOB_SYMBOL() { return GetToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public ITerminalNode LONGBLOB_SYMBOL() { return GetToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public ITerminalNode LONG_SYMBOL() { return GetToken(MySQLParser.LONG_SYMBOL, 0); }
		public ITerminalNode TINYTEXT_SYMBOL() { return GetToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode MEDIUMTEXT_SYMBOL() { return GetToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public ITerminalNode LONGTEXT_SYMBOL() { return GetToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode SET_SYMBOL() { return GetToken(MySQLParser.SET_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 916, RULE_dataType);
		int _la;
		try {
			State = 7333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,955,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7186;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 7187; fieldLength();
					}
					break;
				}
				State = 7191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 7190; fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7198;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REAL_SYMBOL:
					{
					State = 7193; _localctx.type = Match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					State = 7194; _localctx.type = Match(DOUBLE_SYMBOL);
					State = 7196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
					case 1:
						{
						State = 7195; Match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,926,Context) ) {
				case 1:
					{
					State = 7200; precision();
					}
					break;
				}
				State = 7204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
				case 1:
					{
					State = 7203; fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7206;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL_SYMBOL || _la==FIXED_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 7207; floatOptions();
					}
					break;
				}
				State = 7211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
				case 1:
					{
					State = 7210; fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7213; _localctx.type = Match(BIT_SYMBOL);
				State = 7215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
				case 1:
					{
					State = 7214; fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7217;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7218; _localctx.type = Match(CHAR_SYMBOL);
				State = 7220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
				case 1:
					{
					State = 7219; fieldLength();
					}
					break;
				}
				State = 7223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
				case 1:
					{
					State = 7222; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7225; nchar();
				State = 7227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 7226; fieldLength();
					}
					break;
				}
				State = 7230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,934,Context) ) {
				case 1:
					{
					State = 7229; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7232; _localctx.type = Match(BINARY_SYMBOL);
				State = 7234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
				case 1:
					{
					State = 7233; fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7239;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR_SYMBOL:
					{
					State = 7236; _localctx.type = Match(CHAR_SYMBOL);
					State = 7237; Match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					State = 7238; _localctx.type = Match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7241; fieldLength();
				State = 7243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 7242; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 7245; _localctx.type = Match(NATIONAL_SYMBOL);
					State = 7246; Match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7247; _localctx.type = Match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					State = 7248; _localctx.type = Match(NCHAR_SYMBOL);
					State = 7249; Match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 7250; _localctx.type = Match(NATIONAL_SYMBOL);
					State = 7251; Match(CHAR_SYMBOL);
					State = 7252; Match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					State = 7253; _localctx.type = Match(NCHAR_SYMBOL);
					State = 7254; Match(VARYING_SYMBOL);
					}
					break;
				}
				State = 7257; fieldLength();
				State = 7259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 7258; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7261; _localctx.type = Match(VARBINARY_SYMBOL);
				State = 7262; fieldLength();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7263; _localctx.type = Match(YEAR_SYMBOL);
				State = 7265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 7264; fieldLength();
					}
					break;
				}
				State = 7268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
				case 1:
					{
					State = 7267; fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7270; _localctx.type = Match(DATE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7271; _localctx.type = Match(TIME_SYMBOL);
				State = 7273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
				case 1:
					{
					State = 7272; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7275; _localctx.type = Match(TIMESTAMP_SYMBOL);
				State = 7277;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
				case 1:
					{
					State = 7276; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7279; _localctx.type = Match(DATETIME_SYMBOL);
				State = 7281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
				case 1:
					{
					State = 7280; typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7283; _localctx.type = Match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7284; _localctx.type = Match(BLOB_SYMBOL);
				State = 7286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
				case 1:
					{
					State = 7285; fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7288;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7289; _localctx.type = Match(LONG_SYMBOL);
				State = 7290; Match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7291; _localctx.type = Match(LONG_SYMBOL);
				State = 7295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
				case 1:
					{
					State = 7292; Match(CHAR_SYMBOL);
					State = 7293; Match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7294; Match(VARCHAR_SYMBOL);
					}
					break;
				}
				State = 7298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 7297; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7300; _localctx.type = Match(TINYTEXT_SYMBOL);
				State = 7302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,948,Context) ) {
				case 1:
					{
					State = 7301; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7304; _localctx.type = Match(TEXT_SYMBOL);
				State = 7306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,949,Context) ) {
				case 1:
					{
					State = 7305; fieldLength();
					}
					break;
				}
				State = 7309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 7308; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7311; _localctx.type = Match(MEDIUMTEXT_SYMBOL);
				State = 7313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
				case 1:
					{
					State = 7312; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7315; _localctx.type = Match(LONGTEXT_SYMBOL);
				State = 7317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
				case 1:
					{
					State = 7316; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 7319; _localctx.type = Match(ENUM_SYMBOL);
				State = 7320; stringList();
				State = 7322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
				case 1:
					{
					State = 7321; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 7324; _localctx.type = Match(SET_SYMBOL);
				State = 7325; stringList();
				State = 7327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,954,Context) ) {
				case 1:
					{
					State = 7326; charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 7329; _localctx.type = Match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 7330;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7331; _localctx.type = Match(JSON_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 7332;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (MULTILINESTRING_SYMBOL - 351)) | (1L << (MULTIPOINT_SYMBOL - 351)) | (1L << (MULTIPOLYGON_SYMBOL - 351)) | (1L << (POINT_SYMBOL - 351)) | (1L << (POLYGON_SYMBOL - 351)))) != 0)) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcharContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MySQLParser.CHAR_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NcharContext nchar() {
		NcharContext _localctx = new NcharContext(Context, State);
		EnterRule(_localctx, 918, RULE_nchar);
		try {
			State = 7338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7335; _localctx.type = Match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7336; _localctx.type = Match(NATIONAL_SYMBOL);
				State = 7337; Match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode REAL_SYMBOL() { return GetToken(MySQLParser.REAL_SYMBOL, 0); }
		public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 920, RULE_realType);
		try {
			State = 7345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7340; _localctx.type = Match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7341; _localctx.type = Match(DOUBLE_SYMBOL);
				State = 7343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,957,Context) ) {
				case 1:
					{
					State = 7342; Match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 922, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7347; Match(OPEN_PAR_SYMBOL);
			State = 7350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
			case 1:
				{
				State = 7348; real_ulonglong_number();
				}
				break;
			case 2:
				{
				State = 7349; Match(DECIMAL_NUMBER);
				}
				break;
			}
			State = 7352; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		public ITerminalNode[] SIGNED_SYMBOL() { return GetTokens(MySQLParser.SIGNED_SYMBOL); }
		public ITerminalNode SIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public ITerminalNode[] UNSIGNED_SYMBOL() { return GetTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public ITerminalNode UNSIGNED_SYMBOL(int i) {
			return GetToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public ITerminalNode[] ZEROFILL_SYMBOL() { return GetTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public ITerminalNode ZEROFILL_SYMBOL(int i) {
			return GetToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 924, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7355;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7354;
					_la = TokenStream.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,960,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetWithOptBinaryContext : ParserRuleContext {
		public AsciiContext ascii() {
			return GetRuleContext<AsciiContext>(0);
		}
		public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetWithOptBinary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetWithOptBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetWithOptBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetWithOptBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetWithOptBinaryContext charsetWithOptBinary() {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(Context, State);
		EnterRule(_localctx, 926, RULE_charsetWithOptBinary);
		try {
			State = 7373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7359; ascii();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7360; unicode();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7361; Match(BYTE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7362; charset();
				State = 7363; charsetName();
				State = 7365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
				case 1:
					{
					State = 7364; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7367; Match(BINARY_SYMBOL);
				State = 7371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
				case 1:
					{
					State = 7368; charset();
					State = 7369; charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciiContext : ParserRuleContext {
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascii; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAscii(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAscii(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscii(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsciiContext ascii() {
		AsciiContext _localctx = new AsciiContext(Context, State);
		EnterRule(_localctx, 928, RULE_ascii);
		try {
			State = 7381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASCII_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7375; Match(ASCII_SYMBOL);
				State = 7377;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
				case 1:
					{
					State = 7376; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7379; Match(BINARY_SYMBOL);
				State = 7380; Match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnicode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 930, RULE_unicode);
		try {
			State = 7389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNICODE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7383; Match(UNICODE_SYMBOL);
				State = 7385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,966,Context) ) {
				case 1:
					{
					State = 7384; Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7387; Match(BINARY_SYMBOL);
				State = 7388; Match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsNumCodepointsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsNumCodepoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWsNumCodepoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWsNumCodepoints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWsNumCodepoints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsNumCodepointsContext wsNumCodepoints() {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(Context, State);
		EnterRule(_localctx, 932, RULE_wsNumCodepoints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7391; Match(OPEN_PAR_SYMBOL);
			State = 7392; real_ulong_number();
			State = 7393; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDatetimePrecisionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDatetimePrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeDatetimePrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeDatetimePrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDatetimePrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDatetimePrecisionContext typeDatetimePrecision() {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 934, RULE_typeDatetimePrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7395; Match(OPEN_PAR_SYMBOL);
			State = 7396; Match(INT_NUMBER);
			State = 7397; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 936, RULE_charsetName);
		try {
			State = 7403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7399; textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7400; Match(BINARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7401;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7402; Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode BINARY_SYMBOL() { return GetToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 938, RULE_collationName);
		try {
			State = 7410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7405; textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7406;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7407; Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7408;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 7409; Match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsContext : ParserRuleContext {
		public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsContext createTableOptions() {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(Context, State);
		EnterRule(_localctx, 940, RULE_createTableOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7412; createTableOption();
			State = 7419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,971,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7414;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
					case 1:
						{
						State = 7413; Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 7416; createTableOption();
					}
					} 
				}
				State = 7421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,971,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsSpaceSeparatedContext : ParserRuleContext {
		public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsSpaceSeparated; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsSpaceSeparated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsSpaceSeparated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOptionsSpaceSeparated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(Context, State);
		EnterRule(_localctx, 942, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7423;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7422; createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,972,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionContext : ParserRuleContext {
		public IToken option;
		public IToken format;
		public IToken method;
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode UNION_SYMBOL() { return GetToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionContext createTableOption() {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(Context, State);
		EnterRule(_localctx, 944, RULE_createTableOption);
		int _la;
		try {
			State = 7556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7427; _localctx.option = Match(ENGINE_SYMBOL);
				State = 7429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
				case 1:
					{
					State = 7428; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7431; engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7432;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 7433; _localctx.option = Match(SECONDARY_ENGINE_SYMBOL);
				State = 7435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
				case 1:
					{
					State = 7434; equal();
					}
					break;
				}
				State = 7439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 7437; Match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7438; textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7441; _localctx.option = Match(MAX_ROWS_SYMBOL);
				State = 7443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7442; Match(EQUAL_OPERATOR);
					}
				}

				State = 7445; ulonglong_number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7446; _localctx.option = Match(MIN_ROWS_SYMBOL);
				State = 7448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7447; Match(EQUAL_OPERATOR);
					}
				}

				State = 7450; ulonglong_number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7451; _localctx.option = Match(AVG_ROW_LENGTH_SYMBOL);
				State = 7453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7452; Match(EQUAL_OPERATOR);
					}
				}

				State = 7455; ulong_number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7456; _localctx.option = Match(PASSWORD_SYMBOL);
				State = 7458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 7457; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7460; textStringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7461; _localctx.option = Match(COMMENT_SYMBOL);
				State = 7463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
				case 1:
					{
					State = 7462; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7465; textStringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7466;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7467; _localctx.option = Match(COMPRESSION_SYMBOL);
				State = 7469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 7468; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7471; textString();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7472;
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				State = 7473; _localctx.option = Match(ENCRYPTION_SYMBOL);
				State = 7475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 7474; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7477; textString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7478; _localctx.option = Match(AUTO_INCREMENT_SYMBOL);
				State = 7480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7479; Match(EQUAL_OPERATOR);
					}
				}

				State = 7482; ulonglong_number();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7483; _localctx.option = Match(PACK_KEYS_SYMBOL);
				State = 7485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7484; Match(EQUAL_OPERATOR);
					}
				}

				State = 7487; ternaryOption();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7488;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 544)) | (1L << (STATS_PERSISTENT_SYMBOL - 544)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 544)))) != 0)) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7489; Match(EQUAL_OPERATOR);
					}
				}

				State = 7492; ternaryOption();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7493;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7494; Match(EQUAL_OPERATOR);
					}
				}

				State = 7497; ulong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7498; _localctx.option = Match(DELAY_KEY_WRITE_SYMBOL);
				State = 7500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7499; Match(EQUAL_OPERATOR);
					}
				}

				State = 7502; ulong_number();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7503; _localctx.option = Match(ROW_FORMAT_SYMBOL);
				State = 7505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7504; Match(EQUAL_OPERATOR);
					}
				}

				State = 7507;
				_localctx.format = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (COMPACT_SYMBOL - 78)) | (1L << (COMPRESSED_SYMBOL - 78)) | (1L << (DEFAULT_SYMBOL - 78)))) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					_localctx.format = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7508; _localctx.option = Match(UNION_SYMBOL);
				State = 7510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7509; Match(EQUAL_OPERATOR);
					}
				}

				State = 7512; Match(OPEN_PAR_SYMBOL);
				State = 7513; tableRefList();
				State = 7514; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7516; defaultCharset();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7517; defaultCollation();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7518; _localctx.option = Match(INSERT_METHOD_SYMBOL);
				State = 7520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7519; Match(EQUAL_OPERATOR);
					}
				}

				State = 7522;
				_localctx.method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					_localctx.method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7523; _localctx.option = Match(DATA_SYMBOL);
				State = 7524; Match(DIRECTORY_SYMBOL);
				State = 7526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 7525; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7528; textString();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7529; _localctx.option = Match(INDEX_SYMBOL);
				State = 7530; Match(DIRECTORY_SYMBOL);
				State = 7532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
				case 1:
					{
					State = 7531; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7534; textString();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7535; _localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7541;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
				case 1:
					{
					State = 7536;
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					State = 7538;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
					case 1:
						{
						State = 7537; Match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				State = 7543; identifier();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7544; _localctx.option = Match(STORAGE_SYMBOL);
				State = 7545;
				_la = TokenStream.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7546; _localctx.option = Match(CONNECTION_SYMBOL);
				State = 7548;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
				case 1:
					{
					State = 7547; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7550; textString();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7551; _localctx.option = Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7552; Match(EQUAL_OPERATOR);
					}
				}

				State = 7555; ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryOptionContext : ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTernaryOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTernaryOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryOptionContext ternaryOption() {
		TernaryOptionContext _localctx = new TernaryOptionContext(Context, State);
		EnterRule(_localctx, 946, RULE_ternaryOption);
		try {
			State = 7560;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7558; ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7559; Match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCollationContext : ParserRuleContext {
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCollation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCollation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCollation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCollation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCollationContext defaultCollation() {
		DefaultCollationContext _localctx = new DefaultCollationContext(Context, State);
		EnterRule(_localctx, 948, RULE_defaultCollation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7562; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7565; Match(COLLATE_SYMBOL);
			State = 7567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				{
				State = 7566; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7569; collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultEncryptionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultEncryption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultEncryption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultEncryption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultEncryptionContext defaultEncryption() {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(Context, State);
		EnterRule(_localctx, 950, RULE_defaultEncryption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7571; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7574; Match(ENCRYPTION_SYMBOL);
			State = 7576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
			case 1:
				{
				State = 7575; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7578; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCharsetContext : ParserRuleContext {
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCharset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCharsetContext defaultCharset() {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(Context, State);
		EnterRule(_localctx, 952, RULE_defaultCharset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7580; Match(DEFAULT_SYMBOL);
				}
			}

			State = 7583; charset();
			State = 7585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
			case 1:
				{
				State = 7584; Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7587; charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return GetRuleContext<PartitionTypeDefContext>(0);
		}
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public SubPartitionsContext subPartitions() {
			return GetRuleContext<SubPartitionsContext>(0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 954, RULE_partitionClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7589; Match(PARTITION_SYMBOL);
			State = 7590; Match(BY_SYMBOL);
			State = 7591; partitionTypeDef();
			State = 7594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
			case 1:
				{
				State = 7592; Match(PARTITIONS_SYMBOL);
				State = 7593; real_ulong_number();
				}
				break;
			}
			State = 7597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				{
				State = 7596; subPartitions();
				}
				break;
			}
			State = 7600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
			case 1:
				{
				State = 7599; partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTypeDefContext : ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTypeDef; } }
	 
		public PartitionTypeDefContext() { }
		public virtual void CopyFrom(PartitionTypeDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionDefRangeListContext : PartitionTypeDefContext {
		public ITerminalNode RANGE_SYMBOL() { return GetToken(MySQLParser.RANGE_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefRangeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefRangeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefRangeList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionDefKeyContext : PartitionTypeDefContext {
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionDefHashContext : PartitionTypeDefContext {
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTypeDefContext partitionTypeDef() {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(Context, State);
		EnterRule(_localctx, 956, RULE_partitionTypeDef);
		int _la;
		try {
			State = 7635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7602; Match(LINEAR_SYMBOL);
					}
				}

				State = 7605; Match(KEY_SYMBOL);
				State = 7607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 7606; partitionKeyAlgorithm();
					}
					break;
				}
				State = 7609; Match(OPEN_PAR_SYMBOL);
				State = 7611;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1010,Context) ) {
				case 1:
					{
					State = 7610; identifierList();
					}
					break;
				}
				State = 7613; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7614; Match(LINEAR_SYMBOL);
					}
				}

				State = 7617; Match(HASH_SYMBOL);
				State = 7618; Match(OPEN_PAR_SYMBOL);
				State = 7619; bitExpr(0);
				State = 7620; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 7622;
				_la = TokenStream.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7633;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7623; Match(OPEN_PAR_SYMBOL);
					State = 7624; bitExpr(0);
					State = 7625; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					State = 7627; Match(COLUMNS_SYMBOL);
					State = 7628; Match(OPEN_PAR_SYMBOL);
					State = 7630;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
					case 1:
						{
						State = 7629; identifierList();
						}
						break;
					}
					State = 7632; Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubPartitionsContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subPartitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubPartitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubPartitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubPartitionsContext subPartitions() {
		SubPartitionsContext _localctx = new SubPartitionsContext(Context, State);
		EnterRule(_localctx, 958, RULE_subPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7637; Match(SUBPARTITION_SYMBOL);
			State = 7638; Match(BY_SYMBOL);
			State = 7640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				State = 7639; Match(LINEAR_SYMBOL);
				}
			}

			State = 7652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH_SYMBOL:
				{
				State = 7642; Match(HASH_SYMBOL);
				State = 7643; Match(OPEN_PAR_SYMBOL);
				State = 7644; bitExpr(0);
				State = 7645; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				State = 7647; Match(KEY_SYMBOL);
				State = 7649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
				case 1:
					{
					State = 7648; partitionKeyAlgorithm();
					}
					break;
				}
				State = 7651; identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
			case 1:
				{
				State = 7654; Match(SUBPARTITIONS_SYMBOL);
				State = 7655; real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionKeyAlgorithmContext : ParserRuleContext {
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionKeyAlgorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionKeyAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionKeyAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionKeyAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(Context, State);
		EnterRule(_localctx, 960, RULE_partitionKeyAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7658;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 7659; Match(ALGORITHM_SYMBOL);
			State = 7660; Match(EQUAL_OPERATOR);
			State = 7661; real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 962, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7663; Match(OPEN_PAR_SYMBOL);
			State = 7664; partitionDefinition();
			State = 7669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7665; Match(COMMA_SYMBOL);
				State = 7666; partitionDefinition();
				}
				}
				State = 7671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7672; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MySQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return GetRuleContext<PartitionValuesInContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return GetRuleContext<PartitionValueItemListParenContext>(0);
		}
		public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 964, RULE_partitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7674; Match(PARTITION_SYMBOL);
			State = 7675; identifier();
			State = 7686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				{
				State = 7676; Match(VALUES_SYMBOL);
				State = 7677; Match(LESS_SYMBOL);
				State = 7678; Match(THAN_SYMBOL);
				State = 7681;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7679; partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					State = 7680; Match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 7683; Match(VALUES_SYMBOL);
				State = 7684; Match(IN_SYMBOL);
				State = 7685; partitionValuesIn();
				}
				break;
			}
			State = 7691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 7688; partitionOption();
				}
				}
				State = 7693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7694; Match(OPEN_PAR_SYMBOL);
				State = 7695; subpartitionDefinition();
				State = 7700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7696; Match(COMMA_SYMBOL);
					State = 7697; subpartitionDefinition();
					}
					}
					State = 7702;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7703; Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValuesInContext : ParserRuleContext {
		public PartitionValueItemListParenContext[] partitionValueItemListParen() {
			return GetRuleContexts<PartitionValueItemListParenContext>();
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return GetRuleContext<PartitionValueItemListParenContext>(i);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValuesIn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValuesIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValuesIn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValuesIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValuesInContext partitionValuesIn() {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(Context, State);
		EnterRule(_localctx, 966, RULE_partitionValuesIn);
		int _la;
		try {
			State = 7719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7707; partitionValueItemListParen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7708; Match(OPEN_PAR_SYMBOL);
				State = 7709; partitionValueItemListParen();
				State = 7714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7710; Match(COMMA_SYMBOL);
					State = 7711; partitionValueItemListParen();
					}
					}
					State = 7716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7717; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public IToken option;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 968, RULE_partitionOption);
		int _la;
		try {
			State = 7755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7721; _localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
				case 1:
					{
					State = 7722; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7725; identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 7726; Match(STORAGE_SYMBOL);
					}
				}

				State = 7729; _localctx.option = Match(ENGINE_SYMBOL);
				State = 7731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
				case 1:
					{
					State = 7730; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7733; engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7734; _localctx.option = Match(NODEGROUP_SYMBOL);
				State = 7736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7735; Match(EQUAL_OPERATOR);
					}
				}

				State = 7738; real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7739;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7740; Match(EQUAL_OPERATOR);
					}
				}

				State = 7743; real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7744;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7745; Match(DIRECTORY_SYMBOL);
				State = 7747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
				case 1:
					{
					State = 7746; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7749; textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7750; _localctx.option = Match(COMMENT_SYMBOL);
				State = 7752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1033,Context) ) {
				case 1:
					{
					State = 7751; Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7754; textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 970, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7757; Match(SUBPARTITION_SYMBOL);
			State = 7758; textOrIdentifier();
			State = 7762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 7759; partitionOption();
				}
				}
				State = 7764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemListParenContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public PartitionValueItemContext[] partitionValueItem() {
			return GetRuleContexts<PartitionValueItemContext>();
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return GetRuleContext<PartitionValueItemContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItemListParen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItemListParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItemListParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValueItemListParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemListParenContext partitionValueItemListParen() {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(Context, State);
		EnterRule(_localctx, 972, RULE_partitionValueItemListParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7765; Match(OPEN_PAR_SYMBOL);
			State = 7766; partitionValueItem();
			State = 7771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7767; Match(COMMA_SYMBOL);
				State = 7768; partitionValueItem();
				}
				}
				State = 7773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7774; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemContext : ParserRuleContext {
		public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionValueItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemContext partitionValueItem() {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(Context, State);
		EnterRule(_localctx, 974, RULE_partitionValueItem);
		try {
			State = 7778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7776; bitExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7777; Match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinerClauseContext : ParserRuleContext {
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definerClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDefinerClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDefinerClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinerClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinerClauseContext definerClause() {
		DefinerClauseContext _localctx = new DefinerClauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_definerClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7780; Match(DEFINER_SYMBOL);
			State = 7781; Match(EQUAL_OPERATOR);
			State = 7782; user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 978, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7784; Match(IF_SYMBOL);
			State = 7785; Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		public ITerminalNode IF_SYMBOL() { return GetToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 980, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7787; Match(IF_SYMBOL);
			State = 7788; notRule();
			State = 7789; Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken type;
		public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		public ITerminalNode IN_SYMBOL() { return GetToken(MySQLParser.IN_SYMBOL, 0); }
		public ITerminalNode OUT_SYMBOL() { return GetToken(MySQLParser.OUT_SYMBOL, 0); }
		public ITerminalNode INOUT_SYMBOL() { return GetToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 982, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1038,Context) ) {
			case 1:
				{
				State = 7791;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 7794; functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 984, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7796; parameterName();
			State = 7797; typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(Context, State);
		EnterRule(_localctx, 986, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7799; Match(COLLATE_SYMBOL);
			State = 7800; collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWithOptCollateContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWithOptCollate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTypeWithOptCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTypeWithOptCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeWithOptCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeWithOptCollateContext typeWithOptCollate() {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(Context, State);
		EnterRule(_localctx, 988, RULE_typeWithOptCollate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7802; dataType();
			State = 7804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1039,Context) ) {
			case 1:
				{
				State = 7803; collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaIdentifierPairContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaIdentifierPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaIdentifierPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaIdentifierPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaIdentifierPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaIdentifierPairContext schemaIdentifierPair() {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(Context, State);
		EnterRule(_localctx, 990, RULE_schemaIdentifierPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7806; Match(OPEN_PAR_SYMBOL);
			State = 7807; schemaRef();
			State = 7808; Match(COMMA_SYMBOL);
			State = 7809; schemaRef();
			State = 7810; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefListContext : ParserRuleContext {
		public ViewRefContext[] viewRef() {
			return GetRuleContexts<ViewRefContext>();
		}
		public ViewRefContext viewRef(int i) {
			return GetRuleContext<ViewRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefListContext viewRefList() {
		ViewRefListContext _localctx = new ViewRefListContext(Context, State);
		EnterRule(_localctx, 992, RULE_viewRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7812; viewRef();
			State = 7817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7813; Match(COMMA_SYMBOL);
				State = 7814; viewRef();
				}
				}
				State = 7819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateListContext : ParserRuleContext {
		public UpdateElementContext[] updateElement() {
			return GetRuleContexts<UpdateElementContext>();
		}
		public UpdateElementContext updateElement(int i) {
			return GetRuleContext<UpdateElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateListContext updateList() {
		UpdateListContext _localctx = new UpdateListContext(Context, State);
		EnterRule(_localctx, 994, RULE_updateList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7820; updateElement();
			State = 7825;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1041,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7821; Match(COMMA_SYMBOL);
					State = 7822; updateElement();
					}
					} 
				}
				State = 7827;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1041,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateElementContext : ParserRuleContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateElementContext updateElement() {
		UpdateElementContext _localctx = new UpdateElementContext(Context, State);
		EnterRule(_localctx, 996, RULE_updateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7828; columnRef();
			State = 7829; Match(EQUAL_OPERATOR);
			State = 7832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
			case 1:
				{
				State = 7830; expr(0);
				}
				break;
			case 2:
				{
				State = 7831; Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetClauseContext : ParserRuleContext {
		public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCharsetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCharsetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetClauseContext charsetClause() {
		CharsetClauseContext _localctx = new CharsetClauseContext(Context, State);
		EnterRule(_localctx, 998, RULE_charsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7834; charset();
			State = 7835; charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsClauseContext : ParserRuleContext {
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public FieldTermContext[] fieldTerm() {
			return GetRuleContexts<FieldTermContext>();
		}
		public FieldTermContext fieldTerm(int i) {
			return GetRuleContext<FieldTermContext>(i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldsClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldsClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsClauseContext fieldsClause() {
		FieldsClauseContext _localctx = new FieldsClauseContext(Context, State);
		EnterRule(_localctx, 1000, RULE_fieldsClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7837; Match(COLUMNS_SYMBOL);
			State = 7839;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7838; fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1043,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTermContext : ParserRuleContext {
		public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode ENCLOSED_SYMBOL() { return GetToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public ITerminalNode OPTIONALLY_SYMBOL() { return GetToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public ITerminalNode ESCAPED_SYMBOL() { return GetToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTermContext fieldTerm() {
		FieldTermContext _localctx = new FieldTermContext(Context, State);
		EnterRule(_localctx, 1002, RULE_fieldTerm);
		int _la;
		try {
			State = 7855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7843; Match(TERMINATED_SYMBOL);
				State = 7844; Match(BY_SYMBOL);
				State = 7845; textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					State = 7846; Match(OPTIONALLY_SYMBOL);
					}
				}

				State = 7849; Match(ENCLOSED_SYMBOL);
				State = 7850; Match(BY_SYMBOL);
				State = 7851; textString();
				}
				break;
			case ESCAPED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7852; Match(ESCAPED_SYMBOL);
				State = 7853; Match(BY_SYMBOL);
				State = 7854; textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesClauseContext : ParserRuleContext {
		public ITerminalNode LINES_SYMBOL() { return GetToken(MySQLParser.LINES_SYMBOL, 0); }
		public LineTermContext[] lineTerm() {
			return GetRuleContexts<LineTermContext>();
		}
		public LineTermContext lineTerm(int i) {
			return GetRuleContext<LineTermContext>(i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLinesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLinesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesClauseContext linesClause() {
		LinesClauseContext _localctx = new LinesClauseContext(Context, State);
		EnterRule(_localctx, 1004, RULE_linesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7857; Match(LINES_SYMBOL);
			State = 7859;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7858; lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7861;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1046,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public ITerminalNode STARTING_SYMBOL() { return GetToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 1006, RULE_lineTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7863;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7864; Match(BY_SYMBOL);
			State = 7865; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserListContext : ParserRuleContext {
		public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserListContext userList() {
		UserListContext _localctx = new UserListContext(Context, State);
		EnterRule(_localctx, 1008, RULE_userList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7867; user();
			State = 7872;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1047,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7868; Match(COMMA_SYMBOL);
					State = 7869; user();
					}
					} 
				}
				State = 7874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1047,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserListContext : ParserRuleContext {
		public CreateUserEntryContext[] createUserEntry() {
			return GetRuleContexts<CreateUserEntryContext>();
		}
		public CreateUserEntryContext createUserEntry(int i) {
			return GetRuleContext<CreateUserEntryContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserListContext createUserList() {
		CreateUserListContext _localctx = new CreateUserListContext(Context, State);
		EnterRule(_localctx, 1010, RULE_createUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7875; createUserEntry();
			State = 7880;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1048,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7876; Match(COMMA_SYMBOL);
					State = 7877; createUserEntry();
					}
					} 
				}
				State = 7882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1048,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserListContext : ParserRuleContext {
		public AlterUserEntryContext[] alterUserEntry() {
			return GetRuleContexts<AlterUserEntryContext>();
		}
		public AlterUserEntryContext alterUserEntry(int i) {
			return GetRuleContext<AlterUserEntryContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserListContext alterUserList() {
		AlterUserListContext _localctx = new AlterUserListContext(Context, State);
		EnterRule(_localctx, 1012, RULE_alterUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7883; alterUserEntry();
			State = 7888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7884; Match(COMMA_SYMBOL);
					State = 7885; alterUserEntry();
					}
					} 
				}
				State = 7890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserEntryContext : ParserRuleContext {
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterCreateUserEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitCreateUserEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserEntryContext createUserEntry() {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(Context, State);
		EnterRule(_localctx, 1014, RULE_createUserEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7891; user();
			State = 7918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
			case 1:
				{
				State = 7892; Match(IDENTIFIED_SYMBOL);
				State = 7916;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
				case 1:
					{
					State = 7893; Match(BY_SYMBOL);
					State = 7896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
					case 1:
						{
						State = 7894;
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						State = 7895; Match(PASSWORD_SYMBOL);
						}
						break;
					}
					State = 7898; textString();
					}
					break;
				case 2:
					{
					State = 7899; Match(WITH_SYMBOL);
					State = 7900; textOrIdentifier();
					State = 7906;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
					case 1:
						{
						State = 7901; Match(AS_SYMBOL);
						State = 7902; textStringHash();
						}
						break;
					case 2:
						{
						State = 7903;
						if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
						State = 7904; Match(BY_SYMBOL);
						State = 7905; textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 7908;
					if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
					State = 7911;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						State = 7909; Match(WITH_SYMBOL);
						State = 7910; textOrIdentifier();
						}
					}

					State = 7913; Match(BY_SYMBOL);
					State = 7914; Match(RANDOM_SYMBOL);
					State = 7915; Match(PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserEntryContext : ParserRuleContext {
		public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode BY_SYMBOL() { return GetToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode WITH_SYMBOL() { return GetToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		public ITerminalNode AS_SYMBOL() { return GetToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterAlterUserEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitAlterUserEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserEntryContext alterUserEntry() {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(Context, State);
		EnterRule(_localctx, 1016, RULE_alterUserEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7920; user();
			State = 7949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1062,Context) ) {
			case 1:
				{
				State = 7921; Match(IDENTIFIED_SYMBOL);
				State = 7944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1060,Context) ) {
				case 1:
					{
					State = 7924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						State = 7922; Match(WITH_SYMBOL);
						State = 7923; textOrIdentifier();
						}
					}

					State = 7926; Match(BY_SYMBOL);
					State = 7927; textString();
					State = 7930;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1056,Context) ) {
					case 1:
						{
						State = 7928; Match(REPLACE_SYMBOL);
						State = 7929; textString();
						}
						break;
					}
					State = 7933;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1057,Context) ) {
					case 1:
						{
						State = 7932; retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 7935; Match(WITH_SYMBOL);
					State = 7936; textOrIdentifier();
					State = 7942;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1059,Context) ) {
					case 1:
						{
						State = 7937; Match(AS_SYMBOL);
						State = 7938; textStringHash();
						State = 7940;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1058,Context) ) {
						case 1:
							{
							State = 7939; retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7947;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
				case 1:
					{
					State = 7946; discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainCurrentPasswordContext : ParserRuleContext {
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainCurrentPassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRetainCurrentPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRetainCurrentPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainCurrentPassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainCurrentPasswordContext retainCurrentPassword() {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(Context, State);
		EnterRule(_localctx, 1018, RULE_retainCurrentPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7951; Match(RETAIN_SYMBOL);
			State = 7952; Match(CURRENT_SYMBOL);
			State = 7953; Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardOldPasswordContext : ParserRuleContext {
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardOldPassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardOldPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardOldPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardOldPassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardOldPasswordContext discardOldPassword() {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(Context, State);
		EnterRule(_localctx, 1020, RULE_discardOldPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7955; Match(DISCARD_SYMBOL);
			State = 7956; Match(OLD_SYMBOL);
			State = 7957; Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacePasswordContext : ParserRuleContext {
		public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacePassword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReplacePassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReplacePassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacePassword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacePasswordContext replacePassword() {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(Context, State);
		EnterRule(_localctx, 1022, RULE_replacePassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7959; Match(REPLACE_SYMBOL);
			State = 7960; textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserIdentifierOrTextContext : ParserRuleContext {
		public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userIdentifierOrText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUserIdentifierOrText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUserIdentifierOrText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserIdentifierOrText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserIdentifierOrTextContext userIdentifierOrText() {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1024, RULE_userIdentifierOrText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7962; textOrIdentifier();
			State = 7966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
			case 1:
				{
				State = 7963; Match(AT_SIGN_SYMBOL);
				State = 7964; textOrIdentifier();
				}
				break;
			case 2:
				{
				State = 7965; Match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserContext : ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserContext user() {
		UserContext _localctx = new UserContext(Context, State);
		EnterRule(_localctx, 1026, RULE_user);
		try {
			State = 7973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7968; userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7969; Match(CURRENT_USER_SYMBOL);
				State = 7971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
				case 1:
					{
					State = 7970; parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		public ITerminalNode LIKE_SYMBOL() { return GetToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 1028, RULE_likeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7975; Match(LIKE_SYMBOL);
			State = 7976; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeOrWhereContext : ParserRuleContext {
		public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeOrWhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLikeOrWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLikeOrWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeOrWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeOrWhereContext likeOrWhere() {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(Context, State);
		EnterRule(_localctx, 1030, RULE_likeOrWhere);
		try {
			State = 7980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7978; likeClause();
				}
				break;
			case WHERE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7979; whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlineOptionContext : ParserRuleContext {
		public ITerminalNode ONLINE_SYMBOL() { return GetToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public ITerminalNode OFFLINE_SYMBOL() { return GetToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlineOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOnlineOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOnlineOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnlineOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlineOptionContext onlineOption() {
		OnlineOptionContext _localctx = new OnlineOptionContext(Context, State);
		EnterRule(_localctx, 1032, RULE_onlineOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7982;
			_la = TokenStream.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWriteToBinLogContext : ParserRuleContext {
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return GetToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWriteToBinLog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNoWriteToBinLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNoWriteToBinLog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoWriteToBinLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoWriteToBinLogContext noWriteToBinLog() {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(Context, State);
		EnterRule(_localctx, 1034, RULE_noWriteToBinLog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7984;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsePartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usePartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUsePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUsePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsePartitionContext usePartition() {
		UsePartitionContext _localctx = new UsePartitionContext(Context, State);
		EnterRule(_localctx, 1036, RULE_usePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7986;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 7987; Match(PARTITION_SYMBOL);
			State = 7988; identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 1038, RULE_fieldIdentifier);
		try {
			State = 7995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1068,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7990; dotIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7991; qualifiedIdentifier();
				State = 7993;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1067,Context) ) {
				case 1:
					{
					State = 7992; dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 1040, RULE_columnName);
		try {
			State = 8001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1069,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7997;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7998; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7999;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8000; fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnInternalRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefContext columnInternalRef() {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(Context, State);
		EnterRule(_localctx, 1042, RULE_columnInternalRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8003; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ColumnInternalRefContext[] columnInternalRef() {
			return GetRuleContexts<ColumnInternalRefContext>();
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return GetRuleContext<ColumnInternalRefContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnInternalRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefListContext columnInternalRefList() {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(Context, State);
		EnterRule(_localctx, 1044, RULE_columnInternalRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8005; Match(OPEN_PAR_SYMBOL);
			State = 8006; columnInternalRef();
			State = 8011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8007; Match(COMMA_SYMBOL);
				State = 8008; columnInternalRef();
				}
				}
				State = 8013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8014; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumnRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumnRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefContext columnRef() {
		ColumnRefContext _localctx = new ColumnRefContext(Context, State);
		EnterRule(_localctx, 1046, RULE_columnRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8016; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIdentifierContext : ParserRuleContext {
		public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterInsertIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitInsertIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertIdentifierContext insertIdentifier() {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(Context, State);
		EnterRule(_localctx, 1048, RULE_insertIdentifier);
		try {
			State = 8020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1071,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8018; columnRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8019; tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 1050, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8022; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 1052, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8024; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableWildContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT_SYMBOL() { return GetTokens(MySQLParser.DOT_SYMBOL); }
		public ITerminalNode DOT_SYMBOL(int i) {
			return GetToken(MySQLParser.DOT_SYMBOL, i);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableWild; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableWild(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableWild(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableWild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableWildContext tableWild() {
		TableWildContext _localctx = new TableWildContext(Context, State);
		EnterRule(_localctx, 1054, RULE_tableWild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8026; identifier();
			State = 8027; Match(DOT_SYMBOL);
			State = 8031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1072,Context) ) {
			case 1:
				{
				State = 8028; identifier();
				State = 8029; Match(DOT_SYMBOL);
				}
				break;
			}
			State = 8033; Match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaNameContext schemaName() {
		SchemaNameContext _localctx = new SchemaNameContext(Context, State);
		EnterRule(_localctx, 1056, RULE_schemaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8035; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 1058, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8037; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 1060, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8039; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterProcedureRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitProcedureRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRefContext procedureRef() {
		ProcedureRefContext _localctx = new ProcedureRefContext(Context, State);
		EnterRule(_localctx, 1062, RULE_procedureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8041; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 1064, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8043; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRefContext functionRef() {
		FunctionRefContext _localctx = new FunctionRefContext(Context, State);
		EnterRule(_localctx, 1066, RULE_functionRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8045; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerNameContext triggerName() {
		TriggerNameContext _localctx = new TriggerNameContext(Context, State);
		EnterRule(_localctx, 1068, RULE_triggerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8047; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerRefContext triggerRef() {
		TriggerRefContext _localctx = new TriggerRefContext(Context, State);
		EnterRule(_localctx, 1070, RULE_triggerRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8049; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 1072, RULE_viewName);
		try {
			State = 8053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8051; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8052; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterViewRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitViewRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefContext viewRef() {
		ViewRefContext _localctx = new ViewRefContext(Context, State);
		EnterRule(_localctx, 1074, RULE_viewRef);
		try {
			State = 8057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1074,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8055; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8056; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceNameContext tablespaceName() {
		TablespaceNameContext _localctx = new TablespaceNameContext(Context, State);
		EnterRule(_localctx, 1076, RULE_tablespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8059; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTablespaceRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTablespaceRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceRefContext tablespaceRef() {
		TablespaceRefContext _localctx = new TablespaceRefContext(Context, State);
		EnterRule(_localctx, 1078, RULE_tablespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8061; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupNameContext logfileGroupName() {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(Context, State);
		EnterRule(_localctx, 1080, RULE_logfileGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8063; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfileGroupRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupRefContext logfileGroupRef() {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(Context, State);
		EnterRule(_localctx, 1082, RULE_logfileGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8065; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 1084, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8067; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEventRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEventRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRefContext eventRef() {
		EventRefContext _localctx = new EventRefContext(Context, State);
		EnterRule(_localctx, 1086, RULE_eventRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8069; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUdfName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUdfName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UdfNameContext udfName() {
		UdfNameContext _localctx = new UdfNameContext(Context, State);
		EnterRule(_localctx, 1088, RULE_udfName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8071; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerNameContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerNameContext serverName() {
		ServerNameContext _localctx = new ServerNameContext(Context, State);
		EnterRule(_localctx, 1090, RULE_serverName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8073; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerRefContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterServerRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitServerRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerRefContext serverRef() {
		ServerRefContext _localctx = new ServerRefContext(Context, State);
		EnterRule(_localctx, 1092, RULE_serverRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8075; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineRefContext : ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEngineRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEngineRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineRefContext engineRef() {
		EngineRefContext _localctx = new EngineRefContext(Context, State);
		EnterRule(_localctx, 1094, RULE_engineRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8077; textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 1096, RULE_tableName);
		try {
			State = 8081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1075,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8079; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8080; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableRefContext : ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFilterTableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFilterTableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableRefContext filterTableRef() {
		FilterTableRefContext _localctx = new FilterTableRefContext(Context, State);
		EnterRule(_localctx, 1098, RULE_filterTableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8083; schemaRef();
			State = 8084; dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefWithWildcardContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefWithWildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefWithWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefWithWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRefWithWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefWithWildcardContext tableRefWithWildcard() {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(Context, State);
		EnterRule(_localctx, 1100, RULE_tableRefWithWildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8086; identifier();
			State = 8094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1077,Context) ) {
			case 1:
				{
				State = 8087; Match(DOT_SYMBOL);
				State = 8088; Match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				State = 8089; dotIdentifier();
				State = 8092;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1076,Context) ) {
				case 1:
					{
					State = 8090; Match(DOT_SYMBOL);
					State = 8091; Match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 1102, RULE_tableRef);
		try {
			State = 8098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1078,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8096; qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8097; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefListContext : ParserRuleContext {
		public TableRefContext[] tableRef() {
			return GetRuleContexts<TableRefContext>();
		}
		public TableRefContext tableRef(int i) {
			return GetRuleContext<TableRefContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefListContext tableRefList() {
		TableRefListContext _localctx = new TableRefListContext(Context, State);
		EnterRule(_localctx, 1104, RULE_tableRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8100; tableRef();
			State = 8105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1079,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8101; Match(COMMA_SYMBOL);
					State = 8102; tableRef();
					}
					} 
				}
				State = 8107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1079,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasRefListContext : ParserRuleContext {
		public TableRefWithWildcardContext[] tableRefWithWildcard() {
			return GetRuleContexts<TableRefWithWildcardContext>();
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return GetRuleContext<TableRefWithWildcardContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAliasRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTableAliasRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTableAliasRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAliasRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasRefListContext tableAliasRefList() {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(Context, State);
		EnterRule(_localctx, 1106, RULE_tableAliasRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8108; tableRefWithWildcard();
			State = 8113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1080,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8109; Match(COMMA_SYMBOL);
					State = 8110; tableRefWithWildcard();
					}
					} 
				}
				State = 8115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1080,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 1108, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8116; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdentifierContext labelIdentifier() {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(Context, State);
		EnterRule(_localctx, 1110, RULE_labelIdentifier);
		try {
			State = 8120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1081,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8118; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8119; labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelRefContext : ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelRefContext labelRef() {
		LabelRefContext _localctx = new LabelRefContext(Context, State);
		EnterRule(_localctx, 1112, RULE_labelRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8122; labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public RoleKeywordContext roleKeyword() {
			return GetRuleContext<RoleKeywordContext>(0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierContext roleIdentifier() {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(Context, State);
		EnterRule(_localctx, 1114, RULE_roleIdentifier);
		try {
			State = 8126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1082,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8124; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8125; roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleRefContext : ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleRefContext roleRef() {
		RoleRefContext _localctx = new RoleRefContext(Context, State);
		EnterRule(_localctx, 1116, RULE_roleRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8128; roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPluginRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPluginRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluginRefContext pluginRef() {
		PluginRefContext _localctx = new PluginRefContext(Context, State);
		EnterRule(_localctx, 1118, RULE_pluginRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8130; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRefContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterComponentRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitComponentRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRefContext componentRef() {
		ComponentRefContext _localctx = new ComponentRefContext(Context, State);
		EnterRule(_localctx, 1120, RULE_componentRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8132; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupRefContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceGroupRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupRefContext resourceGroupRef() {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(Context, State);
		EnterRule(_localctx, 1122, RULE_resourceGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8134; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 1124, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8136; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MySQLParser.IDENTIFIER, 0); }
		public ITerminalNode BACK_TICK_QUOTED_ID() { return GetToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPureIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 1126, RULE_pureIdentifier);
		int _la;
		try {
			State = 8141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1083,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8138;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8139;
				if (!(isSqlModeActive(SqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				State = 8140; Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return GetRuleContext<IdentifierKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1128, RULE_identifier);
		try {
			State = 8145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1084,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8143; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8144; identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 1130, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8147; identifier();
			State = 8152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1085,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8148; Match(COMMA_SYMBOL);
					State = 8149; identifier();
					}
					} 
				}
				State = 8154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1085,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListWithParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierListWithParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierListWithParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierListWithParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierListWithParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListWithParenthesesContext identifierListWithParentheses() {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1132, RULE_identifierListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8155; Match(OPEN_PAR_SYMBOL);
			State = 8156; identifierList();
			State = 8157; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 1134, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8159; identifier();
			State = 8161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1086,Context) ) {
			case 1:
				{
				State = 8160; dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext[] dotIdentifier() {
			return GetRuleContexts<DotIdentifierContext>();
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return GetRuleContext<DotIdentifierContext>(i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 1136, RULE_simpleIdentifier);
		int _la;
		try {
			State = 8174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1089,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8163; identifier();
				State = 8168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 8164; dotIdentifier();
					State = 8166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 8165; dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8170;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8171; dotIdentifier();
				State = 8172; dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 1138, RULE_dotIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8176; Match(DOT_SYMBOL);
			State = 8177; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ulong_numberContext ulong_number() {
		Ulong_numberContext _localctx = new Ulong_numberContext(Context, State);
		EnterRule(_localctx, 1140, RULE_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8179;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_ulong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulong_numberContext real_ulong_number() {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(Context, State);
		EnterRule(_localctx, 1142, RULE_real_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8181;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulonglong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulonglong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterUlonglong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitUlonglong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlonglong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ulonglong_numberContext ulonglong_number() {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1144, RULE_ulonglong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8183;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulonglong_numberContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulonglong_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterReal_ulonglong_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitReal_ulonglong_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_ulonglong_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulonglong_numberContext real_ulonglong_number() {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1146, RULE_real_ulonglong_number);
		try {
			State = 8190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1090,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8185; Match(INT_NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8186;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8187; Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8188; Match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8189; Match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return GetRuleContext<TemporalLiteralContext>(0);
		}
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1148, RULE_literal);
		int _la;
		try {
			State = 8201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1092,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8192; textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8193; numLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8194; temporalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8195; nullLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8196; boolLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					State = 8197; Match(UNDERSCORE_CHARSET);
					}
				}

				State = 8200;
				_la = TokenStream.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralContext signedLiteral() {
		SignedLiteralContext _localctx = new SignedLiteralContext(Context, State);
		EnterRule(_localctx, 1150, RULE_signedLiteral);
		try {
			State = 8208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1093,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8203; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8204; Match(PLUS_OPERATOR);
				State = 8205; ulong_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8206; Match(MINUS_OPERATOR);
				State = 8207; ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 1152, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8210; Match(OPEN_PAR_SYMBOL);
			State = 8211; textString();
			State = 8216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8212; Match(COMMA_SYMBOL);
				State = 8213; textString();
				}
				}
				State = 8218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8219; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralContext textStringLiteral() {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(Context, State);
		EnterRule(_localctx, 1154, RULE_textStringLiteral);
		try {
			State = 8224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1095,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8221; _localctx.value = Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8222;
				if (!(!isSqlModeActive(SqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				State = 8223; _localctx.value = Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public ITerminalNode BIN_NUMBER() { return GetToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringContext textString() {
		TextStringContext _localctx = new TextStringContext(Context, State);
		EnterRule(_localctx, 1156, RULE_textString);
		try {
			State = 8229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8226; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8227; Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8228; Match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringHashContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ITerminalNode HEX_NUMBER() { return GetToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringHash; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringHashContext textStringHash() {
		TextStringHashContext _localctx = new TextStringHashContext(Context, State);
		EnterRule(_localctx, 1158, RULE_textStringHash);
		try {
			State = 8234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8231; textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8232;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8233; Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLiteralContext : ParserRuleContext {
		public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		public ITerminalNode NCHAR_TEXT() { return GetToken(MySQLParser.NCHAR_TEXT, 0); }
		public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLiteralContext textLiteral() {
		TextLiteralContext _localctx = new TextLiteralContext(Context, State);
		EnterRule(_localctx, 1160, RULE_textLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1099,Context) ) {
			case 1:
				{
				State = 8237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
				case 1:
					{
					State = 8236; Match(UNDERSCORE_CHARSET);
					}
					break;
				}
				State = 8239; textStringLiteral();
				}
				break;
			case 2:
				{
				State = 8240; Match(NCHAR_TEXT);
				}
				break;
			}
			State = 8246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8243; textStringLiteral();
					}
					} 
				}
				State = 8248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringNoLinebreakContext : ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringNoLinebreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringNoLinebreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringNoLinebreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringNoLinebreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringNoLinebreakContext textStringNoLinebreak() {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(Context, State);
		EnterRule(_localctx, 1162, RULE_textStringNoLinebreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8249; textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralListContext : ParserRuleContext {
		public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteralList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteralList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextStringLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralListContext textStringLiteralList() {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(Context, State);
		EnterRule(_localctx, 1164, RULE_textStringLiteralList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8251; textStringLiteral();
			State = 8256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8252; Match(COMMA_SYMBOL);
				State = 8253; textStringLiteral();
				}
				}
				State = 8258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MySQLParser.INT_NUMBER, 0); }
		public ITerminalNode LONG_NUMBER() { return GetToken(MySQLParser.LONG_NUMBER, 0); }
		public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 1166, RULE_numLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8259;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE_SYMBOL() { return GetToken(MySQLParser.TRUE_SYMBOL, 0); }
		public ITerminalNode FALSE_SYMBOL() { return GetToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 1168, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8261;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode NULL_SYMBOL() { return GetToken(MySQLParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL2_SYMBOL() { return GetToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 1170, RULE_nullLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8263;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_SYMBOL || _la==NULL2_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalLiteralContext : ParserRuleContext {
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTemporalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTemporalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemporalLiteralContext temporalLiteral() {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(Context, State);
		EnterRule(_localctx, 1172, RULE_temporalLiteral);
		try {
			State = 8271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8265; Match(DATE_SYMBOL);
				State = 8266; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8267; Match(TIME_SYMBOL);
				State = 8268; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8269; Match(TIMESTAMP_SYMBOL);
				State = 8270; Match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatOptionsContext : ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFloatOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFloatOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatOptionsContext floatOptions() {
		FloatOptionsContext _localctx = new FloatOptionsContext(Context, State);
		EnterRule(_localctx, 1174, RULE_floatOptions);
		try {
			State = 8275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8273; fieldLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8274; precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFloatOptionsContext : ParserRuleContext {
		public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFloatOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStandardFloatOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStandardFloatOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFloatOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFloatOptionsContext standardFloatOptions() {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(Context, State);
		EnterRule(_localctx, 1176, RULE_standardFloatOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8277; precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode[] INT_NUMBER() { return GetTokens(MySQLParser.INT_NUMBER); }
		public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySQLParser.INT_NUMBER, i);
		}
		public ITerminalNode COMMA_SYMBOL() { return GetToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 1178, RULE_precision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8279; Match(OPEN_PAR_SYMBOL);
			State = 8280; Match(INT_NUMBER);
			State = 8281; Match(COMMA_SYMBOL);
			State = 8282; Match(INT_NUMBER);
			State = 8283; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextOrIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textOrIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTextOrIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTextOrIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextOrIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextOrIdentifierContext textOrIdentifier() {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(Context, State);
		EnterRule(_localctx, 1180, RULE_textOrIdentifier);
		try {
			State = 8287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8285; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8286; textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueIdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public LValueKeywordContext lValueKeyword() {
			return GetRuleContext<LValueKeywordContext>(0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueIdentifierContext lValueIdentifier() {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(Context, State);
		EnterRule(_localctx, 1182, RULE_lValueIdentifier);
		try {
			State = 8291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8289; pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8290; lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierOrTextContext : ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifierOrText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifierOrText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifierOrText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleIdentifierOrText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierOrTextContext roleIdentifierOrText() {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1184, RULE_roleIdentifierOrText);
		try {
			State = 8295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8293; roleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8294; textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeNumberContext : ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSizeNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSizeNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeNumberContext sizeNumber() {
		SizeNumberContext _localctx = new SizeNumberContext(Context, State);
		EnterRule(_localctx, 1186, RULE_sizeNumber);
		try {
			State = 8299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8297; real_ulonglong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8298; pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 1188, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8301; Match(OPEN_PAR_SYMBOL);
			State = 8302; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 1190, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8304;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionTypeContext : ParserRuleContext {
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterOptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitOptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionTypeContext optionType() {
		OptionTypeContext _localctx = new OptionTypeContext(Context, State);
		EnterRule(_localctx, 1192, RULE_optionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8306;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarIdentTypeContext : ParserRuleContext {
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varIdentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterVarIdentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitVarIdentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarIdentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarIdentTypeContext varIdentType() {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1194, RULE_varIdentType);
		try {
			State = 8314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8308; Match(GLOBAL_SYMBOL);
				State = 8309; Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8310; Match(LOCAL_SYMBOL);
				State = 8311; Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8312; Match(SESSION_SYMBOL);
				State = 8313; Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarIdentTypeContext : ParserRuleContext {
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode DOT_SYMBOL() { return GetToken(MySQLParser.DOT_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVarIdentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSetVarIdentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSetVarIdentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVarIdentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVarIdentTypeContext setVarIdentType() {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1196, RULE_setVarIdentType);
		try {
			State = 8326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERSIST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8316; Match(PERSIST_SYMBOL);
				State = 8317; Match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8318; Match(PERSIST_ONLY_SYMBOL);
				State = 8319; Match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8320; Match(GLOBAL_SYMBOL);
				State = 8321; Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8322; Match(LOCAL_SYMBOL);
				State = 8323; Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8324; Match(SESSION_SYMBOL);
				State = 8325; Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordContext : ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordContext identifierKeyword() {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1198, RULE_identifierKeyword);
		try {
			State = 8345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8328;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1110,Context) ) {
				case 1:
					{
					State = 8329; labelKeyword();
					}
					break;
				case 2:
					{
					State = 8330; roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					State = 8331; Match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8332;
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					State = 8333; Match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8334;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 8335; Match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
				case 1:
					{
					State = 8338; identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8339; identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					State = 8340; identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					State = 8341; identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					State = 8342; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous1RolesAndLabelsContext : ParserRuleContext {
		public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public ITerminalNode RESTART_SYMBOL() { return GetToken(MySQLParser.RESTART_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(Context, State);
		EnterRule(_localctx, 1200, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8347;
			_la = TokenStream.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous2LabelsContext : ParserRuleContext {
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous2Labels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous2Labels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous2Labels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous2Labels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(Context, State);
		EnterRule(_localctx, 1202, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8349;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (COMMIT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DEALLOCATE_SYMBOL - 75)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (IMPORT_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REPAIR_SYMBOL - 455)) | (1L << (RESET_SYMBOL - 455)) | (1L << (ROLLBACK_SYMBOL - 455)) | (1L << (SAVEPOINT_SYMBOL - 455)) | (1L << (SIGNED_SYMBOL - 455)) | (1L << (SLAVE_SYMBOL - 455)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (START_SYMBOL - 543)) | (1L << (STOP_SYMBOL - 543)) | (1L << (TRUNCATE_SYMBOL - 543)) | (1L << (UNICODE_SYMBOL - 543)))) != 0) || _la==UNINSTALL_SYMBOL || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelKeywordContext : ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLabelKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLabelKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelKeywordContext labelKeyword() {
		LabelKeywordContext _localctx = new LabelKeywordContext(Context, State);
		EnterRule(_localctx, 1204, RULE_labelKeyword);
		try {
			State = 8369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8351;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1113,Context) ) {
				case 1:
					{
					State = 8352; roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8353; Match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 8354; Match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8355; Match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8356; Match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					State = 8357; Match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					State = 8358; Match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					State = 8359; Match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					State = 8360; Match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					State = 8361; Match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
				case 1:
					{
					State = 8364; identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8365; identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					State = 8366; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous3RolesContext : ParserRuleContext {
		public ITerminalNode EVENT_SYMBOL() { return GetToken(MySQLParser.EVENT_SYMBOL, 0); }
		public ITerminalNode FILE_SYMBOL() { return GetToken(MySQLParser.FILE_SYMBOL, 0); }
		public ITerminalNode NONE_SYMBOL() { return GetToken(MySQLParser.NONE_SYMBOL, 0); }
		public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public ITerminalNode PROXY_SYMBOL() { return GetToken(MySQLParser.PROXY_SYMBOL, 0); }
		public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous3Roles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous3Roles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous3Roles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous3Roles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(Context, State);
		EnterRule(_localctx, 1206, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8371;
			_la = TokenStream.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (NONE_SYMBOL - 369)) | (1L << (PROCESS_SYMBOL - 369)) | (1L << (PROXY_SYMBOL - 369)))) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsUnambiguousContext : ParserRuleContext {
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public ITerminalNode OJ_SYMBOL() { return GetToken(MySQLParser.OJ_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public ITerminalNode OFF_SYMBOL() { return GetToken(MySQLParser.OFF_SYMBOL, 0); }
		public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public ITerminalNode STREAM_SYMBOL() { return GetToken(MySQLParser.STREAM_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsUnambiguous; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsUnambiguous(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsUnambiguous(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsUnambiguous(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(Context, State);
		EnterRule(_localctx, 1208, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			State = 8376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8373;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLOSE_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXCHANGE_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPIRE_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (FORMAT_SYMBOL - 201)) | (1L << (FOUND_SYMBOL - 201)) | (1L << (FULL_SYMBOL - 201)) | (1L << (GENERAL_SYMBOL - 201)) | (1L << (GROUP_REPLICATION_SYMBOL - 201)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 201)) | (1L << (GEOMETRY_SYMBOL - 201)) | (1L << (GET_FORMAT_SYMBOL - 201)) | (1L << (GRANTS_SYMBOL - 201)) | (1L << (HASH_SYMBOL - 201)) | (1L << (HOST_SYMBOL - 201)) | (1L << (HOSTS_SYMBOL - 201)) | (1L << (HOUR_SYMBOL - 201)) | (1L << (IDENTIFIED_SYMBOL - 201)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 201)) | (1L << (INDEXES_SYMBOL - 201)) | (1L << (INITIAL_SIZE_SYMBOL - 201)) | (1L << (INSERT_METHOD_SYMBOL - 201)) | (1L << (INSTANCE_SYMBOL - 201)) | (1L << (INVOKER_SYMBOL - 201)) | (1L << (IO_SYMBOL - 201)) | (1L << (IPC_SYMBOL - 201)) | (1L << (ISOLATION_SYMBOL - 201)) | (1L << (ISSUER_SYMBOL - 201)) | (1L << (JSON_SYMBOL - 201)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 201)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MYSQL_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)) | (1L << (ONLY_SYMBOL - 333)) | (1L << (OPEN_SYMBOL - 333)) | (1L << (OPTIONS_SYMBOL - 333)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (OWNER_SYMBOL - 398)) | (1L << (PACK_KEYS_SYMBOL - 398)) | (1L << (PAGE_SYMBOL - 398)) | (1L << (PARSER_SYMBOL - 398)) | (1L << (PARTIAL_SYMBOL - 398)) | (1L << (PARTITIONING_SYMBOL - 398)) | (1L << (PARTITIONS_SYMBOL - 398)) | (1L << (PASSWORD_SYMBOL - 398)) | (1L << (PHASE_SYMBOL - 398)) | (1L << (PLUGINS_SYMBOL - 398)) | (1L << (PLUGIN_DIR_SYMBOL - 398)) | (1L << (PLUGIN_SYMBOL - 398)) | (1L << (POINT_SYMBOL - 398)) | (1L << (POLYGON_SYMBOL - 398)) | (1L << (PORT_SYMBOL - 398)) | (1L << (PRESERVE_SYMBOL - 398)) | (1L << (PREV_SYMBOL - 398)) | (1L << (PRIVILEGES_SYMBOL - 398)) | (1L << (PROCESSLIST_SYMBOL - 398)) | (1L << (PROFILE_SYMBOL - 398)) | (1L << (PROFILES_SYMBOL - 398)) | (1L << (QUARTER_SYMBOL - 398)) | (1L << (QUERY_SYMBOL - 398)) | (1L << (QUICK_SYMBOL - 398)) | (1L << (READ_ONLY_SYMBOL - 398)) | (1L << (REBUILD_SYMBOL - 398)) | (1L << (RECOVER_SYMBOL - 398)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 398)) | (1L << (REDUNDANT_SYMBOL - 398)) | (1L << (RELAY_SYMBOL - 398)) | (1L << (RELAYLOG_SYMBOL - 398)) | (1L << (RELAY_LOG_FILE_SYMBOL - 398)) | (1L << (RELAY_LOG_POS_SYMBOL - 398)) | (1L << (RELAY_THREAD_SYMBOL - 398)) | (1L << (REMOVE_SYMBOL - 398)) | (1L << (REORGANIZE_SYMBOL - 398)) | (1L << (REPEATABLE_SYMBOL - 398)) | (1L << (REPLICATE_DO_DB_SYMBOL - 398)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (REPLICATE_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 462)) | (1L << (RESTORE_SYMBOL - 462)) | (1L << (RESUME_SYMBOL - 462)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 462)) | (1L << (RETURNS_SYMBOL - 462)) | (1L << (REVERSE_SYMBOL - 462)) | (1L << (ROLLUP_SYMBOL - 462)) | (1L << (ROTATE_SYMBOL - 462)) | (1L << (ROUTINE_SYMBOL - 462)) | (1L << (ROW_COUNT_SYMBOL - 462)) | (1L << (ROW_FORMAT_SYMBOL - 462)) | (1L << (RTREE_SYMBOL - 462)) | (1L << (SCHEDULE_SYMBOL - 462)) | (1L << (SCHEMA_NAME_SYMBOL - 462)) | (1L << (SECOND_SYMBOL - 462)) | (1L << (SECURITY_SYMBOL - 462)) | (1L << (SERIALIZABLE_SYMBOL - 462)) | (1L << (SERIAL_SYMBOL - 462)) | (1L << (SERVER_SYMBOL - 462)) | (1L << (SHARE_SYMBOL - 462)) | (1L << (SIMPLE_SYMBOL - 462)) | (1L << (SLOW_SYMBOL - 462)) | (1L << (SNAPSHOT_SYMBOL - 462)) | (1L << (SOCKET_SYMBOL - 462)) | (1L << (SONAME_SYMBOL - 462)) | (1L << (SOUNDS_SYMBOL - 462)) | (1L << (SOURCE_SYMBOL - 462)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (UPGRADE_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALIDATION_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WITHOUT_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (WRAPPER_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (ROLE_SYMBOL - 656)) | (1L << (ADMIN_SYMBOL - 656)) | (1L << (INVISIBLE_SYMBOL - 656)) | (1L << (VISIBLE_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 656)) | (1L << (DEFINITION_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (REFERENCE_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (SECONDARY_SYMBOL - 720)) | (1L << (SECONDARY_ENGINE_SYMBOL - 720)) | (1L << (SECONDARY_LOAD_SYMBOL - 720)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 720)) | (1L << (ACTIVE_SYMBOL - 720)) | (1L << (INACTIVE_SYMBOL - 720)) | (1L << (RETAIN_SYMBOL - 720)) | (1L << (OLD_SYMBOL - 720)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 720)) | (1L << (ENFORCED_SYMBOL - 720)) | (1L << (OJ_SYMBOL - 720)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 720)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 720)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 720)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 720)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8374;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 8375;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (ARRAY_SYMBOL - 731)) | (1L << (MEMBER_SYMBOL - 731)) | (1L << (RANDOM_SYMBOL - 731)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 731)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 731)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 731)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 731)) | (1L << (REQUIRE_ROW_FORMAT_SYMBOL - 731)) | (1L << (PASSWORD_LOCK_TIME_SYMBOL - 731)) | (1L << (FAILED_LOGIN_ATTEMPTS_SYMBOL - 731)) | (1L << (REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL - 731)) | (1L << (STREAM_SYMBOL - 731)) | (1L << (OFF_SYMBOL - 731)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleKeywordContext : ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleKeywordContext roleKeyword() {
		RoleKeywordContext _localctx = new RoleKeywordContext(Context, State);
		EnterRule(_localctx, 1210, RULE_roleKeyword);
		try {
			State = 8388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8378;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1117,Context) ) {
				case 1:
					{
					State = 8379; roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8380; roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8386;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1118,Context) ) {
				case 1:
					{
					State = 8383; identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8384; identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					State = 8385; identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueKeywordContext : ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLValueKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLValueKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueKeywordContext lValueKeyword() {
		LValueKeywordContext _localctx = new LValueKeywordContext(Context, State);
		EnterRule(_localctx, 1212, RULE_lValueKeyword);
		try {
			State = 8394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8390; identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8391; identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8392; identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8393; identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous4SystemVariablesContext : ParserRuleContext {
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous4SystemVariables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKeywordsAmbiguous4SystemVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(Context, State);
		EnterRule(_localctx, 1214, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8396;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrIdentifierKeywordContext : ParserRuleContext {
		public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public ITerminalNode ASCII_SYMBOL() { return GetToken(MySQLParser.ASCII_SYMBOL, 0); }
		public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public ITerminalNode BYTE_SYMBOL() { return GetToken(MySQLParser.BYTE_SYMBOL, 0); }
		public ITerminalNode CACHE_SYMBOL() { return GetToken(MySQLParser.CACHE_SYMBOL, 0); }
		public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public ITerminalNode CLONE_SYMBOL() { return GetToken(MySQLParser.CLONE_SYMBOL, 0); }
		public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public ITerminalNode DO_SYMBOL() { return GetToken(MySQLParser.DO_SYMBOL, 0); }
		public ITerminalNode END_SYMBOL() { return GetToken(MySQLParser.END_SYMBOL, 0); }
		public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public ITerminalNode HELP_SYMBOL() { return GetToken(MySQLParser.HELP_SYMBOL, 0); }
		public ITerminalNode HOST_SYMBOL() { return GetToken(MySQLParser.HOST_SYMBOL, 0); }
		public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public ITerminalNode NO_SYMBOL() { return GetToken(MySQLParser.NO_SYMBOL, 0); }
		public ITerminalNode OPEN_SYMBOL() { return GetToken(MySQLParser.OPEN_SYMBOL, 0); }
		public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public ITerminalNode OWNER_SYMBOL() { return GetToken(MySQLParser.OWNER_SYMBOL, 0); }
		public ITerminalNode PARSER_SYMBOL() { return GetToken(MySQLParser.PARSER_SYMBOL, 0); }
		public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public ITerminalNode PORT_SYMBOL() { return GetToken(MySQLParser.PORT_SYMBOL, 0); }
		public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public ITerminalNode RESET_SYMBOL() { return GetToken(MySQLParser.RESET_SYMBOL, 0); }
		public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public ITerminalNode ROLE_SYMBOL() { return GetToken(MySQLParser.ROLE_SYMBOL, 0); }
		public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public ITerminalNode SERVER_SYMBOL() { return GetToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public ITerminalNode SONAME_SYMBOL() { return GetToken(MySQLParser.SONAME_SYMBOL, 0); }
		public ITerminalNode START_SYMBOL() { return GetToken(MySQLParser.START_SYMBOL, 0); }
		public ITerminalNode STOP_SYMBOL() { return GetToken(MySQLParser.STOP_SYMBOL, 0); }
		public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public ITerminalNode XA_SYMBOL() { return GetToken(MySQLParser.XA_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrIdentifierKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrIdentifierKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrIdentifierKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrIdentifierKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1216, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			State = 8403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8398;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CLOSE_SYMBOL - 66)) | (1L << (COMMENT_SYMBOL - 66)) | (1L << (COMMIT_SYMBOL - 66)) | (1L << (CONTAINS_SYMBOL - 66)) | (1L << (DEALLOCATE_SYMBOL - 66)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)) | (1L << (FORMAT_SYMBOL - 147)) | (1L << (GROUP_REPLICATION_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (HOST_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (OPEN_SYMBOL - 373)) | (1L << (OPTIONS_SYMBOL - 373)) | (1L << (OWNER_SYMBOL - 373)) | (1L << (PARSER_SYMBOL - 373)) | (1L << (PARTITION_SYMBOL - 373)) | (1L << (PORT_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (REMOVE_SYMBOL - 452)) | (1L << (REPAIR_SYMBOL - 452)) | (1L << (RESET_SYMBOL - 452)) | (1L << (RESTORE_SYMBOL - 452)) | (1L << (ROLLBACK_SYMBOL - 452)) | (1L << (SAVEPOINT_SYMBOL - 452)) | (1L << (SECURITY_SYMBOL - 452)) | (1L << (SERVER_SYMBOL - 452)) | (1L << (SIGNED_SYMBOL - 452)) | (1L << (SLAVE_SYMBOL - 452)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (SOCKET_SYMBOL - 519)) | (1L << (SONAME_SYMBOL - 519)) | (1L << (START_SYMBOL - 519)) | (1L << (STOP_SYMBOL - 519)))) != 0) || ((((_la - 597)) & ~0x3f) == 0 && ((1L << (_la - 597)) & ((1L << (TRUNCATE_SYMBOL - 597)) | (1L << (UNICODE_SYMBOL - 597)) | (1L << (UNINSTALL_SYMBOL - 597)) | (1L << (UPGRADE_SYMBOL - 597)) | (1L << (WRAPPER_SYMBOL - 597)) | (1L << (XA_SYMBOL - 597)) | (1L << (ROLE_SYMBOL - 597)))) != 0) || ((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (INVISIBLE_SYMBOL - 661)) | (1L << (VISIBLE_SYMBOL - 661)) | (1L << (CLONE_SYMBOL - 661)) | (1L << (SECONDARY_SYMBOL - 661)) | (1L << (SECONDARY_ENGINE_SYMBOL - 661)) | (1L << (SECONDARY_LOAD_SYMBOL - 661)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 661)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8399;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 8400; Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8401;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8402; Match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrLabelKeywordContext : ParserRuleContext {
		public ITerminalNode ACTION_SYMBOL() { return GetToken(MySQLParser.ACTION_SYMBOL, 0); }
		public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public ITerminalNode AFTER_SYMBOL() { return GetToken(MySQLParser.AFTER_SYMBOL, 0); }
		public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public ITerminalNode ANY_SYMBOL() { return GetToken(MySQLParser.ANY_SYMBOL, 0); }
		public ITerminalNode AT_SYMBOL() { return GetToken(MySQLParser.AT_SYMBOL, 0); }
		public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public ITerminalNode AVG_SYMBOL() { return GetToken(MySQLParser.AVG_SYMBOL, 0); }
		public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public ITerminalNode BIT_SYMBOL() { return GetToken(MySQLParser.BIT_SYMBOL, 0); }
		public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public ITerminalNode BOOL_SYMBOL() { return GetToken(MySQLParser.BOOL_SYMBOL, 0); }
		public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public ITerminalNode BTREE_SYMBOL() { return GetToken(MySQLParser.BTREE_SYMBOL, 0); }
		public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ITerminalNode CODE_SYMBOL() { return GetToken(MySQLParser.CODE_SYMBOL, 0); }
		public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public ITerminalNode CPU_SYMBOL() { return GetToken(MySQLParser.CPU_SYMBOL, 0); }
		public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public ITerminalNode DATA_SYMBOL() { return GetToken(MySQLParser.DATA_SYMBOL, 0); }
		public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public ITerminalNode DATE_SYMBOL() { return GetToken(MySQLParser.DATE_SYMBOL, 0); }
		public ITerminalNode DAY_SYMBOL() { return GetToken(MySQLParser.DAY_SYMBOL, 0); }
		public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public ITerminalNode DISK_SYMBOL() { return GetToken(MySQLParser.DISK_SYMBOL, 0); }
		public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public ITerminalNode ENDS_SYMBOL() { return GetToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ITerminalNode ENUM_SYMBOL() { return GetToken(MySQLParser.ENUM_SYMBOL, 0); }
		public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public ITerminalNode ERROR_SYMBOL() { return GetToken(MySQLParser.ERROR_SYMBOL, 0); }
		public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public ITerminalNode EVERY_SYMBOL() { return GetToken(MySQLParser.EVERY_SYMBOL, 0); }
		public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public ITerminalNode FAST_SYMBOL() { return GetToken(MySQLParser.FAST_SYMBOL, 0); }
		public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public ITerminalNode FOUND_SYMBOL() { return GetToken(MySQLParser.FOUND_SYMBOL, 0); }
		public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public ITerminalNode FULL_SYMBOL() { return GetToken(MySQLParser.FULL_SYMBOL, 0); }
		public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode FILTER_SYMBOL() { return GetToken(MySQLParser.FILTER_SYMBOL, 0); }
		public ITerminalNode FIRST_SYMBOL() { return GetToken(MySQLParser.FIRST_SYMBOL, 0); }
		public ITerminalNode FIXED_SYMBOL() { return GetToken(MySQLParser.FIXED_SYMBOL, 0); }
		public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public ITerminalNode HASH_SYMBOL() { return GetToken(MySQLParser.HASH_SYMBOL, 0); }
		public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public ITerminalNode HOUR_SYMBOL() { return GetToken(MySQLParser.HOUR_SYMBOL, 0); }
		public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public ITerminalNode IO_SYMBOL() { return GetToken(MySQLParser.IO_SYMBOL, 0); }
		public ITerminalNode IPC_SYMBOL() { return GetToken(MySQLParser.IPC_SYMBOL, 0); }
		public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public ITerminalNode JSON_SYMBOL() { return GetToken(MySQLParser.JSON_SYMBOL, 0); }
		public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public ITerminalNode LAST_SYMBOL() { return GetToken(MySQLParser.LAST_SYMBOL, 0); }
		public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public ITerminalNode LESS_SYMBOL() { return GetToken(MySQLParser.LESS_SYMBOL, 0); }
		public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ITerminalNode LIST_SYMBOL() { return GetToken(MySQLParser.LIST_SYMBOL, 0); }
		public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public ITerminalNode LOGS_SYMBOL() { return GetToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public ITerminalNode MASTER_SYMBOL() { return GetToken(MySQLParser.MASTER_SYMBOL, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public ITerminalNode MERGE_SYMBOL() { return GetToken(MySQLParser.MERGE_SYMBOL, 0); }
		public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public ITerminalNode MODE_SYMBOL() { return GetToken(MySQLParser.MODE_SYMBOL, 0); }
		public ITerminalNode MONTH_SYMBOL() { return GetToken(MySQLParser.MONTH_SYMBOL, 0); }
		public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public ITerminalNode NAME_SYMBOL() { return GetToken(MySQLParser.NAME_SYMBOL, 0); }
		public ITerminalNode NAMES_SYMBOL() { return GetToken(MySQLParser.NAMES_SYMBOL, 0); }
		public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public ITerminalNode NESTED_SYMBOL() { return GetToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ITerminalNode NEVER_SYMBOL() { return GetToken(MySQLParser.NEVER_SYMBOL, 0); }
		public ITerminalNode NEXT_SYMBOL() { return GetToken(MySQLParser.NEXT_SYMBOL, 0); }
		public ITerminalNode NEW_SYMBOL() { return GetToken(MySQLParser.NEW_SYMBOL, 0); }
		public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public ITerminalNode NULLS_SYMBOL() { return GetToken(MySQLParser.NULLS_SYMBOL, 0); }
		public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public ITerminalNode OLD_SYMBOL() { return GetToken(MySQLParser.OLD_SYMBOL, 0); }
		public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public ITerminalNode ONE_SYMBOL() { return GetToken(MySQLParser.ONE_SYMBOL, 0); }
		public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public ITerminalNode PAGE_SYMBOL() { return GetToken(MySQLParser.PAGE_SYMBOL, 0); }
		public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public ITerminalNode PATH_SYMBOL() { return GetToken(MySQLParser.PATH_SYMBOL, 0); }
		public ITerminalNode PHASE_SYMBOL() { return GetToken(MySQLParser.PHASE_SYMBOL, 0); }
		public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ITerminalNode POINT_SYMBOL() { return GetToken(MySQLParser.POINT_SYMBOL, 0); }
		public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public ITerminalNode PREV_SYMBOL() { return GetToken(MySQLParser.PREV_SYMBOL, 0); }
		public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public ITerminalNode QUERY_SYMBOL() { return GetToken(MySQLParser.QUERY_SYMBOL, 0); }
		public ITerminalNode QUICK_SYMBOL() { return GetToken(MySQLParser.QUICK_SYMBOL, 0); }
		public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public ITerminalNode RELAY_SYMBOL() { return GetToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public ITerminalNode RESUME_SYMBOL() { return GetToken(MySQLParser.RESUME_SYMBOL, 0); }
		public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public ITerminalNode REUSE_SYMBOL() { return GetToken(MySQLParser.REUSE_SYMBOL, 0); }
		public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public ITerminalNode RTREE_SYMBOL() { return GetToken(MySQLParser.RTREE_SYMBOL, 0); }
		public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public ITerminalNode SECOND_SYMBOL() { return GetToken(MySQLParser.SECOND_SYMBOL, 0); }
		public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public ITerminalNode SESSION_SYMBOL() { return GetToken(MySQLParser.SESSION_SYMBOL, 0); }
		public ITerminalNode SHARE_SYMBOL() { return GetToken(MySQLParser.SHARE_SYMBOL, 0); }
		public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ITerminalNode SKIP_SYMBOL() { return GetToken(MySQLParser.SKIP_SYMBOL, 0); }
		public ITerminalNode SLOW_SYMBOL() { return GetToken(MySQLParser.SLOW_SYMBOL, 0); }
		public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public ITerminalNode SRID_SYMBOL() { return GetToken(MySQLParser.SRID_SYMBOL, 0); }
		public ITerminalNode STACKED_SYMBOL() { return GetToken(MySQLParser.STACKED_SYMBOL, 0); }
		public ITerminalNode STARTS_SYMBOL() { return GetToken(MySQLParser.STARTS_SYMBOL, 0); }
		public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public ITerminalNode STATUS_SYMBOL() { return GetToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ITerminalNode STRING_SYMBOL() { return GetToken(MySQLParser.STRING_SYMBOL, 0); }
		public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public ITerminalNode SUPER_SYMBOL() { return GetToken(MySQLParser.SUPER_SYMBOL, 0); }
		public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ITerminalNode TEXT_SYMBOL() { return GetToken(MySQLParser.TEXT_SYMBOL, 0); }
		public ITerminalNode THAN_SYMBOL() { return GetToken(MySQLParser.THAN_SYMBOL, 0); }
		public ITerminalNode TIES_SYMBOL() { return GetToken(MySQLParser.TIES_SYMBOL, 0); }
		public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public ITerminalNode TIME_SYMBOL() { return GetToken(MySQLParser.TIME_SYMBOL, 0); }
		public ITerminalNode TYPES_SYMBOL() { return GetToken(MySQLParser.TYPES_SYMBOL, 0); }
		public ITerminalNode TYPE_SYMBOL() { return GetToken(MySQLParser.TYPE_SYMBOL, 0); }
		public ITerminalNode UDF_RETURNS_SYMBOL() { return GetToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ITerminalNode USER_SYMBOL() { return GetToken(MySQLParser.USER_SYMBOL, 0); }
		public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public ITerminalNode VCPU_SYMBOL() { return GetToken(MySQLParser.VCPU_SYMBOL, 0); }
		public ITerminalNode VIEW_SYMBOL() { return GetToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MySQLParser.VALUE_SYMBOL, 0); }
		public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ITerminalNode WAIT_SYMBOL() { return GetToken(MySQLParser.WAIT_SYMBOL, 0); }
		public ITerminalNode WEEK_SYMBOL() { return GetToken(MySQLParser.WEEK_SYMBOL, 0); }
		public ITerminalNode WORK_SYMBOL() { return GetToken(MySQLParser.WORK_SYMBOL, 0); }
		public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public ITerminalNode X509_SYMBOL() { return GetToken(MySQLParser.X509_SYMBOL, 0); }
		public ITerminalNode XID_SYMBOL() { return GetToken(MySQLParser.XID_SYMBOL, 0); }
		public ITerminalNode XML_SYMBOL() { return GetToken(MySQLParser.XML_SYMBOL, 0); }
		public ITerminalNode YEAR_SYMBOL() { return GetToken(MySQLParser.YEAR_SYMBOL, 0); }
		public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public ITerminalNode CUBE_SYMBOL() { return GetToken(MySQLParser.CUBE_SYMBOL, 0); }
		public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public ITerminalNode ROWS_SYMBOL() { return GetToken(MySQLParser.ROWS_SYMBOL, 0); }
		public ITerminalNode ROW_SYMBOL() { return GetToken(MySQLParser.ROW_SYMBOL, 0); }
		public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public ITerminalNode ONLY_SYMBOL() { return GetToken(MySQLParser.ONLY_SYMBOL, 0); }
		public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrLabelKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRoleOrLabelKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRoleOrLabelKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySQLParserVisitor<TResult> typedVisitor = visitor as IMySQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOrLabelKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrLabelKeywordContext roleOrLabelKeyword() {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(Context, State);
		EnterRule(_localctx, 1218, RULE_roleOrLabelKeyword);
		int _la;
		try {
			State = 8414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8405;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ANALYSE_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTHORS_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CONTRIBUTORS_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DES_KEY_FILE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (FOUND_SYMBOL - 202)) | (1L << (FULL_SYMBOL - 202)) | (1L << (GENERAL_SYMBOL - 202)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 202)) | (1L << (GEOMETRY_SYMBOL - 202)) | (1L << (GET_FORMAT_SYMBOL - 202)) | (1L << (GLOBAL_SYMBOL - 202)) | (1L << (GRANTS_SYMBOL - 202)) | (1L << (HASH_SYMBOL - 202)) | (1L << (HOSTS_SYMBOL - 202)) | (1L << (HOUR_SYMBOL - 202)) | (1L << (IDENTIFIED_SYMBOL - 202)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 202)) | (1L << (INDEXES_SYMBOL - 202)) | (1L << (INITIAL_SIZE_SYMBOL - 202)) | (1L << (INSERT_METHOD_SYMBOL - 202)) | (1L << (INSTANCE_SYMBOL - 202)) | (1L << (INVOKER_SYMBOL - 202)) | (1L << (IO_SYMBOL - 202)) | (1L << (IPC_SYMBOL - 202)) | (1L << (ISOLATION_SYMBOL - 202)) | (1L << (ISSUER_SYMBOL - 202)) | (1L << (JSON_SYMBOL - 202)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 202)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCAL_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MYSQL_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (OLD_PASSWORD_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (PACK_KEYS_SYMBOL - 399)) | (1L << (PAGE_SYMBOL - 399)) | (1L << (PARTIAL_SYMBOL - 399)) | (1L << (PARTITIONING_SYMBOL - 399)) | (1L << (PARTITIONS_SYMBOL - 399)) | (1L << (PASSWORD_SYMBOL - 399)) | (1L << (PHASE_SYMBOL - 399)) | (1L << (PLUGINS_SYMBOL - 399)) | (1L << (PLUGIN_DIR_SYMBOL - 399)) | (1L << (PLUGIN_SYMBOL - 399)) | (1L << (POINT_SYMBOL - 399)) | (1L << (POLYGON_SYMBOL - 399)) | (1L << (PRESERVE_SYMBOL - 399)) | (1L << (PREV_SYMBOL - 399)) | (1L << (PRIVILEGES_SYMBOL - 399)) | (1L << (PROCESSLIST_SYMBOL - 399)) | (1L << (PROFILE_SYMBOL - 399)) | (1L << (PROFILES_SYMBOL - 399)) | (1L << (QUARTER_SYMBOL - 399)) | (1L << (QUERY_SYMBOL - 399)) | (1L << (QUICK_SYMBOL - 399)) | (1L << (READ_ONLY_SYMBOL - 399)) | (1L << (REBUILD_SYMBOL - 399)) | (1L << (RECOVER_SYMBOL - 399)) | (1L << (REDOFILE_SYMBOL - 399)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 399)) | (1L << (REDUNDANT_SYMBOL - 399)) | (1L << (RELAY_SYMBOL - 399)) | (1L << (RELAYLOG_SYMBOL - 399)) | (1L << (RELAY_LOG_FILE_SYMBOL - 399)) | (1L << (RELAY_LOG_POS_SYMBOL - 399)) | (1L << (RELAY_THREAD_SYMBOL - 399)) | (1L << (REORGANIZE_SYMBOL - 399)) | (1L << (REPEATABLE_SYMBOL - 399)) | (1L << (REPLICATE_DO_DB_SYMBOL - 399)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 399)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 463)) | (1L << (RESUME_SYMBOL - 463)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 463)) | (1L << (RETURNS_SYMBOL - 463)) | (1L << (REVERSE_SYMBOL - 463)) | (1L << (ROLLUP_SYMBOL - 463)) | (1L << (ROTATE_SYMBOL - 463)) | (1L << (ROUTINE_SYMBOL - 463)) | (1L << (ROW_COUNT_SYMBOL - 463)) | (1L << (ROW_FORMAT_SYMBOL - 463)) | (1L << (RTREE_SYMBOL - 463)) | (1L << (SCHEDULE_SYMBOL - 463)) | (1L << (SCHEMA_NAME_SYMBOL - 463)) | (1L << (SECOND_SYMBOL - 463)) | (1L << (SERIALIZABLE_SYMBOL - 463)) | (1L << (SERIAL_SYMBOL - 463)) | (1L << (SESSION_SYMBOL - 463)) | (1L << (SHARE_SYMBOL - 463)) | (1L << (SIMPLE_SYMBOL - 463)) | (1L << (SLOW_SYMBOL - 463)) | (1L << (SNAPSHOT_SYMBOL - 463)) | (1L << (SOUNDS_SYMBOL - 463)) | (1L << (SOURCE_SYMBOL - 463)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_CACHE_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUPER_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UDF_RETURNS_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (REMOTE_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ACTIVE_SYMBOL - 724)) | (1L << (INACTIVE_SYMBOL - 724)) | (1L << (RETAIN_SYMBOL - 724)) | (1L << (OLD_SYMBOL - 724)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8406;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 8407; Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8408;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8409;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==FUNCTION_SYMBOL || _la==IMPORT_SYMBOL || _la==ROWS_SYMBOL || _la==ROW_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8410;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8411;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==SUPER_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8412;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 8413; Match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2: return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3: return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9: return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13: return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14: return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 17: return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 24: return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 27: return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 38: return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 40: return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 53: return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 64: return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 67: return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 84: return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 89: return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 110: return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 111: return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 113: return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 116: return insertStatement_sempred((InsertStatementContext)_localctx, predIndex);
		case 135: return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 138: return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 139: return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 163: return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 171: return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 173: return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 174: return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 180: return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 186: return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 189: return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 193: return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 199: return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 208: return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 212: return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 214: return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 218: return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 220: return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 221: return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 222: return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 232: return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 240: return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 241: return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 248: return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 251: return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 252: return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 253: return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 255: return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 256: return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 257: return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 260: return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 261: return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 262: return grant_sempred((GrantContext)_localctx, predIndex);
		case 263: return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 264: return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 268: return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 270: return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 271: return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 274: return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 275: return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 282: return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 288: return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 293: return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 298: return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 299: return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 300: return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 301: return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 305: return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 313: return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 316: return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 331: return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 333: return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 334: return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 338: return expr_sempred((ExprContext)_localctx, predIndex);
		case 339: return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 341: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 343: return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 344: return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 345: return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 346: return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 347: return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 358: return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 359: return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 361: return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 373: return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 377: return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 391: return channel_sempred((ChannelContext)_localctx, predIndex);
		case 420: return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 433: return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 436: return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 438: return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 439: return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 449: return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 452: return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 458: return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 468: return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 469: return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 472: return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 480: return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 507: return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 518: return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 520: return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 563: return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 568: return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 573: return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 577: return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 579: return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 599: return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 602: return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 604: return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 605: return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 608: return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 609: return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private bool simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return serverVersion >= 80000;
		case 1: return serverVersion >= 80000;
		case 2: return serverVersion >= 80000;
		case 3: return serverVersion >= 50604;
		}
		return true;
	}
	private bool alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return serverVersion >= 80014;
		case 5: return serverVersion >= 50713;
		}
		return true;
	}
	private bool alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return serverVersion < 80000;
		}
		return true;
	}
	private bool alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return serverVersion < 50700;
		}
		return true;
	}
	private bool standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return serverVersion >= 80014;
		}
		return true;
	}
	private bool alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return serverVersion >= 50704;
		case 10: return serverVersion >= 50704;
		}
		return true;
	}
	private bool alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return serverVersion >= 50700;
		case 12: return serverVersion < 50700;
		case 13: return serverVersion >= 80017;
		case 14: return serverVersion >= 80019;
		case 15: return serverVersion >= 80014;
		case 16: return serverVersion >= 80000;
		case 17: return serverVersion >= 80017;
		case 18: return serverVersion >= 80019;
		case 19: return serverVersion >= 80000;
		case 20: return serverVersion >= 50700;
		case 21: return serverVersion >= 80014;
		case 22: return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private bool withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return serverVersion < 80000;
		case 25: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return serverVersion >= 80000;
		case 27: return serverVersion >= 80011;
		case 28: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return serverVersion >= 80016;
		}
		return true;
	}
	private bool createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return serverVersion >= 50707;
		case 33: return serverVersion >= 80014;
		}
		return true;
	}
	private bool triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return serverVersion >= 50700;
		}
		return true;
	}
	private bool dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return serverVersion >= 80000;
		case 36: return serverVersion >= 80011;
		case 37: return serverVersion >= 80014;
		}
		return true;
	}
	private bool deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return serverVersion >= 80000;
		case 39: return serverVersion >= 80017;
		}
		return true;
	}
	private bool partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return serverVersion >= 50602;
		}
		return true;
	}
	private bool doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return serverVersion < 50709;
		case 42: return serverVersion >= 50709;
		}
		return true;
	}
	private bool insertStatement_sempred(InsertStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return  serverVersion >= 80018;
		case 44: return  serverVersion >= 80018;
		}
		return true;
	}
	private bool queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return serverVersion >= 80000;
		case 46: return serverVersion < 80000;
		}
		return true;
	}
	private bool queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return serverVersion >= 80019;
		case 48: return serverVersion >= 80019;
		}
		return true;
	}
	private bool querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return serverVersion >= 80000;
		}
		return true;
	}
	private bool olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return serverVersion < 80000;
		}
		return true;
	}
	private bool selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return serverVersion < 80000;
		case 52: return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private bool lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return serverVersion >= 80000;
		case 54: return serverVersion >= 80000;
		}
		return true;
	}
	private bool lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return serverVersion >= 80000;
		}
		return true;
	}
	private bool tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return serverVersion < 80017;
		}
		return true;
	}
	private bool tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return serverVersion >= 80004;
		}
		return true;
	}
	private bool derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return serverVersion >= 80000;
		case 59: return serverVersion >= 80014;
		}
		return true;
	}
	private bool jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return serverVersion < 80017;
		}
		return true;
	}
	private bool updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return serverVersion >= 80000;
		}
		return true;
	}
	private bool transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return serverVersion >= 50605;
		}
		return true;
	}
	private bool lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return serverVersion >= 80000;
		case 65: return serverVersion >= 80000;
		}
		return true;
	}
	private bool xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return serverVersion >= 50704;
		}
		return true;
	}
	private bool replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return serverVersion > 80000;
		case 68: return serverVersion >= 50700;
		case 69: return serverVersion > 50706;
		}
		return true;
	}
	private bool resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return serverVersion < 80000;
		}
		return true;
	}
	private bool masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return serverVersion >= 80000;
		case 72: return serverVersion < 80017;
		case 73: return serverVersion >= 80017;
		}
		return true;
	}
	private bool changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return serverVersion >= 80000;
		}
		return true;
	}
	private bool slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return serverVersion >= 50606;
		case 76: return serverVersion >= 50606;
		}
		return true;
	}
	private bool slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return serverVersion >= 50604;
		}
		return true;
	}
	private bool cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return serverVersion >= 80014;
		}
		return true;
	}
	private bool accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return serverVersion >= 50606;
		case 80: return serverVersion >= 80000;
		}
		return true;
	}
	private bool alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return serverVersion < 80014;
		case 83: return serverVersion >= 80014;
		case 84: return serverVersion >= 50706;
		case 85: return serverVersion >= 80014;
		case 86: return serverVersion >= 80014;
		case 87: return serverVersion >= 80014;
		case 88: return serverVersion >= 80000;
		case 89: return serverVersion >= 80018;
		}
		return true;
	}
	private bool createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90: return serverVersion >= 50706;
		}
		return true;
	}
	private bool createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return serverVersion >= 50706;
		}
		return true;
	}
	private bool defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92: return serverVersion >= 80000;
		}
		return true;
	}
	private bool accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return serverVersion >= 80014;
		}
		return true;
	}
	private bool dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94: return serverVersion >= 50706;
		}
		return true;
	}
	private bool grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95: return serverVersion >= 80000;
		}
		return true;
	}
	private bool grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96: return serverVersion < 80011;
		case 97: return serverVersion >= 80011;
		}
		return true;
	}
	private bool grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98: return serverVersion < 80011;
		case 99: return serverVersion >= 80011;
		}
		return true;
	}
	private bool versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100: return serverVersion < 80011;
		}
		return true;
	}
	private bool revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 101: return serverVersion >= 80000;
		case 102: return serverVersion >= 80000;
		}
		return true;
	}
	private bool onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103: return serverVersion < 80000;
		case 104: return serverVersion >= 80000;
		}
		return true;
	}
	private bool roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105: return serverVersion > 80000;
		case 106: return serverVersion > 80000;
		}
		return true;
	}
	private bool grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 107: return serverVersion >= 80017;
		}
		return true;
	}
	private bool tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 108: return serverVersion >= 80000;
		}
		return true;
	}
	private bool startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109: return serverVersion < 50706;
		case 110: return serverVersion < 80014;
		case 111: return serverVersion >= 80018;
		}
		return true;
	}
	private bool optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112: return serverVersion >= 80011;
		}
		return true;
	}
	private bool setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 113: return serverVersion >= 80000;
		}
		return true;
	}
	private bool showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114: return serverVersion < 50700;
		case 115: return serverVersion >= 80000;
		case 116: return serverVersion < 50700;
		case 117: return serverVersion >= 50704;
		}
		return true;
	}
	private bool showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118: return serverVersion >= 80000;
		}
		return true;
	}
	private bool nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 119: return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private bool otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 120: return serverVersion >= 50709;
		}
		return true;
	}
	private bool flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121: return serverVersion < 80000;
		case 122: return serverVersion >= 50706;
		}
		return true;
	}
	private bool flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123: return serverVersion >= 50606;
		}
		return true;
	}
	private bool utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124: return serverVersion >= 80011;
		}
		return true;
	}
	private bool explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125: return serverVersion < 80000;
		case 126: return serverVersion < 80000;
		case 127: return serverVersion >= 50605;
		case 128: return serverVersion >= 80018;
		case 129: return serverVersion >= 80019;
		}
		return true;
	}
	private bool explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 130: return serverVersion >= 50603;
		case 131: return serverVersion >= 50700;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132: return Precpred(Context, 3);
		case 133: return Precpred(Context, 2);
		case 134: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135: return Precpred(Context, 3);
		case 136: return Precpred(Context, 2);
		case 137: return Precpred(Context, 1);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 138: return serverVersion >= 80017;
		}
		return true;
	}
	private bool bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 139: return Precpred(Context, 7);
		case 140: return Precpred(Context, 6);
		case 141: return Precpred(Context, 5);
		case 142: return Precpred(Context, 3);
		case 143: return Precpred(Context, 2);
		case 144: return Precpred(Context, 1);
		case 145: return Precpred(Context, 4);
		}
		return true;
	}
	private bool simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146: return serverVersion >= 80000;
		case 147: return serverVersion >= 80000;
		case 148: return Precpred(Context, 15);
		case 149: return Precpred(Context, 21);
		}
		return true;
	}
	private bool arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 150: return serverVersion >= 80017;
		}
		return true;
	}
	private bool jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 151: return serverVersion >= 50708;
		case 152: return serverVersion >= 50713;
		}
		return true;
	}
	private bool sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153: return serverVersion >= 80000;
		case 154: return serverVersion >= 80000;
		case 155: return serverVersion >= 80000;
		case 156: return serverVersion >= 80000;
		case 157: return serverVersion >= 80000;
		case 158: return serverVersion >= 80000;
		case 159: return serverVersion >= 80000;
		case 160: return serverVersion >= 80000;
		case 161: return serverVersion >= 80000;
		case 162: return serverVersion >= 80000;
		case 163: return serverVersion >= 80000;
		case 164: return serverVersion >= 80000;
		case 165: return serverVersion >= 80000;
		}
		return true;
	}
	private bool runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return serverVersion < 50607;
		case 167: return serverVersion < 80011;
		case 168: return serverVersion < 80000;
		}
		return true;
	}
	private bool geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169: return serverVersion < 50706;
		}
		return true;
	}
	private bool fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170: return serverVersion >= 50604;
		}
		return true;
	}
	private bool internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171: return serverVersion < 80017;
		case 172: return serverVersion >= 80017;
		}
		return true;
	}
	private bool castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173: return serverVersion >= 50708;
		case 174: return serverVersion >= 80017;
		case 175: return serverVersion >= 80017;
		}
		return true;
	}
	private bool channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176: return serverVersion >= 50706;
		}
		return true;
	}
	private bool getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 177: return serverVersion >= 50700;
		}
		return true;
	}
	private bool checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 178: return serverVersion < 80016;
		}
		return true;
	}
	private bool tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179: return serverVersion >= 80017;
		}
		return true;
	}
	private bool fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 180: return serverVersion >= 50707;
		case 181: return serverVersion < 80000;
		case 182: return serverVersion >= 80000;
		}
		return true;
	}
	private bool columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 183: return serverVersion >= 80014;
		case 184: return serverVersion >= 80013;
		case 185: return serverVersion >= 80000;
		case 186: return serverVersion >= 80017;
		case 187: return serverVersion >= 80017;
		}
		return true;
	}
	private bool keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188: return serverVersion >= 80013;
		case 189: return serverVersion < 80013;
		}
		return true;
	}
	private bool commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 190: return serverVersion >= 80000;
		}
		return true;
	}
	private bool dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191: return serverVersion >= 50708;
		}
		return true;
	}
	private bool charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 192: return serverVersion < 80011;
		}
		return true;
	}
	private bool collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 193: return serverVersion < 80011;
		case 194: return serverVersion >= 80018;
		}
		return true;
	}
	private bool createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195: return serverVersion >= 80014;
		case 196: return serverVersion >= 50708;
		case 197: return serverVersion >= 50711;
		case 198: return serverVersion >= 50707;
		}
		return true;
	}
	private bool partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199: return serverVersion >= 50700;
		}
		return true;
	}
	private bool createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 200: return serverVersion < 80011;
		case 201: return serverVersion >= 50706;
		case 202: return serverVersion >= 80018;
		}
		return true;
	}
	private bool usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203: return serverVersion >= 50602;
		}
		return true;
	}
	private bool columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204: return serverVersion >= 80000;
		case 205: return serverVersion < 80000;
		}
		return true;
	}
	private bool pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206: return isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207: return serverVersion < 80000;
		}
		return true;
	}
	private bool real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 208: return serverVersion >= 80017;
		}
		return true;
	}
	private bool textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 209: return !isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210: return serverVersion >= 80017;
		}
		return true;
	}
	private bool identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211: return serverVersion < 80017;
		case 212: return serverVersion >= 50709;
		case 213: return serverVersion >= 80011;
		}
		return true;
	}
	private bool labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214: return serverVersion < 80017;
		}
		return true;
	}
	private bool identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 215: return serverVersion >= 80019;
		}
		return true;
	}
	private bool roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 216: return serverVersion < 80017;
		}
		return true;
	}
	private bool roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 217: return serverVersion >= 50709;
		case 218: return serverVersion >= 80000;
		}
		return true;
	}
	private bool roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 219: return serverVersion < 50709;
		case 220: return serverVersion < 80000;
		case 221: return serverVersion >= 80000;
		case 222: return serverVersion >= 80014;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x328', '\x20E3', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x4', '\x1E7', '\t', '\x1E7', '\x4', '\x1E8', 
		'\t', '\x1E8', '\x4', '\x1E9', '\t', '\x1E9', '\x4', '\x1EA', '\t', '\x1EA', 
		'\x4', '\x1EB', '\t', '\x1EB', '\x4', '\x1EC', '\t', '\x1EC', '\x4', '\x1ED', 
		'\t', '\x1ED', '\x4', '\x1EE', '\t', '\x1EE', '\x4', '\x1EF', '\t', '\x1EF', 
		'\x4', '\x1F0', '\t', '\x1F0', '\x4', '\x1F1', '\t', '\x1F1', '\x4', '\x1F2', 
		'\t', '\x1F2', '\x4', '\x1F3', '\t', '\x1F3', '\x4', '\x1F4', '\t', '\x1F4', 
		'\x4', '\x1F5', '\t', '\x1F5', '\x4', '\x1F6', '\t', '\x1F6', '\x4', '\x1F7', 
		'\t', '\x1F7', '\x4', '\x1F8', '\t', '\x1F8', '\x4', '\x1F9', '\t', '\x1F9', 
		'\x4', '\x1FA', '\t', '\x1FA', '\x4', '\x1FB', '\t', '\x1FB', '\x4', '\x1FC', 
		'\t', '\x1FC', '\x4', '\x1FD', '\t', '\x1FD', '\x4', '\x1FE', '\t', '\x1FE', 
		'\x4', '\x1FF', '\t', '\x1FF', '\x4', '\x200', '\t', '\x200', '\x4', '\x201', 
		'\t', '\x201', '\x4', '\x202', '\t', '\x202', '\x4', '\x203', '\t', '\x203', 
		'\x4', '\x204', '\t', '\x204', '\x4', '\x205', '\t', '\x205', '\x4', '\x206', 
		'\t', '\x206', '\x4', '\x207', '\t', '\x207', '\x4', '\x208', '\t', '\x208', 
		'\x4', '\x209', '\t', '\x209', '\x4', '\x20A', '\t', '\x20A', '\x4', '\x20B', 
		'\t', '\x20B', '\x4', '\x20C', '\t', '\x20C', '\x4', '\x20D', '\t', '\x20D', 
		'\x4', '\x20E', '\t', '\x20E', '\x4', '\x20F', '\t', '\x20F', '\x4', '\x210', 
		'\t', '\x210', '\x4', '\x211', '\t', '\x211', '\x4', '\x212', '\t', '\x212', 
		'\x4', '\x213', '\t', '\x213', '\x4', '\x214', '\t', '\x214', '\x4', '\x215', 
		'\t', '\x215', '\x4', '\x216', '\t', '\x216', '\x4', '\x217', '\t', '\x217', 
		'\x4', '\x218', '\t', '\x218', '\x4', '\x219', '\t', '\x219', '\x4', '\x21A', 
		'\t', '\x21A', '\x4', '\x21B', '\t', '\x21B', '\x4', '\x21C', '\t', '\x21C', 
		'\x4', '\x21D', '\t', '\x21D', '\x4', '\x21E', '\t', '\x21E', '\x4', '\x21F', 
		'\t', '\x21F', '\x4', '\x220', '\t', '\x220', '\x4', '\x221', '\t', '\x221', 
		'\x4', '\x222', '\t', '\x222', '\x4', '\x223', '\t', '\x223', '\x4', '\x224', 
		'\t', '\x224', '\x4', '\x225', '\t', '\x225', '\x4', '\x226', '\t', '\x226', 
		'\x4', '\x227', '\t', '\x227', '\x4', '\x228', '\t', '\x228', '\x4', '\x229', 
		'\t', '\x229', '\x4', '\x22A', '\t', '\x22A', '\x4', '\x22B', '\t', '\x22B', 
		'\x4', '\x22C', '\t', '\x22C', '\x4', '\x22D', '\t', '\x22D', '\x4', '\x22E', 
		'\t', '\x22E', '\x4', '\x22F', '\t', '\x22F', '\x4', '\x230', '\t', '\x230', 
		'\x4', '\x231', '\t', '\x231', '\x4', '\x232', '\t', '\x232', '\x4', '\x233', 
		'\t', '\x233', '\x4', '\x234', '\t', '\x234', '\x4', '\x235', '\t', '\x235', 
		'\x4', '\x236', '\t', '\x236', '\x4', '\x237', '\t', '\x237', '\x4', '\x238', 
		'\t', '\x238', '\x4', '\x239', '\t', '\x239', '\x4', '\x23A', '\t', '\x23A', 
		'\x4', '\x23B', '\t', '\x23B', '\x4', '\x23C', '\t', '\x23C', '\x4', '\x23D', 
		'\t', '\x23D', '\x4', '\x23E', '\t', '\x23E', '\x4', '\x23F', '\t', '\x23F', 
		'\x4', '\x240', '\t', '\x240', '\x4', '\x241', '\t', '\x241', '\x4', '\x242', 
		'\t', '\x242', '\x4', '\x243', '\t', '\x243', '\x4', '\x244', '\t', '\x244', 
		'\x4', '\x245', '\t', '\x245', '\x4', '\x246', '\t', '\x246', '\x4', '\x247', 
		'\t', '\x247', '\x4', '\x248', '\t', '\x248', '\x4', '\x249', '\t', '\x249', 
		'\x4', '\x24A', '\t', '\x24A', '\x4', '\x24B', '\t', '\x24B', '\x4', '\x24C', 
		'\t', '\x24C', '\x4', '\x24D', '\t', '\x24D', '\x4', '\x24E', '\t', '\x24E', 
		'\x4', '\x24F', '\t', '\x24F', '\x4', '\x250', '\t', '\x250', '\x4', '\x251', 
		'\t', '\x251', '\x4', '\x252', '\t', '\x252', '\x4', '\x253', '\t', '\x253', 
		'\x4', '\x254', '\t', '\x254', '\x4', '\x255', '\t', '\x255', '\x4', '\x256', 
		'\t', '\x256', '\x4', '\x257', '\t', '\x257', '\x4', '\x258', '\t', '\x258', 
		'\x4', '\x259', '\t', '\x259', '\x4', '\x25A', '\t', '\x25A', '\x4', '\x25B', 
		'\t', '\x25B', '\x4', '\x25C', '\t', '\x25C', '\x4', '\x25D', '\t', '\x25D', 
		'\x4', '\x25E', '\t', '\x25E', '\x4', '\x25F', '\t', '\x25F', '\x4', '\x260', 
		'\t', '\x260', '\x4', '\x261', '\t', '\x261', '\x4', '\x262', '\t', '\x262', 
		'\x4', '\x263', '\t', '\x263', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x4CA', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x4CE', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x4D1', '\n', 
		'\x2', '\x5', '\x2', '\x4D3', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x4F7', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x4FF', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x504', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x514', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\x519', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '\x51A', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x522', '\n', 
		'\x5', '\x3', '\x6', '\x5', '\x6', '\x525', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x52C', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x531', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x534', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x539', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x53F', '\n', '\x6', '\x5', '\x6', '\x541', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x545', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x549', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x552', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x556', '\n', '\b', '\x3', '\b', '\a', '\b', '\x559', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x55C', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x561', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', '\x568', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x56C', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x571', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x576', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x57D', '\n', 
		'\f', '\x3', '\f', '\x5', '\f', '\x580', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x586', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\x589', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x58E', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x591', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x59A', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x59F', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5A4', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5AC', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5B2', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5B6', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5BB', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x5C2', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x5C5', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x5CA', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\x5CE', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x5D1', '\v', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5D6', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5DF', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x5E5', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x5EE', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x5FC', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x600', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x606', '\n', '\x11', '\a', '\x11', '\x608', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x60B', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x610', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x614', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x619', '\n', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x61C', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x622', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x628', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x62E', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x632', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x637', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x63B', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x63F', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x647', '\n', '\x13', '\x5', '\x13', 
		'\x649', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x656', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x65E', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x666', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x66A', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x687', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x697', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x69A', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x6A3', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x6A8', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x6AE', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x6B3', '\n', '\x16', '\a', '\x16', '\x6B5', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x6B8', '\v', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x6BC', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x6C0', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x6C4', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x6C8', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x6CC', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x6D0', 
		'\n', '\x19', '\x5', '\x19', '\x6D2', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x6DD', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x6E5', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x6EE', '\n', '\x1D', '\x3', '\x1D', '\a', '\x1D', 
		'\x6F1', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x6F4', '\v', '\x1D', 
		'\x5', '\x1D', '\x6F6', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x6FB', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x702', '\n', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x70A', '\n', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x70E', '\n', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x711', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x714', '\v', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x71A', 
		'\n', '!', '\x3', '!', '\a', '!', '\x71D', '\n', '!', '\f', '!', '\xE', 
		'!', '\x720', '\v', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x724', 
		'\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x72C', '\n', '\"', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x730', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x735', '\n', '#', '\x3', '$', '\x5', '$', '\x738', '\n', 
		'$', '\x3', '$', '\x5', '$', '\x73B', '\n', '$', '\x3', '$', '\x5', '$', 
		'\x73E', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x5', '%', '\x745', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x5', '&', '\x74C', '\n', '&', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x750', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x5', '(', '\x768', '\n', '(', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x76C', '\n', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x770', 
		'\n', ')', '\f', ')', '\xE', ')', '\x773', '\v', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x779', '\n', '*', '\x3', '+', 
		'\x5', '+', '\x77C', '\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x780', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x5', '+', '\x787', '\n', '+', '\x3', '+', '\x5', '+', '\x78A', '\n', 
		'+', '\x3', '+', '\x5', '+', '\x78D', '\n', '+', '\x3', '+', '\x5', '+', 
		'\x790', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x799', '\n', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\a', ',', '\x79E', '\n', ',', '\f', ',', '\xE', 
		',', '\x7A1', '\v', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x7A5', 
		'\n', '-', '\x3', '.', '\x5', '.', '\x7A8', '\n', '.', '\x3', '.', '\x5', 
		'.', '\x7AB', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x7B1', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x7B7', '\n', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x7BA', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x5', '\x31', '\x7BF', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x7C7', 
		'\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x7CA', '\v', '\x31', '\x5', 
		'\x31', '\x7CC', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', 
		'\x7D0', '\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x7D3', '\v', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x5', '\x32', '\x7D8', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\a', '\x32', '\x7E0', '\n', '\x32', '\f', '\x32', 
		'\xE', '\x32', '\x7E3', '\v', '\x32', '\x5', '\x32', '\x7E5', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', 
		'\x7EB', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x7EE', '\v', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x5', '\x33', '\x7F3', '\n', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x7FE', '\n', '\x34', '\x3', '\x34', '\x5', '\x34', '\x801', 
		'\n', '\x34', '\x3', '\x35', '\x6', '\x35', '\x804', '\n', '\x35', '\r', 
		'\x35', '\xE', '\x35', '\x805', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x819', '\n', '\x36', '\x3', '\x37', '\x5', '\x37', '\x81C', '\n', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x81F', '\n', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x825', '\n', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x828', '\n', '\x37', '\x5', '\x37', '\x82A', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x82E', '\n', 
		'\x37', '\f', '\x37', '\xE', '\x37', '\x831', '\v', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', 
		'\x838', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x83B', '\v', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\a', '\x37', '\x842', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x845', 
		'\v', '\x37', '\x5', '\x37', '\x847', '\n', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x84A', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x84F', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x855', '\n', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x862', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x5', ';', '\x866', '\n', ';', '\x3', 
		';', '\a', ';', '\x869', '\n', ';', '\f', ';', '\xE', ';', '\x86C', '\v', 
		';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x5', '<', '\x874', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x883', '\n', 
		'>', '\f', '>', '\xE', '>', '\x886', '\v', '>', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x5', '?', '\x898', '\n', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', 
		'@', '\x8A1', '\n', '@', '\x3', '@', '\x5', '@', '\x8A4', '\n', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x8AC', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x8B1', '\n', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x5', '\x42', '\x8B5', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8BC', '\n', 
		'\x44', '\x3', '\x44', '\a', '\x44', '\x8BF', '\n', '\x44', '\f', '\x44', 
		'\xE', '\x44', '\x8C2', '\v', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x8D0', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', 
		'\x8D4', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x8DA', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', 
		'\x3', 'H', '\x5', 'H', '\x8E0', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'I', '\x3', 'I', '\x5', 'I', '\x8E6', '\n', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x8EC', '\n', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x8F2', '\n', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'L', '\x5', 'L', '\x8F7', '\n', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x8FB', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', 
		'\x3', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x903', '\n', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x909', '\n', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x90F', '\n', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x5', 'Q', '\x914', '\n', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x917', '\n', 'Q', '\x3', 'Q', '\x5', 'Q', '\x91A', 
		'\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x5', 'R', '\x923', '\n', 'R', '\x3', 'R', '\x5', 
		'R', '\x926', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x5', 'U', 
		'\x931', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x93D', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'W', '\x5', 'W', '\x946', '\n', 'W', '\x3', 
		'W', '\x3', 'W', '\x5', 'W', '\x94A', '\n', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', 
		'\x953', '\n', 'W', '\x3', 'W', '\x5', 'W', '\x956', '\n', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x95C', '\n', 'W', 
		'\x5', 'W', '\x95E', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x962', 
		'\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', 
		'\x5', 'X', '\x969', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 
		'Y', '\x974', '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\x977', '\v', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x97D', '\n', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x981', '\n', 'Y', '\f', 'Y', '\xE', 
		'Y', '\x984', '\v', 'Y', '\x5', 'Y', '\x986', '\n', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x997', '\n', 'Z', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x9AB', '\n', 
		'[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x9AF', '\n', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x9B5', '\n', 
		']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x9BB', 
		'\n', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x5', '_', 
		'\x9C1', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x5', '`', '\x9C6', 
		'\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x5', '`', '\x9CD', '\n', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x9D4', '\n', '\x61', '\x3', 
		'\x61', '\a', '\x61', '\x9D7', '\n', '\x61', '\f', '\x61', '\xE', '\x61', 
		'\x9DA', '\v', '\x61', '\x5', '\x61', '\x9DC', '\n', '\x61', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x9E0', '\n', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x5', '\x63', '\x9E4', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x64', '\x5', '\x64', '\x9E9', '\n', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x5', '\x64', '\x9ED', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x5', '\x64', '\x9F1', '\n', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x5', '\x65', '\x9F7', '\n', '\x65', '\x3', '\x65', 
		'\a', '\x65', '\x9FA', '\n', '\x65', '\f', '\x65', '\xE', '\x65', '\x9FD', 
		'\v', '\x65', '\x5', '\x65', '\x9FF', '\n', '\x65', '\x3', '\x66', '\x3', 
		'\x66', '\x5', '\x66', '\xA03', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', 'g', '\x3', 'g', '\x5', 'g', '\xA09', '\n', 'g', '\x3', 'g', '\x3', 
		'g', '\x5', 'g', '\xA0D', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x5', 'h', 
		'\xA11', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x5', 'i', '\xA19', '\n', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xA21', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 
		'k', '\xA28', '\n', 'k', '\f', 'k', '\xE', 'k', '\xA2B', '\v', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x5', 
		'm', '\xA33', '\n', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x5', 'o', '\xA40', '\n', 'o', '\x3', 'o', '\x5', 'o', '\xA43', 
		'\n', 'o', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\xA47', '\n', 'p', '\x3', 
		'p', '\x3', 'p', '\a', 'p', '\xA4B', '\n', 'p', '\f', 'p', '\xE', 'p', 
		'\xA4E', '\v', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x5', 'p', '\xA55', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x5', 'p', '\xA5A', '\n', 'p', '\x3', 'p', '\x5', 'p', '\xA5D', '\n', 
		'p', '\x3', 'p', '\x5', 'p', '\xA60', '\n', 'p', '\x3', 'p', '\x5', 'p', 
		'\xA63', '\n', 'p', '\x3', 'p', '\x5', 'p', '\xA66', '\n', 'p', '\x5', 
		'p', '\xA68', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x5', 'p', '\xA6E', '\n', 'p', '\x5', 'p', '\xA70', '\n', 'p', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'r', '\x3', 'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 
		's', '\x5', 's', '\xA7F', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x3', 't', '\x5', 't', '\xA85', '\n', 't', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x5', 't', '\xA8C', '\n', 't', '\x3', 't', 
		'\x5', 't', '\xA8F', '\n', 't', '\x5', 't', '\xA91', '\n', 't', '\x5', 
		't', '\xA93', '\n', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xA9D', '\n', 
		'u', '\x5', 'u', '\xA9F', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x5', 'v', 
		'\xAA3', '\n', 'v', '\x3', 'v', '\x5', 'v', '\xAA6', '\n', 'v', '\x3', 
		'v', '\x5', 'v', '\xAA9', '\n', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', 
		'\xAAD', '\n', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\xAB2', 
		'\n', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', 
		'\xAB8', '\n', 'v', '\x3', 'v', '\x5', 'v', '\xABB', '\n', 'v', '\x3', 
		'v', '\x5', 'v', '\xABE', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'x', 
		'\x3', 'x', '\x5', 'x', '\xAC4', '\n', 'x', '\x3', 'x', '\x5', 'x', '\xAC7', 
		'\n', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', 
		'\a', 'y', '\xACE', '\n', 'y', '\f', 'y', '\xE', 'y', '\xAD1', '\v', 'y', 
		'\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x5', '{', '\xAD9', '\n', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\xADD', 
		'\n', '{', '\x3', '|', '\x3', '|', '\x5', '|', '\xAE1', '\n', '|', '\x3', 
		'|', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\xAE7', '\n', '|', 
		'\x3', '|', '\a', '|', '\xAEA', '\n', '|', '\f', '|', '\xE', '|', '\xAED', 
		'\v', '|', '\x3', '}', '\x3', '}', '\x5', '}', '\xAF1', '\n', '}', '\x3', 
		'}', '\x3', '}', '\x3', '}', '\x5', '}', '\xAF6', '\n', '}', '\a', '}', 
		'\xAF8', '\n', '}', '\f', '}', '\xE', '}', '\xAFB', '\v', '}', '\x3', 
		'~', '\x3', '~', '\x3', '~', '\x5', '~', '\xB00', '\n', '~', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB0B', '\n', 
		'\x80', '\x3', '\x80', '\x5', '\x80', '\xB0E', '\n', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB13', '\n', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB19', 
		'\n', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB1C', '\n', '\x80', '\x3', 
		'\x80', '\x5', '\x80', '\xB1F', '\n', '\x80', '\x3', '\x80', '\x5', '\x80', 
		'\xB22', '\n', '\x80', '\x3', '\x80', '\x5', '\x80', '\xB25', '\n', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x82', 
		'\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x83', '\x5', '\x83', '\xB33', '\n', '\x83', '\x3', 
		'\x83', '\x5', '\x83', '\xB36', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x5', '\x83', '\xB3A', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x5', 
		'\x84', '\xB3E', '\n', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', 
		'\x3', '\x85', '\x5', '\x85', '\xB44', '\n', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x5', '\x85', '\xB49', '\n', '\x85', '\a', '\x85', 
		'\xB4B', '\n', '\x85', '\f', '\x85', '\xE', '\x85', '\xB4E', '\v', '\x85', 
		'\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xB52', '\n', '\x86', '\x3', 
		'\x86', '\x5', '\x86', '\xB55', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x5', '\x86', '\xB59', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x5', '\x86', '\xB5F', '\n', '\x86', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\xB63', '\n', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x5', '\x87', '\xB67', '\n', '\x87', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x5', '\x88', '\xB70', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x5', '\x88', '\xB75', '\n', '\x88', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\xB79', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', 
		'\x89', '\xB7D', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB80', 
		'\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB84', '\n', 
		'\x89', '\x3', '\x89', '\x5', '\x89', '\xB87', '\n', '\x89', '\x5', '\x89', 
		'\xB89', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB8D', 
		'\n', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x5', '\x8A', '\xB93', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', 
		'\x8A', '\xB97', '\n', '\x8A', '\x5', '\x8A', '\xB99', '\n', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xB9D', '\n', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x5', '\x8A', '\xBA1', '\n', '\x8A', '\a', '\x8A', '\xBA3', 
		'\n', '\x8A', '\f', '\x8A', '\xE', '\x8A', '\xBA6', '\v', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xBAC', 
		'\n', '\x8B', '\x5', '\x8B', '\xBAE', '\n', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x5', '\x8C', '\xBB7', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', 
		'\a', '\x8D', '\xBBB', '\n', '\x8D', '\f', '\x8D', '\xE', '\x8D', '\xBBE', 
		'\v', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBC2', '\n', 
		'\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBC5', '\n', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\xBC8', '\n', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBCB', 
		'\n', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBCE', '\n', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBD2', '\n', '\x8D', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\xBE1', '\n', '\x92', '\x3', 
		'\x93', '\x3', '\x93', '\x5', '\x93', '\xBE5', '\n', '\x93', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xBEB', '\n', 
		'\x94', '\x3', '\x94', '\x5', '\x94', '\xBEE', '\n', '\x94', '\x3', '\x94', 
		'\x5', '\x94', '\xBF1', '\n', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x5', '\x94', '\xBF7', '\n', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xBFC', '\n', '\x94', '\a', 
		'\x94', '\xBFE', '\n', '\x94', '\f', '\x94', '\xE', '\x94', '\xC01', '\v', 
		'\x94', '\x5', '\x94', '\xC03', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', 
		'\xC0B', '\n', '\x95', '\x5', '\x95', '\xC0D', '\n', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\a', '\x97', '\xC18', '\n', 
		'\x97', '\f', '\x97', '\xE', '\x97', '\xC1B', '\v', '\x97', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', '\x5', '\x9A', '\xC26', '\n', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xC2B', 
		'\n', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xC2E', '\n', '\x9A', '\x3', 
		'\x9A', '\x5', '\x9A', '\xC31', '\n', '\x9A', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x5', '\x9B', '\xC36', '\n', '\x9B', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\xC3C', '\n', '\x9D', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', 
		'\xC4C', '\n', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', 
		'\xA0', '\xC60', '\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', 
		'\xC69', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xC6D', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', 
		'\xC72', '\n', '\xA2', '\f', '\xA2', '\xE', '\xA2', '\xC75', '\v', '\xA2', 
		'\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xC79', '\n', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA4', '\x5', '\xA4', '\xC82', '\n', '\xA4', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x5', '\xA5', 
		'\xC89', '\n', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x5', '\xA8', '\xC94', '\n', '\xA8', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\a', '\xA9', '\xC99', '\n', '\xA9', '\f', '\xA9', '\xE', 
		'\xA9', '\xC9C', '\v', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\a', '\xAA', '\xCA2', '\n', '\xAA', '\f', '\xAA', '\xE', 
		'\xAA', '\xCA5', '\v', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\xCAD', '\n', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x5', '\xAD', '\xCB9', '\n', '\xAD', '\x3', '\xAE', '\x6', '\xAE', 
		'\xCBC', '\n', '\xAE', '\r', '\xAE', '\xE', '\xAE', '\xCBD', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', 
		'\xCC5', '\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xCC9', 
		'\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', 
		'\x5', '\xAF', '\xCCF', '\n', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', 
		'\xB0', '\x5', '\xB0', '\xCD4', '\n', '\xB0', '\x3', '\xB1', '\x3', '\xB1', 
		'\x3', '\xB1', '\x5', '\xB1', '\xCD9', '\n', '\xB1', '\x3', '\xB2', '\x3', 
		'\xB2', '\x5', '\xB2', '\xCDD', '\n', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\a', '\xB2', '\xCE1', '\n', '\xB2', '\f', '\xB2', '\xE', '\xB2', '\xCE4', 
		'\v', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', 
		'\xCE9', '\n', '\xB3', '\x5', '\xB3', '\xCEB', '\n', '\xB3', '\x3', '\xB4', 
		'\x5', '\xB4', '\xCEE', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', 
		'\xB4', '\xCF2', '\n', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x5', '\xB6', '\xCFC', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB6', '\x5', '\xB6', '\xD01', '\n', '\xB6', '\x3', '\xB6', '\a', '\xB6', 
		'\xD04', '\n', '\xB6', '\f', '\xB6', '\xE', '\xB6', '\xD07', '\v', '\xB6', 
		'\x3', '\xB7', '\x3', '\xB7', '\a', '\xB7', '\xD0B', '\n', '\xB7', '\f', 
		'\xB7', '\xE', '\xB7', '\xD0E', '\v', '\xB7', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', 
		'\xD16', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD1E', '\n', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD23', '\n', 
		'\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\xD27', '\n', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', 
		'\xD2D', '\n', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\xD30', '\n', '\xB9', 
		'\x3', '\xBA', '\x5', '\xBA', '\xD33', '\n', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x5', '\xBA', '\xD37', '\n', '\xBA', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\xD3B', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x5', '\xBC', '\xD45', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', 
		'\x5', '\xBD', '\xD49', '\n', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\xD4C', 
		'\n', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\xD4F', '\n', '\xBD', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\xD54', '\n', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', 
		'\xD5A', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xD5E', 
		'\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x5', '\xBF', '\xD64', '\n', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xD67', 
		'\n', '\xBF', '\x5', '\xBF', '\xD69', '\n', '\xBF', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x5', '\xC0', '\xD6E', '\n', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', 
		'\xD7A', '\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC2', '\a', '\xC2', '\xD81', '\n', '\xC2', '\f', '\xC2', 
		'\xE', '\xC2', '\xD84', '\v', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\xD90', '\n', '\xC3', 
		'\x3', '\xC3', '\x5', '\xC3', '\xD93', '\n', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC3', '\x5', '\xC3', '\xD98', '\n', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', 
		'\xD9F', '\n', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\xDA3', 
		'\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\xDA7', '\n', 
		'\xC4', '\x5', '\xC4', '\xDA9', '\n', '\xC4', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x5', '\xC7', '\xDB7', '\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\xDBE', '\n', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\a', '\xCA', '\xDC5', '\n', '\xCA', '\f', '\xCA', '\xE', '\xCA', '\xDC8', 
		'\v', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', 
		'\xDCD', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\xDD6', 
		'\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\xDDA', '\n', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\xDDE', '\n', '\xCB', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCE', 
		'\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xDE8', '\n', 
		'\xCE', '\x5', '\xCE', '\xDEA', '\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', 
		'\xDF2', '\n', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\a', 
		'\xD0', '\xDF7', '\n', '\xD0', '\f', '\xD0', '\xE', '\xD0', '\xDFA', '\v', 
		'\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\xDFE', '\n', '\xD1', 
		'\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xE02', '\n', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xE06', '\n', '\xD2', '\x3', '\xD2', 
		'\x5', '\xD2', '\xE09', '\n', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xE0F', '\n', '\xD2', '\x3', '\xD2', 
		'\x5', '\xD2', '\xE12', '\n', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xE15', 
		'\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\x5', '\xD3', '\xE1B', '\n', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', 
		'\xD4', '\a', '\xD4', '\xE20', '\n', '\xD4', '\f', '\xD4', '\xE', '\xD4', 
		'\xE23', '\v', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE27', 
		'\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE2B', '\n', 
		'\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE2E', '\n', '\xD4', '\x3', '\xD4', 
		'\x5', '\xD4', '\xE31', '\n', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE34', 
		'\n', '\xD4', '\x5', '\xD4', '\xE36', '\n', '\xD4', '\x3', '\xD5', '\x3', 
		'\xD5', '\x5', '\xD5', '\xE3A', '\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x5', '\xD6', 
		'\xE42', '\n', '\xD6', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', 
		'\xD7', '\x5', '\xD7', '\xE48', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x5', '\xD7', '\xE4C', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', 
		'\xD7', '\x5', '\xD7', '\xE51', '\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', 
		'\xE54', '\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xE57', '\n', '\xD7', 
		'\x3', '\xD7', '\x5', '\xD7', '\xE5A', '\n', '\xD7', '\x5', '\xD7', '\xE5C', 
		'\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', 
		'\xE61', '\n', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\a', '\xD8', '\xE68', '\n', '\xD8', '\f', '\xD8', 
		'\xE', '\xD8', '\xE6B', '\v', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xE77', '\n', '\xD8', 
		'\x5', '\xD8', '\xE79', '\n', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x5', 
		'\xD9', '\xE7D', '\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xDA', 
		'\x3', '\xDA', '\x5', '\xDA', '\xE83', '\n', '\xDA', '\x3', '\xDA', '\x5', 
		'\xDA', '\xE86', '\n', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xE89', 
		'\n', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x5', '\xDB', '\xE8F', '\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xE96', '\n', '\xDB', 
		'\x5', '\xDB', '\xE98', '\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xEA0', 
		'\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x5', '\xDB', '\xEA6', '\n', '\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x5', '\xDC', '\xEAB', '\n', '\xDC', '\x3', '\xDC', '\x5', '\xDC', 
		'\xEAE', '\n', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\xEB5', '\n', '\xDD', '\x5', '\xDD', 
		'\xEB7', '\n', '\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', 
		'\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\xEC0', 
		'\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\a', '\xDE', '\xEC7', '\n', '\xDE', '\f', '\xDE', '\xE', 
		'\xDE', '\xECA', '\v', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\xED2', '\n', 
		'\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', 
		'\xDE', '\x3', '\xDE', '\x5', '\xDE', '\xEDA', '\n', '\xDE', '\x3', '\xDF', 
		'\x3', '\xDF', '\x5', '\xDF', '\xEDE', '\n', '\xDF', '\x3', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\xEE5', 
		'\n', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\xEE8', '\n', '\xDF', '\x5', 
		'\xDF', '\xEEA', '\n', '\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\xEF2', '\n', 
		'\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x5', 
		'\xE1', '\xEF8', '\n', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\xF02', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\a', '\xE3', '\xF07', '\n', '\xE3', '\f', '\xE3', '\xE', '\xE3', 
		'\xF0A', '\v', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\xF67', '\n', '\xE4', 
		'\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF6B', '\n', '\xE5', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xF71', 
		'\n', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', 
		'\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', 
		'\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\xF7F', '\n', 
		'\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\a', 
		'\xE9', '\xF85', '\n', '\xE9', '\f', '\xE9', '\xE', '\xE9', '\xF88', '\v', 
		'\xE9', '\x5', '\xE9', '\xF8A', '\n', '\xE9', '\x3', '\xE9', '\x3', '\xE9', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\a', '\xEA', '\xF94', '\n', '\xEA', '\f', '\xEA', '\xE', 
		'\xEA', '\xF97', '\v', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', '\xEA', 
		'\xF9B', '\n', '\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x5', '\xEB', '\xFA1', '\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFA8', '\n', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x5', '\xEB', '\xFAF', '\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFB6', '\n', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x5', '\xEB', '\xFBD', '\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xFC4', '\n', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x5', '\xEB', '\xFCB', '\n', '\xEB', '\x3', '\xEB', '\x5', '\xEB', 
		'\xFCE', '\n', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\a', 
		'\xEC', '\xFD3', '\n', '\xEC', '\f', '\xEC', '\xE', '\xEC', '\xFD6', '\v', 
		'\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\a', '\xED', '\xFDB', 
		'\n', '\xED', '\f', '\xED', '\xE', '\xED', '\xFDE', '\v', '\xED', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\a', '\xEE', '\xFE3', '\n', '\xEE', 
		'\f', '\xEE', '\xE', '\xEE', '\xFE6', '\v', '\xEE', '\x3', '\xEF', '\x3', 
		'\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\a', '\xF0', '\xFED', 
		'\n', '\xF0', '\f', '\xF0', '\xE', '\xF0', '\xFF0', '\v', '\xF0', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\xFF5', '\n', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\xFF9', '\n', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x5', '\xF1', '\xFFD', '\n', '\xF1', '\x3', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\x1002', '\n', '\xF1', '\x3', 
		'\xF1', '\x5', '\xF1', '\x1005', '\n', '\xF1', '\x5', '\xF1', '\x1007', 
		'\n', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1010', 
		'\n', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\a', '\xF2', '\x1014', '\n', 
		'\xF2', '\f', '\xF2', '\xE', '\xF2', '\x1017', '\v', '\xF2', '\x3', '\xF3', 
		'\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x101D', 
		'\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', 
		'\x1022', '\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', 
		'\xF3', '\x1027', '\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', 
		'\x5', '\xF3', '\x102C', '\n', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x102F', 
		'\n', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\a', '\xF4', 
		'\x1034', '\n', '\xF4', '\f', '\xF4', '\xE', '\xF4', '\x1037', '\v', '\xF4', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', 
		'\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x5', '\xF7', '\x1043', '\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x1049', '\n', '\xF7', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x5', '\xF8', '\x104F', 
		'\n', '\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\a', '\xF9', 
		'\x1054', '\n', '\xF9', '\f', '\xF9', '\xE', '\xF9', '\x1057', '\v', '\xF9', 
		'\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x5', '\xFA', '\x105E', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x1064', '\n', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', 
		'\x1070', '\n', '\xFA', '\x5', '\xFA', '\x1072', '\n', '\xFA', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1078', 
		'\n', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x107C', '\n', 
		'\xFB', '\x5', '\xFB', '\x107E', '\n', '\xFB', '\x3', '\xFC', '\x3', '\xFC', 
		'\x5', '\xFC', '\x1082', '\n', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x108F', 
		'\n', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', 
		'\x5', '\xFE', '\x1095', '\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x109D', 
		'\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x5', '\xFF', '\x10A8', '\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', 
		'\xFF', '\x10AC', '\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x10B9', 
		'\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x5', '\xFF', '\x10C0', '\n', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x10C6', '\n', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x5', '\xFF', '\x10CD', '\n', '\xFF', '\x5', '\xFF', '\x10CF', '\n', 
		'\xFF', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', 
		'\x101', '\x10D9', '\n', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', 
		'\x10E1', '\n', '\x102', '\x3', '\x102', '\x5', '\x102', '\x10E4', '\n', 
		'\x102', '\x3', '\x102', '\a', '\x102', '\x10E7', '\n', '\x102', '\f', 
		'\x102', '\xE', '\x102', '\x10EA', '\v', '\x102', '\x3', '\x102', '\x5', 
		'\x102', '\x10ED', '\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x5', '\x103', '\x10F3', '\n', '\x103', '\x3', 
		'\x103', '\x5', '\x103', '\x10F6', '\n', '\x103', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x5', '\x104', '\x10FB', '\n', '\x104', '\x3', 
		'\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', 
		'\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x6', 
		'\x105', '\x1106', '\n', '\x105', '\r', '\x105', '\xE', '\x105', '\x1107', 
		'\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', 
		'\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x5', '\x106', '\x1114', '\n', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x106', '\x5', '\x106', '\x1119', '\n', '\x106', 
		'\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', 
		'\x106', '\x3', '\x106', '\x5', '\x106', '\x1121', '\n', '\x106', '\x3', 
		'\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x5', '\x106', 
		'\x1127', '\n', '\x106', '\x5', '\x106', '\x1129', '\n', '\x106', '\x5', 
		'\x106', '\x112B', '\n', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', 
		'\x107', '\x3', '\x107', '\x5', '\x107', '\x1131', '\n', '\x107', '\x3', 
		'\x107', '\x3', '\x107', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x5', '\x108', '\x113D', '\n', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x5', '\x108', '\x1142', '\n', '\x108', '\x5', 
		'\x108', '\x1144', '\n', '\x108', '\x3', '\x108', '\x3', '\x108', '\x5', 
		'\x108', '\x1148', '\n', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x5', '\x108', '\x114E', '\n', '\x108', '\x3', 
		'\x108', '\x5', '\x108', '\x1151', '\n', '\x108', '\x3', '\x108', '\x5', 
		'\x108', '\x1154', '\n', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x108', '\x5', '\x108', '\x115E', '\n', '\x108', '\x5', '\x108', 
		'\x1160', '\n', '\x108', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x5', '\x109', '\x1166', '\n', '\x109', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x6', '\x10A', '\x116B', '\n', '\x10A', 
		'\r', '\x10A', '\xE', '\x10A', '\x116C', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x5', '\x10A', '\x1173', '\n', '\x10A', 
		'\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10C', '\x3', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', 
		'\x117D', '\n', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', 
		'\x1181', '\n', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x5', '\x10D', '\x1186', '\n', '\x10D', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\a', '\x10F', '\x1195', '\n', '\x10F', 
		'\f', '\x10F', '\xE', '\x10F', '\x1198', '\v', '\x10F', '\x3', '\x110', 
		'\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', 
		'\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', 
		'\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x5', '\x110', '\x11A7', 
		'\n', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x5', 
		'\x110', '\x11AC', '\n', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', 
		'\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x5', '\x110', 
		'\x11B4', '\n', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', 
		'\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x5', '\x110', '\x11BC', 
		'\n', '\x110', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', 
		'\x111', '\x11C1', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3', 
		'\x111', '\x3', '\x111', '\x5', '\x111', '\x11C7', '\n', '\x111', '\x3', 
		'\x111', '\x5', '\x111', '\x11CA', '\n', '\x111', '\x5', '\x111', '\x11CC', 
		'\n', '\x111', '\x3', '\x112', '\x3', '\x112', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\a', '\x113', '\x11D3', '\n', '\x113', '\f', 
		'\x113', '\xE', '\x113', '\x11D6', '\v', '\x113', '\x3', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\x5', '\x114', '\x11DB', '\n', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x5', '\x114', 
		'\x11E1', '\n', '\x114', '\x5', '\x114', '\x11E3', '\n', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\x5', '\x114', '\x11E7', '\n', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x5', 
		'\x114', '\x11F2', '\n', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x5', '\x114', '\x11FC', '\n', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x5', '\x114', '\x1201', '\n', '\x114', 
		'\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', '\x1206', 
		'\n', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x5', 
		'\x115', '\x120B', '\n', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', 
		'\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', 
		'\x1213', '\n', '\x115', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x1217', '\n', '\x116', '\x3', '\x116', '\a', '\x116', '\x121A', '\n', 
		'\x116', '\f', '\x116', '\xE', '\x116', '\x121D', '\v', '\x116', '\x3', 
		'\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x5', '\x117', '\x1225', '\n', '\x117', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x5', '\x118', '\x1231', '\n', '\x118', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x5', '\x119', '\x123F', '\n', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x5', '\x119', '\x1248', '\n', '\x119', '\x5', 
		'\x119', '\x124A', '\n', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\a', '\x11A', '\x124F', '\n', '\x11A', '\f', '\x11A', '\xE', 
		'\x11A', '\x1252', '\v', '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x5', '\x11B', '\x1258', '\n', '\x11B', '\x3', 
		'\x11C', '\x3', '\x11C', '\x5', '\x11C', '\x125C', '\n', '\x11C', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x5', '\x11C', 
		'\x1262', '\n', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\a', '\x11C', '\x1268', '\n', '\x11C', '\f', '\x11C', 
		'\xE', '\x11C', '\x126B', '\v', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x5', '\x11C', '\x1271', '\n', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x5', '\x11C', '\x1275', '\n', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x5', 
		'\x11C', '\x127B', '\n', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\a', '\x11C', '\x1280', '\n', '\x11C', '\f', '\x11C', '\xE', 
		'\x11C', '\x1283', '\v', '\x11C', '\x5', '\x11C', '\x1285', '\n', '\x11C', 
		'\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x128E', '\n', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', 
		'\x5', '\x11D', '\x1294', '\n', '\x11D', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x5', '\x11E', '\x1299', '\n', '\x11E', '\x3', '\x11F', 
		'\x3', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\a', '\x120', '\x12AE', '\n', '\x120', '\f', '\x120', '\xE', '\x120', 
		'\x12B1', '\v', '\x120', '\x5', '\x120', '\x12B3', '\n', '\x120', '\x3', 
		'\x121', '\x3', '\x121', '\x3', '\x121', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x5', '\x122', '\x12C3', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x12C8', '\n', '\x122', '\x3', '\x122', 
		'\x5', '\x122', '\x12CB', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x5', '\x122', '\x12CF', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x12D2', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x5', '\x122', '\x12E0', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x12E6', '\n', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x12EB', 
		'\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x12EE', '\n', '\x122', 
		'\x5', '\x122', '\x12F0', '\n', '\x122', '\x3', '\x123', '\x3', '\x123', 
		'\x5', '\x123', '\x12F4', '\n', '\x123', '\x3', '\x123', '\x3', '\x123', 
		'\x3', '\x123', '\x5', '\x123', '\x12F9', '\n', '\x123', '\x5', '\x123', 
		'\x12FB', '\n', '\x123', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', 
		'\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', 
		'\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x1307', '\n', 
		'\x125', '\x3', '\x126', '\x3', '\x126', '\a', '\x126', '\x130B', '\n', 
		'\x126', '\f', '\x126', '\xE', '\x126', '\x130E', '\v', '\x126', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x5', '\x127', '\x1323', '\n', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x5', '\x127', '\x1327', '\n', '\x127', '\x5', '\x127', '\x1329', 
		'\n', '\x127', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x1331', '\n', 
		'\x128', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x1335', '\n', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x133E', 
		'\n', '\x12A', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', 
		'\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', 
		'\x5', '\x12C', '\x1348', '\n', '\x12C', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x134F', 
		'\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1352', '\n', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1356', '\n', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x1359', '\n', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x135C', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x1360', '\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x1363', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x1367', '\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x136A', '\n', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x136F', '\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1372', '\n', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x1377', '\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x137A', '\n', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x1380', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x1384', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x138A', '\n', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x138D', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1396', '\n', '\x12D', '\x5', 
		'\x12D', '\x1398', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x139E', '\n', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x13A2', '\n', '\x12D', '\x3', 
		'\x12D', '\x5', '\x12D', '\x13A5', '\n', '\x12D', '\x3', '\x12D', '\x5', 
		'\x12D', '\x13A8', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', 
		'\x12D', '\x13AC', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x13B2', '\n', '\x12D', '\x3', 
		'\x12D', '\x5', '\x12D', '\x13B5', '\n', '\x12D', '\x3', '\x12D', '\x5', 
		'\x12D', '\x13B8', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x13C2', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x13C6', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\a', 
		'\x12D', '\x13CD', '\n', '\x12D', '\f', '\x12D', '\xE', '\x12D', '\x13D0', 
		'\v', '\x12D', '\x5', '\x12D', '\x13D2', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x13D7', '\n', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x13DA', '\n', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x13DD', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x13E1', '\n', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x13E4', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x13E9', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x13ED', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', 
		'\x12D', '\x13F5', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', 
		'\x12D', '\x1402', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x1414', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x5', '\x12D', '\x1419', '\n', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x141E', '\n', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1426', '\n', '\x12D', '\x3', 
		'\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', 
		'\x142C', '\n', '\x12E', '\x5', '\x12E', '\x142E', '\n', '\x12E', '\x3', 
		'\x12F', '\x3', '\x12F', '\x5', '\x12F', '\x1432', '\n', '\x12F', '\x3', 
		'\x12F', '\x5', '\x12F', '\x1435', '\n', '\x12F', '\x3', '\x130', '\x3', 
		'\x130', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x5', '\x132', '\x1443', '\n', '\x132', '\x3', 
		'\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x144D', 
		'\n', '\x133', '\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x1451', 
		'\n', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', 
		'\x133', '\a', '\x133', '\x1457', '\n', '\x133', '\f', '\x133', '\xE', 
		'\x133', '\x145A', '\v', '\x133', '\x5', '\x133', '\x145C', '\n', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x1460', '\n', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', 
		'\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x5', '\x133', 
		'\x146A', '\n', '\x133', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', 
		'\x146E', '\n', '\x134', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\a', '\x135', '\x1473', '\n', '\x135', '\f', '\x135', '\xE', '\x135', 
		'\x1476', '\v', '\x135', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', 
		'\x147A', '\n', '\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x5', '\x137', '\x1482', 
		'\n', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x5', 
		'\x138', '\x1487', '\n', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', 
		'\x139', '\x3', '\x139', '\x5', '\x139', '\x148D', '\n', '\x139', '\x3', 
		'\x13A', '\x3', '\x13A', '\x3', '\x13A', '\a', '\x13A', '\x1492', '\n', 
		'\x13A', '\f', '\x13A', '\xE', '\x13A', '\x1495', '\v', '\x13A', '\x3', 
		'\x13B', '\x3', '\x13B', '\x5', '\x13B', '\x1499', '\n', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', 
		'\x149F', '\n', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', '\x14A6', '\n', '\x13B', 
		'\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x5', '\x13D', 
		'\x14B0', '\n', '\x13D', '\x5', '\x13D', '\x14B2', '\n', '\x13D', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x5', '\x13E', '\x14BA', '\n', '\x13E', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x14BF', '\n', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x14C3', '\n', '\x13F', 
		'\x3', '\x13F', '\x5', '\x13F', '\x14C6', '\n', '\x13F', '\x3', '\x140', 
		'\x3', '\x140', '\x3', '\x140', '\a', '\x140', '\x14CB', '\n', '\x140', 
		'\f', '\x140', '\xE', '\x140', '\x14CE', '\v', '\x140', '\x3', '\x141', 
		'\x3', '\x141', '\x5', '\x141', '\x14D2', '\n', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x5', '\x141', '\x14D6', '\n', '\x141', '\x3', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x5', '\x143', 
		'\x14E1', '\n', '\x143', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', 
		'\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x5', '\x144', '\x14E9', 
		'\n', '\x144', '\x3', '\x144', '\x3', '\x144', '\x5', '\x144', '\x14ED', 
		'\n', '\x144', '\x3', '\x144', '\x5', '\x144', '\x14F0', '\n', '\x144', 
		'\x3', '\x144', '\x5', '\x144', '\x14F3', '\n', '\x144', '\x3', '\x145', 
		'\x3', '\x145', '\x5', '\x145', '\x14F7', '\n', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x5', '\x145', '\x14FB', '\n', '\x145', '\x3', '\x145', 
		'\a', '\x145', '\x14FE', '\n', '\x145', '\f', '\x145', '\xE', '\x145', 
		'\x1501', '\v', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x5', '\x146', '\x1506', '\n', '\x146', '\x3', '\x147', '\x3', '\x147', 
		'\x5', '\x147', '\x150A', '\n', '\x147', '\x3', '\x147', '\x3', '\x147', 
		'\x3', '\x148', '\x3', '\x148', '\x3', '\x149', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x149', '\x3', '\x149', '\x5', '\x149', '\x1515', '\n', 
		'\x149', '\x3', '\x149', '\x5', '\x149', '\x1518', '\n', '\x149', '\x3', 
		'\x149', '\x5', '\x149', '\x151B', '\n', '\x149', '\x3', '\x149', '\x5', 
		'\x149', '\x151E', '\n', '\x149', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x5', '\x14A', 
		'\x1526', '\n', '\x14A', '\x3', '\x14B', '\x3', '\x14B', '\x5', '\x14B', 
		'\x152A', '\n', '\x14B', '\x3', '\x14B', '\a', '\x14B', '\x152D', '\n', 
		'\x14B', '\f', '\x14B', '\xE', '\x14B', '\x1530', '\v', '\x14B', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x5', '\x14C', '\x1537', '\n', '\x14C', '\x3', '\x14D', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x5', 
		'\x14D', '\x153F', '\n', '\x14D', '\x3', '\x14E', '\x3', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x5', '\x14E', '\x1545', '\n', '\x14E', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x5', '\x14F', '\x1557', '\n', '\x14F', 
		'\x3', '\x14F', '\x3', '\x14F', '\x3', '\x150', '\x3', '\x150', '\x3', 
		'\x150', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x5', '\x150', 
		'\x1561', '\n', '\x150', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', 
		'\x3', '\x150', '\x5', '\x150', '\x1567', '\n', '\x150', '\x3', '\x151', 
		'\x3', '\x151', '\x3', '\x151', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x3', '\x153', '\x3', '\x153', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x5', '\x154', '\x1575', '\n', '\x154', 
		'\x3', '\x154', '\x5', '\x154', '\x1578', '\n', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x5', '\x154', '\x157C', '\n', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\a', '\x154', 
		'\x1587', '\n', '\x154', '\f', '\x154', '\xE', '\x154', '\x158A', '\v', 
		'\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x5', '\x155', '\x1592', '\n', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\a', '\x155', '\x159E', '\n', '\x155', '\f', '\x155', 
		'\xE', '\x155', '\x15A1', '\v', '\x155', '\x3', '\x156', '\x3', '\x156', 
		'\x3', '\x157', '\x3', '\x157', '\x5', '\x157', '\x15A7', '\n', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x5', 
		'\x157', '\x15AD', '\n', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x3', '\x157', '\x5', '\x157', '\x15B3', '\n', '\x157', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x5', '\x158', '\x15BB', '\n', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x5', '\x158', 
		'\x15C6', '\n', '\x158', '\x3', '\x158', '\x3', '\x158', '\x5', '\x158', 
		'\x15CA', '\n', '\x158', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\a', '\x159', '\x15E7', '\n', '\x159', '\f', 
		'\x159', '\xE', '\x159', '\x15EA', '\v', '\x159', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', 
		'\x15F1', '\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', 
		'\x15F5', '\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x1606', 
		'\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x160D', '\n', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x161B', '\n', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x1627', '\n', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', 
		'\x162D', '\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x6', '\x15A', '\x1632', '\n', '\x15A', '\r', '\x15A', '\xE', '\x15A', 
		'\x1633', '\x3', '\x15A', '\x5', '\x15A', '\x1637', '\n', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x5', '\x15A', '\x1659', '\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\a', 
		'\x15A', '\x1661', '\n', '\x15A', '\f', '\x15A', '\xE', '\x15A', '\x1664', 
		'\v', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x5', '\x15C', '\x166F', '\n', '\x15C', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x1674', '\n', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x167A', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x1682', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x1689', '\n', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x168F', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x5', '\x15D', '\x1694', '\n', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x169A', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x169F', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x16A4', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16AA', '\n', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16AF', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x5', '\x15D', '\x16B5', '\n', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x16BD', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x16C5', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x16CD', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16D5', 
		'\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x16DA', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16E0', '\n', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16E5', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16E9', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16ED', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', 
		'\x16F2', '\n', '\x15D', '\x5', '\x15D', '\x16F4', '\n', '\x15D', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x1707', 
		'\n', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x170B', 
		'\n', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x1712', '\n', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x5', '\x15F', '\x171E', '\n', '\x15F', '\x3', '\x15F', '\x5', 
		'\x15F', '\x1721', '\n', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x5', 
		'\x15F', '\x1725', '\n', '\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', 
		'\x160', '\x5', '\x160', '\x172A', '\n', '\x160', '\x3', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\x5', '\x161', '\x172F', '\n', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\x5', '\x161', '\x1733', '\n', '\x161', '\x3', 
		'\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', '\x163', '\x173D', 
		'\n', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', '\x163', 
		'\x1746', '\n', '\x163', '\x5', '\x163', '\x1748', '\n', '\x163', '\x3', 
		'\x164', '\x5', '\x164', '\x174B', '\n', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x5', '\x165', '\x1754', '\n', '\x165', '\x3', '\x166', 
		'\x3', '\x166', '\x3', '\x166', '\a', '\x166', '\x1759', '\n', '\x166', 
		'\f', '\x166', '\xE', '\x166', '\x175C', '\v', '\x166', '\x3', '\x167', 
		'\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x5', '\x167', '\x1768', '\n', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x5', '\x167', '\x176D', '\n', '\x167', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x5', 
		'\x168', '\x1774', '\n', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x5', '\x168', '\x177A', '\n', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x6', '\x168', 
		'\x1792', '\n', '\x168', '\r', '\x168', '\xE', '\x168', '\x1793', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x5', '\x168', '\x17B3', '\n', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x5', 
		'\x168', '\x17C7', '\n', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x5', '\x168', '\x17CD', '\n', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x5', '\x168', '\x17D1', '\n', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x17EC', '\n', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x17F8', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x1805', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x1809', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x180D', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x1829', '\n', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x5', '\x168', '\x1861', '\n', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x186B', '\n', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x186F', '\n', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x187B', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x1880', '\n', '\x168', 
		'\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\x188D', '\n', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', 
		'\x5', '\x169', '\x18A1', '\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', 
		'\x5', '\x16A', '\x18A5', '\n', '\x16A', '\x3', '\x16A', '\x3', '\x16A', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16C', '\x3', 
		'\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', 
		'\x3', '\x16C', '\x3', '\x16C', '\a', '\x16C', '\x18B4', '\n', '\x16C', 
		'\f', '\x16C', '\xE', '\x16C', '\x18B7', '\v', '\x16C', '\x5', '\x16C', 
		'\x18B9', '\n', '\x16C', '\x3', '\x16D', '\x3', '\x16D', '\x3', '\x16D', 
		'\x5', '\x16D', '\x18BE', '\n', '\x16D', '\x3', '\x16D', '\x5', '\x16D', 
		'\x18C1', '\n', '\x16D', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16F', 
		'\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', 
		'\x16F', '\x18CA', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', 
		'\x16F', '\x18CE', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', 
		'\x16F', '\x3', '\x16F', '\x5', '\x16F', '\x18D4', '\n', '\x16F', '\x3', 
		'\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', 
		'\x18DA', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', 
		'\x18DE', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x5', '\x170', '\x18E9', '\n', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x5', '\x170', 
		'\x18EF', '\n', '\x170', '\x5', '\x170', '\x18F1', '\n', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x171', '\x3', '\x171', '\x3', '\x171', 
		'\x5', '\x171', '\x18F8', '\n', '\x171', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\x5', '\x171', '\x18FF', 
		'\n', '\x171', '\x3', '\x171', '\x3', '\x171', '\x5', '\x171', '\x1903', 
		'\n', '\x171', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\a', '\x172', 
		'\x1908', '\n', '\x172', '\f', '\x172', '\xE', '\x172', '\x190B', '\v', 
		'\x172', '\x3', '\x173', '\x3', '\x173', '\x5', '\x173', '\x190F', '\n', 
		'\x173', '\x3', '\x174', '\x3', '\x174', '\x5', '\x174', '\x1913', '\n', 
		'\x174', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x5', '\x175', 
		'\x1918', '\n', '\x175', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', 
		'\x191C', '\n', '\x176', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', 
		'\x1920', '\n', '\x176', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', 
		'\x5', '\x177', '\x1925', '\n', '\x177', '\x3', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x5', '\x177', '\x192A', '\n', '\x177', '\x5', '\x177', 
		'\x192C', '\n', '\x177', '\x3', '\x177', '\x3', '\x177', '\x5', '\x177', 
		'\x1930', '\n', '\x177', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x17A', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', 
		'\x193D', '\n', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', 
		'\x1941', '\n', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x1944', '\n', 
		'\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x1948', '\n', 
		'\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x194C', '\n', 
		'\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x1950', '\n', 
		'\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', 
		'\x1955', '\n', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', 
		'\x1959', '\n', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', 
		'\x195D', '\n', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', 
		'\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', 
		'\x17B', '\x1966', '\n', '\x17B', '\x5', '\x17B', '\x1968', '\n', '\x17B', 
		'\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\a', '\x17C', '\x196D', 
		'\n', '\x17C', '\f', '\x17C', '\xE', '\x17C', '\x1970', '\v', '\x17C', 
		'\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x1975', 
		'\n', '\x17D', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17F', '\x3', 
		'\x17F', '\x3', '\x180', '\x3', '\x180', '\x5', '\x180', '\x197D', '\n', 
		'\x180', '\x3', '\x181', '\x3', '\x181', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x182', '\x3', '\x182', '\x3', '\x183', '\x3', '\x183', '\x3', 
		'\x183', '\x3', '\x183', '\x3', '\x184', '\x3', '\x184', '\x3', '\x184', 
		'\x3', '\x184', '\x3', '\x185', '\x3', '\x185', '\x3', '\x185', '\a', 
		'\x185', '\x1990', '\n', '\x185', '\f', '\x185', '\xE', '\x185', '\x1993', 
		'\v', '\x185', '\x3', '\x186', '\x3', '\x186', '\x5', '\x186', '\x1997', 
		'\n', '\x186', '\x3', '\x187', '\x3', '\x187', '\x3', '\x187', '\a', '\x187', 
		'\x199C', '\n', '\x187', '\f', '\x187', '\xE', '\x187', '\x199F', '\v', 
		'\x187', '\x3', '\x188', '\x3', '\x188', '\x3', '\x189', '\x3', '\x189', 
		'\x3', '\x189', '\x3', '\x189', '\x3', '\x189', '\x3', '\x18A', '\x3', 
		'\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', 
		'\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', 
		'\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x5', '\x18A', '\x19B5', '\n', 
		'\x18A', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18C', 
		'\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x3', 
		'\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', 
		'\x3', '\x18D', '\x5', '\x18D', '\x19C5', '\n', '\x18D', '\x3', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18F', '\x3', '\x18F', '\x3', 
		'\x18F', '\x6', '\x18F', '\x19CD', '\n', '\x18F', '\r', '\x18F', '\xE', 
		'\x18F', '\x19CE', '\x3', '\x190', '\x3', '\x190', '\x5', '\x190', '\x19D3', 
		'\n', '\x190', '\x3', '\x190', '\x3', '\x190', '\x3', '\x190', '\x6', 
		'\x190', '\x19D8', '\n', '\x190', '\r', '\x190', '\xE', '\x190', '\x19D9', 
		'\x3', '\x190', '\x5', '\x190', '\x19DD', '\n', '\x190', '\x3', '\x190', 
		'\x3', '\x190', '\x3', '\x190', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x5', '\x192', 
		'\x19E8', '\n', '\x192', '\x3', '\x193', '\x3', '\x193', '\x3', '\x194', 
		'\x3', '\x194', '\x3', '\x194', '\x3', '\x195', '\x3', '\x195', '\x5', 
		'\x195', '\x19F1', '\n', '\x195', '\x3', '\x195', '\x5', '\x195', '\x19F4', 
		'\n', '\x195', '\x3', '\x195', '\x3', '\x195', '\x3', '\x196', '\x3', 
		'\x196', '\x3', '\x196', '\x5', '\x196', '\x19FB', '\n', '\x196', '\x3', 
		'\x197', '\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\x1A00', '\n', 
		'\x197', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', 
		'\x3', '\x198', '\x3', '\x199', '\x3', '\x199', '\x3', '\x199', '\x3', 
		'\x199', '\x3', '\x199', '\x3', '\x199', '\x3', '\x199', '\x3', '\x19A', 
		'\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x6', '\x19B', '\x1A18', '\n', '\x19B', '\r', '\x19B', '\xE', '\x19B', 
		'\x1A19', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x5', '\x19C', '\x1A20', '\n', '\x19C', '\x3', '\x19D', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x1A26', '\n', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x1A2A', '\n', '\x19D', 
		'\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', 
		'\x19E', '\x3', '\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x5', '\x19F', 
		'\x1A34', '\n', '\x19F', '\x3', '\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', 
		'\x1A38', '\n', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A1', 
		'\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', 
		'\x1A1', '\x3', '\x1A1', '\a', '\x1A1', '\x1A43', '\n', '\x1A1', '\f', 
		'\x1A1', '\xE', '\x1A1', '\x1A46', '\v', '\x1A1', '\x3', '\x1A1', '\x3', 
		'\x1A1', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x5', '\x1A2', '\x1A51', 
		'\n', '\x1A2', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', 
		'\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A4', '\x3', '\x1A4', 
		'\x3', '\x1A4', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x5', '\x1A6', 
		'\x1A63', '\n', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x3', '\x1A6', '\a', '\x1A6', '\x1A69', '\n', '\x1A6', '\f', '\x1A6', 
		'\xE', '\x1A6', '\x1A6C', '\v', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\a', '\x1A6', '\x1A73', 
		'\n', '\x1A6', '\f', '\x1A6', '\xE', '\x1A6', '\x1A76', '\v', '\x1A6', 
		'\x5', '\x1A6', '\x1A78', '\n', '\x1A6', '\x3', '\x1A7', '\x3', '\x1A7', 
		'\x3', '\x1A7', '\x5', '\x1A7', '\x1A7D', '\n', '\x1A7', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x5', '\x1A8', '\x1A81', '\n', '\x1A8', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A9', '\x3', '\x1A9', '\x5', 
		'\x1A9', '\x1A88', '\n', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x5', '\x1A9', '\x1A8D', '\n', '\x1A9', '\x3', '\x1AA', '\x3', 
		'\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', 
		'\x1A94', '\n', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\a', '\x1AB', '\x1A9A', '\n', '\x1AB', '\f', '\x1AB', 
		'\xE', '\x1AB', '\x1A9D', '\v', '\x1AB', '\x5', '\x1AB', '\x1A9F', '\n', 
		'\x1AB', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', 
		'\x1AA4', '\n', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\a', '\x1AC', '\x1AAA', '\n', '\x1AC', '\f', '\x1AC', 
		'\xE', '\x1AC', '\x1AAD', '\v', '\x1AC', '\x5', '\x1AC', '\x1AAF', '\n', 
		'\x1AC', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AF', '\x3', 
		'\x1AF', '\x3', '\x1AF', '\x3', '\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', 
		'\x1ABD', '\n', '\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', '\x1AC0', '\n', 
		'\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x5', '\x1B1', '\x1ACD', '\n', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x5', '\x1B1', '\x1AD1', '\n', 
		'\x1B1', '\x5', '\x1B1', '\x1AD3', '\n', '\x1B1', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1AD8', '\n', '\x1B2', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1ADD', '\n', 
		'\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B5', 
		'\x5', '\x1B5', '\x1AE3', '\n', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', 
		'\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', '\x1AE9', '\n', '\x1B6', 
		'\x3', '\x1B6', '\x3', '\x1B6', '\a', '\x1B6', '\x1AED', '\n', '\x1B6', 
		'\f', '\x1B6', '\xE', '\x1B6', '\x1AF0', '\v', '\x1B6', '\x3', '\x1B6', 
		'\x3', '\x1B6', '\x5', '\x1B6', '\x1AF4', '\n', '\x1B6', '\x3', '\x1B6', 
		'\x5', '\x1B6', '\x1AF7', '\n', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', 
		'\a', '\x1B6', '\x1AFB', '\n', '\x1B6', '\f', '\x1B6', '\xE', '\x1B6', 
		'\x1AFE', '\v', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', 
		'\x1B02', '\n', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', '\x1B05', '\n', 
		'\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\a', '\x1B6', '\x1B09', '\n', 
		'\x1B6', '\f', '\x1B6', '\xE', '\x1B6', '\x1B0C', '\v', '\x1B6', '\x3', 
		'\x1B6', '\x5', '\x1B6', '\x1B0F', '\n', '\x1B6', '\x3', '\x1B6', '\x3', 
		'\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', '\x1B15', '\n', 
		'\x1B6', '\x5', '\x1B6', '\x1B17', '\n', '\x1B6', '\x3', '\x1B6', '\x5', 
		'\x1B6', '\x1B1A', '\n', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\a', 
		'\x1B6', '\x1B1E', '\n', '\x1B6', '\f', '\x1B6', '\xE', '\x1B6', '\x1B21', 
		'\v', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x5', 
		'\x1B6', '\x1B26', '\n', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', 
		'\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', 
		'\x1B2E', '\n', '\x1B6', '\x5', '\x1B6', '\x1B30', '\n', '\x1B6', '\x5', 
		'\x1B6', '\x1B32', '\n', '\x1B6', '\x3', '\x1B7', '\x3', '\x1B7', '\x5', 
		'\x1B7', '\x1B36', '\n', '\x1B7', '\x3', '\x1B8', '\x3', '\x1B8', '\a', 
		'\x1B8', '\x1B3A', '\n', '\x1B8', '\f', '\x1B8', '\xE', '\x1B8', '\x1B3D', 
		'\v', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x1B41', 
		'\n', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x1B45', 
		'\n', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', 
		'\x1B8', '\x1B4A', '\n', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\a', 
		'\x1B8', '\x1B4E', '\n', '\x1B8', '\f', '\x1B8', '\xE', '\x1B8', '\x1B51', 
		'\v', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\a', '\x1B8', '\x1B55', 
		'\n', '\x1B8', '\f', '\x1B8', '\xE', '\x1B8', '\x1B58', '\v', '\x1B8', 
		'\x5', '\x1B8', '\x1B5A', '\n', '\x1B8', '\x5', '\x1B8', '\x1B5C', '\n', 
		'\x1B8', '\x3', '\x1B9', '\x5', '\x1B9', '\x1B5F', '\n', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x1B69', 
		'\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x1B6D', 
		'\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x5', '\x1B9', '\x1B73', '\n', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', 
		'\x1B7A', '\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x5', '\x1B9', '\x1B7F', '\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x5', '\x1B9', '\x1B8D', '\n', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x1B92', '\n', '\x1B9', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', 
		'\x1BC', '\x3', '\x1BC', '\x5', '\x1BC', '\x1B9A', '\n', '\x1BC', '\x3', 
		'\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x5', '\x1BC', '\x1B9F', '\n', 
		'\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x5', '\x1BC', '\x1BA3', '\n', 
		'\x1BC', '\x3', '\x1BC', '\x5', '\x1BC', '\x1BA6', '\n', '\x1BC', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x1BAB', '\n', 
		'\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x1BAF', '\n', 
		'\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x1BB7', '\n', '\x1BD', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x1BBF', '\n', '\x1BD', '\x5', 
		'\x1BD', '\x1BC1', '\n', '\x1BD', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x1BC8', '\n', 
		'\x1BE', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', 
		'\a', '\x1BF', '\x1BCE', '\n', '\x1BF', '\f', '\x1BF', '\xE', '\x1BF', 
		'\x1BD1', '\v', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x5', '\x1C0', '\x1BD7', '\n', '\x1C0', '\x3', '\x1C0', 
		'\x5', '\x1C0', '\x1BDA', '\n', '\x1C0', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\a', '\x1C1', '\x1BE0', '\n', '\x1C1', 
		'\f', '\x1C1', '\xE', '\x1C1', '\x1BE3', '\v', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x5', 
		'\x1C2', '\x1BEA', '\n', '\x1C2', '\x5', '\x1C2', '\x1BEC', '\n', '\x1C2', 
		'\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x5', 
		'\x1C3', '\x1BF2', '\n', '\x1C3', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', 
		'\x1C5', '\x3', '\x1C5', '\x5', '\x1C5', '\x1BF8', '\n', '\x1C5', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1BFC', '\n', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x5', '\x1C6', '\x1C03', '\n', '\x1C6', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C9', '\x3', 
		'\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x5', '\x1C9', '\x1C0E', '\n', 
		'\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x3', '\x1CB', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C17', 
		'\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C1A', '\n', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C1F', 
		'\n', '\x1CC', '\x5', '\x1CC', '\x1C21', '\n', '\x1CC', '\x3', '\x1CC', 
		'\x5', '\x1CC', '\x1C24', '\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C27', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C2B', '\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C2E', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C32', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C37', '\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C3A', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C3E', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C41', '\n', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C45', '\n', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C4A', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C4E', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C5A', '\n', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C5E', '\n', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C64', '\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C67', '\n', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C6C', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C70', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', 
		'\x1C74', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x5', '\x1CC', '\x1C79', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x5', '\x1CC', '\x1C82', '\n', '\x1CC', '\x3', '\x1CC', '\x5', 
		'\x1CC', '\x1C85', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', 
		'\x1CC', '\x1C89', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', 
		'\x1CC', '\x1C8D', '\n', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C90', 
		'\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C94', 
		'\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1C98', 
		'\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', 
		'\x1CC', '\x1C9D', '\n', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x5', '\x1CC', '\x1CA2', '\n', '\x1CC', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1CA8', '\n', 
		'\x1CC', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x5', '\x1CD', 
		'\x1CAD', '\n', '\x1CD', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', 
		'\x5', '\x1CE', '\x1CB2', '\n', '\x1CE', '\x5', '\x1CE', '\x1CB4', '\n', 
		'\x1CE', '\x3', '\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x5', '\x1CF', 
		'\x1CB9', '\n', '\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x3', '\x1D0', 
		'\x6', '\x1D0', '\x1CBE', '\n', '\x1D0', '\r', '\x1D0', '\xE', '\x1D0', 
		'\x1CBF', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1CC8', '\n', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', 
		'\x1D1', '\x1CCE', '\n', '\x1D1', '\x5', '\x1D1', '\x1CD0', '\n', '\x1D1', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x5', '\x1D2', '\x1CD4', '\n', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x5', '\x1D2', '\x1CD8', '\n', '\x1D2', 
		'\x3', '\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\x1CDC', '\n', '\x1D3', 
		'\x3', '\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\x1CE0', '\n', '\x1D3', 
		'\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', 
		'\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D6', 
		'\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x5', '\x1D6', '\x1CEE', 
		'\n', '\x1D6', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1CF5', '\n', '\x1D7', '\x3', 
		'\x1D8', '\x3', '\x1D8', '\x5', '\x1D8', '\x1CF9', '\n', '\x1D8', '\x3', 
		'\x1D8', '\a', '\x1D8', '\x1CFC', '\n', '\x1D8', '\f', '\x1D8', '\xE', 
		'\x1D8', '\x1CFF', '\v', '\x1D8', '\x3', '\x1D9', '\x6', '\x1D9', '\x1D02', 
		'\n', '\x1D9', '\r', '\x1D9', '\xE', '\x1D9', '\x1D03', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x5', '\x1DA', '\x1D08', '\n', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D0E', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D12', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D16', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', 
		'\x1DA', '\x1D1B', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x5', '\x1DA', '\x1D20', '\n', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D25', '\n', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D2A', '\n', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x5', '\x1DA', '\x1D30', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D36', '\n', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D3B', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', 
		'\x1DA', '\x1D40', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x5', '\x1DA', '\x1D45', '\n', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D4A', '\n', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D4F', '\n', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', 
		'\x1D54', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x5', '\x1DA', '\x1D59', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D63', '\n', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', 
		'\x1D69', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x5', '\x1DA', '\x1D6F', '\n', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D75', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D78', '\n', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x5', '\x1DA', '\x1D7F', '\n', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x1D84', '\n', '\x1DA', '\x3', 
		'\x1DA', '\x5', '\x1DA', '\x1D87', '\n', '\x1DA', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1D8B', '\n', '\x1DB', '\x3', '\x1DC', '\x5', 
		'\x1DC', '\x1D8E', '\n', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', 
		'\x1DC', '\x1D92', '\n', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', 
		'\x1DD', '\x5', '\x1DD', '\x1D97', '\n', '\x1DD', '\x3', '\x1DD', '\x3', 
		'\x1DD', '\x5', '\x1DD', '\x1D9B', '\n', '\x1DD', '\x3', '\x1DD', '\x3', 
		'\x1DD', '\x3', '\x1DE', '\x5', '\x1DE', '\x1DA0', '\n', '\x1DE', '\x3', 
		'\x1DE', '\x3', '\x1DE', '\x5', '\x1DE', '\x1DA4', '\n', '\x1DE', '\x3', 
		'\x1DE', '\x3', '\x1DE', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', 
		'\x3', '\x1DF', '\x3', '\x1DF', '\x5', '\x1DF', '\x1DAD', '\n', '\x1DF', 
		'\x3', '\x1DF', '\x5', '\x1DF', '\x1DB0', '\n', '\x1DF', '\x3', '\x1DF', 
		'\x5', '\x1DF', '\x1DB3', '\n', '\x1DF', '\x3', '\x1E0', '\x5', '\x1E0', 
		'\x1DB6', '\n', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x5', '\x1E0', 
		'\x1DBA', '\n', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x5', '\x1E0', 
		'\x1DBE', '\n', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x5', '\x1E0', 
		'\x1DC2', '\n', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x5', '\x1E0', '\x1DD1', '\n', '\x1E0', '\x3', '\x1E0', 
		'\x5', '\x1E0', '\x1DD4', '\n', '\x1E0', '\x5', '\x1E0', '\x1DD6', '\n', 
		'\x1E0', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x5', '\x1E1', 
		'\x1DDB', '\n', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', 
		'\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x5', 
		'\x1E1', '\x1DE4', '\n', '\x1E1', '\x3', '\x1E1', '\x5', '\x1E1', '\x1DE7', 
		'\n', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E1', '\x5', '\x1E1', '\x1DEB', 
		'\n', '\x1E1', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x3', '\x1E3', 
		'\x3', '\x1E3', '\a', '\x1E3', '\x1DF6', '\n', '\x1E3', '\f', '\x1E3', 
		'\xE', '\x1E3', '\x1DF9', '\v', '\x1E3', '\x3', '\x1E3', '\x3', '\x1E3', 
		'\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', 
		'\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', '\x1E04', '\n', 
		'\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', 
		'\x1E09', '\n', '\x1E4', '\x3', '\x1E4', '\a', '\x1E4', '\x1E0C', '\n', 
		'\x1E4', '\f', '\x1E4', '\xE', '\x1E4', '\x1E0F', '\v', '\x1E4', '\x3', 
		'\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\a', '\x1E4', 
		'\x1E15', '\n', '\x1E4', '\f', '\x1E4', '\xE', '\x1E4', '\x1E18', '\v', 
		'\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', '\x1E1C', '\n', 
		'\x1E4', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', 
		'\x3', '\x1E5', '\a', '\x1E5', '\x1E23', '\n', '\x1E5', '\f', '\x1E5', 
		'\xE', '\x1E5', '\x1E26', '\v', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', 
		'\x5', '\x1E5', '\x1E2A', '\n', '\x1E5', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x5', '\x1E6', '\x1E2E', '\n', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x5', '\x1E6', '\x1E32', '\n', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x5', '\x1E6', '\x1E36', '\n', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x3', '\x1E6', '\x5', '\x1E6', '\x1E3B', '\n', '\x1E6', '\x3', '\x1E6', 
		'\x3', '\x1E6', '\x3', '\x1E6', '\x5', '\x1E6', '\x1E40', '\n', '\x1E6', 
		'\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x5', 
		'\x1E6', '\x1E46', '\n', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', 
		'\x1E6', '\x5', '\x1E6', '\x1E4B', '\n', '\x1E6', '\x3', '\x1E6', '\x5', 
		'\x1E6', '\x1E4E', '\n', '\x1E6', '\x3', '\x1E7', '\x3', '\x1E7', '\x3', 
		'\x1E7', '\a', '\x1E7', '\x1E53', '\n', '\x1E7', '\f', '\x1E7', '\xE', 
		'\x1E7', '\x1E56', '\v', '\x1E7', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', 
		'\x1E8', '\x3', '\x1E8', '\a', '\x1E8', '\x1E5C', '\n', '\x1E8', '\f', 
		'\x1E8', '\xE', '\x1E8', '\x1E5F', '\v', '\x1E8', '\x3', '\x1E8', '\x3', 
		'\x1E8', '\x3', '\x1E9', '\x3', '\x1E9', '\x5', '\x1E9', '\x1E65', '\n', 
		'\x1E9', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', 
		'\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EC', '\x3', 
		'\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1ED', '\x5', '\x1ED', 
		'\x1E73', '\n', '\x1ED', '\x3', '\x1ED', '\x3', '\x1ED', '\x3', '\x1EE', 
		'\x3', '\x1EE', '\x3', '\x1EE', '\x3', '\x1EF', '\x3', '\x1EF', '\x3', 
		'\x1EF', '\x3', '\x1F0', '\x3', '\x1F0', '\x5', '\x1F0', '\x1E7F', '\n', 
		'\x1F0', '\x3', '\x1F1', '\x3', '\x1F1', '\x3', '\x1F1', '\x3', '\x1F1', 
		'\x3', '\x1F1', '\x3', '\x1F1', '\x3', '\x1F2', '\x3', '\x1F2', '\x3', 
		'\x1F2', '\a', '\x1F2', '\x1E8A', '\n', '\x1F2', '\f', '\x1F2', '\xE', 
		'\x1F2', '\x1E8D', '\v', '\x1F2', '\x3', '\x1F3', '\x3', '\x1F3', '\x3', 
		'\x1F3', '\a', '\x1F3', '\x1E92', '\n', '\x1F3', '\f', '\x1F3', '\xE', 
		'\x1F3', '\x1E95', '\v', '\x1F3', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', 
		'\x1F4', '\x3', '\x1F4', '\x5', '\x1F4', '\x1E9B', '\n', '\x1F4', '\x3', 
		'\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F6', '\x3', '\x1F6', 
		'\x6', '\x1F6', '\x1EA2', '\n', '\x1F6', '\r', '\x1F6', '\xE', '\x1F6', 
		'\x1EA3', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x5', '\x1F7', '\x1EAA', '\n', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x5', 
		'\x1F7', '\x1EB2', '\n', '\x1F7', '\x3', '\x1F8', '\x3', '\x1F8', '\x6', 
		'\x1F8', '\x1EB6', '\n', '\x1F8', '\r', '\x1F8', '\xE', '\x1F8', '\x1EB7', 
		'\x3', '\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x3', 
		'\x1FA', '\x3', '\x1FA', '\x3', '\x1FA', '\a', '\x1FA', '\x1EC1', '\n', 
		'\x1FA', '\f', '\x1FA', '\xE', '\x1FA', '\x1EC4', '\v', '\x1FA', '\x3', 
		'\x1FB', '\x3', '\x1FB', '\x3', '\x1FB', '\a', '\x1FB', '\x1EC9', '\n', 
		'\x1FB', '\f', '\x1FB', '\xE', '\x1FB', '\x1ECC', '\v', '\x1FB', '\x3', 
		'\x1FC', '\x3', '\x1FC', '\x3', '\x1FC', '\a', '\x1FC', '\x1ED1', '\n', 
		'\x1FC', '\f', '\x1FC', '\xE', '\x1FC', '\x1ED4', '\v', '\x1FC', '\x3', 
		'\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', 
		'\x5', '\x1FD', '\x1EDB', '\n', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', 
		'\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', 
		'\x1FD', '\x3', '\x1FD', '\x5', '\x1FD', '\x1EE5', '\n', '\x1FD', '\x3', 
		'\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x5', '\x1FD', '\x1EEA', '\n', 
		'\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x5', '\x1FD', 
		'\x1EEF', '\n', '\x1FD', '\x5', '\x1FD', '\x1EF1', '\n', '\x1FD', '\x3', 
		'\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', '\x5', '\x1FE', 
		'\x1EF7', '\n', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', 
		'\x3', '\x1FE', '\x5', '\x1FE', '\x1EFD', '\n', '\x1FE', '\x3', '\x1FE', 
		'\x5', '\x1FE', '\x1F00', '\n', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', 
		'\x3', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FE', '\x5', '\x1FE', '\x1F07', 
		'\n', '\x1FE', '\x5', '\x1FE', '\x1F09', '\n', '\x1FE', '\x5', '\x1FE', 
		'\x1F0B', '\n', '\x1FE', '\x3', '\x1FE', '\x5', '\x1FE', '\x1F0E', '\n', 
		'\x1FE', '\x5', '\x1FE', '\x1F10', '\n', '\x1FE', '\x3', '\x1FF', '\x3', 
		'\x1FF', '\x3', '\x1FF', '\x3', '\x1FF', '\x3', '\x200', '\x3', '\x200', 
		'\x3', '\x200', '\x3', '\x200', '\x3', '\x201', '\x3', '\x201', '\x3', 
		'\x201', '\x3', '\x202', '\x3', '\x202', '\x3', '\x202', '\x3', '\x202', 
		'\x5', '\x202', '\x1F21', '\n', '\x202', '\x3', '\x203', '\x3', '\x203', 
		'\x3', '\x203', '\x5', '\x203', '\x1F26', '\n', '\x203', '\x5', '\x203', 
		'\x1F28', '\n', '\x203', '\x3', '\x204', '\x3', '\x204', '\x3', '\x204', 
		'\x3', '\x205', '\x3', '\x205', '\x5', '\x205', '\x1F2F', '\n', '\x205', 
		'\x3', '\x206', '\x3', '\x206', '\x3', '\x207', '\x3', '\x207', '\x3', 
		'\x208', '\x3', '\x208', '\x3', '\x208', '\x3', '\x208', '\x3', '\x209', 
		'\x3', '\x209', '\x3', '\x209', '\x5', '\x209', '\x1F3C', '\n', '\x209', 
		'\x5', '\x209', '\x1F3E', '\n', '\x209', '\x3', '\x20A', '\x3', '\x20A', 
		'\x3', '\x20A', '\x3', '\x20A', '\x5', '\x20A', '\x1F44', '\n', '\x20A', 
		'\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20C', '\x3', '\x20C', '\x3', 
		'\x20C', '\x3', '\x20C', '\a', '\x20C', '\x1F4C', '\n', '\x20C', '\f', 
		'\x20C', '\xE', '\x20C', '\x1F4F', '\v', '\x20C', '\x3', '\x20C', '\x3', 
		'\x20C', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20E', '\x3', '\x20E', 
		'\x5', '\x20E', '\x1F57', '\n', '\x20E', '\x3', '\x20F', '\x3', '\x20F', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x211', '\x3', '\x211', '\x3', 
		'\x211', '\x3', '\x211', '\x3', '\x211', '\x5', '\x211', '\x1F62', '\n', 
		'\x211', '\x3', '\x211', '\x3', '\x211', '\x3', '\x212', '\x3', '\x212', 
		'\x3', '\x213', '\x3', '\x213', '\x3', '\x214', '\x3', '\x214', '\x3', 
		'\x215', '\x3', '\x215', '\x3', '\x216', '\x3', '\x216', '\x3', '\x217', 
		'\x3', '\x217', '\x3', '\x218', '\x3', '\x218', '\x3', '\x219', '\x3', 
		'\x219', '\x3', '\x21A', '\x3', '\x21A', '\x5', '\x21A', '\x1F78', '\n', 
		'\x21A', '\x3', '\x21B', '\x3', '\x21B', '\x5', '\x21B', '\x1F7C', '\n', 
		'\x21B', '\x3', '\x21C', '\x3', '\x21C', '\x3', '\x21D', '\x3', '\x21D', 
		'\x3', '\x21E', '\x3', '\x21E', '\x3', '\x21F', '\x3', '\x21F', '\x3', 
		'\x220', '\x3', '\x220', '\x3', '\x221', '\x3', '\x221', '\x3', '\x222', 
		'\x3', '\x222', '\x3', '\x223', '\x3', '\x223', '\x3', '\x224', '\x3', 
		'\x224', '\x3', '\x225', '\x3', '\x225', '\x3', '\x226', '\x3', '\x226', 
		'\x5', '\x226', '\x1F94', '\n', '\x226', '\x3', '\x227', '\x3', '\x227', 
		'\x3', '\x227', '\x3', '\x228', '\x3', '\x228', '\x3', '\x228', '\x3', 
		'\x228', '\x3', '\x228', '\x3', '\x228', '\x5', '\x228', '\x1F9F', '\n', 
		'\x228', '\x5', '\x228', '\x1FA1', '\n', '\x228', '\x3', '\x229', '\x3', 
		'\x229', '\x5', '\x229', '\x1FA5', '\n', '\x229', '\x3', '\x22A', '\x3', 
		'\x22A', '\x3', '\x22A', '\a', '\x22A', '\x1FAA', '\n', '\x22A', '\f', 
		'\x22A', '\xE', '\x22A', '\x1FAD', '\v', '\x22A', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\a', '\x22B', '\x1FB2', '\n', '\x22B', '\f', 
		'\x22B', '\xE', '\x22B', '\x1FB5', '\v', '\x22B', '\x3', '\x22C', '\x3', 
		'\x22C', '\x3', '\x22D', '\x3', '\x22D', '\x5', '\x22D', '\x1FBB', '\n', 
		'\x22D', '\x3', '\x22E', '\x3', '\x22E', '\x3', '\x22F', '\x3', '\x22F', 
		'\x5', '\x22F', '\x1FC1', '\n', '\x22F', '\x3', '\x230', '\x3', '\x230', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x232', '\x3', '\x232', '\x3', 
		'\x233', '\x3', '\x233', '\x3', '\x234', '\x3', '\x234', '\x3', '\x235', 
		'\x3', '\x235', '\x3', '\x235', '\x5', '\x235', '\x1FD0', '\n', '\x235', 
		'\x3', '\x236', '\x3', '\x236', '\x5', '\x236', '\x1FD4', '\n', '\x236', 
		'\x3', '\x237', '\x3', '\x237', '\x3', '\x237', '\a', '\x237', '\x1FD9', 
		'\n', '\x237', '\f', '\x237', '\xE', '\x237', '\x1FDC', '\v', '\x237', 
		'\x3', '\x238', '\x3', '\x238', '\x3', '\x238', '\x3', '\x238', '\x3', 
		'\x239', '\x3', '\x239', '\x5', '\x239', '\x1FE4', '\n', '\x239', '\x3', 
		'\x23A', '\x3', '\x23A', '\x3', '\x23A', '\x5', '\x23A', '\x1FE9', '\n', 
		'\x23A', '\x5', '\x23A', '\x1FEB', '\n', '\x23A', '\x3', '\x23A', '\x3', 
		'\x23A', '\x3', '\x23A', '\x3', '\x23A', '\x5', '\x23A', '\x1FF1', '\n', 
		'\x23A', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23C', 
		'\x3', '\x23C', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23E', '\x3', 
		'\x23E', '\x3', '\x23F', '\x3', '\x23F', '\x3', '\x23F', '\x3', '\x23F', 
		'\x3', '\x23F', '\x5', '\x23F', '\x2001', '\n', '\x23F', '\x3', '\x240', 
		'\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', 
		'\x240', '\x5', '\x240', '\x2009', '\n', '\x240', '\x3', '\x240', '\x5', 
		'\x240', '\x200C', '\n', '\x240', '\x3', '\x241', '\x3', '\x241', '\x3', 
		'\x241', '\x3', '\x241', '\x3', '\x241', '\x5', '\x241', '\x2013', '\n', 
		'\x241', '\x3', '\x242', '\x3', '\x242', '\x3', '\x242', '\x3', '\x242', 
		'\a', '\x242', '\x2019', '\n', '\x242', '\f', '\x242', '\xE', '\x242', 
		'\x201C', '\v', '\x242', '\x3', '\x242', '\x3', '\x242', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x5', '\x243', '\x2023', '\n', '\x243', 
		'\x3', '\x244', '\x3', '\x244', '\x3', '\x244', '\x5', '\x244', '\x2028', 
		'\n', '\x244', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x5', 
		'\x245', '\x202D', '\n', '\x245', '\x3', '\x246', '\x5', '\x246', '\x2030', 
		'\n', '\x246', '\x3', '\x246', '\x3', '\x246', '\x5', '\x246', '\x2034', 
		'\n', '\x246', '\x3', '\x246', '\a', '\x246', '\x2037', '\n', '\x246', 
		'\f', '\x246', '\xE', '\x246', '\x203A', '\v', '\x246', '\x3', '\x247', 
		'\x3', '\x247', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\a', 
		'\x248', '\x2041', '\n', '\x248', '\f', '\x248', '\xE', '\x248', '\x2044', 
		'\v', '\x248', '\x3', '\x249', '\x3', '\x249', '\x3', '\x24A', '\x3', 
		'\x24A', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24C', '\x3', '\x24C', 
		'\x3', '\x24C', '\x3', '\x24C', '\x3', '\x24C', '\x3', '\x24C', '\x5', 
		'\x24C', '\x2052', '\n', '\x24C', '\x3', '\x24D', '\x3', '\x24D', '\x5', 
		'\x24D', '\x2056', '\n', '\x24D', '\x3', '\x24E', '\x3', '\x24E', '\x3', 
		'\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', 
		'\x3', '\x24F', '\x3', '\x250', '\x3', '\x250', '\x5', '\x250', '\x2062', 
		'\n', '\x250', '\x3', '\x251', '\x3', '\x251', '\x5', '\x251', '\x2066', 
		'\n', '\x251', '\x3', '\x252', '\x3', '\x252', '\x5', '\x252', '\x206A', 
		'\n', '\x252', '\x3', '\x253', '\x3', '\x253', '\x5', '\x253', '\x206E', 
		'\n', '\x253', '\x3', '\x254', '\x3', '\x254', '\x3', '\x254', '\x3', 
		'\x255', '\x3', '\x255', '\x3', '\x256', '\x3', '\x256', '\x3', '\x257', 
		'\x3', '\x257', '\x3', '\x257', '\x3', '\x257', '\x3', '\x257', '\x3', 
		'\x257', '\x5', '\x257', '\x207D', '\n', '\x257', '\x3', '\x258', '\x3', 
		'\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', 
		'\x3', '\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', '\x5', 
		'\x258', '\x2089', '\n', '\x258', '\x3', '\x259', '\x3', '\x259', '\x3', 
		'\x259', '\x3', '\x259', '\x3', '\x259', '\x3', '\x259', '\x3', '\x259', 
		'\x3', '\x259', '\x5', '\x259', '\x2093', '\n', '\x259', '\x3', '\x259', 
		'\x3', '\x259', '\x3', '\x259', '\x3', '\x259', '\x3', '\x259', '\x5', 
		'\x259', '\x209A', '\n', '\x259', '\x5', '\x259', '\x209C', '\n', '\x259', 
		'\x3', '\x25A', '\x3', '\x25A', '\x3', '\x25B', '\x3', '\x25B', '\x3', 
		'\x25C', '\x3', '\x25C', '\x3', '\x25C', '\x3', '\x25C', '\x3', '\x25C', 
		'\x3', '\x25C', '\x3', '\x25C', '\x3', '\x25C', '\x3', '\x25C', '\x3', 
		'\x25C', '\x3', '\x25C', '\x5', '\x25C', '\x20AD', '\n', '\x25C', '\x3', 
		'\x25C', '\x3', '\x25C', '\x3', '\x25C', '\x5', '\x25C', '\x20B2', '\n', 
		'\x25C', '\x5', '\x25C', '\x20B4', '\n', '\x25C', '\x3', '\x25D', '\x3', 
		'\x25D', '\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x5', '\x25E', 
		'\x20BB', '\n', '\x25E', '\x3', '\x25F', '\x3', '\x25F', '\x3', '\x25F', 
		'\x5', '\x25F', '\x20C0', '\n', '\x25F', '\x3', '\x25F', '\x3', '\x25F', 
		'\x3', '\x25F', '\x5', '\x25F', '\x20C5', '\n', '\x25F', '\x5', '\x25F', 
		'\x20C7', '\n', '\x25F', '\x3', '\x260', '\x3', '\x260', '\x3', '\x260', 
		'\x3', '\x260', '\x5', '\x260', '\x20CD', '\n', '\x260', '\x3', '\x261', 
		'\x3', '\x261', '\x3', '\x262', '\x3', '\x262', '\x3', '\x262', '\x3', 
		'\x262', '\x3', '\x262', '\x5', '\x262', '\x20D6', '\n', '\x262', '\x3', 
		'\x263', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', 
		'\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x5', 
		'\x263', '\x20E1', '\n', '\x263', '\x3', '\x263', '\x2', '\x6', '\x2A6', 
		'\x2A8', '\x2B0', '\x2B2', '\x264', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', 
		'\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', 
		'\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', 
		'\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', 
		'\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', 
		'\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', 
		'\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', 
		'\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', 
		'\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', 
		'\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', 
		'\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', 
		'\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', 
		'\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', 
		'\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', 
		'\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', 
		'\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', 
		'\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', 
		'\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', '\x37E', '\x380', 
		'\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', '\x38E', '\x390', 
		'\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', '\x39E', '\x3A0', 
		'\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', '\x3B0', 
		'\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', '\x3C0', 
		'\x3C2', '\x3C4', '\x3C6', '\x3C8', '\x3CA', '\x3CC', '\x3CE', '\x3D0', 
		'\x3D2', '\x3D4', '\x3D6', '\x3D8', '\x3DA', '\x3DC', '\x3DE', '\x3E0', 
		'\x3E2', '\x3E4', '\x3E6', '\x3E8', '\x3EA', '\x3EC', '\x3EE', '\x3F0', 
		'\x3F2', '\x3F4', '\x3F6', '\x3F8', '\x3FA', '\x3FC', '\x3FE', '\x400', 
		'\x402', '\x404', '\x406', '\x408', '\x40A', '\x40C', '\x40E', '\x410', 
		'\x412', '\x414', '\x416', '\x418', '\x41A', '\x41C', '\x41E', '\x420', 
		'\x422', '\x424', '\x426', '\x428', '\x42A', '\x42C', '\x42E', '\x430', 
		'\x432', '\x434', '\x436', '\x438', '\x43A', '\x43C', '\x43E', '\x440', 
		'\x442', '\x444', '\x446', '\x448', '\x44A', '\x44C', '\x44E', '\x450', 
		'\x452', '\x454', '\x456', '\x458', '\x45A', '\x45C', '\x45E', '\x460', 
		'\x462', '\x464', '\x466', '\x468', '\x46A', '\x46C', '\x46E', '\x470', 
		'\x472', '\x474', '\x476', '\x478', '\x47A', '\x47C', '\x47E', '\x480', 
		'\x482', '\x484', '\x486', '\x488', '\x48A', '\x48C', '\x48E', '\x490', 
		'\x492', '\x494', '\x496', '\x498', '\x49A', '\x49C', '\x49E', '\x4A0', 
		'\x4A2', '\x4A4', '\x4A6', '\x4A8', '\x4AA', '\x4AC', '\x4AE', '\x4B0', 
		'\x4B2', '\x4B4', '\x4B6', '\x4B8', '\x4BA', '\x4BC', '\x4BE', '\x4C0', 
		'\x4C2', '\x4C4', '\x2', '\x94', '\x3', '\x2', '\x2D4', '\x2D5', '\x4', 
		'\x2', '\x13', '\x13', '\x250', '\x250', '\x4', '\x2', '\x33', '\x33', 
		'\x1D9', '\x1D9', '\x3', '\x2', '\x287', '\x288', '\x4', '\x2', '\x6', 
		'\x6', '\x96', '\x96', '\x4', '\x2', '\x1B4', '\x1B4', '\x1B6', '\x1B6', 
		'\x3', '\x2', '\x2D6', '\x2D7', '\x4', '\x2', '\x34', '\x34', '\x11E', 
		'\x11E', '\x4', '\x2', '\xEA', '\xEA', '\x1CC', '\x1CC', '\x6', '\x2', 
		'\x80', '\x80', '\xFB', '\xFB', '\x1B7', '\x1B7', '\x22E', '\x22E', '\x4', 
		'\x2', '\x84', '\x84', '\xFC', '\xFC', '\x4', '\x2', '\x1BA', '\x1BA', 
		'\x25D', '\x25D', '\x4', '\x2', '\x1BB', '\x1BB', '\x25E', '\x25E', '\x4', 
		'\x2', '\x178', '\x178', '\x280', '\x280', '\x5', '\x2', '\x151', '\x151', 
		'\x244', '\x244', '\x25C', '\x25C', '\x4', '\x2', '\b', '\b', '\x1E', 
		'\x1E', '\x5', '\x2', '\x87', '\x87', '\xF4', '\xF4', '\x268', '\x268', 
		'\x4', '\x2', '\xC7', '\xC7', '\x1A1', '\x1A1', '\x4', '\x2', '\x23D', 
		'\x23D', '\x240', '\x240', '\x5', '\x2', '\xEA', '\xEA', '\x129', '\x129', 
		'\x1B1', '\x1B1', '\x4', '\x2', '\xC1', '\xC1', '\x171', '\x171', '\x6', 
		'\x2', '\xC1', '\xC1', '\x10E', '\x10E', '\x171', '\x171', '\x1A5', '\x1A5', 
		'\x4', '\x2', '\x2F0', '\x2F0', '\x2F3', '\x2F6', '\x5', '\x2', '\x85', 
		'\x85', '\xE1', '\xE1', '\x129', '\x129', '\x3', '\x2', '\x274', '\x275', 
		'\x4', '\x2', 'T', 'T', '\x129', '\x129', '\x4', '\x2', 'r', 'r', '\x28F', 
		'\x28F', '\x4', '\x2', '\x118', '\x118', '\x1E6', '\x1E6', '\x4', '\x2', 
		'\x85', '\x85', '\x129', '\x129', '\t', '\x2', '\f', '\f', '\x91', '\x91', 
		'\xE1', '\xE1', '\x215', '\x216', '\x218', '\x218', '\x21A', '\x21A', 
		'\x22D', '\x22D', '\x4', '\x2', '\x17F', '\x17F', '\x307', '\x307', '\x4', 
		'\x2', '\x2ED', '\x2EF', '\x315', '\x315', '\x5', '\x2', '\x1B2', '\x1B2', 
		'\x1E6', '\x1E6', '\x2AD', '\x2AD', '\x4', '\x2', '\x14', '\x14', '\x88', 
		'\x88', '\x4', '\x2', '\x112', '\x112', '\x1E0', '\x1E0', '\x4', '\x2', 
		'\x64', '\x64', '\xF1', '\xF1', '\x4', '\x2', '\f', '\f', '\x91', '\x91', 
		'\x4', '\x2', '\xC8', '\xC8', '\xEA', '\xEA', '\x4', '\x2', '\xEE', '\xEE', 
		'\x10B', '\x10B', '\x4', '\x2', '\x184', '\x184', '\x28B', '\x28B', '\x4', 
		'\x2', '\x1F', '\x1F', '\x221', '\x221', '\x4', '\x2', '\x107', '\x107', 
		'\x1DA', '\x1DA', '\x4', '\x2', '\"', '\"', '\x13E', '\x13E', '\x4', '\x2', 
		'\x181', '\x181', '\x2E9', '\x2EA', '\x4', '\x2', '\x212', '\x212', '\x214', 
		'\x214', '\x4', '\x2', '\x1C3', '\x1C3', '\x21C', '\x21C', '\x4', '\x2', 
		'\x221', '\x221', '\x22A', '\x22A', '\x4', '\x2', '}', '}', '\x96', '\x96', 
		'\x5', '\x2', '\x173', '\x173', '\x21D', '\x21D', '\x28C', '\x28C', '\x4', 
		'\x2', '\x121', '\x121', '\x265', '\x265', '\x4', '\x2', '\x82', '\x82', 
		'\x2D1', '\x2D1', '\x5', '\x2', '\xD0', '\xD0', '\x1A8', '\x1A8', '\x240', 
		'\x240', '\x6', '\x2', '\xF4', '\xF4', '\x1BD', '\x1BD', '\x1F3', '\x1F3', 
		'\x268', '\x268', '\xF', '\x2', '\x87', '\x87', '\x96', '\x96', '\xAC', 
		'\xAC', '\xAF', '\xAF', '\xBE', '\xBE', '\xEE', '\xEE', '\x1A9', '\x1A9', 
		'\x1AD', '\x1AD', '\x1C5', '\x1C5', '\x200', '\x200', '\x237', '\x237', 
		'\x254', '\x254', '\x26A', '\x26A', '\x6', '\x2', '\x1E5', '\x1E5', '\x23E', 
		'\x23E', '\x26C', '\x26C', '\x27E', '\x27E', '\x4', '\x2', '\x43', '\x43', 
		'\x204', '\x204', '\x4', '\x2', '\x63', '\x63', '\x96', '\x96', '\x4', 
		'\x2', '\x82', '\x82', '\x173', '\x173', '\x4', '\x2', '\xB6', '\xB6', 
		'\x1B1', '\x1B1', '\a', '\x2', ':', ':', '\xB6', '\xB6', '\xBA', '\xBA', 
		'\x14F', '\x14F', '\x1B1', '\x1B1', '\x5', '\x2', '\xB6', '\xB6', '\x1B1', 
		'\x1B1', '\x26D', '\x26D', '\x4', '\x2', 'N', 'N', '\x25B', '\x25B', '\x6', 
		'\x2', '\f', '\f', '\"', '\"', '\x82', '\x82', '\x181', '\x181', '\x4', 
		'\x2', '\x1E9', '\x1E9', '\x2C8', '\x2C8', '\x5', '\x2', '\x123', '\x123', 
		'\x164', '\x164', '\x225', '\x225', '\x4', '\x2', '\xCD', '\xCD', '\xFD', 
		'\xFD', '\x4', '\x2', '#', '#', '\x1C0', '\x1C0', '\x4', '\x2', '\xED', 
		'\xEE', '\x109', '\x109', '\x4', '\x2', '\xA8', '\xA8', '\x281', '\x281', 
		'\x4', '\x2', '\x225', '\x225', '\x279', '\x279', '\b', '\x2', '\f', '\f', 
		'\x62', '\x62', '\x102', '\x102', '\x150', '\x150', '\x20C', '\x20C', 
		'\x239', '\x239', '\x4', '\x2', 'V', 'V', '\x1B0', '\x1B0', '\a', '\x2', 
		'\x8A', '\x8A', '\xE3', '\xE3', '\x1A7', '\x1A7', '\x225', '\x225', '\x26B', 
		'\x26B', '\a', '\x2', '\"', '\"', '\xA5', '\xA5', '\xA7', '\xA7', '\xD2', 
		'\xD2', '\x205', '\x205', '\x4', '\x2', '\x26C', '\x26C', '\x2C8', '\x2C8', 
		'\x4', '\x2', '\x8E', '\x8E', '\x9E', '\x9E', '\x4', '\x2', '\x88', '\x89', 
		'\xB4', '\xB4', '\x5', '\x2', '\xB9', '\xB9', '\x256', '\x256', '\x264', 
		'\x264', '\x4', '\x2', '\x11', '\x11', '\x301', '\x301', '\x4', '\x2', 
		'\x18C', '\x18C', '\x304', '\x304', '\x4', '\x2', '\f', '\f', '\x12', 
		'\x12', '\x4', '\x2', '\x2F0', '\x2F0', '\x2F2', '\x2F7', '\x5', '\x2', 
		'\x93', '\x93', '\x15F', '\x15F', '\x2FA', '\x2FC', '\x3', '\x2', '\x2F8', 
		'\x2F9', '\x3', '\x2', '\x2FF', '\x300', '\x4', '\x2', '\x2F8', '\x2F9', 
		'\x2FE', '\x2FE', '\x4', '\x2', '%', '&', '(', '(', '\x6', '\x2', '\x2A8', 
		'\x2A9', '\x2B6', '\x2B6', '\x2B8', '\x2B8', '\x2BA', '\x2BA', '\x4', 
		'\x2', '\x2AE', '\x2AE', '\x2B0', '\x2B0', '\x4', '\x2', '\x2AB', '\x2AB', 
		'\x2AF', '\x2AF', '\x4', '\x2', '\xC1', '\xC1', '\x10E', '\x10E', '\x4', 
		'\x2', '\xEA', '\xEA', '\x2B9', '\x2B9', '\x4', '\x2', '\a', '\a', '\x230', 
		'\x230', '\x3', '\x2', 't', 'u', '\x3', '\x2', '\x24A', '\x24B', '\x6', 
		'\x2', 's', 's', 'v', 'v', '\x249', '\x249', '\x24C', '\x24C', '\x4', 
		'\x2', '\x175', '\x175', '\x2EB', '\x2EB', '\x4', '\x2', '\x2EB', '\x2EB', 
		'\x2FD', '\x2FD', '\a', '\x2', 'x', '{', '\xE4', '\xE6', '\x157', '\x158', 
		'\x1F0', '\x1F0', '\x291', '\x291', '\v', '\x2', '|', '|', '\xE7', '\xE7', 
		'\x153', '\x153', '\x159', '\x159', '\x160', '\x160', '\x1AF', '\x1AF', 
		'\x1F1', '\x1F1', '\x282', '\x282', '\x292', '\x292', '\x5', '\x2', '^', 
		'^', '\xB1', '\xB1', '\x25F', '\x25F', '\x4', '\x2', '\x17B', '\x17B', 
		'\x1E7', '\x1E7', '\f', '\x2', '\x37', '\x37', '\x42', '\x42', 'K', 'K', 
		'Y', '[', 'm', 'm', '\x152', '\x152', '\x165', '\x165', '\x1EE', '\x1EE', 
		'\x22F', '\x22F', '\x242', '\x242', '\x4', '\x2', '\x22C', '\x22C', '\x27F', 
		'\x27F', '\x5', '\x2', '\x82', '\x82', '\x9A', '\x9A', '\xC2', '\xC2', 
		'\x5', '\x2', '\x82', '\x82', '\x90', '\x90', '\x150', '\x150', '\x5', 
		'\x2', '\xCE', '\xCE', '\x194', '\x194', '\x203', '\x203', '\x5', '\x2', 
		'.', '.', '\xDE', '\xDE', '\x1EA', '\x1EA', '\x3', '\x2', '\x297', '\x298', 
		'\x4', '\x2', '\x259', '\x259', '\x26F', '\x26F', '\a', '\x2', '!', '!', 
		'\xFB', '\xFB', '\x14D', '\x14D', '\x206', '\x206', '\x24E', '\x24E', 
		'\x6', '\x2', '\x80', '\x80', '\xC2', '\xC2', '\xC5', '\xC5', '\x17C', 
		'\x17C', '\x3', '\x2', '+', ',', '\x4', '\x2', '\x124', '\x124', '\x14C', 
		'\x14C', '\x6', '\x2', '\xD5', '\xD6', '\x119', '\x119', '\x161', '\x163', 
		'\x19D', '\x19E', '\x5', '\x2', '\x202', '\x202', '\x266', '\x266', '\x293', 
		'\x293', '\x3', '\x2', '\x222', '\x224', '\x4', '\x2', '?', '?', '\x241', 
		'\x241', '\b', '\x2', 'P', 'P', 'R', 'R', '\x82', '\x82', '\x9A', '\x9A', 
		'\xC2', '\xC2', '\x1BC', '\x1BC', '\x5', '\x2', '\xC1', '\xC1', '\x10E', 
		'\x10E', '\x177', '\x177', '\x4', '\x2', '\x90', '\x90', '\x150', '\x150', 
		'\x4', '\x2', '\x11A', '\x11A', '\x1B2', '\x1B2', '\x4', '\x2', '\x145', 
		'\x145', '\x15A', '\x15A', '\x4', '\x2', 'r', 'r', '\xEE', '\xEE', '\x5', 
		'\x2', '\xF2', '\xF2', '\xFD', '\xFD', '\x18F', '\x18F', '\x4', '\x2', 
		'\x21F', '\x21F', '\x245', '\x245', '\x4', '\x2', '\x17E', '\x17E', '\x183', 
		'\x183', '\x4', '\x2', '\x11E', '\x11E', '\x179', '\x179', '\x4', '\x2', 
		'\x31D', '\x31D', '\x31F', '\x31F', '\x5', '\x2', '\x2ED', '\x2EF', '\x316', 
		'\x316', '\x318', '\x319', '\x4', '\x2', '\x2ED', '\x2EF', '\x316', '\x316', 
		'\x4', '\x2', '\x2ED', '\x2EF', '\x318', '\x319', '\x3', '\x2', '\x316', 
		'\x317', '\x4', '\x2', '\xB9', '\xB9', '\x256', '\x256', '\x4', '\x2', 
		'\x17A', '\x17A', '\x314', '\x314', '\x3', '\x2', '\x2F0', '\x2F1', '\a', 
		'\x2', '\xD8', '\xD8', '\x11E', '\x11E', '\x1F8', '\x1F8', '\x294', '\x294', 
		'\x2A3', '\x2A3', '\x5', '\x2', '\xAF', '\xAF', '\x200', '\x200', '\x2CC', 
		'\x2CC', '\"', '\x2', '\x15', '\x15', '\x1F', '\x1F', '\x30', '\x31', 
		'<', '<', '?', '?', 'M', 'M', 'O', 'O', '\\', '\\', '}', '}', '\x95', 
		'\x95', '\xA1', '\xA1', '\xC6', '\xC7', '\xDD', '\xDD', '\xE0', '\xE0', 
		'\xEC', '\xEC', '\xF7', '\xF7', '\x10D', '\x10D', '\x177', '\x177', '\x1A1', 
		'\x1A1', '\x1A3', '\x1A3', '\x1C9', '\x1C9', '\x1D6', '\x1D6', '\x1E2', 
		'\x1E2', '\x1EB', '\x1EB', '\x202', '\x202', '\x204', '\x204', '\x221', 
		'\x221', '\x22A', '\x22A', '\x257', '\x257', '\x260', '\x261', '\x28D', 
		'\x28D', '\x2A7', '\x2A7', '\v', '\x2', '\xAC', '\xAC', '\xBE', '\xBE', 
		'\x173', '\x173', '\x1A9', '\x1A9', '\x1AD', '\x1AD', '\x1C5', '\x1C5', 
		'\x1CD', '\x1CD', '\x237', '\x237', '\x2C7', '\x2C7', '\xA3', '\x2', '\x4', 
		'\x5', '\a', '\v', '\xE', '\xE', '\x12', '\x12', '\x17', '\x17', '\x19', 
		'\x1D', '#', '#', '\'', '\'', '*', ',', '.', '.', '\x34', '\x34', '\x37', 
		'\x38', ':', ';', '\x41', '\x46', 'H', 'I', 'K', 'L', 'N', 'N', 'P', 'T', 
		'V', 'W', 'Y', '[', ']', ']', '\x62', '\x62', 'g', 'g', 'm', 'm', 'q', 
		's', 'v', 'v', '|', '|', '\x83', '\x84', '\x86', '\x86', '\x8C', '\x90', 
		'\x98', '\x9A', '\x9E', '\x9E', '\xA0', '\xA0', '\xA2', '\xA2', '\xA4', 
		'\xA8', '\xAA', '\xAB', '\xAD', '\xAE', '\xB2', '\xB3', '\xB5', '\xB7', 
		'\xBA', '\xBB', '\xBF', '\xC2', '\xCB', '\xCC', '\xCE', '\xCE', '\xD2', 
		'\xD2', '\xD4', '\xD7', '\xDA', '\xDA', '\xDE', '\xDE', '\xE2', '\xE3', 
		'\xE7', '\xE8', '\xEB', '\xEB', '\xED', '\xED', '\xF0', '\xF0', '\xF5', 
		'\xF6', '\xFC', '\xFC', '\x101', '\x102', '\x104', '\x105', '\x108', '\x108', 
		'\x10A', '\x10A', '\x10E', '\x10E', '\x110', '\x110', '\x113', '\x114', 
		'\x119', '\x11A', '\x120', '\x120', '\x122', '\x123', '\x12A', '\x12A', 
		'\x12C', '\x13C', '\x13E', '\x141', '\x143', '\x146', '\x149', '\x14A', 
		'\x14F', '\x153', '\x156', '\x156', '\x159', '\x15A', '\x15C', '\x15C', 
		'\x15E', '\x15E', '\x160', '\x168', '\x16B', '\x16B', '\x16D', '\x16D', 
		'\x16F', '\x172', '\x178', '\x178', '\x17B', '\x17B', '\x17D', '\x17D', 
		'\x17F', '\x17F', '\x182', '\x182', '\x184', '\x185', '\x188', '\x188', 
		'\x190', '\x196', '\x198', '\x19F', '\x1A4', '\x1A5', '\x1A7', '\x1A7', 
		'\x1AA', '\x1AC', '\x1AF', '\x1B1', '\x1B4', '\x1B4', '\x1B8', '\x1B9', 
		'\x1BB', '\x1BC', '\x1BF', '\x1C3', '\x1C6', '\x1C6', '\x1C8', '\x1C8', 
		'\x1CA', '\x1CA', '\x1CE', '\x1D4', '\x1D8', '\x1D8', '\x1DA', '\x1DC', 
		'\x1DE', '\x1DE', '\x1E3', '\x1E5', '\x1E7', '\x1E8', '\x1EA', '\x1EA', 
		'\x1EC', '\x1EC', '\x1EE', '\x1EE', '\x1F1', '\x1F2', '\x1F6', '\x1F7', 
		'\x1F9', '\x1F9', '\x1FE', '\x1FE', '\x203', '\x203', '\x205', '\x205', 
		'\x207', '\x207', '\x209', '\x20C', '\x212', '\x214', '\x216', '\x216', 
		'\x219', '\x219', '\x21C', '\x21C', '\x21E', '\x21E', '\x220', '\x220', 
		'\x222', '\x225', '\x22B', '\x22B', '\x22E', '\x233', '\x238', '\x23A', 
		'\x23D', '\x23E', '\x241', '\x244', '\x246', '\x247', '\x249', '\x24C', 
		'\x252', '\x253', '\x258', '\x259', '\x25B', '\x25E', '\x264', '\x264', 
		'\x267', '\x267', '\x269', '\x269', '\x26B', '\x26D', '\x273', '\x273', 
		'\x275', '\x275', '\x279', '\x279', '\x27E', '\x27E', '\x280', '\x283', 
		'\x288', '\x28A', '\x28C', '\x28C', '\x28E', '\x28F', '\x292', '\x292', 
		'\x295', '\x298', '\x29A', '\x29A', '\x29F', '\x2A1', '\x2A4', '\x2A5', 
		'\x2AA', '\x2AA', '\x2AC', '\x2AC', '\x2B3', '\x2B4', '\x2B7', '\x2B7', 
		'\x2B9', '\x2B9', '\x2BB', '\x2BC', '\x2C0', '\x2C6', '\x2C9', '\x2CB', 
		'\x2CD', '\x2D7', '\x2D9', '\x2DC', '\x2DE', '\x2DE', '\x2E1', '\x2E4', 
		'\x6', '\x2', '\x249', '\x249', '\x24C', '\x24C', '\x2DD', '\x2DD', '\x2DF', 
		'\x2EA', '\x38', '\x2', '\x4', '\x4', '\xE', '\xE', '\x15', '\x15', '\x1D', 
		'\x1D', '\x1F', '\x1F', '\x30', '\x31', '<', '<', '?', '?', '\x44', '\x44', 
		'M', 'M', 'O', 'O', '\\', '\\', '}', '}', '\x95', '\x95', '\xA1', '\xA1', 
		'\xC6', '\xC7', '\xCB', '\xCB', '\xD4', '\xD4', '\xDD', '\xDD', '\xE0', 
		'\xE0', '\xE2', '\xE2', '\xF7', '\xF7', '\x10D', '\x10D', '\x177', '\x177', 
		'\x185', '\x185', '\x188', '\x188', '\x190', '\x190', '\x193', '\x193', 
		'\x197', '\x197', '\x19F', '\x19F', '\x1A1', '\x1A1', '\x1A3', '\x1A3', 
		'\x1C6', '\x1C6', '\x1C9', '\x1C9', '\x1D6', '\x1D6', '\x1D8', '\x1D8', 
		'\x1E2', '\x1E2', '\x1EB', '\x1EB', '\x1F2', '\x1F2', '\x1F9', '\x1F9', 
		'\x202', '\x202', '\x204', '\x204', '\x209', '\x20A', '\x221', '\x221', 
		'\x22A', '\x22A', '\x257', '\x257', '\x260', '\x261', '\x269', '\x269', 
		'\x28A', '\x28A', '\x28D', '\x28D', '\x295', '\x295', '\x297', '\x298', 
		'\x2A7', '\x2A7', '\x2D2', '\x2D5', '\x9D', '\x2', '\x5', '\x5', '\a', 
		'\v', '\xF', '\xF', '\x12', '\x12', '\x17', '\x1C', '#', '#', '\'', '\'', 
		'*', ',', '.', '.', '\x34', '\x34', '\x37', '\x38', ':', ';', '\x41', 
		'\x43', '\x45', '\x46', 'H', 'I', 'K', 'L', 'N', 'N', 'P', 'T', 'V', 'W', 
		'Y', '[', ']', ']', '_', '_', '\x62', '\x62', 'g', 'g', 'm', 'm', 'q', 
		's', 'v', 'v', '|', '|', '\x83', '\x84', '\x86', '\x86', '\x8A', '\x8A', 
		'\x8C', '\x90', '\x98', '\x9A', '\x9E', '\x9E', '\xA0', '\xA0', '\xA2', 
		'\xA2', '\xA4', '\xA8', '\xAA', '\xAB', '\xAD', '\xAD', '\xB2', '\xB2', 
		'\xB5', '\xB7', '\xBA', '\xBB', '\xBF', '\xC2', '\xCC', '\xCC', '\xCE', 
		'\xCE', '\xD2', '\xD2', '\xD5', '\xD8', '\xDA', '\xDA', '\xDE', '\xDE', 
		'\xE3', '\xE3', '\xE7', '\xE8', '\xEB', '\xEB', '\xED', '\xED', '\xF0', 
		'\xF0', '\xF5', '\xF6', '\xFC', '\xFC', '\x101', '\x102', '\x104', '\x105', 
		'\x108', '\x108', '\x10A', '\x10A', '\x10E', '\x10E', '\x110', '\x110', 
		'\x113', '\x114', '\x119', '\x11A', '\x11E', '\x11E', '\x120', '\x120', 
		'\x122', '\x123', '\x12A', '\x12A', '\x12C', '\x13C', '\x13E', '\x141', 
		'\x143', '\x147', '\x149', '\x14A', '\x14F', '\x153', '\x156', '\x156', 
		'\x159', '\x15A', '\x15C', '\x15C', '\x15E', '\x15E', '\x160', '\x168', 
		'\x16B', '\x16B', '\x16D', '\x16D', '\x16F', '\x172', '\x178', '\x178', 
		'\x17B', '\x17B', '\x17D', '\x17D', '\x17F', '\x180', '\x182', '\x182', 
		'\x191', '\x192', '\x194', '\x196', '\x198', '\x19E', '\x1A4', '\x1A5', 
		'\x1A7', '\x1A7', '\x1AA', '\x1AC', '\x1AF', '\x1B1', '\x1B4', '\x1B4', 
		'\x1B8', '\x1BC', '\x1BF', '\x1C3', '\x1C8', '\x1C8', '\x1CA', '\x1CA', 
		'\x1CE', '\x1D4', '\x1DA', '\x1DC', '\x1DE', '\x1DE', '\x1E3', '\x1E5', 
		'\x1E7', '\x1E8', '\x1EA', '\x1EA', '\x1EC', '\x1EC', '\x1EE', '\x1EE', 
		'\x1F1', '\x1F1', '\x1F6', '\x1F8', '\x1FE', '\x1FE', '\x203', '\x203', 
		'\x205', '\x205', '\x207', '\x207', '\x20B', '\x20C', '\x212', '\x214', 
		'\x216', '\x217', '\x219', '\x219', '\x21C', '\x21C', '\x21E', '\x21E', 
		'\x220', '\x220', '\x222', '\x225', '\x22B', '\x22B', '\x22E', '\x233', 
		'\x237', '\x23A', '\x23D', '\x23E', '\x241', '\x244', '\x246', '\x247', 
		'\x249', '\x24C', '\x252', '\x253', '\x258', '\x25E', '\x264', '\x264', 
		'\x267', '\x267', '\x26B', '\x26D', '\x275', '\x275', '\x279', '\x279', 
		'\x27E', '\x27E', '\x280', '\x283', '\x289', '\x289', '\x28C', '\x28C', 
		'\x28E', '\x28F', '\x292', '\x292', '\x29A', '\x29A', '\x29F', '\x2A1', 
		'\x2A4', '\x2A6', '\x2AA', '\x2AA', '\x2AC', '\x2AC', '\x2B3', '\x2B4', 
		'\x2B7', '\x2B7', '\x2B9', '\x2B9', '\x2BB', '\x2BC', '\x2C0', '\x2C6', 
		'\x2C9', '\x2CA', '\x2CE', '\x2CF', '\x2D1', '\x2D1', '\x2D6', '\x2D7', 
		'\x2D9', '\x2DA', '\a', '\x2', '\x65', '\x65', '\xD0', '\xD0', '\xEC', 
		'\xEC', '\x1E6', '\x1E6', '\x1E9', '\x1E9', '\b', '\x2', '\xAE', '\xAE', 
		'\xB3', '\xB3', '\x184', '\x184', '\x237', '\x237', '\x273', '\x273', 
		'\x288', '\x288', '\x2', '\x2542', '\x2', '\x4D2', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x6', '\x4F8', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x515', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x524', '\x3', '\x2', '\x2', '\x2', '\f', '\x54A', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x553', '\x3', '\x2', '\x2', '\x2', '\x10', '\x560', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x562', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x567', '\x3', '\x2', '\x2', '\x2', '\x16', '\x57F', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x588', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x58A', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x599', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x5FB', '\x3', '\x2', '\x2', '\x2', ' ', '\x5FF', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x60F', '\x3', '\x2', '\x2', '\x2', '$', '\x6A2', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x6A7', '\x3', '\x2', '\x2', '\x2', '(', '\x6A9', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x6AB', '\x3', '\x2', '\x2', '\x2', 
		',', '\x6B9', '\x3', '\x2', '\x2', '\x2', '.', '\x6C1', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x32', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x6D7', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x38', '\x6DE', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x703', '\x3', '\x2', '\x2', '\x2', '<', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x715', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x717', '\x3', '\x2', '\x2', '\x2', '\x42', '\x72B', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x734', '\x3', '\x2', '\x2', '\x2', '\x46', '\x737', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x744', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x749', '\x3', '\x2', '\x2', '\x2', 'L', '\x74D', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x754', '\x3', '\x2', '\x2', '\x2', 'P', '\x769', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x778', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x77B', '\x3', '\x2', '\x2', '\x2', 'V', '\x79A', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x7A4', '\x3', '\x2', '\x2', '\x2', 'Z', '\x7A7', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x7B2', '\x3', '\x2', '\x2', '\x2', '`', '\x7BE', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\x64', '\x7F2', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x800', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x803', '\x3', '\x2', '\x2', '\x2', 'j', '\x818', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x81B', '\x3', '\x2', '\x2', '\x2', 'n', '\x854', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x856', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x85A', '\x3', '\x2', '\x2', '\x2', 't', '\x863', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x873', '\x3', '\x2', '\x2', '\x2', 'x', '\x875', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x87D', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x897', '\x3', '\x2', '\x2', '\x2', '~', '\x899', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x8A5', '\x3', '\x2', '\x2', '\x2', '\x82', '\x8B4', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x8B6', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8CF', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8D1', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D7', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8DD', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x92', '\x8E9', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x8EF', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8F6', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x8FE', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x900', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x906', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x90C', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x913', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x925', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x927', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x92B', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x930', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x940', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x945', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x966', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x985', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x996', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x998', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x9AC', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x9B8', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x9BE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x9C5', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x9CE', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x9E1', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\x9E8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x9F2', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xA00', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xA06', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xA0E', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xA1C', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xA22', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xA2C', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xA30', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xA36', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xA3B', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xA46', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xA71', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xA77', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xA80', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xA9E', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xABF', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xAC6', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xACA', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xAD2', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xADC', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xADE', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xAF0', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xAFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xB01', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xB07', '\x3', '\x2', '\x2', '\x2', '\x100', '\xB28', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xB2A', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\xB32', '\x3', '\x2', '\x2', '\x2', '\x106', '\xB3B', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xB43', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xB4F', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\xB66', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\xB74', '\x3', '\x2', '\x2', '\x2', '\x110', '\xB78', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\xB98', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\xBA7', '\x3', '\x2', '\x2', '\x2', '\x116', '\xBB6', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\xBB8', '\x3', '\x2', '\x2', '\x2', '\x11A', '\xBD3', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\xBD5', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\x120', '\xBDA', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\xBDD', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\xBE4', '\x3', '\x2', '\x2', '\x2', '\x126', '\xBE6', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\xC04', '\x3', '\x2', '\x2', '\x2', '\x12A', '\xC10', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\xC13', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\xC1C', '\x3', '\x2', '\x2', '\x2', '\x130', '\xC20', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\xC25', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\xC32', '\x3', '\x2', '\x2', '\x2', '\x136', '\xC37', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\xC3B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\xC4B', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\xC4D', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\xC5F', '\x3', '\x2', '\x2', '\x2', '\x140', '\xC61', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\xC6A', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\xC76', '\x3', '\x2', '\x2', '\x2', '\x146', '\xC7D', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\xC88', '\x3', '\x2', '\x2', '\x2', '\x14A', '\xC8A', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\xC8E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\xC90', '\x3', '\x2', '\x2', '\x2', '\x150', '\xC95', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\xC9D', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\xCA6', '\x3', '\x2', '\x2', '\x2', '\x156', '\xCA9', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\xCB8', '\x3', '\x2', '\x2', '\x2', '\x15A', '\xCBB', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\xCCE', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\xCD3', '\x3', '\x2', '\x2', '\x2', '\x160', '\xCD8', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\xCDC', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\xCEA', '\x3', '\x2', '\x2', '\x2', '\x166', '\xCED', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\xCF3', '\x3', '\x2', '\x2', '\x2', '\x16A', '\xD00', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\xD08', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\xD22', '\x3', '\x2', '\x2', '\x2', '\x170', '\xD2F', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\xD36', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\xD38', '\x3', '\x2', '\x2', '\x2', '\x176', '\xD44', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\xD46', '\x3', '\x2', '\x2', '\x2', '\x17A', '\xD50', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\xD68', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\x180', '\xD71', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\xD7B', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\xD9E', '\x3', '\x2', '\x2', '\x2', '\x186', '\xDA8', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\xDAA', '\x3', '\x2', '\x2', '\x2', '\x18A', '\xDAE', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\xDB6', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\xDB8', '\x3', '\x2', '\x2', '\x2', '\x190', '\xDBD', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\xDC1', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\xDDD', '\x3', '\x2', '\x2', '\x2', '\x196', '\xDDF', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\xDE1', '\x3', '\x2', '\x2', '\x2', '\x19A', '\xDE9', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\xDEB', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\xDF3', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\xDFD', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', '\xE01', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\xE1A', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\xE35', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\xE37', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\xE41', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\xE60', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\xE78', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\xE7A', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\xE88', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\xE8A', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\xEAD', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\xED9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\xEE9', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\xEEB', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\xEF3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\xEFC', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\xF03', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\xF66', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\xF6C', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\xF70', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\xF7E', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\xF80', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\xF8D', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\xFCD', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\xFCF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\xFD7', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\xFDF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\xFE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\xFE9', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1006', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x100F', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x102E', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1030', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x103A', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1048', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE', '\x104A', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1050', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1058', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4', '\x107D', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x107F', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x108E', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA', '\x1090', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x10CE', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x10D0', '\x3', '\x2', 
		'\x2', '\x2', '\x200', '\x10D3', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x10EC', '\x3', '\x2', '\x2', '\x2', '\x204', '\x10F5', '\x3', '\x2', 
		'\x2', '\x2', '\x206', '\x10F7', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x10FC', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x112A', '\x3', '\x2', 
		'\x2', '\x2', '\x20C', '\x112C', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x1134', '\x3', '\x2', '\x2', '\x2', '\x210', '\x1165', '\x3', '\x2', 
		'\x2', '\x2', '\x212', '\x1172', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x1174', '\x3', '\x2', '\x2', '\x2', '\x216', '\x1177', '\x3', '\x2', 
		'\x2', '\x2', '\x218', '\x1182', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x1187', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x118A', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x11CB', '\x3', '\x2', '\x2', '\x2', '\x222', '\x11CD', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x11CF', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x1200', '\x3', '\x2', '\x2', '\x2', '\x228', '\x1212', '\x3', '\x2', 
		'\x2', '\x2', '\x22A', '\x1214', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x1224', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x1230', '\x3', '\x2', 
		'\x2', '\x2', '\x230', '\x1249', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x124B', '\x3', '\x2', '\x2', '\x2', '\x234', '\x1253', '\x3', '\x2', 
		'\x2', '\x2', '\x236', '\x1284', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x1293', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x1298', '\x3', '\x2', 
		'\x2', '\x2', '\x23C', '\x129A', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x12B2', '\x3', '\x2', '\x2', '\x2', '\x240', '\x12B4', '\x3', '\x2', 
		'\x2', '\x2', '\x242', '\x12EF', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x12FA', '\x3', '\x2', '\x2', '\x2', '\x246', '\x12FC', '\x3', '\x2', 
		'\x2', '\x2', '\x248', '\x12FF', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x130C', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x1328', '\x3', '\x2', 
		'\x2', '\x2', '\x24E', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x1332', '\x3', '\x2', '\x2', '\x2', '\x252', '\x133D', '\x3', '\x2', 
		'\x2', '\x2', '\x254', '\x133F', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x1347', '\x3', '\x2', '\x2', '\x2', '\x258', '\x1349', '\x3', '\x2', 
		'\x2', '\x2', '\x25A', '\x142D', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x1434', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x1436', '\x3', '\x2', 
		'\x2', '\x2', '\x260', '\x1438', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x1442', '\x3', '\x2', '\x2', '\x2', '\x264', '\x1469', '\x3', '\x2', 
		'\x2', '\x2', '\x266', '\x146D', '\x3', '\x2', '\x2', '\x2', '\x268', 
		'\x146F', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x1477', '\x3', '\x2', 
		'\x2', '\x2', '\x26C', '\x147B', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x1483', '\x3', '\x2', '\x2', '\x2', '\x270', '\x148C', '\x3', '\x2', 
		'\x2', '\x2', '\x272', '\x148E', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x14A5', '\x3', '\x2', '\x2', '\x2', '\x276', '\x14A7', '\x3', '\x2', 
		'\x2', '\x2', '\x278', '\x14A9', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x14B9', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x14C5', '\x3', '\x2', 
		'\x2', '\x2', '\x27E', '\x14C7', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x14CF', '\x3', '\x2', '\x2', '\x2', '\x282', '\x14D7', '\x3', '\x2', 
		'\x2', '\x2', '\x284', '\x14E0', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x14E2', '\x3', '\x2', '\x2', '\x2', '\x288', '\x14F4', '\x3', '\x2', 
		'\x2', '\x2', '\x28A', '\x1502', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x1507', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x150D', '\x3', '\x2', 
		'\x2', '\x2', '\x290', '\x150F', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x151F', '\x3', '\x2', '\x2', '\x2', '\x294', '\x1527', '\x3', '\x2', 
		'\x2', '\x2', '\x296', '\x1531', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x153E', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x1540', '\x3', '\x2', 
		'\x2', '\x2', '\x29C', '\x1546', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x1566', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x1568', '\x3', '\x2', 
		'\x2', '\x2', '\x2A2', '\x156B', '\x3', '\x2', '\x2', '\x2', '\x2A4', 
		'\x156E', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x157B', '\x3', '\x2', 
		'\x2', '\x2', '\x2A8', '\x158B', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x15A2', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x15A4', '\x3', '\x2', 
		'\x2', '\x2', '\x2AE', '\x15C9', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x15CB', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x1658', '\x3', '\x2', 
		'\x2', '\x2', '\x2B4', '\x1665', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x166E', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x16F3', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x16F5', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x1724', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x1726', '\x3', '\x2', 
		'\x2', '\x2', '\x2C0', '\x172B', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x1734', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x1747', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6', '\x174A', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x1753', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x1755', '\x3', '\x2', 
		'\x2', '\x2', '\x2CC', '\x176C', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x187F', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x18A0', '\x3', '\x2', 
		'\x2', '\x2', '\x2D2', '\x18A2', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'\x18A8', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x18AB', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8', '\x18BA', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x18C2', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x18C4', '\x3', '\x2', 
		'\x2', '\x2', '\x2DE', '\x18E1', '\x3', '\x2', '\x2', '\x2', '\x2E0', 
		'\x1902', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x1904', '\x3', '\x2', 
		'\x2', '\x2', '\x2E4', '\x190C', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x1912', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x1917', '\x3', '\x2', 
		'\x2', '\x2', '\x2EA', '\x1919', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x192F', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x1931', '\x3', '\x2', 
		'\x2', '\x2', '\x2F0', '\x1934', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x1937', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x1967', '\x3', '\x2', 
		'\x2', '\x2', '\x2F6', '\x1969', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x1974', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x1976', '\x3', '\x2', 
		'\x2', '\x2', '\x2FC', '\x1978', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x197C', '\x3', '\x2', '\x2', '\x2', '\x300', '\x197E', '\x3', '\x2', 
		'\x2', '\x2', '\x302', '\x1980', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x1984', '\x3', '\x2', '\x2', '\x2', '\x306', '\x1988', '\x3', '\x2', 
		'\x2', '\x2', '\x308', '\x198C', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x1994', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x1998', '\x3', '\x2', 
		'\x2', '\x2', '\x30E', '\x19A0', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x19A2', '\x3', '\x2', '\x2', '\x2', '\x312', '\x19B4', '\x3', '\x2', 
		'\x2', '\x2', '\x314', '\x19B6', '\x3', '\x2', '\x2', '\x2', '\x316', 
		'\x19B9', '\x3', '\x2', '\x2', '\x2', '\x318', '\x19BE', '\x3', '\x2', 
		'\x2', '\x2', '\x31A', '\x19C6', '\x3', '\x2', '\x2', '\x2', '\x31C', 
		'\x19CC', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x19D0', '\x3', '\x2', 
		'\x2', '\x2', '\x320', '\x19E1', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x19E4', '\x3', '\x2', '\x2', '\x2', '\x324', '\x19E9', '\x3', '\x2', 
		'\x2', '\x2', '\x326', '\x19EB', '\x3', '\x2', '\x2', '\x2', '\x328', 
		'\x19EE', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x19F7', '\x3', '\x2', 
		'\x2', '\x2', '\x32C', '\x19FF', '\x3', '\x2', '\x2', '\x2', '\x32E', 
		'\x1A01', '\x3', '\x2', '\x2', '\x2', '\x330', '\x1A06', '\x3', '\x2', 
		'\x2', '\x2', '\x332', '\x1A0D', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x1A17', '\x3', '\x2', '\x2', '\x2', '\x336', '\x1A1F', '\x3', '\x2', 
		'\x2', '\x2', '\x338', '\x1A21', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x1A2B', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x1A33', '\x3', '\x2', 
		'\x2', '\x2', '\x33E', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x1A3B', '\x3', '\x2', '\x2', '\x2', '\x342', '\x1A50', '\x3', '\x2', 
		'\x2', '\x2', '\x344', '\x1A52', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x1A58', '\x3', '\x2', '\x2', '\x2', '\x348', '\x1A5B', '\x3', '\x2', 
		'\x2', '\x2', '\x34A', '\x1A5E', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x1A7C', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x1A80', '\x3', '\x2', 
		'\x2', '\x2', '\x350', '\x1A87', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x1A8E', '\x3', '\x2', '\x2', '\x2', '\x354', '\x1A90', '\x3', '\x2', 
		'\x2', '\x2', '\x356', '\x1AA0', '\x3', '\x2', '\x2', '\x2', '\x358', 
		'\x1AB0', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x1AB4', '\x3', '\x2', 
		'\x2', '\x2', '\x35C', '\x1AB7', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x1ABA', '\x3', '\x2', '\x2', '\x2', '\x360', '\x1AD2', '\x3', '\x2', 
		'\x2', '\x2', '\x362', '\x1AD4', '\x3', '\x2', '\x2', '\x2', '\x364', 
		'\x1ADC', '\x3', '\x2', '\x2', '\x2', '\x366', '\x1ADE', '\x3', '\x2', 
		'\x2', '\x2', '\x368', '\x1AE2', '\x3', '\x2', '\x2', '\x2', '\x36A', 
		'\x1B31', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x1B33', '\x3', '\x2', 
		'\x2', '\x2', '\x36E', '\x1B37', '\x3', '\x2', '\x2', '\x2', '\x370', 
		'\x1B91', '\x3', '\x2', '\x2', '\x2', '\x372', '\x1B93', '\x3', '\x2', 
		'\x2', '\x2', '\x374', '\x1B95', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x1BA5', '\x3', '\x2', '\x2', '\x2', '\x378', '\x1BA7', '\x3', '\x2', 
		'\x2', '\x2', '\x37A', '\x1BC7', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'\x1BC9', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x1BD4', '\x3', '\x2', 
		'\x2', '\x2', '\x380', '\x1BDB', '\x3', '\x2', '\x2', '\x2', '\x382', 
		'\x1BEB', '\x3', '\x2', '\x2', '\x2', '\x384', '\x1BF1', '\x3', '\x2', 
		'\x2', '\x2', '\x386', '\x1BF3', '\x3', '\x2', '\x2', '\x2', '\x388', 
		'\x1BF7', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x1C02', '\x3', '\x2', 
		'\x2', '\x2', '\x38C', '\x1C04', '\x3', '\x2', '\x2', '\x2', '\x38E', 
		'\x1C06', '\x3', '\x2', '\x2', '\x2', '\x390', '\x1C0D', '\x3', '\x2', 
		'\x2', '\x2', '\x392', '\x1C0F', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x1C11', '\x3', '\x2', '\x2', '\x2', '\x396', '\x1CA7', '\x3', '\x2', 
		'\x2', '\x2', '\x398', '\x1CAC', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x1CB3', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x1CB5', '\x3', '\x2', 
		'\x2', '\x2', '\x39E', '\x1CBD', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x1CCF', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x1CD7', '\x3', '\x2', 
		'\x2', '\x2', '\x3A4', '\x1CDF', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x1CE1', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x1CE5', '\x3', '\x2', 
		'\x2', '\x2', '\x3AA', '\x1CED', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x1CF4', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x1CF6', '\x3', '\x2', 
		'\x2', '\x2', '\x3B0', '\x1D01', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x1D86', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x1D8A', '\x3', '\x2', 
		'\x2', '\x2', '\x3B6', '\x1D8D', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x1D96', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x1D9F', '\x3', '\x2', 
		'\x2', '\x2', '\x3BC', '\x1DA7', '\x3', '\x2', '\x2', '\x2', '\x3BE', 
		'\x1DD5', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x1DD7', '\x3', '\x2', 
		'\x2', '\x2', '\x3C2', '\x1DEC', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x1DF1', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x1DFC', '\x3', '\x2', 
		'\x2', '\x2', '\x3C8', '\x1E29', '\x3', '\x2', '\x2', '\x2', '\x3CA', 
		'\x1E4D', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x1E4F', '\x3', '\x2', 
		'\x2', '\x2', '\x3CE', '\x1E57', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x1E64', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x1E66', '\x3', '\x2', 
		'\x2', '\x2', '\x3D4', '\x1E6A', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x1E6D', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x1E72', '\x3', '\x2', 
		'\x2', '\x2', '\x3DA', '\x1E76', '\x3', '\x2', '\x2', '\x2', '\x3DC', 
		'\x1E79', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x1E7C', '\x3', '\x2', 
		'\x2', '\x2', '\x3E0', '\x1E80', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x1E86', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x1E8E', '\x3', '\x2', 
		'\x2', '\x2', '\x3E6', '\x1E96', '\x3', '\x2', '\x2', '\x2', '\x3E8', 
		'\x1E9C', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x1E9F', '\x3', '\x2', 
		'\x2', '\x2', '\x3EC', '\x1EB1', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x1EB3', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x1EB9', '\x3', '\x2', 
		'\x2', '\x2', '\x3F2', '\x1EBD', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x1EC5', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x1ECD', '\x3', '\x2', 
		'\x2', '\x2', '\x3F8', '\x1ED5', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x1EF2', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x1F11', '\x3', '\x2', 
		'\x2', '\x2', '\x3FE', '\x1F15', '\x3', '\x2', '\x2', '\x2', '\x400', 
		'\x1F19', '\x3', '\x2', '\x2', '\x2', '\x402', '\x1F1C', '\x3', '\x2', 
		'\x2', '\x2', '\x404', '\x1F27', '\x3', '\x2', '\x2', '\x2', '\x406', 
		'\x1F29', '\x3', '\x2', '\x2', '\x2', '\x408', '\x1F2E', '\x3', '\x2', 
		'\x2', '\x2', '\x40A', '\x1F30', '\x3', '\x2', '\x2', '\x2', '\x40C', 
		'\x1F32', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x1F34', '\x3', '\x2', 
		'\x2', '\x2', '\x410', '\x1F3D', '\x3', '\x2', '\x2', '\x2', '\x412', 
		'\x1F43', '\x3', '\x2', '\x2', '\x2', '\x414', '\x1F45', '\x3', '\x2', 
		'\x2', '\x2', '\x416', '\x1F47', '\x3', '\x2', '\x2', '\x2', '\x418', 
		'\x1F52', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x1F56', '\x3', '\x2', 
		'\x2', '\x2', '\x41C', '\x1F58', '\x3', '\x2', '\x2', '\x2', '\x41E', 
		'\x1F5A', '\x3', '\x2', '\x2', '\x2', '\x420', '\x1F5C', '\x3', '\x2', 
		'\x2', '\x2', '\x422', '\x1F65', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x1F67', '\x3', '\x2', '\x2', '\x2', '\x426', '\x1F69', '\x3', '\x2', 
		'\x2', '\x2', '\x428', '\x1F6B', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x1F6D', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x1F6F', '\x3', '\x2', 
		'\x2', '\x2', '\x42E', '\x1F71', '\x3', '\x2', '\x2', '\x2', '\x430', 
		'\x1F73', '\x3', '\x2', '\x2', '\x2', '\x432', '\x1F77', '\x3', '\x2', 
		'\x2', '\x2', '\x434', '\x1F7B', '\x3', '\x2', '\x2', '\x2', '\x436', 
		'\x1F7D', '\x3', '\x2', '\x2', '\x2', '\x438', '\x1F7F', '\x3', '\x2', 
		'\x2', '\x2', '\x43A', '\x1F81', '\x3', '\x2', '\x2', '\x2', '\x43C', 
		'\x1F83', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x1F85', '\x3', '\x2', 
		'\x2', '\x2', '\x440', '\x1F87', '\x3', '\x2', '\x2', '\x2', '\x442', 
		'\x1F89', '\x3', '\x2', '\x2', '\x2', '\x444', '\x1F8B', '\x3', '\x2', 
		'\x2', '\x2', '\x446', '\x1F8D', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x1F8F', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x1F93', '\x3', '\x2', 
		'\x2', '\x2', '\x44C', '\x1F95', '\x3', '\x2', '\x2', '\x2', '\x44E', 
		'\x1F98', '\x3', '\x2', '\x2', '\x2', '\x450', '\x1FA4', '\x3', '\x2', 
		'\x2', '\x2', '\x452', '\x1FA6', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x1FAE', '\x3', '\x2', '\x2', '\x2', '\x456', '\x1FB6', '\x3', '\x2', 
		'\x2', '\x2', '\x458', '\x1FBA', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x1FBC', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x1FC0', '\x3', '\x2', 
		'\x2', '\x2', '\x45E', '\x1FC2', '\x3', '\x2', '\x2', '\x2', '\x460', 
		'\x1FC4', '\x3', '\x2', '\x2', '\x2', '\x462', '\x1FC6', '\x3', '\x2', 
		'\x2', '\x2', '\x464', '\x1FC8', '\x3', '\x2', '\x2', '\x2', '\x466', 
		'\x1FCA', '\x3', '\x2', '\x2', '\x2', '\x468', '\x1FCF', '\x3', '\x2', 
		'\x2', '\x2', '\x46A', '\x1FD3', '\x3', '\x2', '\x2', '\x2', '\x46C', 
		'\x1FD5', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x1FDD', '\x3', '\x2', 
		'\x2', '\x2', '\x470', '\x1FE1', '\x3', '\x2', '\x2', '\x2', '\x472', 
		'\x1FF0', '\x3', '\x2', '\x2', '\x2', '\x474', '\x1FF2', '\x3', '\x2', 
		'\x2', '\x2', '\x476', '\x1FF5', '\x3', '\x2', '\x2', '\x2', '\x478', 
		'\x1FF7', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x1FF9', '\x3', '\x2', 
		'\x2', '\x2', '\x47C', '\x2000', '\x3', '\x2', '\x2', '\x2', '\x47E', 
		'\x200B', '\x3', '\x2', '\x2', '\x2', '\x480', '\x2012', '\x3', '\x2', 
		'\x2', '\x2', '\x482', '\x2014', '\x3', '\x2', '\x2', '\x2', '\x484', 
		'\x2022', '\x3', '\x2', '\x2', '\x2', '\x486', '\x2027', '\x3', '\x2', 
		'\x2', '\x2', '\x488', '\x202C', '\x3', '\x2', '\x2', '\x2', '\x48A', 
		'\x2033', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x203B', '\x3', '\x2', 
		'\x2', '\x2', '\x48E', '\x203D', '\x3', '\x2', '\x2', '\x2', '\x490', 
		'\x2045', '\x3', '\x2', '\x2', '\x2', '\x492', '\x2047', '\x3', '\x2', 
		'\x2', '\x2', '\x494', '\x2049', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x2051', '\x3', '\x2', '\x2', '\x2', '\x498', '\x2055', '\x3', '\x2', 
		'\x2', '\x2', '\x49A', '\x2057', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x2059', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x2061', '\x3', '\x2', 
		'\x2', '\x2', '\x4A0', '\x2065', '\x3', '\x2', '\x2', '\x2', '\x4A2', 
		'\x2069', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x206D', '\x3', '\x2', 
		'\x2', '\x2', '\x4A6', '\x206F', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x2072', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x2074', '\x3', '\x2', 
		'\x2', '\x2', '\x4AC', '\x207C', '\x3', '\x2', '\x2', '\x2', '\x4AE', 
		'\x2088', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x209B', '\x3', '\x2', 
		'\x2', '\x2', '\x4B2', '\x209D', '\x3', '\x2', '\x2', '\x2', '\x4B4', 
		'\x209F', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x20B3', '\x3', '\x2', 
		'\x2', '\x2', '\x4B8', '\x20B5', '\x3', '\x2', '\x2', '\x2', '\x4BA', 
		'\x20BA', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x20C6', '\x3', '\x2', 
		'\x2', '\x2', '\x4BE', '\x20CC', '\x3', '\x2', '\x2', '\x2', '\x4C0', 
		'\x20CE', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x20D5', '\x3', '\x2', 
		'\x2', '\x2', '\x4C4', '\x20E0', '\x3', '\x2', '\x2', '\x2', '\x4C6', 
		'\x4D3', '\a', '\x2', '\x2', '\x3', '\x4C7', '\x4CA', '\x5', '\x4', '\x3', 
		'\x2', '\x4C8', '\x4CA', '\x5', '\x1A8', '\xD5', '\x2', '\x4C9', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\x4CA', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CD', '\a', 
		'\x308', '\x2', '\x2', '\x4CC', '\x4CE', '\a', '\x2', '\x2', '\x3', '\x4CD', 
		'\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', '\x3', '\x2', '\x2', 
		'\x2', '\x4CE', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D1', 
		'\a', '\x2', '\x2', '\x3', '\x4D0', '\x4CB', '\x3', '\x2', '\x2', '\x2', 
		'\x4D0', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D3', '\x3', 
		'\x2', '\x2', '\x2', '\x4D2', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4D2', 
		'\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4F7', '\x5', '\x6', '\x4', '\x2', '\x4D5', '\x4F7', 
		'\x5', 'N', '(', '\x2', '\x4D6', '\x4F7', '\x5', '\xB4', '[', '\x2', '\x4D7', 
		'\x4F7', '\x5', '\xD4', 'k', '\x2', '\x4D8', '\x4F7', '\x5', '\xD8', 'm', 
		'\x2', '\x4D9', '\x4DA', '\x6', '\x3', '\x2', '\x2', '\x4DA', '\x4F7', 
		'\x5', '\xDA', 'n', '\x2', '\x4DB', '\x4F7', '\x5', '\xDC', 'o', '\x2', 
		'\x4DC', '\x4F7', '\x5', '\xDE', 'p', '\x2', '\x4DD', '\x4F7', '\x5', 
		'\xE4', 's', '\x2', '\x4DE', '\x4F7', '\x5', '\xE6', 't', '\x2', '\x4DF', 
		'\x4F7', '\x5', '\xEA', 'v', '\x2', '\x4E0', '\x4F7', '\x5', '\xFE', '\x80', 
		'\x2', '\x4E1', '\x4F7', '\x5', '\x10A', '\x86', '\x2', '\x4E2', '\x4F7', 
		'\x5', '\x10C', '\x87', '\x2', '\x4E3', '\x4F7', '\x5', '\x1A2', '\xD2', 
		'\x2', '\x4E4', '\x4F7', '\x5', '\x1A4', '\xD3', '\x2', '\x4E5', '\x4F7', 
		'\x5', '\x1BA', '\xDE', '\x2', '\x4E6', '\x4F7', '\x5', '\x1EC', '\xF7', 
		'\x2', '\x4E7', '\x4E8', '\x6', '\x3', '\x3', '\x2', '\x4E8', '\x4F7', 
		'\x5', '\x1F2', '\xFA', '\x2', '\x4E9', '\x4F7', '\x5', '\x1F8', '\xFD', 
		'\x2', '\x4EA', '\x4F7', '\x5', '\x236', '\x11C', '\x2', '\x4EB', '\x4F7', 
		'\x5', '\x23E', '\x120', '\x2', '\x4EC', '\x4F7', '\x5', '\x240', '\x121', 
		'\x2', '\x4ED', '\x4F7', '\x5', '\x258', '\x12D', '\x2', '\x4EE', '\x4EF', 
		'\x6', '\x3', '\x4', '\x2', '\x4EF', '\x4F7', '\x5', '\x284', '\x143', 
		'\x2', '\x4F0', '\x4F7', '\x5', '\x264', '\x133', '\x2', '\x4F1', '\x4F7', 
		'\x5', '\x298', '\x14D', '\x2', '\x4F2', '\x4F3', '\x6', '\x3', '\x5', 
		'\x2', '\x4F3', '\x4F7', '\x5', '\x34A', '\x1A6', '\x2', '\x4F4', '\x4F7', 
		'\x5', '\x354', '\x1AB', '\x2', '\x4F5', '\x4F7', '\x5', '\x356', '\x1AC', 
		'\x2', '\x4F6', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4D5', 
		'\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4D6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4D8', '\x3', 
		'\x2', '\x2', '\x2', '\x4F6', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4DC', '\x3', '\x2', '\x2', 
		'\x2', '\x4F6', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4DE', 
		'\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4DF', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4E1', '\x3', 
		'\x2', '\x2', '\x2', '\x4F6', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4E4', '\x3', '\x2', '\x2', 
		'\x2', '\x4F6', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4E6', 
		'\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4E7', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4EA', '\x3', 
		'\x2', '\x2', '\x2', '\x4F6', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4ED', '\x3', '\x2', '\x2', 
		'\x2', '\x4F6', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F0', 
		'\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F1', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F4', '\x3', 
		'\x2', '\x2', '\x2', '\x4F6', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F7', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x4F8', '\x513', '\a', '\r', '\x2', 
		'\x2', '\x4F9', '\x514', '\x5', '\x14', '\v', '\x2', '\x4FA', '\x514', 
		'\x5', '\b', '\x5', '\x2', '\x4FB', '\x4FC', '\a', '\x1A8', '\x2', '\x2', 
		'\x4FC', '\x4FE', '\x5', '\x428', '\x215', '\x2', '\x4FD', '\x4FF', '\x5', 
		'h', '\x35', '\x2', '\x4FE', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FE', 
		'\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x514', '\x3', '\x2', '\x2', 
		'\x2', '\x500', '\x501', '\a', '\xD0', '\x2', '\x2', '\x501', '\x503', 
		'\x5', '\x42C', '\x217', '\x2', '\x502', '\x504', '\x5', 'h', '\x35', 
		'\x2', '\x503', '\x502', '\x3', '\x2', '\x2', '\x2', '\x503', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x514', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x514', '\x5', '\x46', '$', '\x2', '\x506', '\x514', '\x5', 
		'\n', '\x6', '\x2', '\x507', '\x514', '\x5', '\x38', '\x1D', '\x2', '\x508', 
		'\x509', '\x6', '\x4', '\x6', '\x2', '\x509', '\x514', '\x5', ':', '\x1E', 
		'\x2', '\x50A', '\x514', '\x5', '\f', '\a', '\x2', '\x50B', '\x514', '\x5', 
		'\x12', '\n', '\x2', '\x50C', '\x50D', '\x6', '\x4', '\a', '\x2', '\x50D', 
		'\x50E', '\a', '\xF6', '\x2', '\x2', '\x50E', '\x50F', '\a', '\x1E4', 
		'\x2', '\x2', '\x50F', '\x510', '\x5', '\x49E', '\x250', '\x2', '\x510', 
		'\x511', '\a', '\x13E', '\x2', '\x2', '\x511', '\x512', '\a', '\x10B', 
		'\x2', '\x2', '\x512', '\x514', '\x3', '\x2', '\x2', '\x2', '\x513', '\x4F9', 
		'\x3', '\x2', '\x2', '\x2', '\x513', '\x4FA', '\x3', '\x2', '\x2', '\x2', 
		'\x513', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x513', '\x500', '\x3', 
		'\x2', '\x2', '\x2', '\x513', '\x505', '\x3', '\x2', '\x2', '\x2', '\x513', 
		'\x506', '\x3', '\x2', '\x2', '\x2', '\x513', '\x507', '\x3', '\x2', '\x2', 
		'\x2', '\x513', '\x508', '\x3', '\x2', '\x2', '\x2', '\x513', '\x50A', 
		'\x3', '\x2', '\x2', '\x2', '\x513', '\x50B', '\x3', '\x2', '\x2', '\x2', 
		'\x513', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x514', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x515', '\x516', '\a', 'o', '\x2', '\x2', '\x516', '\x521', 
		'\x5', '\x424', '\x213', '\x2', '\x517', '\x519', '\x5', 'R', '*', '\x2', 
		'\x518', '\x517', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51A', '\x3', 
		'\x2', '\x2', '\x2', '\x51A', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51A', 
		'\x51B', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x522', '\x3', '\x2', '\x2', 
		'\x2', '\x51C', '\x51D', '\x6', '\x5', '\b', '\x2', '\x51D', '\x51E', 
		'\a', '\x269', '\x2', '\x2', '\x51E', '\x51F', '\a', 'r', '\x2', '\x2', 
		'\x51F', '\x520', '\a', '\x8D', '\x2', '\x2', '\x520', '\x522', '\a', 
		'\x167', '\x2', '\x2', '\x521', '\x518', '\x3', '\x2', '\x2', '\x2', '\x521', 
		'\x51C', '\x3', '\x2', '\x2', '\x2', '\x522', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x523', '\x525', '\x5', '\x3D2', '\x1EA', '\x2', '\x524', '\x523', 
		'\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\x3', '\x2', '\x2', '\x2', 
		'\x525', '\x526', '\x3', '\x2', '\x2', '\x2', '\x526', '\x527', '\a', 
		'\xAC', '\x2', '\x2', '\x527', '\x52B', '\x5', '\x440', '\x221', '\x2', 
		'\x528', '\x529', '\a', '\x181', '\x2', '\x2', '\x529', '\x52A', '\a', 
		'\x1EC', '\x2', '\x2', '\x52A', '\x52C', '\x5', '\x360', '\x1B1', '\x2', 
		'\x52B', '\x528', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x52C', '\x3', 
		'\x2', '\x2', '\x2', '\x52C', '\x533', '\x3', '\x2', '\x2', '\x2', '\x52D', 
		'\x52E', '\a', '\x181', '\x2', '\x2', '\x52E', '\x530', '\a', 'Q', '\x2', 
		'\x2', '\x52F', '\x531', '\a', '\x175', '\x2', '\x2', '\x530', '\x52F', 
		'\x3', '\x2', '\x2', '\x2', '\x530', '\x531', '\x3', '\x2', '\x2', '\x2', 
		'\x531', '\x532', '\x3', '\x2', '\x2', '\x2', '\x532', '\x534', '\a', 
		'\x1A4', '\x2', '\x2', '\x533', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x533', 
		'\x534', '\x3', '\x2', '\x2', '\x2', '\x534', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x536', '\a', '\x1C7', '\x2', '\x2', '\x536', '\x537', 
		'\a', '\x250', '\x2', '\x2', '\x537', '\x539', '\x5', '\x46A', '\x236', 
		'\x2', '\x538', '\x535', '\x3', '\x2', '\x2', '\x2', '\x538', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\x539', '\x540', '\x3', '\x2', '\x2', '\x2', 
		'\x53A', '\x541', '\a', '\x9E', '\x2', '\x2', '\x53B', '\x53E', '\a', 
		'\x8E', '\x2', '\x2', '\x53C', '\x53D', '\a', '\x181', '\x2', '\x2', '\x53D', 
		'\x53F', '\a', '\x204', '\x2', '\x2', '\x53E', '\x53C', '\x3', '\x2', 
		'\x2', '\x2', '\x53E', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x541', 
		'\x3', '\x2', '\x2', '\x2', '\x540', '\x53A', '\x3', '\x2', '\x2', '\x2', 
		'\x540', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x540', '\x541', '\x3', 
		'\x2', '\x2', '\x2', '\x541', '\x544', '\x3', '\x2', '\x2', '\x2', '\x542', 
		'\x543', '\a', 'M', '\x2', '\x2', '\x543', '\x545', '\x5', '\x48A', '\x246', 
		'\x2', '\x544', '\x542', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', 
		'\x3', '\x2', '\x2', '\x2', '\x545', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x546', '\x547', '\a', '\x95', '\x2', '\x2', '\x547', '\x549', '\x5', 
		'\x312', '\x18A', '\x2', '\x548', '\x546', '\x3', '\x2', '\x2', '\x2', 
		'\x548', '\x549', '\x3', '\x2', '\x2', '\x2', '\x549', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x54A', '\x54B', '\a', '\x122', '\x2', '\x2', '\x54B', 
		'\x54C', '\a', '\xDB', '\x2', '\x2', '\x54C', '\x54D', '\x5', '\x43C', 
		'\x21F', '\x2', '\x54D', '\x54E', '\a', '\x6', '\x2', '\x2', '\x54E', 
		'\x54F', '\a', '\x25D', '\x2', '\x2', '\x54F', '\x551', '\x5', '\x48A', 
		'\x246', '\x2', '\x550', '\x552', '\x5', '\xE', '\b', '\x2', '\x551', 
		'\x550', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', '\x3', '\x2', '\x2', 
		'\x2', '\x552', '\r', '\x3', '\x2', '\x2', '\x2', '\x553', '\x55A', '\x5', 
		'\x10', '\t', '\x2', '\x554', '\x556', '\a', '\x307', '\x2', '\x2', '\x555', 
		'\x554', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x556', '\x557', '\x3', '\x2', '\x2', '\x2', '\x557', '\x559', 
		'\x5', '\x10', '\t', '\x2', '\x558', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x559', '\x55C', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x558', '\x3', 
		'\x2', '\x2', '\x2', '\x55A', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55B', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55A', '\x3', '\x2', '\x2', 
		'\x2', '\x55D', '\x561', '\x5', '\x8A', '\x46', '\x2', '\x55E', '\x561', 
		'\x5', '\x96', 'L', '\x2', '\x55F', '\x561', '\x5', '\x98', 'M', '\x2', 
		'\x560', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x560', '\x55E', '\x3', 
		'\x2', '\x2', '\x2', '\x560', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x561', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x562', '\x563', '\a', '\x1F9', '\x2', 
		'\x2', '\x563', '\x564', '\x5', '\x446', '\x224', '\x2', '\x564', '\x565', 
		'\x5', 'z', '>', '\x2', '\x565', '\x13', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x568', '\x5', '\x40A', '\x206', '\x2', '\x567', '\x566', '\x3', '\x2', 
		'\x2', '\x2', '\x567', '\x568', '\x3', '\x2', '\x2', '\x2', '\x568', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\x6', '\v', '\t', '\x2', 
		'\x56A', '\x56C', '\a', '\xEA', '\x2', '\x2', '\x56B', '\x569', '\x3', 
		'\x2', '\x2', '\x2', '\x56B', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56D', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\a', '\x240', 
		'\x2', '\x2', '\x56E', '\x570', '\x5', '\x450', '\x229', '\x2', '\x56F', 
		'\x571', '\x5', '\x16', '\f', '\x2', '\x570', '\x56F', '\x3', '\x2', '\x2', 
		'\x2', '\x570', '\x571', '\x3', '\x2', '\x2', '\x2', '\x571', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x572', '\x575', '\x5', '\x18', '\r', '\x2', 
		'\x573', '\x576', '\x5', '\x3BC', '\x1DF', '\x2', '\x574', '\x576', '\x5', 
		'\x34', '\x1B', '\x2', '\x575', '\x573', '\x3', '\x2', '\x2', '\x2', '\x575', 
		'\x574', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', '\x3', '\x2', '\x2', 
		'\x2', '\x576', '\x580', '\x3', '\x2', '\x2', '\x2', '\x577', '\x580', 
		'\x5', '\x3BC', '\x1DF', '\x2', '\x578', '\x580', '\x5', '\x34', '\x1B', 
		'\x2', '\x579', '\x57A', '\x5', '\x1A', '\xE', '\x2', '\x57A', '\x57B', 
		'\a', '\x307', '\x2', '\x2', '\x57B', '\x57D', '\x3', '\x2', '\x2', '\x2', 
		'\x57C', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57D', '\x3', 
		'\x2', '\x2', '\x2', '\x57D', '\x57E', '\x3', '\x2', '\x2', '\x2', '\x57E', 
		'\x580', '\x5', '\x1C', '\xF', '\x2', '\x57F', '\x572', '\x3', '\x2', 
		'\x2', '\x2', '\x57F', '\x577', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\x57F', '\x57C', '\x3', '\x2', '\x2', '\x2', 
		'\x580', '\x17', '\x3', '\x2', '\x2', '\x2', '\x581', '\x589', '\x5', 
		'\x1A', '\xE', '\x2', '\x582', '\x583', '\x5', '\x1A', '\xE', '\x2', '\x583', 
		'\x584', '\a', '\x307', '\x2', '\x2', '\x584', '\x586', '\x3', '\x2', 
		'\x2', '\x2', '\x585', '\x582', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x587', '\x3', '\x2', '\x2', '\x2', 
		'\x587', '\x589', '\x5', ' ', '\x11', '\x2', '\x588', '\x581', '\x3', 
		'\x2', '\x2', '\x2', '\x588', '\x585', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58F', '\x5', '\"', '\x12', 
		'\x2', '\x58B', '\x58C', '\a', '\x307', '\x2', '\x2', '\x58C', '\x58E', 
		'\x5', '\"', '\x12', '\x2', '\x58D', '\x58B', '\x3', '\x2', '\x2', '\x2', 
		'\x58E', '\x591', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x58D', '\x3', 
		'\x2', '\x2', '\x2', '\x58F', '\x590', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x591', '\x58F', '\x3', '\x2', '\x2', 
		'\x2', '\x592', '\x593', '\a', '\x8F', '\x2', '\x2', '\x593', '\x59A', 
		'\a', '\x23E', '\x2', '\x2', '\x594', '\x595', '\a', '\xEC', '\x2', '\x2', 
		'\x595', '\x59A', '\a', '\x23E', '\x2', '\x2', '\x596', '\x59A', '\x5', 
		'\x1E', '\x10', '\x2', '\x597', '\x598', '\x6', '\xF', '\n', '\x2', '\x598', 
		'\x59A', '\t', '\x2', '\x2', '\x2', '\x599', '\x592', '\x3', '\x2', '\x2', 
		'\x2', '\x599', '\x594', '\x3', '\x2', '\x2', '\x2', '\x599', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x597', '\x3', '\x2', '\x2', '\x2', 
		'\x59A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59C', '\a', '\x6', 
		'\x2', '\x2', '\x59C', '\x59E', '\a', '\x197', '\x2', '\x2', '\x59D', 
		'\x59F', '\x5', '\x40C', '\x207', '\x2', '\x59E', '\x59D', '\x3', '\x2', 
		'\x2', '\x2', '\x59E', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A3', 
		'\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A4', '\x5', '\x3C4', '\x1E3', 
		'\x2', '\x5A1', '\x5A2', '\a', '\x196', '\x2', '\x2', '\x5A2', '\x5A4', 
		'\x5', '\x478', '\x23D', '\x2', '\x5A3', '\x5A0', '\x3', '\x2', '\x2', 
		'\x2', '\x5A3', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5FC', 
		'\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A6', '\a', '\x96', '\x2', '\x2', 
		'\x5A6', '\x5A7', '\a', '\x197', '\x2', '\x2', '\x5A7', '\x5FC', '\x5', 
		'\x46C', '\x237', '\x2', '\x5A8', '\x5A9', '\a', '\x1B8', '\x2', '\x2', 
		'\x5A9', '\x5AB', '\a', '\x197', '\x2', '\x2', '\x5AA', '\x5AC', '\x5', 
		'\x40C', '\x207', '\x2', '\x5AB', '\x5AA', '\x3', '\x2', '\x2', '\x2', 
		'\x5AB', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AD', '\x3', 
		'\x2', '\x2', '\x2', '\x5AD', '\x5FC', '\x5', '\x36', '\x1C', '\x2', '\x5AE', 
		'\x5AF', '\a', '\x186', '\x2', '\x2', '\x5AF', '\x5B1', '\a', '\x197', 
		'\x2', '\x2', '\x5B0', '\x5B2', '\x5', '\x40C', '\x207', '\x2', '\x5B1', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B5', 
		'\x5', '\x36', '\x1C', '\x2', '\x5B4', '\x5B6', '\x5', '\x40C', '\x207', 
		'\x2', '\x5B5', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5B6', 
		'\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5FC', '\x3', '\x2', '\x2', '\x2', 
		'\x5B7', '\x5B8', '\a', '\x10', '\x2', '\x2', '\x5B8', '\x5BA', '\a', 
		'\x197', '\x2', '\x2', '\x5B9', '\x5BB', '\x5', '\x40C', '\x207', '\x2', 
		'\x5BA', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BB', '\x3', 
		'\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BC', 
		'\x5FC', '\x5', '\x36', '\x1C', '\x2', '\x5BD', '\x5BE', '\a', '@', '\x2', 
		'\x2', '\x5BE', '\x5BF', '\a', '\x197', '\x2', '\x2', '\x5BF', '\x5C3', 
		'\x5', '\x36', '\x1C', '\x2', '\x5C0', '\x5C2', '\x5', '\x23A', '\x11E', 
		'\x2', '\x5C1', '\x5C0', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C5', 
		'\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C1', '\x3', '\x2', '\x2', '\x2', 
		'\x5C3', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5C5', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C6', 
		'\x5C7', '\a', '\x1C9', '\x2', '\x2', '\x5C7', '\x5C9', '\a', '\x197', 
		'\x2', '\x2', '\x5C8', '\x5CA', '\x5', '\x40C', '\x207', '\x2', '\x5C9', 
		'\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CA', '\x3', '\x2', '\x2', 
		'\x2', '\x5CA', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CF', 
		'\x5', '\x36', '\x1C', '\x2', '\x5CC', '\x5CE', '\x5', '\x23C', '\x11F', 
		'\x2', '\x5CD', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5D1', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5CD', '\x3', '\x2', '\x2', '\x2', 
		'\x5CF', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5D1', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5D2', 
		'\x5D3', '\a', '\x45', '\x2', '\x2', '\x5D3', '\x5D5', '\a', '\x197', 
		'\x2', '\x2', '\x5D4', '\x5D6', '\x5', '\x40C', '\x207', '\x2', '\x5D5', 
		'\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x5D6', '\x3', '\x2', '\x2', 
		'\x2', '\x5D6', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5FC', 
		'\x5', '\x478', '\x23D', '\x2', '\x5D8', '\x5D9', '\a', '\x257', '\x2', 
		'\x2', '\x5D9', '\x5DA', '\a', '\x197', '\x2', '\x2', '\x5DA', '\x5FC', 
		'\x5', '\x36', '\x1C', '\x2', '\x5DB', '\x5DC', '\a', '\x1C8', '\x2', 
		'\x2', '\x5DC', '\x5DE', '\a', '\x197', '\x2', '\x2', '\x5DD', '\x5DF', 
		'\x5', '\x40C', '\x207', '\x2', '\x5DE', '\x5DD', '\x3', '\x2', '\x2', 
		'\x2', '\x5DE', '\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E0', '\x5E1', '\x5', '\x46C', '\x237', 
		'\x2', '\x5E1', '\x5E2', '\a', '\xFA', '\x2', '\x2', '\x5E2', '\x5E3', 
		'\x5', '\x3C4', '\x1E3', '\x2', '\x5E3', '\x5E5', '\x3', '\x2', '\x2', 
		'\x2', '\x5E4', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E5', 
		'\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5FC', '\x3', '\x2', '\x2', '\x2', 
		'\x5E6', '\x5E7', '\a', '\xAE', '\x2', '\x2', '\x5E7', '\x5E8', '\a', 
		'\x197', '\x2', '\x2', '\x5E8', '\x5E9', '\x5', '\x46A', '\x236', '\x2', 
		'\x5E9', '\x5EA', '\a', '\x287', '\x2', '\x2', '\x5EA', '\x5EB', '\a', 
		'\x240', '\x2', '\x2', '\x5EB', '\x5ED', '\x5', '\x450', '\x229', '\x2', 
		'\x5EC', '\x5EE', '\x5', '\x32', '\x1A', '\x2', '\x5ED', '\x5EC', '\x3', 
		'\x2', '\x2', '\x2', '\x5ED', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EE', 
		'\x5FC', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x6', '\x10', 
		'\v', '\x2', '\x5F0', '\x5F1', '\a', '\x8F', '\x2', '\x2', '\x5F1', '\x5F2', 
		'\a', '\x197', '\x2', '\x2', '\x5F2', '\x5F3', '\x5', '\x36', '\x1C', 
		'\x2', '\x5F3', '\x5F4', '\a', '\x23E', '\x2', '\x2', '\x5F4', '\x5FC', 
		'\x3', '\x2', '\x2', '\x2', '\x5F5', '\x5F6', '\x6', '\x10', '\f', '\x2', 
		'\x5F6', '\x5F7', '\a', '\xEC', '\x2', '\x2', '\x5F7', '\x5F8', '\a', 
		'\x197', '\x2', '\x2', '\x5F8', '\x5F9', '\x5', '\x36', '\x1C', '\x2', 
		'\x5F9', '\x5FA', '\a', '\x23E', '\x2', '\x2', '\x5FA', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5FB', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x5FB', 
		'\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5A8', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5B7', 
		'\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5BD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FB', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5D2', '\x3', 
		'\x2', '\x2', '\x2', '\x5FB', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5FB', 
		'\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5E6', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5F5', 
		'\x3', '\x2', '\x2', '\x2', '\x5FC', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x600', '\x5', '$', '\x13', '\x2', '\x5FE', '\x600', '\x5', 
		'\x3B0', '\x1D9', '\x2', '\x5FF', '\x5FD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FF', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x600', '\x609', '\x3', 
		'\x2', '\x2', '\x2', '\x601', '\x605', '\a', '\x307', '\x2', '\x2', '\x602', 
		'\x606', '\x5', '$', '\x13', '\x2', '\x603', '\x606', '\x5', '\"', '\x12', 
		'\x2', '\x604', '\x606', '\x5', '\x3B0', '\x1D9', '\x2', '\x605', '\x602', 
		'\x3', '\x2', '\x2', '\x2', '\x605', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x605', '\x604', '\x3', '\x2', '\x2', '\x2', '\x606', '\x608', '\x3', 
		'\x2', '\x2', '\x2', '\x607', '\x601', '\x3', '\x2', '\x2', '\x2', '\x608', 
		'\x60B', '\x3', '\x2', '\x2', '\x2', '\x609', '\x607', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x60A', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x60B', '\x609', '\x3', '\x2', '\x2', '\x2', '\x60C', 
		'\x610', '\x5', ',', '\x17', '\x2', '\x60D', '\x610', '\x5', '.', '\x18', 
		'\x2', '\x60E', '\x610', '\x5', '\x32', '\x1A', '\x2', '\x60F', '\x60C', 
		'\x3', '\x2', '\x2', '\x2', '\x60F', '\x60D', '\x3', '\x2', '\x2', '\x2', 
		'\x60F', '\x60E', '\x3', '\x2', '\x2', '\x2', '\x610', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x611', '\x613', '\a', '\x6', '\x2', '\x2', '\x612', '\x614', 
		'\a', 'J', '\x2', '\x2', '\x613', '\x612', '\x3', '\x2', '\x2', '\x2', 
		'\x613', '\x614', '\x3', '\x2', '\x2', '\x2', '\x614', '\x621', '\x3', 
		'\x2', '\x2', '\x2', '\x615', '\x616', '\x5', '\x46A', '\x236', '\x2', 
		'\x616', '\x618', '\x5', '\x36E', '\x1B8', '\x2', '\x617', '\x619', '\x5', 
		'\x364', '\x1B3', '\x2', '\x618', '\x617', '\x3', '\x2', '\x2', '\x2', 
		'\x618', '\x619', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61B', '\x3', 
		'\x2', '\x2', '\x2', '\x61A', '\x61C', '\x5', '&', '\x14', '\x2', '\x61B', 
		'\x61A', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x61C', '\x3', '\x2', '\x2', 
		'\x2', '\x61C', '\x622', '\x3', '\x2', '\x2', '\x2', '\x61D', '\x61E', 
		'\a', '\x30A', '\x2', '\x2', '\x61E', '\x61F', '\x5', 'V', ',', '\x2', 
		'\x61F', '\x620', '\a', '\x30B', '\x2', '\x2', '\x620', '\x622', '\x3', 
		'\x2', '\x2', '\x2', '\x621', '\x615', '\x3', '\x2', '\x2', '\x2', '\x621', 
		'\x61D', '\x3', '\x2', '\x2', '\x2', '\x622', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x623', '\x624', '\a', '\x6', '\x2', '\x2', '\x624', '\x6A3', 
		'\x5', '\x36A', '\x1B6', '\x2', '\x625', '\x627', '\a', '\x39', '\x2', 
		'\x2', '\x626', '\x628', '\a', 'J', '\x2', '\x2', '\x627', '\x626', '\x3', 
		'\x2', '\x2', '\x2', '\x627', '\x628', '\x3', '\x2', '\x2', '\x2', '\x628', 
		'\x629', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62A', '\x5', '\x414', 
		'\x20B', '\x2', '\x62A', '\x62B', '\x5', '\x46A', '\x236', '\x2', '\x62B', 
		'\x62D', '\x5', '\x36E', '\x1B8', '\x2', '\x62C', '\x62E', '\x5', '&', 
		'\x14', '\x2', '\x62D', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62D', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x62F', '\x631', '\a', '\x15E', '\x2', '\x2', '\x630', '\x632', 
		'\a', 'J', '\x2', '\x2', '\x631', '\x630', '\x3', '\x2', '\x2', '\x2', 
		'\x631', '\x632', '\x3', '\x2', '\x2', '\x2', '\x632', '\x633', '\x3', 
		'\x2', '\x2', '\x2', '\x633', '\x634', '\x5', '\x414', '\x20B', '\x2', 
		'\x634', '\x636', '\x5', '\x36E', '\x1B8', '\x2', '\x635', '\x637', '\x5', 
		'&', '\x14', '\x2', '\x636', '\x635', '\x3', '\x2', '\x2', '\x2', '\x636', 
		'\x637', '\x3', '\x2', '\x2', '\x2', '\x637', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x638', '\x655', '\a', '\x96', '\x2', '\x2', '\x639', '\x63B', 
		'\a', 'J', '\x2', '\x2', '\x63A', '\x639', '\x3', '\x2', '\x2', '\x2', 
		'\x63A', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63C', '\x3', 
		'\x2', '\x2', '\x2', '\x63C', '\x63E', '\x5', '\x414', '\x20B', '\x2', 
		'\x63D', '\x63F', '\x5', '(', '\x15', '\x2', '\x63E', '\x63D', '\x3', 
		'\x2', '\x2', '\x2', '\x63E', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x63F', 
		'\x656', '\x3', '\x2', '\x2', '\x2', '\x640', '\x641', '\a', '\xC9', '\x2', 
		'\x2', '\x641', '\x648', '\a', '\x10B', '\x2', '\x2', '\x642', '\x643', 
		'\x6', '\x13', '\r', '\x2', '\x643', '\x649', '\x5', '\x414', '\x20B', 
		'\x2', '\x644', '\x646', '\x6', '\x13', '\xE', '\x2', '\x645', '\x647', 
		'\x5', '\x414', '\x20B', '\x2', '\x646', '\x645', '\x3', '\x2', '\x2', 
		'\x2', '\x646', '\x647', '\x3', '\x2', '\x2', '\x2', '\x647', '\x649', 
		'\x3', '\x2', '\x2', '\x2', '\x648', '\x642', '\x3', '\x2', '\x2', '\x2', 
		'\x648', '\x644', '\x3', '\x2', '\x2', '\x2', '\x649', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x64A', '\x64B', '\a', '\x1A6', '\x2', '\x2', '\x64B', 
		'\x656', '\a', '\x10B', '\x2', '\x2', '\x64C', '\x64D', '\x5', '\x198', 
		'\xCD', '\x2', '\x64D', '\x64E', '\x5', '\x41E', '\x210', '\x2', '\x64E', 
		'\x656', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', '\x6', '\x13', 
		'\xF', '\x2', '\x650', '\x651', '\a', '@', '\x2', '\x2', '\x651', '\x656', 
		'\x5', '\x46A', '\x236', '\x2', '\x652', '\x653', '\x6', '\x13', '\x10', 
		'\x2', '\x653', '\x654', '\a', 'X', '\x2', '\x2', '\x654', '\x656', '\x5', 
		'\x46A', '\x236', '\x2', '\x655', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x655', '\x640', '\x3', '\x2', '\x2', '\x2', '\x655', '\x64A', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x655', 
		'\x64F', '\x3', '\x2', '\x2', '\x2', '\x655', '\x652', '\x3', '\x2', '\x2', 
		'\x2', '\x656', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x657', '\x658', 
		'\a', '\x8E', '\x2', '\x2', '\x658', '\x6A3', '\a', '\x109', '\x2', '\x2', 
		'\x659', '\x65A', '\a', '\x9E', '\x2', '\x2', '\x65A', '\x6A3', '\a', 
		'\x109', '\x2', '\x2', '\x65B', '\x65D', '\a', '\r', '\x2', '\x2', '\x65C', 
		'\x65E', '\a', 'J', '\x2', '\x2', '\x65D', '\x65C', '\x3', '\x2', '\x2', 
		'\x2', '\x65D', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', 
		'\x3', '\x2', '\x2', '\x2', '\x65F', '\x669', '\x5', '\x414', '\x20B', 
		'\x2', '\x660', '\x661', '\a', '\x1FC', '\x2', '\x2', '\x661', '\x665', 
		'\a', '\x82', '\x2', '\x2', '\x662', '\x663', '\x6', '\x13', '\x11', '\x2', 
		'\x663', '\x666', '\x5', '\x304', '\x183', '\x2', '\x664', '\x666', '\x5', 
		'\x480', '\x241', '\x2', '\x665', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x665', '\x664', '\x3', '\x2', '\x2', '\x2', '\x666', '\x66A', '\x3', 
		'\x2', '\x2', '\x2', '\x667', '\x668', '\a', '\x96', '\x2', '\x2', '\x668', 
		'\x66A', '\a', '\x82', '\x2', '\x2', '\x669', '\x660', '\x3', '\x2', '\x2', 
		'\x2', '\x669', '\x667', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x6A3', 
		'\x3', '\x2', '\x2', '\x2', '\x66B', '\x66C', '\x6', '\x13', '\x12', '\x2', 
		'\x66C', '\x66D', '\a', '\r', '\x2', '\x2', '\x66D', '\x66E', '\a', '\xEE', 
		'\x2', '\x2', '\x66E', '\x66F', '\x5', '\x41E', '\x210', '\x2', '\x66F', 
		'\x670', '\x5', '\x38C', '\x1C7', '\x2', '\x670', '\x6A3', '\x3', '\x2', 
		'\x2', '\x2', '\x671', '\x672', '\x6', '\x13', '\x13', '\x2', '\x672', 
		'\x673', '\a', '\r', '\x2', '\x2', '\x673', '\x674', '\a', '@', '\x2', 
		'\x2', '\x674', '\x675', '\x5', '\x46A', '\x236', '\x2', '\x675', '\x676', 
		'\x5', '\x368', '\x1B5', '\x2', '\x676', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x677', '\x678', '\x6', '\x13', '\x14', '\x2', '\x678', '\x679', 
		'\a', '\r', '\x2', '\x2', '\x679', '\x67A', '\a', 'X', '\x2', '\x2', '\x67A', 
		'\x67B', '\x5', '\x46A', '\x236', '\x2', '\x67B', '\x67C', '\x5', '\x368', 
		'\x1B5', '\x2', '\x67C', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x67D', 
		'\x67E', '\x6', '\x13', '\x15', '\x2', '\x67E', '\x67F', '\a', '\x1C7', 
		'\x2', '\x2', '\x67F', '\x680', '\a', 'J', '\x2', '\x2', '\x680', '\x681', 
		'\x5', '\x414', '\x20B', '\x2', '\x681', '\x682', '\a', '\x250', '\x2', 
		'\x2', '\x682', '\x683', '\x5', '\x46A', '\x236', '\x2', '\x683', '\x6A3', 
		'\x3', '\x2', '\x2', '\x2', '\x684', '\x686', '\a', '\x1C7', '\x2', '\x2', 
		'\x685', '\x687', '\t', '\x3', '\x2', '\x2', '\x686', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x686', '\x687', '\x3', '\x2', '\x2', '\x2', '\x687', 
		'\x688', '\x3', '\x2', '\x2', '\x2', '\x688', '\x6A3', '\x5', '\x44A', 
		'\x226', '\x2', '\x689', '\x68A', '\x6', '\x13', '\x16', '\x2', '\x68A', 
		'\x68B', '\a', '\x1C7', '\x2', '\x2', '\x68B', '\x68C', '\x5', '\x198', 
		'\xCD', '\x2', '\x68C', '\x68D', '\x5', '\x41E', '\x210', '\x2', '\x68D', 
		'\x68E', '\a', '\x250', '\x2', '\x2', '\x68E', '\x68F', '\x5', '\x41C', 
		'\x20F', '\x2', '\x68F', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x690', 
		'\x691', '\a', '`', '\x2', '\x2', '\x691', '\x692', '\a', '\x250', '\x2', 
		'\x2', '\x692', '\x696', '\x5', '\x2F8', '\x17D', '\x2', '\x693', '\x694', 
		'\x6', '\x13', '\x17', '\x2', '\x694', '\x697', '\a', '\x82', '\x2', '\x2', 
		'\x695', '\x697', '\x5', '\x3AA', '\x1D6', '\x2', '\x696', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x696', '\x695', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x699', '\x3', '\x2', '\x2', '\x2', '\x698', '\x69A', '\x5', '\x3DC', 
		'\x1EF', '\x2', '\x699', '\x698', '\x3', '\x2', '\x2', '\x2', '\x699', 
		'\x69A', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x69B', '\x6A3', '\a', '\xC8', '\x2', '\x2', '\x69C', '\x69D', 
		'\a', '\x18B', '\x2', '\x2', '\x69D', '\x69E', '\a', '/', '\x2', '\x2', 
		'\x69E', '\x6A3', '\x5', '*', '\x16', '\x2', '\x69F', '\x6A0', '\x6', 
		'\x13', '\x18', '\x2', '\x6A0', '\x6A1', '\a', '\x269', '\x2', '\x2', 
		'\x6A1', '\x6A3', '\a', '\x195', '\x2', '\x2', '\x6A2', '\x611', '\x3', 
		'\x2', '\x2', '\x2', '\x6A2', '\x623', '\x3', '\x2', '\x2', '\x2', '\x6A2', 
		'\x625', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x62F', '\x3', '\x2', '\x2', 
		'\x2', '\x6A2', '\x638', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x657', 
		'\x3', '\x2', '\x2', '\x2', '\x6A2', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\x6A2', '\x65B', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x6A2', '\x671', '\x3', '\x2', '\x2', '\x2', '\x6A2', 
		'\x677', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x67D', '\x3', '\x2', '\x2', 
		'\x2', '\x6A2', '\x684', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x689', 
		'\x3', '\x2', '\x2', '\x2', '\x6A2', '\x690', '\x3', '\x2', '\x2', '\x2', 
		'\x6A2', '\x69B', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x69C', '\x3', 
		'\x2', '\x2', '\x2', '\x6A2', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x6A3', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\a', '\b', '\x2', 
		'\x2', '\x6A5', '\x6A8', '\x5', '\x46A', '\x236', '\x2', '\x6A6', '\x6A8', 
		'\a', '\xC1', '\x2', '\x2', '\x6A7', '\x6A4', '\x3', '\x2', '\x2', '\x2', 
		'\x6A7', '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A8', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x6A9', '\x6AA', '\t', '\x4', '\x2', '\x2', '\x6AA', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6AD', '\x5', '\x46A', '\x236', 
		'\x2', '\x6AC', '\x6AE', '\x5', '\x14C', '\xA7', '\x2', '\x6AD', '\x6AC', 
		'\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6AE', '\x3', '\x2', '\x2', '\x2', 
		'\x6AE', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6AF', '\x6B0', '\a', 
		'\x307', '\x2', '\x2', '\x6B0', '\x6B2', '\x5', '\x46A', '\x236', '\x2', 
		'\x6B1', '\x6B3', '\x5', '\x14C', '\xA7', '\x2', '\x6B2', '\x6B1', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B3', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6AF', '\x3', '\x2', '\x2', 
		'\x2', '\x6B5', '\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B4', 
		'\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B7', '\x3', '\x2', '\x2', '\x2', 
		'\x6B7', '+', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6B6', '\x3', '\x2', 
		'\x2', '\x2', '\x6B9', '\x6BB', '\a', '\v', '\x2', '\x2', '\x6BA', '\x6BC', 
		'\a', '\x2F0', '\x2', '\x2', '\x6BB', '\x6BA', '\x3', '\x2', '\x2', '\x2', 
		'\x6BB', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BF', '\x3', 
		'\x2', '\x2', '\x2', '\x6BD', '\x6C0', '\a', '\x82', '\x2', '\x2', '\x6BE', 
		'\x6C0', '\x5', '\x46A', '\x236', '\x2', '\x6BF', '\x6BD', '\x3', '\x2', 
		'\x2', '\x2', '\x6BF', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6C0', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\a', '\x121', '\x2', '\x2', 
		'\x6C2', '\x6C4', '\a', '\x2F0', '\x2', '\x2', '\x6C3', '\x6C2', '\x3', 
		'\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C4', 
		'\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C8', '\a', '\x82', '\x2', 
		'\x2', '\x6C6', '\x6C8', '\x5', '\x46A', '\x236', '\x2', '\x6C7', '\x6C5', 
		'\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', 
		'\x6C8', '/', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CB', '\x5', ',', 
		'\x17', '\x2', '\x6CA', '\x6CC', '\x5', '.', '\x18', '\x2', '\x6CB', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6CB', '\x6CC', '\x3', '\x2', '\x2', '\x2', 
		'\x6CC', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6CF', '\x5', 
		'.', '\x18', '\x2', '\x6CE', '\x6D0', '\x5', ',', '\x17', '\x2', '\x6CF', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6CF', '\x6D0', '\x3', '\x2', '\x2', 
		'\x2', '\x6D0', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6C9', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6CD', '\x3', '\x2', '\x2', '\x2', 
		'\x6D2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x6', 
		'\x1A', '\x19', '\x2', '\x6D4', '\x6D5', '\t', '\x5', '\x2', '\x2', '\x6D5', 
		'\x6D6', '\a', '\x273', '\x2', '\x2', '\x6D6', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x6D7', '\x6D8', '\a', '\x1C6', '\x2', '\x2', '\x6D8', '\x6D9', 
		'\a', '\x195', '\x2', '\x2', '\x6D9', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DD', '\a', '\f', '\x2', '\x2', '\x6DB', '\x6DD', '\x5', '\x46C', 
		'\x237', '\x2', '\x6DC', '\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6DC', 
		'\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6DF', '\a', '\x23E', '\x2', '\x2', '\x6DF', '\x701', 
		'\x5', '\x438', '\x21D', '\x2', '\x6E0', '\x6E1', '\t', '\x6', '\x2', 
		'\x2', '\x6E1', '\x6E2', '\a', 'q', '\x2', '\x2', '\x6E2', '\x6E4', '\x5', 
		'\x48A', '\x246', '\x2', '\x6E3', '\x6E5', '\x5', '@', '!', '\x2', '\x6E4', 
		'\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E5', '\x3', '\x2', '\x2', 
		'\x2', '\x6E5', '\x702', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6FA', 
		'\x6', '\x1D', '\x1A', '\x2', '\x6E7', '\x6FB', '\x3', '\x2', '\x2', '\x2', 
		'\x6E8', '\x6E9', '\a', '\x39', '\x2', '\x2', '\x6E9', '\x6EA', '\a', 
		'q', '\x2', '\x2', '\x6EA', '\x6F5', '\x5', '\x48A', '\x246', '\x2', '\x6EB', 
		'\x6F2', '\x5', '\x44', '#', '\x2', '\x6EC', '\x6EE', '\a', '\x307', '\x2', 
		'\x2', '\x6ED', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6ED', '\x6EE', 
		'\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6EF', '\x3', '\x2', '\x2', '\x2', 
		'\x6EF', '\x6F1', '\x5', '\x44', '#', '\x2', '\x6F0', '\x6ED', '\x3', 
		'\x2', '\x2', '\x2', '\x6F1', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F2', 
		'\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F3', '\x3', '\x2', '\x2', 
		'\x2', '\x6F3', '\x6F6', '\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F2', 
		'\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6EB', '\x3', '\x2', '\x2', '\x2', 
		'\x6F5', '\x6F6', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6FB', '\x3', 
		'\x2', '\x2', '\x2', '\x6F7', '\x6FB', '\t', '\a', '\x2', '\x2', '\x6F8', 
		'\x6F9', '\a', '\x175', '\x2', '\x2', '\x6F9', '\x6FB', '\a', '\x3', '\x2', 
		'\x2', '\x6FA', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6E8', 
		'\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6F7', '\x3', '\x2', '\x2', '\x2', 
		'\x6FA', '\x6F8', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x702', '\x3', 
		'\x2', '\x2', '\x2', '\x6FC', '\x6FD', '\a', '\x1C7', '\x2', '\x2', '\x6FD', 
		'\x6FE', '\a', '\x250', '\x2', '\x2', '\x6FE', '\x702', '\x5', '\x46A', 
		'\x236', '\x2', '\x6FF', '\x700', '\x6', '\x1D', '\x1B', '\x2', '\x700', 
		'\x702', '\x5', '@', '!', '\x2', '\x701', '\x6E0', '\x3', '\x2', '\x2', 
		'\x2', '\x701', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x701', '\x6FC', 
		'\x3', '\x2', '\x2', '\x2', '\x701', '\x6FF', '\x3', '\x2', '\x2', '\x2', 
		'\x702', '\x39', '\x3', '\x2', '\x2', '\x2', '\x703', '\x704', '\a', '\x25F', 
		'\x2', '\x2', '\x704', '\x705', '\a', '\x23E', '\x2', '\x2', '\x705', 
		'\x706', '\x5', '\x438', '\x21D', '\x2', '\x706', '\x707', '\a', '\x1FC', 
		'\x2', '\x2', '\x707', '\x709', '\t', '\b', '\x2', '\x2', '\x708', '\x70A', 
		'\x5', '<', '\x1F', '\x2', '\x709', '\x708', '\x3', '\x2', '\x2', '\x2', 
		'\x709', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x70A', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x70B', '\x712', '\x5', '>', ' ', '\x2', '\x70C', '\x70E', 
		'\a', '\x307', '\x2', '\x2', '\x70D', '\x70C', '\x3', '\x2', '\x2', '\x2', 
		'\x70D', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x70E', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x70F', '\x711', '\x5', '>', ' ', '\x2', '\x710', 
		'\x70D', '\x3', '\x2', '\x2', '\x2', '\x711', '\x714', '\x3', '\x2', '\x2', 
		'\x2', '\x712', '\x710', '\x3', '\x2', '\x2', '\x2', '\x712', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x713', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x714', '\x712', '\x3', '\x2', '\x2', '\x2', '\x715', '\x716', '\x5', 
		'\x96', 'L', '\x2', '\x716', '?', '\x3', '\x2', '\x2', '\x2', '\x717', 
		'\x71E', '\x5', '\x42', '\"', '\x2', '\x718', '\x71A', '\a', '\x307', 
		'\x2', '\x2', '\x719', '\x718', '\x3', '\x2', '\x2', '\x2', '\x719', '\x71A', 
		'\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', '\x3', '\x2', '\x2', '\x2', 
		'\x71B', '\x71D', '\x5', '\x42', '\"', '\x2', '\x71C', '\x719', '\x3', 
		'\x2', '\x2', '\x2', '\x71D', '\x720', '\x3', '\x2', '\x2', '\x2', '\x71E', 
		'\x71C', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x71F', '\x3', '\x2', '\x2', 
		'\x2', '\x71F', '\x41', '\x3', '\x2', '\x2', '\x2', '\x720', '\x71E', 
		'\x3', '\x2', '\x2', '\x2', '\x721', '\x723', '\a', '\xF0', '\x2', '\x2', 
		'\x722', '\x724', '\a', '\x2F0', '\x2', '\x2', '\x723', '\x722', '\x3', 
		'\x2', '\x2', '\x2', '\x723', '\x724', '\x3', '\x2', '\x2', '\x2', '\x724', 
		'\x725', '\x3', '\x2', '\x2', '\x2', '\x725', '\x72C', '\x5', '\x4A4', 
		'\x253', '\x2', '\x726', '\x72C', '\x5', '\x8E', 'H', '\x2', '\x727', 
		'\x72C', '\x5', '\x90', 'I', '\x2', '\x728', '\x72C', '\x5', '\x96', 'L', 
		'\x2', '\x729', '\x72C', '\x5', '\x98', 'M', '\x2', '\x72A', '\x72C', 
		'\x5', '\x9E', 'P', '\x2', '\x72B', '\x721', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x726', '\x3', '\x2', '\x2', '\x2', '\x72B', '\x727', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x728', '\x3', '\x2', '\x2', '\x2', '\x72B', 
		'\x729', '\x3', '\x2', '\x2', '\x2', '\x72B', '\x72A', '\x3', '\x2', '\x2', 
		'\x2', '\x72C', '\x43', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72F', 
		'\a', '\xF0', '\x2', '\x2', '\x72E', '\x730', '\a', '\x2F0', '\x2', '\x2', 
		'\x72F', '\x72E', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x730', '\x731', '\x3', '\x2', '\x2', '\x2', '\x731', 
		'\x735', '\x5', '\x4A4', '\x253', '\x2', '\x732', '\x735', '\x5', '\x8E', 
		'H', '\x2', '\x733', '\x735', '\x5', '\x90', 'I', '\x2', '\x734', '\x72D', 
		'\x3', '\x2', '\x2', '\x2', '\x734', '\x732', '\x3', '\x2', '\x2', '\x2', 
		'\x734', '\x733', '\x3', '\x2', '\x2', '\x2', '\x735', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x736', '\x738', '\x5', '\xA4', 'S', '\x2', '\x737', 
		'\x736', '\x3', '\x2', '\x2', '\x2', '\x737', '\x738', '\x3', '\x2', '\x2', 
		'\x2', '\x738', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x739', '\x73B', 
		'\x5', '\x3D2', '\x1EA', '\x2', '\x73A', '\x739', '\x3', '\x2', '\x2', 
		'\x2', '\x73A', '\x73B', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73D', 
		'\x3', '\x2', '\x2', '\x2', '\x73C', '\x73E', '\x5', '\xA6', 'T', '\x2', 
		'\x73D', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73D', '\x73E', '\x3', 
		'\x2', '\x2', '\x2', '\x73E', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x73F', 
		'\x740', '\a', '\x27E', '\x2', '\x2', '\x740', '\x741', '\x5', '\x434', 
		'\x21B', '\x2', '\x741', '\x742', '\x5', 'H', '%', '\x2', '\x742', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x743', '\x745', '\x5', '\x416', '\x20C', 
		'\x2', '\x744', '\x743', '\x3', '\x2', '\x2', '\x2', '\x744', '\x745', 
		'\x3', '\x2', '\x2', '\x2', '\x745', '\x746', '\x3', '\x2', '\x2', '\x2', 
		'\x746', '\x747', '\a', '\x13', '\x2', '\x2', '\x747', '\x748', '\x5', 
		'J', '&', '\x2', '\x748', 'I', '\x3', '\x2', '\x2', '\x2', '\x749', '\x74B', 
		'\x5', '\\', '/', '\x2', '\x74A', '\x74C', '\x5', 'L', '\'', '\x2', '\x74B', 
		'\x74A', '\x3', '\x2', '\x2', '\x2', '\x74B', '\x74C', '\x3', '\x2', '\x2', 
		'\x2', '\x74C', 'K', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74F', '\a', 
		'\x287', '\x2', '\x2', '\x74E', '\x750', '\t', '\t', '\x2', '\x2', '\x74F', 
		'\x74E', '\x3', '\x2', '\x2', '\x2', '\x74F', '\x750', '\x3', '\x2', '\x2', 
		'\x2', '\x750', '\x751', '\x3', '\x2', '\x2', '\x2', '\x751', '\x752', 
		'\a', '@', '\x2', '\x2', '\x752', '\x753', '\a', '\x189', '\x2', '\x2', 
		'\x753', 'M', '\x3', '\x2', '\x2', '\x2', '\x754', '\x767', '\a', '\x63', 
		'\x2', '\x2', '\x755', '\x768', '\x5', 'P', ')', '\x2', '\x756', '\x768', 
		'\x5', 'T', '+', '\x2', '\x757', '\x768', '\x5', '\x62', '\x32', '\x2', 
		'\x758', '\x768', '\x5', '`', '\x31', '\x2', '\x759', '\x768', '\x5', 
		'\x64', '\x33', '\x2', '\x75A', '\x768', '\x5', 'r', ':', '\x2', '\x75B', 
		'\x768', '\x5', '\xA0', 'Q', '\x2', '\x75C', '\x768', '\x5', '\xA8', 'U', 
		'\x2', '\x75D', '\x768', '\x5', 'l', '\x37', '\x2', '\x75E', '\x768', 
		'\x5', 'x', '=', '\x2', '\x75F', '\x768', '\x5', '~', '@', '\x2', '\x760', 
		'\x768', '\x5', '\xAC', 'W', '\x2', '\x761', '\x762', '\x6', '(', '\x1C', 
		'\x2', '\x762', '\x768', '\x5', '\xAE', 'X', '\x2', '\x763', '\x764', 
		'\x6', '(', '\x1D', '\x2', '\x764', '\x768', '\x5', '\xB0', 'Y', '\x2', 
		'\x765', '\x766', '\x6', '(', '\x1E', '\x2', '\x766', '\x768', '\x5', 
		'\x80', '\x41', '\x2', '\x767', '\x755', '\x3', '\x2', '\x2', '\x2', '\x767', 
		'\x756', '\x3', '\x2', '\x2', '\x2', '\x767', '\x757', '\x3', '\x2', '\x2', 
		'\x2', '\x767', '\x758', '\x3', '\x2', '\x2', '\x2', '\x767', '\x759', 
		'\x3', '\x2', '\x2', '\x2', '\x767', '\x75A', '\x3', '\x2', '\x2', '\x2', 
		'\x767', '\x75B', '\x3', '\x2', '\x2', '\x2', '\x767', '\x75C', '\x3', 
		'\x2', '\x2', '\x2', '\x767', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x767', 
		'\x75E', '\x3', '\x2', '\x2', '\x2', '\x767', '\x75F', '\x3', '\x2', '\x2', 
		'\x2', '\x767', '\x760', '\x3', '\x2', '\x2', '\x2', '\x767', '\x761', 
		'\x3', '\x2', '\x2', '\x2', '\x767', '\x763', '\x3', '\x2', '\x2', '\x2', 
		'\x767', '\x765', '\x3', '\x2', '\x2', '\x2', '\x768', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x769', '\x76B', '\a', 'o', '\x2', '\x2', '\x76A', '\x76C', 
		'\x5', '\x3D6', '\x1EC', '\x2', '\x76B', '\x76A', '\x3', '\x2', '\x2', 
		'\x2', '\x76B', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', 
		'\x3', '\x2', '\x2', '\x2', '\x76D', '\x771', '\x5', '\x422', '\x212', 
		'\x2', '\x76E', '\x770', '\x5', 'R', '*', '\x2', '\x76F', '\x76E', '\x3', 
		'\x2', '\x2', '\x2', '\x770', '\x773', '\x3', '\x2', '\x2', '\x2', '\x771', 
		'\x76F', '\x3', '\x2', '\x2', '\x2', '\x771', '\x772', '\x3', '\x2', '\x2', 
		'\x2', '\x772', 'Q', '\x3', '\x2', '\x2', '\x2', '\x773', '\x771', '\x3', 
		'\x2', '\x2', '\x2', '\x774', '\x779', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x775', '\x779', '\x5', '\x3B6', '\x1DC', '\x2', '\x776', '\x777', '\x6', 
		'*', '\x1F', '\x2', '\x777', '\x779', '\x5', '\x3B8', '\x1DD', '\x2', 
		'\x778', '\x774', '\x3', '\x2', '\x2', '\x2', '\x778', '\x775', '\x3', 
		'\x2', '\x2', '\x2', '\x778', '\x776', '\x3', '\x2', '\x2', '\x2', '\x779', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x77C', '\a', '\x243', '\x2', 
		'\x2', '\x77B', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x77C', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x77D', '\x3', '\x2', '\x2', '\x2', 
		'\x77D', '\x77F', '\a', '\x240', '\x2', '\x2', '\x77E', '\x780', '\x5', 
		'\x3D6', '\x1EC', '\x2', '\x77F', '\x77E', '\x3', '\x2', '\x2', '\x2', 
		'\x77F', '\x780', '\x3', '\x2', '\x2', '\x2', '\x780', '\x781', '\x3', 
		'\x2', '\x2', '\x2', '\x781', '\x798', '\x5', '\x44A', '\x226', '\x2', 
		'\x782', '\x783', '\a', '\x30A', '\x2', '\x2', '\x783', '\x784', '\x5', 
		'V', ',', '\x2', '\x784', '\x785', '\a', '\x30B', '\x2', '\x2', '\x785', 
		'\x787', '\x3', '\x2', '\x2', '\x2', '\x786', '\x782', '\x3', '\x2', '\x2', 
		'\x2', '\x786', '\x787', '\x3', '\x2', '\x2', '\x2', '\x787', '\x789', 
		'\x3', '\x2', '\x2', '\x2', '\x788', '\x78A', '\x5', '\x3AE', '\x1D8', 
		'\x2', '\x789', '\x788', '\x3', '\x2', '\x2', '\x2', '\x789', '\x78A', 
		'\x3', '\x2', '\x2', '\x2', '\x78A', '\x78C', '\x3', '\x2', '\x2', '\x2', 
		'\x78B', '\x78D', '\x5', '\x3BC', '\x1DF', '\x2', '\x78C', '\x78B', '\x3', 
		'\x2', '\x2', '\x2', '\x78C', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x78D', 
		'\x78F', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x790', '\x5', 'Z', '.', 
		'\x2', '\x78F', '\x78E', '\x3', '\x2', '\x2', '\x2', '\x78F', '\x790', 
		'\x3', '\x2', '\x2', '\x2', '\x790', '\x799', '\x3', '\x2', '\x2', '\x2', 
		'\x791', '\x792', '\a', '\x115', '\x2', '\x2', '\x792', '\x799', '\x5', 
		'\x450', '\x229', '\x2', '\x793', '\x794', '\a', '\x30A', '\x2', '\x2', 
		'\x794', '\x795', '\a', '\x115', '\x2', '\x2', '\x795', '\x796', '\x5', 
		'\x450', '\x229', '\x2', '\x796', '\x797', '\a', '\x30B', '\x2', '\x2', 
		'\x797', '\x799', '\x3', '\x2', '\x2', '\x2', '\x798', '\x786', '\x3', 
		'\x2', '\x2', '\x2', '\x798', '\x791', '\x3', '\x2', '\x2', '\x2', '\x798', 
		'\x793', '\x3', '\x2', '\x2', '\x2', '\x799', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x79A', '\x79F', '\x5', 'X', '-', '\x2', '\x79B', '\x79C', '\a', 
		'\x307', '\x2', '\x2', '\x79C', '\x79E', '\x5', 'X', '-', '\x2', '\x79D', 
		'\x79B', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x7A1', '\x3', '\x2', '\x2', 
		'\x2', '\x79F', '\x79D', '\x3', '\x2', '\x2', '\x2', '\x79F', '\x7A0', 
		'\x3', '\x2', '\x2', '\x2', '\x7A0', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x7A1', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A5', '\x5', 
		'\x362', '\x1B2', '\x2', '\x7A3', '\x7A5', '\x5', '\x36A', '\x1B6', '\x2', 
		'\x7A4', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A3', '\x3', 
		'\x2', '\x2', '\x2', '\x7A5', 'Y', '\x3', '\x2', '\x2', '\x2', '\x7A6', 
		'\x7A8', '\t', '\n', '\x2', '\x2', '\x7A7', '\x7A6', '\x3', '\x2', '\x2', 
		'\x2', '\x7A7', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A8', '\x7AA', 
		'\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7AB', '\a', '\x13', '\x2', '\x2', 
		'\x7AA', '\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\x3', 
		'\x2', '\x2', '\x2', '\x7AB', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AC', 
		'\x7AD', '\x5', '\\', '/', '\x2', '\x7AD', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x7AE', '\x7B1', '\x5', '\x110', '\x89', '\x2', '\x7AF', '\x7B1', '\x5', 
		'\x114', '\x8B', '\x2', '\x7B0', '\x7AE', '\x3', '\x2', '\x2', '\x2', 
		'\x7B0', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\x7B1', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x7B2', '\x7B6', '\a', '\x63', '\x2', '\x2', '\x7B3', '\x7B7', 
		'\x5', '`', '\x31', '\x2', '\x7B4', '\x7B7', '\x5', '\x62', '\x32', '\x2', 
		'\x7B5', '\x7B7', '\x5', '\x64', '\x33', '\x2', '\x7B6', '\x7B3', '\x3', 
		'\x2', '\x2', '\x2', '\x7B6', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B9', '\x3', '\x2', '\x2', 
		'\x2', '\x7B8', '\x7BA', '\a', '\x308', '\x2', '\x2', '\x7B9', '\x7B8', 
		'\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BA', '\x3', '\x2', '\x2', '\x2', 
		'\x7BA', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7BB', '\x7BC', '\a', 
		'\x2', '\x2', '\x3', '\x7BC', '_', '\x3', '\x2', '\x2', '\x2', '\x7BD', 
		'\x7BF', '\x5', '\x3D2', '\x1EA', '\x2', '\x7BE', '\x7BD', '\x3', '\x2', 
		'\x2', '\x2', '\x7BE', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', 
		'\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7C1', '\a', '\x1A8', '\x2', '\x2', 
		'\x7C1', '\x7C2', '\x5', '\x426', '\x214', '\x2', '\x7C2', '\x7CB', '\a', 
		'\x30A', '\x2', '\x2', '\x7C3', '\x7C8', '\x5', '\x3D8', '\x1ED', '\x2', 
		'\x7C4', '\x7C5', '\a', '\x307', '\x2', '\x2', '\x7C5', '\x7C7', '\x5', 
		'\x3D8', '\x1ED', '\x2', '\x7C6', '\x7C4', '\x3', '\x2', '\x2', '\x2', 
		'\x7C7', '\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7C6', '\x3', 
		'\x2', '\x2', '\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C9', 
		'\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7C8', '\x3', '\x2', '\x2', 
		'\x2', '\x7CB', '\x7C3', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CC', 
		'\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', 
		'\x7CD', '\x7D1', '\a', '\x30B', '\x2', '\x2', '\x7CE', '\x7D0', '\x5', 
		'\x66', '\x34', '\x2', '\x7CF', '\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7D0', 
		'\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7CF', '\x3', '\x2', '\x2', 
		'\x2', '\x7D1', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D4', 
		'\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D1', '\x3', '\x2', '\x2', '\x2', 
		'\x7D4', '\x7D5', '\x5', '\x312', '\x18A', '\x2', '\x7D5', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x7D6', '\x7D8', '\x5', '\x3D2', '\x1EA', '\x2', 
		'\x7D7', '\x7D6', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\x3', 
		'\x2', '\x2', '\x2', '\x7D8', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7D9', 
		'\x7DA', '\a', '\xD0', '\x2', '\x2', '\x7DA', '\x7DB', '\x5', '\x42A', 
		'\x216', '\x2', '\x7DB', '\x7E4', '\a', '\x30A', '\x2', '\x2', '\x7DC', 
		'\x7E1', '\x5', '\x3DA', '\x1EE', '\x2', '\x7DD', '\x7DE', '\a', '\x307', 
		'\x2', '\x2', '\x7DE', '\x7E0', '\x5', '\x3DA', '\x1EE', '\x2', '\x7DF', 
		'\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7E3', '\x3', '\x2', '\x2', 
		'\x2', '\x7E1', '\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E2', 
		'\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E5', '\x3', '\x2', '\x2', '\x2', 
		'\x7E3', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E4', '\x7DC', '\x3', 
		'\x2', '\x2', '\x2', '\x7E4', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E5', 
		'\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E6', '\x7E7', '\a', '\x30B', 
		'\x2', '\x2', '\x7E7', '\x7E8', '\a', '\x1DC', '\x2', '\x2', '\x7E8', 
		'\x7EC', '\x5', '\x3DE', '\x1F0', '\x2', '\x7E9', '\x7EB', '\x5', '\x66', 
		'\x34', '\x2', '\x7EA', '\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7EB', 
		'\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7EA', '\x3', '\x2', '\x2', 
		'\x2', '\x7EC', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7ED', '\x7EF', 
		'\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EC', '\x3', '\x2', '\x2', '\x2', 
		'\x7EF', '\x7F0', '\x5', '\x312', '\x18A', '\x2', '\x7F0', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7F3', '\a', '\n', '\x2', '\x2', '\x7F2', 
		'\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F3', '\x3', '\x2', '\x2', 
		'\x2', '\x7F3', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', 
		'\a', '\xD0', '\x2', '\x2', '\x7F5', '\x7F6', '\x5', '\x442', '\x222', 
		'\x2', '\x7F6', '\x7F7', '\a', '\x1DC', '\x2', '\x2', '\x7F7', '\x7F8', 
		'\t', '\v', '\x2', '\x2', '\x7F8', '\x7F9', '\a', '\x20A', '\x2', '\x2', 
		'\x7F9', '\x7FA', '\x5', '\x48A', '\x246', '\x2', '\x7FA', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x7FB', '\x801', '\x5', 'j', '\x36', '\x2', '\x7FC', 
		'\x7FE', '\a', '\x175', '\x2', '\x2', '\x7FD', '\x7FC', '\x3', '\x2', 
		'\x2', '\x2', '\x7FD', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FF', 
		'\x3', '\x2', '\x2', '\x2', '\x7FF', '\x801', '\a', '\x8B', '\x2', '\x2', 
		'\x800', '\x7FB', '\x3', '\x2', '\x2', '\x2', '\x800', '\x7FD', '\x3', 
		'\x2', '\x2', '\x2', '\x801', 'g', '\x3', '\x2', '\x2', '\x2', '\x802', 
		'\x804', '\x5', '\x66', '\x34', '\x2', '\x803', '\x802', '\x3', '\x2', 
		'\x2', '\x2', '\x804', '\x805', '\x3', '\x2', '\x2', '\x2', '\x805', '\x803', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x806', '\x3', '\x2', '\x2', '\x2', 
		'\x806', 'i', '\x3', '\x2', '\x2', '\x2', '\x807', '\x808', '\a', 'M', 
		'\x2', '\x2', '\x808', '\x819', '\x5', '\x48A', '\x246', '\x2', '\x809', 
		'\x80A', '\a', '\x10D', '\x2', '\x2', '\x80A', '\x819', '\a', '\x21B', 
		'\x2', '\x2', '\x80B', '\x80C', '\a', '\x177', '\x2', '\x2', '\x80C', 
		'\x819', '\a', '\x21B', '\x2', '\x2', '\x80D', '\x80E', '\a', '\\', '\x2', 
		'\x2', '\x80E', '\x819', '\a', '\x21B', '\x2', '\x2', '\x80F', '\x810', 
		'\a', '\x1B3', '\x2', '\x2', '\x810', '\x811', '\a', '\x21B', '\x2', '\x2', 
		'\x811', '\x819', '\a', 'r', '\x2', '\x2', '\x812', '\x813', '\a', '\x15D', 
		'\x2', '\x2', '\x813', '\x814', '\a', '\x21B', '\x2', '\x2', '\x814', 
		'\x819', '\a', 'r', '\x2', '\x2', '\x815', '\x816', '\a', '\x21B', '\x2', 
		'\x2', '\x816', '\x817', '\a', '\x1F2', '\x2', '\x2', '\x817', '\x819', 
		'\t', '\f', '\x2', '\x2', '\x818', '\x807', '\x3', '\x2', '\x2', '\x2', 
		'\x818', '\x809', '\x3', '\x2', '\x2', '\x2', '\x818', '\x80B', '\x3', 
		'\x2', '\x2', '\x2', '\x818', '\x80D', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x80F', '\x3', '\x2', '\x2', '\x2', '\x818', '\x812', '\x3', '\x2', '\x2', 
		'\x2', '\x818', '\x815', '\x3', '\x2', '\x2', '\x2', '\x819', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x81A', '\x81C', '\x5', '\x40A', '\x206', '\x2', 
		'\x81B', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x81B', '\x81C', '\x3', 
		'\x2', '\x2', '\x2', '\x81C', '\x846', '\x3', '\x2', '\x2', '\x2', '\x81D', 
		'\x81F', '\a', '\x263', '\x2', '\x2', '\x81E', '\x81D', '\x3', '\x2', 
		'\x2', '\x2', '\x81E', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x820', 
		'\x3', '\x2', '\x2', '\x2', '\x820', '\x829', '\a', '\xEE', '\x2', '\x2', 
		'\x821', '\x822', '\x6', '\x37', ' ', '\x2', '\x822', '\x824', '\x5', 
		'\x41C', '\x20F', '\x2', '\x823', '\x825', '\x5', '\x38E', '\x1C8', '\x2', 
		'\x824', '\x823', '\x3', '\x2', '\x2', '\x2', '\x824', '\x825', '\x3', 
		'\x2', '\x2', '\x2', '\x825', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x826', 
		'\x828', '\x5', 'n', '\x38', '\x2', '\x827', '\x826', '\x3', '\x2', '\x2', 
		'\x2', '\x827', '\x828', '\x3', '\x2', '\x2', '\x2', '\x828', '\x82A', 
		'\x3', '\x2', '\x2', '\x2', '\x829', '\x821', '\x3', '\x2', '\x2', '\x2', 
		'\x829', '\x827', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x82F', '\x5', 'p', '\x39', '\x2', '\x82C', 
		'\x82E', '\x5', '\x388', '\x1C5', '\x2', '\x82D', '\x82C', '\x3', '\x2', 
		'\x2', '\x2', '\x82E', '\x831', '\x3', '\x2', '\x2', '\x2', '\x82F', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x82F', '\x830', '\x3', '\x2', '\x2', '\x2', 
		'\x830', '\x847', '\x3', '\x2', '\x2', '\x2', '\x831', '\x82F', '\x3', 
		'\x2', '\x2', '\x2', '\x832', '\x833', '\a', '\xCF', '\x2', '\x2', '\x833', 
		'\x834', '\a', '\xEE', '\x2', '\x2', '\x834', '\x835', '\x5', '\x41C', 
		'\x20F', '\x2', '\x835', '\x839', '\x5', 'p', '\x39', '\x2', '\x836', 
		'\x838', '\x5', '\x390', '\x1C9', '\x2', '\x837', '\x836', '\x3', '\x2', 
		'\x2', '\x2', '\x838', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x839', '\x837', 
		'\x3', '\x2', '\x2', '\x2', '\x839', '\x83A', '\x3', '\x2', '\x2', '\x2', 
		'\x83A', '\x847', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x839', '\x3', 
		'\x2', '\x2', '\x2', '\x83C', '\x83D', '\a', '\x20D', '\x2', '\x2', '\x83D', 
		'\x83E', '\a', '\xEE', '\x2', '\x2', '\x83E', '\x83F', '\x5', '\x41C', 
		'\x20F', '\x2', '\x83F', '\x843', '\x5', 'p', '\x39', '\x2', '\x840', 
		'\x842', '\x5', '\x392', '\x1CA', '\x2', '\x841', '\x840', '\x3', '\x2', 
		'\x2', '\x2', '\x842', '\x845', '\x3', '\x2', '\x2', '\x2', '\x843', '\x841', 
		'\x3', '\x2', '\x2', '\x2', '\x843', '\x844', '\x3', '\x2', '\x2', '\x2', 
		'\x844', '\x847', '\x3', '\x2', '\x2', '\x2', '\x845', '\x843', '\x3', 
		'\x2', '\x2', '\x2', '\x846', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x846', 
		'\x832', '\x3', '\x2', '\x2', '\x2', '\x846', '\x83C', '\x3', '\x2', '\x2', 
		'\x2', '\x847', '\x849', '\x3', '\x2', '\x2', '\x2', '\x848', '\x84A', 
		'\x5', '\x30', '\x19', '\x2', '\x849', '\x848', '\x3', '\x2', '\x2', '\x2', 
		'\x849', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x84A', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x84B', '\x84E', '\x5', '\x41C', '\x20F', '\x2', '\x84C', 
		'\x84D', '\a', '\x26F', '\x2', '\x2', '\x84D', '\x84F', '\x5', '\x386', 
		'\x1C4', '\x2', '\x84E', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84E', 
		'\x84F', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x855', '\x3', '\x2', '\x2', 
		'\x2', '\x850', '\x851', '\x5', '\x41C', '\x20F', '\x2', '\x851', '\x852', 
		'\a', '\x259', '\x2', '\x2', '\x852', '\x853', '\x5', '\x386', '\x1C4', 
		'\x2', '\x853', '\x855', '\x3', '\x2', '\x2', '\x2', '\x854', '\x84B', 
		'\x3', '\x2', '\x2', '\x2', '\x854', '\x850', '\x3', '\x2', '\x2', '\x2', 
		'\x855', 'o', '\x3', '\x2', '\x2', '\x2', '\x856', '\x857', '\a', '\x181', 
		'\x2', '\x2', '\x857', '\x858', '\x5', '\x450', '\x229', '\x2', '\x858', 
		'\x859', '\x5', '\x384', '\x1C3', '\x2', '\x859', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x85A', '\x85B', '\a', '\x122', '\x2', '\x2', '\x85B', '\x85C', 
		'\a', '\xDB', '\x2', '\x2', '\x85C', '\x85D', '\x5', '\x43A', '\x21E', 
		'\x2', '\x85D', '\x85E', '\a', '\x6', '\x2', '\x2', '\x85E', '\x85F', 
		'\t', '\r', '\x2', '\x2', '\x85F', '\x861', '\x5', '\x48A', '\x246', '\x2', 
		'\x860', '\x862', '\x5', 't', ';', '\x2', '\x861', '\x860', '\x3', '\x2', 
		'\x2', '\x2', '\x861', '\x862', '\x3', '\x2', '\x2', '\x2', '\x862', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x863', '\x86A', '\x5', 'v', '<', '\x2', 
		'\x864', '\x866', '\a', '\x307', '\x2', '\x2', '\x865', '\x864', '\x3', 
		'\x2', '\x2', '\x2', '\x865', '\x866', '\x3', '\x2', '\x2', '\x2', '\x866', 
		'\x867', '\x3', '\x2', '\x2', '\x2', '\x867', '\x869', '\x5', 'v', '<', 
		'\x2', '\x868', '\x865', '\x3', '\x2', '\x2', '\x2', '\x869', '\x86C', 
		'\x3', '\x2', '\x2', '\x2', '\x86A', '\x868', '\x3', '\x2', '\x2', '\x2', 
		'\x86A', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x86B', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x86C', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x86D', '\x874', 
		'\x5', '\x8A', '\x46', '\x2', '\x86E', '\x874', '\x5', '\x8C', 'G', '\x2', 
		'\x86F', '\x874', '\x5', '\x94', 'K', '\x2', '\x870', '\x874', '\x5', 
		'\x96', 'L', '\x2', '\x871', '\x874', '\x5', '\x98', 'M', '\x2', '\x872', 
		'\x874', '\x5', '\x9A', 'N', '\x2', '\x873', '\x86D', '\x3', '\x2', '\x2', 
		'\x2', '\x873', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x873', '\x86F', 
		'\x3', '\x2', '\x2', '\x2', '\x873', '\x870', '\x3', '\x2', '\x2', '\x2', 
		'\x873', '\x871', '\x3', '\x2', '\x2', '\x2', '\x873', '\x872', '\x3', 
		'\x2', '\x2', '\x2', '\x874', 'w', '\x3', '\x2', '\x2', '\x2', '\x875', 
		'\x876', '\a', '\x1F9', '\x2', '\x2', '\x876', '\x877', '\x5', '\x444', 
		'\x223', '\x2', '\x877', '\x878', '\a', '\xC9', '\x2', '\x2', '\x878', 
		'\x879', '\a', 'r', '\x2', '\x2', '\x879', '\x87A', '\a', '\x28A', '\x2', 
		'\x2', '\x87A', '\x87B', '\x5', '\x49E', '\x250', '\x2', '\x87B', '\x87C', 
		'\x5', 'z', '>', '\x2', '\x87C', 'y', '\x3', '\x2', '\x2', '\x2', '\x87D', 
		'\x87E', '\a', '\x188', '\x2', '\x2', '\x87E', '\x87F', '\a', '\x30A', 
		'\x2', '\x2', '\x87F', '\x884', '\x5', '|', '?', '\x2', '\x880', '\x881', 
		'\a', '\x307', '\x2', '\x2', '\x881', '\x883', '\x5', '|', '?', '\x2', 
		'\x882', '\x880', '\x3', '\x2', '\x2', '\x2', '\x883', '\x886', '\x3', 
		'\x2', '\x2', '\x2', '\x884', '\x882', '\x3', '\x2', '\x2', '\x2', '\x884', 
		'\x885', '\x3', '\x2', '\x2', '\x2', '\x885', '\x887', '\x3', '\x2', '\x2', 
		'\x2', '\x886', '\x884', '\x3', '\x2', '\x2', '\x2', '\x887', '\x888', 
		'\a', '\x30B', '\x2', '\x2', '\x888', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x889', '\x88A', '\a', '\xE2', '\x2', '\x2', '\x88A', '\x898', '\x5', 
		'\x48A', '\x246', '\x2', '\x88B', '\x88C', '\a', 'o', '\x2', '\x2', '\x88C', 
		'\x898', '\x5', '\x48A', '\x246', '\x2', '\x88D', '\x88E', '\a', '\x26C', 
		'\x2', '\x2', '\x88E', '\x898', '\x5', '\x48A', '\x246', '\x2', '\x88F', 
		'\x890', '\a', '\x198', '\x2', '\x2', '\x890', '\x898', '\x5', '\x48A', 
		'\x246', '\x2', '\x891', '\x892', '\a', '\x209', '\x2', '\x2', '\x892', 
		'\x898', '\x5', '\x48A', '\x246', '\x2', '\x893', '\x894', '\a', '\x190', 
		'\x2', '\x2', '\x894', '\x898', '\x5', '\x48A', '\x246', '\x2', '\x895', 
		'\x896', '\a', '\x19F', '\x2', '\x2', '\x896', '\x898', '\x5', '\x476', 
		'\x23C', '\x2', '\x897', '\x889', '\x3', '\x2', '\x2', '\x2', '\x897', 
		'\x88B', '\x3', '\x2', '\x2', '\x2', '\x897', '\x88D', '\x3', '\x2', '\x2', 
		'\x2', '\x897', '\x88F', '\x3', '\x2', '\x2', '\x2', '\x897', '\x891', 
		'\x3', '\x2', '\x2', '\x2', '\x897', '\x893', '\x3', '\x2', '\x2', '\x2', 
		'\x897', '\x895', '\x3', '\x2', '\x2', '\x2', '\x898', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x899', '\x89A', '\a', '\x23E', '\x2', '\x2', '\x89A', 
		'\x89B', '\x5', '\x436', '\x21C', '\x2', '\x89B', '\x8A0', '\x5', '\x82', 
		'\x42', '\x2', '\x89C', '\x89D', '\a', '\x26E', '\x2', '\x2', '\x89D', 
		'\x89E', '\a', '\x122', '\x2', '\x2', '\x89E', '\x89F', '\a', '\xDB', 
		'\x2', '\x2', '\x89F', '\x8A1', '\x5', '\x43C', '\x21F', '\x2', '\x8A0', 
		'\x89C', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', '\x3', '\x2', '\x2', 
		'\x2', '\x8A1', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A4', 
		'\x5', '\x86', '\x44', '\x2', '\x8A3', '\x8A2', '\x3', '\x2', '\x2', '\x2', 
		'\x8A3', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A4', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x8A5', '\x8A6', '\a', '\x25F', '\x2', '\x2', '\x8A6', 
		'\x8A7', '\a', '\x23E', '\x2', '\x2', '\x8A7', '\x8A8', '\x5', '\x436', 
		'\x21C', '\x2', '\x8A8', '\x8A9', '\a', '\x6', '\x2', '\x2', '\x8A9', 
		'\x8AB', '\x5', '\x84', '\x43', '\x2', '\x8AA', '\x8AC', '\x5', '<', '\x1F', 
		'\x2', '\x8AB', '\x8AA', '\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AC', 
		'\x3', '\x2', '\x2', '\x2', '\x8AC', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x8AD', '\x8B0', '\x6', '\x42', '!', '\x2', '\x8AE', '\x8AF', '\a', '\x6', 
		'\x2', '\x2', '\x8AF', '\x8B1', '\x5', '\x84', '\x43', '\x2', '\x8B0', 
		'\x8AE', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8B1', '\x3', '\x2', '\x2', 
		'\x2', '\x8B1', '\x8B5', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', 
		'\a', '\x6', '\x2', '\x2', '\x8B3', '\x8B5', '\x5', '\x84', '\x43', '\x2', 
		'\x8B4', '\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8B4', '\x8B2', '\x3', 
		'\x2', '\x2', '\x2', '\x8B5', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8B6', 
		'\x8B7', '\a', 'q', '\x2', '\x2', '\x8B7', '\x8B8', '\x5', '\x48A', '\x246', 
		'\x2', '\x8B8', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8C0', 
		'\x5', '\x88', '\x45', '\x2', '\x8BA', '\x8BC', '\a', '\x307', '\x2', 
		'\x2', '\x8BB', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8BB', '\x8BC', 
		'\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x8BD', '\x8BF', '\x5', '\x88', '\x45', '\x2', '\x8BE', '\x8BB', '\x3', 
		'\x2', '\x2', '\x2', '\x8BF', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C0', 
		'\x8BE', '\x3', '\x2', '\x2', '\x2', '\x8C0', '\x8C1', '\x3', '\x2', '\x2', 
		'\x2', '\x8C1', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x8C0', 
		'\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8D0', '\x5', '\x8A', '\x46', '\x2', 
		'\x8C4', '\x8D0', '\x5', '\x8E', 'H', '\x2', '\x8C5', '\x8D0', '\x5', 
		'\x90', 'I', '\x2', '\x8C6', '\x8D0', '\x5', '\x92', 'J', '\x2', '\x8C7', 
		'\x8D0', '\x5', '\x94', 'K', '\x2', '\x8C8', '\x8D0', '\x5', '\x96', 'L', 
		'\x2', '\x8C9', '\x8D0', '\x5', '\x98', 'M', '\x2', '\x8CA', '\x8D0', 
		'\x5', '\x9A', 'N', '\x2', '\x8CB', '\x8CC', '\x6', '\x45', '\"', '\x2', 
		'\x8CC', '\x8D0', '\x5', '\x9C', 'O', '\x2', '\x8CD', '\x8CE', '\x6', 
		'\x45', '#', '\x2', '\x8CE', '\x8D0', '\x5', '\x9E', 'P', '\x2', '\x8CF', 
		'\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C4', '\x3', '\x2', '\x2', 
		'\x2', '\x8CF', '\x8C5', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C6', 
		'\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C7', '\x3', '\x2', '\x2', '\x2', 
		'\x8CF', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8C9', '\x3', 
		'\x2', '\x2', '\x2', '\x8CF', '\x8CA', '\x3', '\x2', '\x2', '\x2', '\x8CF', 
		'\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8CD', '\x3', '\x2', '\x2', 
		'\x2', '\x8D0', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\x8D3', 
		'\a', '\xF0', '\x2', '\x2', '\x8D2', '\x8D4', '\a', '\x2F0', '\x2', '\x2', 
		'\x8D3', '\x8D2', '\x3', '\x2', '\x2', '\x2', '\x8D3', '\x8D4', '\x3', 
		'\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', 
		'\x8D6', '\x5', '\x4A4', '\x253', '\x2', '\x8D6', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D7', '\x8D9', '\t', '\xE', '\x2', '\x2', '\x8D8', '\x8DA', 
		'\a', '\x2F0', '\x2', '\x2', '\x8D9', '\x8D8', '\x3', '\x2', '\x2', '\x2', 
		'\x8D9', '\x8DA', '\x3', '\x2', '\x2', '\x2', '\x8DA', '\x8DB', '\x3', 
		'\x2', '\x2', '\x2', '\x8DB', '\x8DC', '\x5', '\x4A4', '\x253', '\x2', 
		'\x8DC', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DF', '\a', '\x19', 
		'\x2', '\x2', '\x8DE', '\x8E0', '\a', '\x2F0', '\x2', '\x2', '\x8DF', 
		'\x8DE', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8E0', '\x3', '\x2', '\x2', 
		'\x2', '\x8E0', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E2', 
		'\x5', '\x4A4', '\x253', '\x2', '\x8E2', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8E3', '\x8E5', '\a', '\x146', '\x2', '\x2', '\x8E4', '\x8E6', 
		'\a', '\x2F0', '\x2', '\x2', '\x8E5', '\x8E4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E5', '\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8E7', '\x3', 
		'\x2', '\x2', '\x2', '\x8E7', '\x8E8', '\x5', '\x4A4', '\x253', '\x2', 
		'\x8E8', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8E9', '\x8EB', '\a', '\xB7', 
		'\x2', '\x2', '\x8EA', '\x8EC', '\a', '\x2F0', '\x2', '\x2', '\x8EB', 
		'\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\x3', '\x2', '\x2', 
		'\x2', '\x8EC', '\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8EE', 
		'\x5', '\x4A4', '\x253', '\x2', '\x8EE', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x8EF', '\x8F1', '\a', '\x172', '\x2', '\x2', '\x8F0', '\x8F2', 
		'\a', '\x2F0', '\x2', '\x2', '\x8F1', '\x8F0', '\x3', '\x2', '\x2', '\x2', 
		'\x8F1', '\x8F2', '\x3', '\x2', '\x2', '\x2', '\x8F2', '\x8F3', '\x3', 
		'\x2', '\x2', '\x2', '\x8F3', '\x8F4', '\x5', '\x478', '\x23D', '\x2', 
		'\x8F4', '\x95', '\x3', '\x2', '\x2', '\x2', '\x8F5', '\x8F7', '\a', '\x22B', 
		'\x2', '\x2', '\x8F6', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8F7', 
		'\x3', '\x2', '\x2', '\x2', '\x8F7', '\x8F8', '\x3', '\x2', '\x2', '\x2', 
		'\x8F8', '\x8FA', '\a', '\xA5', '\x2', '\x2', '\x8F9', '\x8FB', '\a', 
		'\x2F0', '\x2', '\x2', '\x8FA', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8FA', 
		'\x8FB', '\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8FC', '\x3', '\x2', '\x2', 
		'\x2', '\x8FC', '\x8FD', '\x5', '\x448', '\x225', '\x2', '\x8FD', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FF', '\t', '\xF', '\x2', '\x2', 
		'\x8FF', '\x99', '\x3', '\x2', '\x2', '\x2', '\x900', '\x902', '\a', 'M', 
		'\x2', '\x2', '\x901', '\x903', '\a', '\x2F0', '\x2', '\x2', '\x902', 
		'\x901', '\x3', '\x2', '\x2', '\x2', '\x902', '\x903', '\x3', '\x2', '\x2', 
		'\x2', '\x903', '\x904', '\x3', '\x2', '\x2', '\x2', '\x904', '\x905', 
		'\x5', '\x48A', '\x246', '\x2', '\x905', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x906', '\x908', '\a', '\xBF', '\x2', '\x2', '\x907', '\x909', 
		'\a', '\x2F0', '\x2', '\x2', '\x908', '\x907', '\x3', '\x2', '\x2', '\x2', 
		'\x908', '\x909', '\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', '\x3', 
		'\x2', '\x2', '\x2', '\x90A', '\x90B', '\x5', '\x4A4', '\x253', '\x2', 
		'\x90B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90E', '\a', '\xA0', 
		'\x2', '\x2', '\x90D', '\x90F', '\a', '\x2F0', '\x2', '\x2', '\x90E', 
		'\x90D', '\x3', '\x2', '\x2', '\x2', '\x90E', '\x90F', '\x3', '\x2', '\x2', 
		'\x2', '\x90F', '\x910', '\x3', '\x2', '\x2', '\x2', '\x910', '\x911', 
		'\x5', '\x484', '\x243', '\x2', '\x911', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x912', '\x914', '\x5', '\xA2', 'R', '\x2', '\x913', '\x912', 
		'\x3', '\x2', '\x2', '\x2', '\x913', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\x914', '\x916', '\x3', '\x2', '\x2', '\x2', '\x915', '\x917', '\x5', 
		'\x3D2', '\x1EA', '\x2', '\x916', '\x915', '\x3', '\x2', '\x2', '\x2', 
		'\x916', '\x917', '\x3', '\x2', '\x2', '\x2', '\x917', '\x919', '\x3', 
		'\x2', '\x2', '\x2', '\x918', '\x91A', '\x5', '\xA6', 'T', '\x2', '\x919', 
		'\x918', '\x3', '\x2', '\x2', '\x2', '\x919', '\x91A', '\x3', '\x2', '\x2', 
		'\x2', '\x91A', '\x91B', '\x3', '\x2', '\x2', '\x2', '\x91B', '\x91C', 
		'\a', '\x27E', '\x2', '\x2', '\x91C', '\x91D', '\x5', '\x432', '\x21A', 
		'\x2', '\x91D', '\x91E', '\x5', 'H', '%', '\x2', '\x91E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x91F', '\x920', '\a', '\x18C', '\x2', '\x2', '\x920', 
		'\x922', '\a', '\x1CC', '\x2', '\x2', '\x921', '\x923', '\x5', '\xA4', 
		'S', '\x2', '\x922', '\x921', '\x3', '\x2', '\x2', '\x2', '\x922', '\x923', 
		'\x3', '\x2', '\x2', '\x2', '\x923', '\x926', '\x3', '\x2', '\x2', '\x2', 
		'\x924', '\x926', '\x5', '\xA4', 'S', '\x2', '\x925', '\x91F', '\x3', 
		'\x2', '\x2', '\x2', '\x925', '\x924', '\x3', '\x2', '\x2', '\x2', '\x926', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x927', '\x928', '\a', '\v', '\x2', 
		'\x2', '\x928', '\x929', '\a', '\x2F0', '\x2', '\x2', '\x929', '\x92A', 
		'\t', '\x10', '\x2', '\x2', '\x92A', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x92B', '\x92C', '\a', '\x21B', '\x2', '\x2', '\x92C', '\x92D', '\a', 
		'\x1F2', '\x2', '\x2', '\x92D', '\x92E', '\t', '\f', '\x2', '\x2', '\x92E', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\x92F', '\x931', '\x5', '\x3D2', 
		'\x1EA', '\x2', '\x930', '\x92F', '\x3', '\x2', '\x2', '\x2', '\x930', 
		'\x931', '\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\x3', '\x2', '\x2', 
		'\x2', '\x932', '\x933', '\a', '\x254', '\x2', '\x2', '\x933', '\x934', 
		'\x5', '\x42E', '\x218', '\x2', '\x934', '\x935', '\t', '\x11', '\x2', 
		'\x2', '\x935', '\x936', '\t', '\x12', '\x2', '\x2', '\x936', '\x937', 
		'\a', '\x181', '\x2', '\x2', '\x937', '\x938', '\x5', '\x450', '\x229', 
		'\x2', '\x938', '\x939', '\a', '\xCA', '\x2', '\x2', '\x939', '\x93A', 
		'\a', '\x9B', '\x2', '\x2', '\x93A', '\x93C', '\a', '\x1E9', '\x2', '\x2', 
		'\x93B', '\x93D', '\x5', '\xAA', 'V', '\x2', '\x93C', '\x93B', '\x3', 
		'\x2', '\x2', '\x2', '\x93C', '\x93D', '\x3', '\x2', '\x2', '\x2', '\x93D', 
		'\x93E', '\x3', '\x2', '\x2', '\x2', '\x93E', '\x93F', '\x5', '\x312', 
		'\x18A', '\x2', '\x93F', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x940', 
		'\x941', '\x6', 'V', '$', '\x2', '\x941', '\x942', '\t', '\x13', '\x2', 
		'\x2', '\x942', '\x943', '\x5', '\x49E', '\x250', '\x2', '\x943', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x944', '\x946', '\x5', '\x3D2', '\x1EA', 
		'\x2', '\x945', '\x944', '\x3', '\x2', '\x2', '\x2', '\x945', '\x946', 
		'\x3', '\x2', '\x2', '\x2', '\x946', '\x947', '\x3', '\x2', '\x2', '\x2', 
		'\x947', '\x949', '\a', '\xAC', '\x2', '\x2', '\x948', '\x94A', '\x5', 
		'\x3D6', '\x1EC', '\x2', '\x949', '\x948', '\x3', '\x2', '\x2', '\x2', 
		'\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x94B', '\x3', 
		'\x2', '\x2', '\x2', '\x94B', '\x94C', '\x5', '\x43E', '\x220', '\x2', 
		'\x94C', '\x94D', '\a', '\x181', '\x2', '\x2', '\x94D', '\x94E', '\a', 
		'\x1EC', '\x2', '\x2', '\x94E', '\x955', '\x5', '\x360', '\x1B1', '\x2', 
		'\x94F', '\x950', '\a', '\x181', '\x2', '\x2', '\x950', '\x952', '\a', 
		'Q', '\x2', '\x2', '\x951', '\x953', '\a', '\x175', '\x2', '\x2', '\x952', 
		'\x951', '\x3', '\x2', '\x2', '\x2', '\x952', '\x953', '\x3', '\x2', '\x2', 
		'\x2', '\x953', '\x954', '\x3', '\x2', '\x2', '\x2', '\x954', '\x956', 
		'\a', '\x1A4', '\x2', '\x2', '\x955', '\x94F', '\x3', '\x2', '\x2', '\x2', 
		'\x955', '\x956', '\x3', '\x2', '\x2', '\x2', '\x956', '\x95D', '\x3', 
		'\x2', '\x2', '\x2', '\x957', '\x95E', '\a', '\x9E', '\x2', '\x2', '\x958', 
		'\x95B', '\a', '\x8E', '\x2', '\x2', '\x959', '\x95A', '\a', '\x181', 
		'\x2', '\x2', '\x95A', '\x95C', '\a', '\x204', '\x2', '\x2', '\x95B', 
		'\x959', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x95C', '\x3', '\x2', '\x2', 
		'\x2', '\x95C', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x95D', '\x957', 
		'\x3', '\x2', '\x2', '\x2', '\x95D', '\x958', '\x3', '\x2', '\x2', '\x2', 
		'\x95D', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x95E', '\x961', '\x3', 
		'\x2', '\x2', '\x2', '\x95F', '\x960', '\a', 'M', '\x2', '\x2', '\x960', 
		'\x962', '\x5', '\x48A', '\x246', '\x2', '\x961', '\x95F', '\x3', '\x2', 
		'\x2', '\x2', '\x961', '\x962', '\x3', '\x2', '\x2', '\x2', '\x962', '\x963', 
		'\x3', '\x2', '\x2', '\x2', '\x963', '\x964', '\a', '\x95', '\x2', '\x2', 
		'\x964', '\x965', '\x5', '\x312', '\x18A', '\x2', '\x965', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x966', '\x968', '\a', '\x295', '\x2', '\x2', '\x967', 
		'\x969', '\x5', '\x3D6', '\x1EC', '\x2', '\x968', '\x967', '\x3', '\x2', 
		'\x2', '\x2', '\x968', '\x969', '\x3', '\x2', '\x2', '\x2', '\x969', '\x96A', 
		'\x3', '\x2', '\x2', '\x2', '\x96A', '\x96B', '\x5', '\x232', '\x11A', 
		'\x2', '\x96B', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x96D', 
		'\a', '\x18C', '\x2', '\x2', '\x96D', '\x96E', '\a', '\x1CC', '\x2', '\x2', 
		'\x96E', '\x96F', '\a', '\x20D', '\x2', '\x2', '\x96F', '\x970', '\a', 
		'\x2D0', '\x2', '\x2', '\x970', '\x971', '\a', '\x2C8', '\x2', '\x2', 
		'\x971', '\x975', '\x5', '\x47C', '\x23F', '\x2', '\x972', '\x974', '\x5', 
		'\xB2', 'Z', '\x2', '\x973', '\x972', '\x3', '\x2', '\x2', '\x2', '\x974', 
		'\x977', '\x3', '\x2', '\x2', '\x2', '\x975', '\x973', '\x3', '\x2', '\x2', 
		'\x2', '\x975', '\x976', '\x3', '\x2', '\x2', '\x2', '\x976', '\x986', 
		'\x3', '\x2', '\x2', '\x2', '\x977', '\x975', '\x3', '\x2', '\x2', '\x2', 
		'\x978', '\x979', '\a', '\x20D', '\x2', '\x2', '\x979', '\x97A', '\a', 
		'\x2D0', '\x2', '\x2', '\x97A', '\x97C', '\a', '\x2C8', '\x2', '\x2', 
		'\x97B', '\x97D', '\x5', '\x3D6', '\x1EC', '\x2', '\x97C', '\x97B', '\x3', 
		'\x2', '\x2', '\x2', '\x97C', '\x97D', '\x3', '\x2', '\x2', '\x2', '\x97D', 
		'\x97E', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x982', '\x5', '\x47C', 
		'\x23F', '\x2', '\x97F', '\x981', '\x5', '\xB2', 'Z', '\x2', '\x980', 
		'\x97F', '\x3', '\x2', '\x2', '\x2', '\x981', '\x984', '\x3', '\x2', '\x2', 
		'\x2', '\x982', '\x980', '\x3', '\x2', '\x2', '\x2', '\x982', '\x983', 
		'\x3', '\x2', '\x2', '\x2', '\x983', '\x986', '\x3', '\x2', '\x2', '\x2', 
		'\x984', '\x982', '\x3', '\x2', '\x2', '\x2', '\x985', '\x96C', '\x3', 
		'\x2', '\x2', '\x2', '\x985', '\x978', '\x3', '\x2', '\x2', '\x2', '\x986', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x987', '\x988', '\a', '\x167', '\x2', 
		'\x2', '\x988', '\x989', '\a', '\x246', '\x2', '\x2', '\x989', '\x997', 
		'\x5', '\x48C', '\x247', '\x2', '\x98A', '\x98B', '\a', '\x2CD', '\x2', 
		'\x2', '\x98B', '\x98C', '\a', '\x246', '\x2', '\x2', '\x98C', '\x997', 
		'\x5', '\x48C', '\x247', '\x2', '\x98D', '\x98E', '\a', '\x2CF', '\x2', 
		'\x2', '\x98E', '\x98F', '\x5', '\x48C', '\x247', '\x2', '\x98F', '\x990', 
		'\a', '\xE8', '\x2', '\x2', '\x990', '\x991', '\a', '/', '\x2', '\x2', 
		'\x991', '\x992', '\x5', '\x47C', '\x23F', '\x2', '\x992', '\x997', '\x3', 
		'\x2', '\x2', '\x2', '\x993', '\x994', '\a', '\x2CE', '\x2', '\x2', '\x994', 
		'\x995', '\a', '\x246', '\x2', '\x2', '\x995', '\x997', '\x5', '\x48C', 
		'\x247', '\x2', '\x996', '\x987', '\x3', '\x2', '\x2', '\x2', '\x996', 
		'\x98A', '\x3', '\x2', '\x2', '\x2', '\x996', '\x98D', '\x3', '\x2', '\x2', 
		'\x2', '\x996', '\x993', '\x3', '\x2', '\x2', '\x2', '\x997', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x998', '\x9AA', '\a', '\x96', '\x2', '\x2', 
		'\x999', '\x9AB', '\x5', '\xB6', '\\', '\x2', '\x99A', '\x9AB', '\x5', 
		'\xB8', ']', '\x2', '\x99B', '\x9AB', '\x5', '\xBA', '^', '\x2', '\x99C', 
		'\x9AB', '\x5', '\xBC', '_', '\x2', '\x99D', '\x9AB', '\x5', '\xBE', '`', 
		'\x2', '\x99E', '\x9AB', '\x5', '\xC0', '\x61', '\x2', '\x99F', '\x9AB', 
		'\x5', '\xC4', '\x63', '\x2', '\x9A0', '\x9AB', '\x5', '\xC6', '\x64', 
		'\x2', '\x9A1', '\x9AB', '\x5', '\xC8', '\x65', '\x2', '\x9A2', '\x9AB', 
		'\x5', '\xCA', '\x66', '\x2', '\x9A3', '\x9AB', '\x5', '\xCC', 'g', '\x2', 
		'\x9A4', '\x9A5', '\x6', '[', '%', '\x2', '\x9A5', '\x9AB', '\x5', '\xCE', 
		'h', '\x2', '\x9A6', '\x9A7', '\x6', '[', '&', '\x2', '\x9A7', '\x9AB', 
		'\x5', '\xD0', 'i', '\x2', '\x9A8', '\x9A9', '\x6', '[', '\'', '\x2', 
		'\x9A9', '\x9AB', '\x5', '\xD2', 'j', '\x2', '\x9AA', '\x999', '\x3', 
		'\x2', '\x2', '\x2', '\x9AA', '\x99A', '\x3', '\x2', '\x2', '\x2', '\x9AA', 
		'\x99B', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x99C', '\x3', '\x2', '\x2', 
		'\x2', '\x9AA', '\x99D', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x99E', 
		'\x3', '\x2', '\x2', '\x2', '\x9AA', '\x99F', '\x3', '\x2', '\x2', '\x2', 
		'\x9AA', '\x9A0', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9A1', '\x3', 
		'\x2', '\x2', '\x2', '\x9AA', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9AA', 
		'\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9A4', '\x3', '\x2', '\x2', 
		'\x2', '\x9AA', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9A8', 
		'\x3', '\x2', '\x2', '\x2', '\x9AB', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x9AC', '\x9AE', '\a', 'o', '\x2', '\x2', '\x9AD', '\x9AF', '\x5', '\x3D4', 
		'\x1EB', '\x2', '\x9AE', '\x9AD', '\x3', '\x2', '\x2', '\x2', '\x9AE', 
		'\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9B0', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x9B1', '\x5', '\x424', '\x213', '\x2', '\x9B1', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B4', '\a', '\xAC', '\x2', '\x2', 
		'\x9B3', '\x9B5', '\x5', '\x3D4', '\x1EB', '\x2', '\x9B4', '\x9B3', '\x3', 
		'\x2', '\x2', '\x2', '\x9B4', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B7', '\x5', '\x440', 
		'\x221', '\x2', '\x9B7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x9B8', 
		'\x9BA', '\a', '\xD0', '\x2', '\x2', '\x9B9', '\x9BB', '\x5', '\x3D4', 
		'\x1EB', '\x2', '\x9BA', '\x9B9', '\x3', '\x2', '\x2', '\x2', '\x9BA', 
		'\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BB', '\x9BC', '\x3', '\x2', '\x2', 
		'\x2', '\x9BC', '\x9BD', '\x5', '\x42C', '\x217', '\x2', '\x9BD', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9C0', '\a', '\x1A8', '\x2', '\x2', 
		'\x9BF', '\x9C1', '\x5', '\x3D4', '\x1EB', '\x2', '\x9C0', '\x9BF', '\x3', 
		'\x2', '\x2', '\x2', '\x9C0', '\x9C1', '\x3', '\x2', '\x2', '\x2', '\x9C1', 
		'\x9C2', '\x3', '\x2', '\x2', '\x2', '\x9C2', '\x9C3', '\x5', '\x428', 
		'\x215', '\x2', '\x9C3', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x9C4', 
		'\x9C6', '\x5', '\x40A', '\x206', '\x2', '\x9C5', '\x9C4', '\x3', '\x2', 
		'\x2', '\x2', '\x9C5', '\x9C6', '\x3', '\x2', '\x2', '\x2', '\x9C6', '\x9C7', 
		'\x3', '\x2', '\x2', '\x2', '\x9C7', '\x9C8', '\a', '\xEE', '\x2', '\x2', 
		'\x9C8', '\x9C9', '\x5', '\x41E', '\x210', '\x2', '\x9C9', '\x9CA', '\a', 
		'\x181', '\x2', '\x2', '\x9CA', '\x9CC', '\x5', '\x450', '\x229', '\x2', 
		'\x9CB', '\x9CD', '\x5', '\x30', '\x19', '\x2', '\x9CC', '\x9CB', '\x3', 
		'\x2', '\x2', '\x2', '\x9CC', '\x9CD', '\x3', '\x2', '\x2', '\x2', '\x9CD', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CF', '\a', '\x122', '\x2', 
		'\x2', '\x9CF', '\x9D0', '\a', '\xDB', '\x2', '\x2', '\x9D0', '\x9DB', 
		'\x5', '\x43C', '\x21F', '\x2', '\x9D1', '\x9D8', '\x5', '\xC2', '\x62', 
		'\x2', '\x9D2', '\x9D4', '\a', '\x307', '\x2', '\x2', '\x9D3', '\x9D2', 
		'\x3', '\x2', '\x2', '\x2', '\x9D3', '\x9D4', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9D5', '\x3', '\x2', '\x2', '\x2', '\x9D5', '\x9D7', '\x5', 
		'\xC2', '\x62', '\x2', '\x9D6', '\x9D3', '\x3', '\x2', '\x2', '\x2', '\x9D7', 
		'\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9D8', '\x9D6', '\x3', '\x2', '\x2', 
		'\x2', '\x9D8', '\x9D9', '\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DC', 
		'\x3', '\x2', '\x2', '\x2', '\x9DA', '\x9D8', '\x3', '\x2', '\x2', '\x2', 
		'\x9DB', '\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9DB', '\x9DC', '\x3', 
		'\x2', '\x2', '\x2', '\x9DC', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x9DD', 
		'\x9E0', '\x5', '\x98', 'M', '\x2', '\x9DE', '\x9E0', '\x5', '\x96', 'L', 
		'\x2', '\x9DF', '\x9DD', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9DE', 
		'\x3', '\x2', '\x2', '\x2', '\x9E0', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x9E1', '\x9E3', '\a', '\x1F9', '\x2', '\x2', '\x9E2', '\x9E4', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\x9E3', '\x9E2', '\x3', '\x2', '\x2', '\x2', 
		'\x9E3', '\x9E4', '\x3', '\x2', '\x2', '\x2', '\x9E4', '\x9E5', '\x3', 
		'\x2', '\x2', '\x2', '\x9E5', '\x9E6', '\x5', '\x446', '\x224', '\x2', 
		'\x9E6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x9E7', '\x9E9', '\a', '\x243', 
		'\x2', '\x2', '\x9E8', '\x9E7', '\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E9', 
		'\x3', '\x2', '\x2', '\x2', '\x9E9', '\x9EA', '\x3', '\x2', '\x2', '\x2', 
		'\x9EA', '\x9EC', '\t', '\x14', '\x2', '\x2', '\x9EB', '\x9ED', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\x9EC', '\x9EB', '\x3', '\x2', '\x2', '\x2', 
		'\x9EC', '\x9ED', '\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', '\x3', 
		'\x2', '\x2', '\x2', '\x9EE', '\x9F0', '\x5', '\x452', '\x22A', '\x2', 
		'\x9EF', '\x9F1', '\t', '\x4', '\x2', '\x2', '\x9F0', '\x9EF', '\x3', 
		'\x2', '\x2', '\x2', '\x9F0', '\x9F1', '\x3', '\x2', '\x2', '\x2', '\x9F1', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x9F2', '\x9F3', '\a', '\x23E', '\x2', 
		'\x2', '\x9F3', '\x9FE', '\x5', '\x438', '\x21D', '\x2', '\x9F4', '\x9FB', 
		'\x5', '\xC2', '\x62', '\x2', '\x9F5', '\x9F7', '\a', '\x307', '\x2', 
		'\x2', '\x9F6', '\x9F5', '\x3', '\x2', '\x2', '\x2', '\x9F6', '\x9F7', 
		'\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9F8', '\x9FA', '\x5', '\xC2', '\x62', '\x2', '\x9F9', '\x9F6', '\x3', 
		'\x2', '\x2', '\x2', '\x9FA', '\x9FD', '\x3', '\x2', '\x2', '\x2', '\x9FB', 
		'\x9F9', '\x3', '\x2', '\x2', '\x2', '\x9FB', '\x9FC', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9FF', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FB', 
		'\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9F4', '\x3', '\x2', '\x2', '\x2', 
		'\x9FE', '\x9FF', '\x3', '\x2', '\x2', '\x2', '\x9FF', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xA00', '\xA02', '\a', '\x254', '\x2', '\x2', '\xA01', 
		'\xA03', '\x5', '\x3D4', '\x1EB', '\x2', '\xA02', '\xA01', '\x3', '\x2', 
		'\x2', '\x2', '\xA02', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xA03', '\xA04', 
		'\x3', '\x2', '\x2', '\x2', '\xA04', '\xA05', '\x5', '\x430', '\x219', 
		'\x2', '\xA05', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA08', 
		'\a', '\x27E', '\x2', '\x2', '\xA07', '\xA09', '\x5', '\x3D4', '\x1EB', 
		'\x2', '\xA08', '\xA07', '\x3', '\x2', '\x2', '\x2', '\xA08', '\xA09', 
		'\x3', '\x2', '\x2', '\x2', '\xA09', '\xA0A', '\x3', '\x2', '\x2', '\x2', 
		'\xA0A', '\xA0C', '\x5', '\x3E2', '\x1F2', '\x2', '\xA0B', '\xA0D', '\t', 
		'\x4', '\x2', '\x2', '\xA0C', '\xA0B', '\x3', '\x2', '\x2', '\x2', '\xA0C', 
		'\xA0D', '\x3', '\x2', '\x2', '\x2', '\xA0D', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xA0E', '\xA10', '\a', '\x295', '\x2', '\x2', '\xA0F', '\xA11', 
		'\x5', '\x3D4', '\x1EB', '\x2', '\xA10', '\xA0F', '\x3', '\x2', '\x2', 
		'\x2', '\xA10', '\xA11', '\x3', '\x2', '\x2', '\x2', '\xA11', '\xA12', 
		'\x3', '\x2', '\x2', '\x2', '\xA12', '\xA13', '\x5', '\x232', '\x11A', 
		'\x2', '\xA13', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xA14', '\xA15', 
		'\a', '\x20D', '\x2', '\x2', '\xA15', '\xA16', '\a', '\x2D0', '\x2', '\x2', 
		'\xA16', '\xA18', '\a', '\x2C8', '\x2', '\x2', '\xA17', '\xA19', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\xA18', '\xA17', '\x3', '\x2', '\x2', '\x2', 
		'\xA18', '\xA19', '\x3', '\x2', '\x2', '\x2', '\xA19', '\xA1A', '\x3', 
		'\x2', '\x2', '\x2', '\xA1A', '\xA1B', '\x5', '\x47C', '\x23F', '\x2', 
		'\xA1B', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xA1C', '\xA1D', '\a', '\x25F', 
		'\x2', '\x2', '\xA1D', '\xA1E', '\a', '\x23E', '\x2', '\x2', '\xA1E', 
		'\xA20', '\x5', '\x438', '\x21D', '\x2', '\xA1F', '\xA21', '\x5', '<', 
		'\x1F', '\x2', '\xA20', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA20', 
		'\xA21', '\x3', '\x2', '\x2', '\x2', '\xA21', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xA22', '\xA23', '\a', '\x1C7', '\x2', '\x2', '\xA23', '\xA24', 
		'\t', '\x14', '\x2', '\x2', '\xA24', '\xA29', '\x5', '\xD6', 'l', '\x2', 
		'\xA25', '\xA26', '\a', '\x307', '\x2', '\x2', '\xA26', '\xA28', '\x5', 
		'\xD6', 'l', '\x2', '\xA27', '\xA25', '\x3', '\x2', '\x2', '\x2', '\xA28', 
		'\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA27', '\x3', '\x2', '\x2', 
		'\x2', '\xA29', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA2A', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xA2B', '\xA29', '\x3', '\x2', '\x2', '\x2', 
		'\xA2C', '\xA2D', '\x5', '\x450', '\x229', '\x2', '\xA2D', '\xA2E', '\a', 
		'\x250', '\x2', '\x2', '\xA2E', '\xA2F', '\x5', '\x44A', '\x226', '\x2', 
		'\xA2F', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA32', '\a', '\x257', 
		'\x2', '\x2', '\xA31', '\xA33', '\a', '\x240', '\x2', '\x2', '\xA32', 
		'\xA31', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xA33', '\x3', '\x2', '\x2', 
		'\x2', '\xA33', '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA35', 
		'\x5', '\x450', '\x229', '\x2', '\xA35', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xA36', '\xA37', '\a', '\xEC', '\x2', '\x2', '\xA37', '\xA38', 
		'\a', '\x240', '\x2', '\x2', '\xA38', '\xA39', '\a', '\xCD', '\x2', '\x2', 
		'\xA39', '\xA3A', '\x5', '\x48E', '\x248', '\x2', '\xA3A', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xA3B', '\xA3C', '\a', '\x32', '\x2', '\x2', '\xA3C', 
		'\xA42', '\x5', '\x428', '\x215', '\x2', '\xA3D', '\xA3F', '\a', '\x30A', 
		'\x2', '\x2', '\xA3E', '\xA40', '\x5', '\x2F6', '\x17C', '\x2', '\xA3F', 
		'\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA40', '\x3', '\x2', '\x2', 
		'\x2', '\xA40', '\xA41', '\x3', '\x2', '\x2', '\x2', '\xA41', '\xA43', 
		'\a', '\x30B', '\x2', '\x2', '\xA42', '\xA3D', '\x3', '\x2', '\x2', '\x2', 
		'\xA42', '\xA43', '\x3', '\x2', '\x2', '\x2', '\xA43', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xA44', '\xA45', '\x6', 'p', '(', '\x2', '\xA45', 
		'\xA47', '\x5', '\x142', '\xA2', '\x2', '\xA46', '\xA44', '\x3', '\x2', 
		'\x2', '\x2', '\xA46', '\xA47', '\x3', '\x2', '\x2', '\x2', '\xA47', '\xA48', 
		'\x3', '\x2', '\x2', '\x2', '\xA48', '\xA4C', '\a', '\x87', '\x2', '\x2', 
		'\xA49', '\xA4B', '\x5', '\xE2', 'r', '\x2', '\xA4A', '\xA49', '\x3', 
		'\x2', '\x2', '\x2', '\xA4B', '\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4C', 
		'\xA4A', '\x3', '\x2', '\x2', '\x2', '\xA4C', '\xA4D', '\x3', '\x2', '\x2', 
		'\x2', '\xA4D', '\xA6F', '\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA4C', 
		'\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA67', '\a', '\xCD', '\x2', '\x2', 
		'\xA50', '\xA51', '\x5', '\x454', '\x22B', '\x2', '\xA51', '\xA52', '\a', 
		'\x26F', '\x2', '\x2', '\xA52', '\xA54', '\x5', '\x150', '\xA9', '\x2', 
		'\xA53', '\xA55', '\x5', '\x168', '\xB5', '\x2', '\xA54', '\xA53', '\x3', 
		'\x2', '\x2', '\x2', '\xA54', '\xA55', '\x3', '\x2', '\x2', '\x2', '\xA55', 
		'\xA68', '\x3', '\x2', '\x2', '\x2', '\xA56', '\xA59', '\x5', '\x450', 
		'\x229', '\x2', '\xA57', '\xA58', '\x6', 'p', ')', '\x2', '\xA58', '\xA5A', 
		'\x5', '\x190', '\xC9', '\x2', '\xA59', '\xA57', '\x3', '\x2', '\x2', 
		'\x2', '\xA59', '\xA5A', '\x3', '\x2', '\x2', '\x2', '\xA5A', '\xA5C', 
		'\x3', '\x2', '\x2', '\x2', '\xA5B', '\xA5D', '\x5', '\xE0', 'q', '\x2', 
		'\xA5C', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA5C', '\xA5D', '\x3', 
		'\x2', '\x2', '\x2', '\xA5D', '\xA5F', '\x3', '\x2', '\x2', '\x2', '\xA5E', 
		'\xA60', '\x5', '\x168', '\xB5', '\x2', '\xA5F', '\xA5E', '\x3', '\x2', 
		'\x2', '\x2', '\xA5F', '\xA60', '\x3', '\x2', '\x2', '\x2', '\xA60', '\xA62', 
		'\x3', '\x2', '\x2', '\x2', '\xA61', '\xA63', '\x5', '\x14A', '\xA6', 
		'\x2', '\xA62', '\xA61', '\x3', '\x2', '\x2', '\x2', '\xA62', '\xA63', 
		'\x3', '\x2', '\x2', '\x2', '\xA63', '\xA65', '\x3', '\x2', '\x2', '\x2', 
		'\xA64', '\xA66', '\x5', '\x120', '\x91', '\x2', '\xA65', '\xA64', '\x3', 
		'\x2', '\x2', '\x2', '\xA65', '\xA66', '\x3', '\x2', '\x2', '\x2', '\xA66', 
		'\xA68', '\x3', '\x2', '\x2', '\x2', '\xA67', '\xA50', '\x3', '\x2', '\x2', 
		'\x2', '\xA67', '\xA56', '\x3', '\x2', '\x2', '\x2', '\xA68', '\xA70', 
		'\x3', '\x2', '\x2', '\x2', '\xA69', '\xA6A', '\x5', '\x454', '\x22B', 
		'\x2', '\xA6A', '\xA6B', '\a', '\xCD', '\x2', '\x2', '\xA6B', '\xA6D', 
		'\x5', '\x150', '\xA9', '\x2', '\xA6C', '\xA6E', '\x5', '\x168', '\xB5', 
		'\x2', '\xA6D', '\xA6C', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6E', 
		'\x3', '\x2', '\x2', '\x2', '\xA6E', '\xA70', '\x3', '\x2', '\x2', '\x2', 
		'\xA6F', '\xA4F', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA69', '\x3', 
		'\x2', '\x2', '\x2', '\xA70', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xA71', 
		'\xA72', '\x6', 'q', '*', '\x2', '\xA72', '\xA73', '\a', '\x197', '\x2', 
		'\x2', '\xA73', '\xA74', '\a', '\x30A', '\x2', '\x2', '\xA74', '\xA75', 
		'\x5', '\x46C', '\x237', '\x2', '\xA75', '\xA76', '\a', '\x30B', '\x2', 
		'\x2', '\xA76', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xA77', '\xA78', 
		'\t', '\x15', '\x2', '\x2', '\xA78', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xA79', '\xA7E', '\a', '\x95', '\x2', '\x2', '\xA7A', '\xA7B', '\x6', 
		's', '+', '\x2', '\xA7B', '\xA7F', '\x5', '\x2F6', '\x17C', '\x2', '\xA7C', 
		'\xA7D', '\x6', 's', ',', '\x2', '\xA7D', '\xA7F', '\x5', '\x162', '\xB2', 
		'\x2', '\xA7E', '\xA7A', '\x3', '\x2', '\x2', '\x2', '\xA7E', '\xA7C', 
		'\x3', '\x2', '\x2', '\x2', '\xA7F', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xA80', '\xA92', '\a', '\xDD', '\x2', '\x2', '\xA81', '\xA82', '\x5', 
		'\x450', '\x229', '\x2', '\xA82', '\xA84', '\a', '\x185', '\x2', '\x2', 
		'\xA83', '\xA85', '\x5', '\x190', '\xC9', '\x2', '\xA84', '\xA83', '\x3', 
		'\x2', '\x2', '\x2', '\xA84', '\xA85', '\x3', '\x2', '\x2', '\x2', '\xA85', 
		'\xA93', '\x3', '\x2', '\x2', '\x2', '\xA86', '\xA90', '\x5', '\x46A', 
		'\x236', '\x2', '\xA87', '\xA91', '\a', '\x44', '\x2', '\x2', '\xA88', 
		'\xA89', '\a', '\x1B5', '\x2', '\x2', '\xA89', '\xA8B', '\x5', '\xE8', 
		'u', '\x2', '\xA8A', '\xA8C', '\x5', '\x168', '\xB5', '\x2', '\xA8B', 
		'\xA8A', '\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA8C', '\x3', '\x2', '\x2', 
		'\x2', '\xA8C', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA8D', '\xA8F', 
		'\x5', '\x11E', '\x90', '\x2', '\xA8E', '\xA8D', '\x3', '\x2', '\x2', 
		'\x2', '\xA8E', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA8F', '\xA91', 
		'\x3', '\x2', '\x2', '\x2', '\xA90', '\xA87', '\x3', '\x2', '\x2', '\x2', 
		'\xA90', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA91', '\xA93', '\x3', 
		'\x2', '\x2', '\x2', '\xA92', '\xA81', '\x3', '\x2', '\x2', '\x2', '\xA92', 
		'\xA86', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xA94', '\xA9F', '\t', '\x16', '\x2', '\x2', '\xA95', '\xA9C', 
		'\x5', '\x46A', '\x236', '\x2', '\xA96', '\xA9D', '\t', '\x17', '\x2', 
		'\x2', '\xA97', '\xA98', '\t', '\x18', '\x2', '\x2', '\xA98', '\xA99', 
		'\a', '\x30A', '\x2', '\x2', '\xA99', '\xA9A', '\x5', '\xF8', '}', '\x2', 
		'\xA9A', '\xA9B', '\a', '\x30B', '\x2', '\x2', '\xA9B', '\xA9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA9C', '\xA96', '\x3', '\x2', '\x2', '\x2', '\xA9C', 
		'\xA97', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA9E', '\xA94', '\x3', '\x2', '\x2', '\x2', '\xA9E', '\xA95', 
		'\x3', '\x2', '\x2', '\x2', '\xA9F', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xAA0', '\xAA2', '\a', '\xF4', '\x2', '\x2', '\xAA1', '\xAA3', '\x5', 
		'\xEC', 'w', '\x2', '\xAA2', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xAA2', 
		'\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAA4', '\xAA6', '\a', '\xEA', '\x2', '\x2', '\xAA5', '\xAA4', 
		'\x3', '\x2', '\x2', '\x2', '\xAA5', '\xAA6', '\x3', '\x2', '\x2', '\x2', 
		'\xAA6', '\xAA8', '\x3', '\x2', '\x2', '\x2', '\xAA7', '\xAA9', '\a', 
		'\xFA', '\x2', '\x2', '\xAA8', '\xAA7', '\x3', '\x2', '\x2', '\x2', '\xAA8', 
		'\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAA9', '\xAAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAAA', '\xAAC', '\x5', '\x450', '\x229', '\x2', '\xAAB', '\xAAD', 
		'\x5', '\x40E', '\x208', '\x2', '\xAAC', '\xAAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAAC', '\xAAD', '\x3', '\x2', '\x2', '\x2', '\xAAD', '\xABA', 
		'\x3', '\x2', '\x2', '\x2', '\xAAE', '\xAB1', '\x5', '\xEE', 'x', '\x2', 
		'\xAAF', '\xAB0', '\x6', 'v', '-', '\x2', '\xAB0', '\xAB2', '\x5', '\xFA', 
		'~', '\x2', '\xAB1', '\xAAF', '\x3', '\x2', '\x2', '\x2', '\xAB1', '\xAB2', 
		'\x3', '\x2', '\x2', '\x2', '\xAB2', '\xABB', '\x3', '\x2', '\x2', '\x2', 
		'\xAB3', '\xAB4', '\a', '\x1FC', '\x2', '\x2', '\xAB4', '\xAB7', '\x5', 
		'\x3E4', '\x1F3', '\x2', '\xAB5', '\xAB6', '\x6', 'v', '.', '\x2', '\xAB6', 
		'\xAB8', '\x5', '\xFA', '~', '\x2', '\xAB7', '\xAB5', '\x3', '\x2', '\x2', 
		'\x2', '\xAB7', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xABB', 
		'\x3', '\x2', '\x2', '\x2', '\xAB9', '\xABB', '\x5', '\xF4', '{', '\x2', 
		'\xABA', '\xAAE', '\x3', '\x2', '\x2', '\x2', '\xABA', '\xAB3', '\x3', 
		'\x2', '\x2', '\x2', '\xABA', '\xAB9', '\x3', '\x2', '\x2', '\x2', '\xABB', 
		'\xABD', '\x3', '\x2', '\x2', '\x2', '\xABC', '\xABE', '\x5', '\xFC', 
		'\x7F', '\x2', '\xABD', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xABD', 
		'\xABE', '\x3', '\x2', '\x2', '\x2', '\xABE', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xABF', '\xAC0', '\t', '\x19', '\x2', '\x2', '\xAC0', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xAC1', '\xAC3', '\a', '\x30A', '\x2', '\x2', 
		'\xAC2', '\xAC4', '\x5', '\xF0', 'y', '\x2', '\xAC3', '\xAC2', '\x3', 
		'\x2', '\x2', '\x2', '\xAC3', '\xAC4', '\x3', '\x2', '\x2', '\x2', '\xAC4', 
		'\xAC5', '\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC7', '\a', '\x30B', 
		'\x2', '\x2', '\xAC6', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC6', '\xAC7', 
		'\x3', '\x2', '\x2', '\x2', '\xAC7', '\xAC8', '\x3', '\x2', '\x2', '\x2', 
		'\xAC8', '\xAC9', '\x5', '\xF2', 'z', '\x2', '\xAC9', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xACA', '\xACF', '\x5', '\x41A', '\x20E', '\x2', '\xACB', 
		'\xACC', '\a', '\x307', '\x2', '\x2', '\xACC', '\xACE', '\x5', '\x41A', 
		'\x20E', '\x2', '\xACD', '\xACB', '\x3', '\x2', '\x2', '\x2', '\xACE', 
		'\xAD1', '\x3', '\x2', '\x2', '\x2', '\xACF', '\xACD', '\x3', '\x2', '\x2', 
		'\x2', '\xACF', '\xAD0', '\x3', '\x2', '\x2', '\x2', '\xAD0', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xAD1', '\xACF', '\x3', '\x2', '\x2', '\x2', 
		'\xAD2', '\xAD3', '\t', '\x1A', '\x2', '\x2', '\xAD3', '\xAD4', '\x5', 
		'\xF6', '|', '\x2', '\xAD4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xAD5', 
		'\xADD', '\x5', '\\', '/', '\x2', '\xAD6', '\xAD8', '\a', '\x30A', '\x2', 
		'\x2', '\xAD7', '\xAD9', '\x5', '\xF0', 'y', '\x2', '\xAD8', '\xAD7', 
		'\x3', '\x2', '\x2', '\x2', '\xAD8', '\xAD9', '\x3', '\x2', '\x2', '\x2', 
		'\xAD9', '\xADA', '\x3', '\x2', '\x2', '\x2', '\xADA', '\xADB', '\a', 
		'\x30B', '\x2', '\x2', '\xADB', '\xADD', '\x5', '\\', '/', '\x2', '\xADC', 
		'\xAD5', '\x3', '\x2', '\x2', '\x2', '\xADC', '\xAD6', '\x3', '\x2', '\x2', 
		'\x2', '\xADD', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xADE', '\xAE0', 
		'\a', '\x30A', '\x2', '\x2', '\xADF', '\xAE1', '\x5', '\xF8', '}', '\x2', 
		'\xAE0', '\xADF', '\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE1', '\x3', 
		'\x2', '\x2', '\x2', '\xAE1', '\xAE2', '\x3', '\x2', '\x2', '\x2', '\xAE2', 
		'\xAEB', '\a', '\x30B', '\x2', '\x2', '\xAE3', '\xAE4', '\a', '\x307', 
		'\x2', '\x2', '\xAE4', '\xAE6', '\a', '\x30A', '\x2', '\x2', '\xAE5', 
		'\xAE7', '\x5', '\xF8', '}', '\x2', '\xAE6', '\xAE5', '\x3', '\x2', '\x2', 
		'\x2', '\xAE6', '\xAE7', '\x3', '\x2', '\x2', '\x2', '\xAE7', '\xAE8', 
		'\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAEA', '\a', '\x30B', '\x2', '\x2', 
		'\xAE9', '\xAE3', '\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAED', '\x3', 
		'\x2', '\x2', '\x2', '\xAEB', '\xAE9', '\x3', '\x2', '\x2', '\x2', '\xAEB', 
		'\xAEC', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xAED', '\xAEB', '\x3', '\x2', '\x2', '\x2', '\xAEE', '\xAF1', 
		'\x5', '\x2A6', '\x154', '\x2', '\xAEF', '\xAF1', '\a', '\x82', '\x2', 
		'\x2', '\xAF0', '\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAF0', '\xAEF', 
		'\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF9', '\x3', '\x2', '\x2', '\x2', 
		'\xAF2', '\xAF5', '\a', '\x307', '\x2', '\x2', '\xAF3', '\xAF6', '\x5', 
		'\x2A6', '\x154', '\x2', '\xAF4', '\xAF6', '\a', '\x82', '\x2', '\x2', 
		'\xAF5', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF4', '\x3', 
		'\x2', '\x2', '\x2', '\xAF6', '\xAF8', '\x3', '\x2', '\x2', '\x2', '\xAF7', 
		'\xAF2', '\x3', '\x2', '\x2', '\x2', '\xAF8', '\xAFB', '\x3', '\x2', '\x2', 
		'\x2', '\xAF9', '\xAF7', '\x3', '\x2', '\x2', '\x2', '\xAF9', '\xAFA', 
		'\x3', '\x2', '\x2', '\x2', '\xAFA', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xAFB', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFC', '\xAFD', '\a', 
		'\x13', '\x2', '\x2', '\xAFD', '\xAFF', '\x5', '\x46A', '\x236', '\x2', 
		'\xAFE', '\xB00', '\x5', '\x416', '\x20C', '\x2', '\xAFF', '\xAFE', '\x3', 
		'\x2', '\x2', '\x2', '\xAFF', '\xB00', '\x3', '\x2', '\x2', '\x2', '\xB00', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xB01', '\xB02', '\a', '\x181', '\x2', 
		'\x2', '\xB02', '\xB03', '\a', '\x99', '\x2', '\x2', '\xB03', '\xB04', 
		'\a', '\x10B', '\x2', '\x2', '\xB04', '\xB05', '\a', '\x268', '\x2', '\x2', 
		'\xB05', '\xB06', '\x5', '\x3E4', '\x1F3', '\x2', '\xB06', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xB07', '\xB08', '\a', '\x11B', '\x2', '\x2', '\xB08', 
		'\xB0A', '\x5', '\x100', '\x81', '\x2', '\xB09', '\xB0B', '\t', '\x1B', 
		'\x2', '\x2', '\xB0A', '\xB09', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', 
		'\x3', '\x2', '\x2', '\x2', '\xB0B', '\xB0D', '\x3', '\x2', '\x2', '\x2', 
		'\xB0C', '\xB0E', '\a', '\x11E', '\x2', '\x2', '\xB0D', '\xB0C', '\x3', 
		'\x2', '\x2', '\x2', '\xB0D', '\xB0E', '\x3', '\x2', '\x2', '\x2', '\xB0E', 
		'\xB0F', '\x3', '\x2', '\x2', '\x2', '\xB0F', '\xB10', '\a', '\xEF', '\x2', 
		'\x2', '\xB10', '\xB12', '\x5', '\x48A', '\x246', '\x2', '\xB11', '\xB13', 
		'\t', '\n', '\x2', '\x2', '\xB12', '\xB11', '\x3', '\x2', '\x2', '\x2', 
		'\xB12', '\xB13', '\x3', '\x2', '\x2', '\x2', '\xB13', '\xB14', '\x3', 
		'\x2', '\x2', '\x2', '\xB14', '\xB15', '\a', '\xFA', '\x2', '\x2', '\xB15', 
		'\xB16', '\a', '\x240', '\x2', '\x2', '\xB16', '\xB18', '\x5', '\x450', 
		'\x229', '\x2', '\xB17', '\xB19', '\x5', '\x40E', '\x208', '\x2', '\xB18', 
		'\xB17', '\x3', '\x2', '\x2', '\x2', '\xB18', '\xB19', '\x3', '\x2', '\x2', 
		'\x2', '\xB19', '\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB1A', '\xB1C', 
		'\x5', '\x3E8', '\x1F5', '\x2', '\xB1B', '\xB1A', '\x3', '\x2', '\x2', 
		'\x2', '\xB1B', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB1E', 
		'\x3', '\x2', '\x2', '\x2', '\xB1D', '\xB1F', '\x5', '\x102', '\x82', 
		'\x2', '\xB1E', '\xB1D', '\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', 
		'\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB21', '\x3', '\x2', '\x2', '\x2', 
		'\xB20', '\xB22', '\x5', '\x3EA', '\x1F6', '\x2', '\xB21', '\xB20', '\x3', 
		'\x2', '\x2', '\x2', '\xB21', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB22', 
		'\xB24', '\x3', '\x2', '\x2', '\x2', '\xB23', '\xB25', '\x5', '\x3EE', 
		'\x1F8', '\x2', '\xB24', '\xB23', '\x3', '\x2', '\x2', '\x2', '\xB24', 
		'\xB25', '\x3', '\x2', '\x2', '\x2', '\xB25', '\xB26', '\x3', '\x2', '\x2', 
		'\x2', '\xB26', '\xB27', '\x5', '\x104', '\x83', '\x2', '\xB27', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xB28', '\xB29', '\t', '\x1C', '\x2', '\x2', 
		'\xB29', '\x101', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB2B', '\a', 
		'\x1E6', '\x2', '\x2', '\xB2B', '\xB2C', '\a', '\xE8', '\x2', '\x2', '\xB2C', 
		'\xB2D', '\a', '/', '\x2', '\x2', '\xB2D', '\xB2E', '\x5', '\x486', '\x244', 
		'\x2', '\xB2E', '\x103', '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB30', 
		'\a', '\xEA', '\x2', '\x2', '\xB30', '\xB31', '\a', '\x2ED', '\x2', '\x2', 
		'\xB31', '\xB33', '\t', '\x1D', '\x2', '\x2', '\xB32', '\xB2F', '\x3', 
		'\x2', '\x2', '\x2', '\xB32', '\xB33', '\x3', '\x2', '\x2', '\x2', '\xB33', 
		'\xB35', '\x3', '\x2', '\x2', '\x2', '\xB34', '\xB36', '\x5', '\x106', 
		'\x84', '\x2', '\xB35', '\xB34', '\x3', '\x2', '\x2', '\x2', '\xB35', 
		'\xB36', '\x3', '\x2', '\x2', '\x2', '\xB36', '\xB39', '\x3', '\x2', '\x2', 
		'\x2', '\xB37', '\xB38', '\a', '\x1FC', '\x2', '\x2', '\xB38', '\xB3A', 
		'\x5', '\x3E4', '\x1F3', '\x2', '\xB39', '\xB37', '\x3', '\x2', '\x2', 
		'\x2', '\xB39', '\xB3A', '\x3', '\x2', '\x2', '\x2', '\xB3A', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3D', '\a', '\x30A', '\x2', '\x2', 
		'\xB3C', '\xB3E', '\x5', '\x108', '\x85', '\x2', '\xB3D', '\xB3C', '\x3', 
		'\x2', '\x2', '\x2', '\xB3D', '\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB3E', 
		'\xB3F', '\x3', '\x2', '\x2', '\x2', '\xB3F', '\xB40', '\a', '\x30B', 
		'\x2', '\x2', '\xB40', '\x107', '\x3', '\x2', '\x2', '\x2', '\xB41', '\xB44', 
		'\x5', '\x418', '\x20D', '\x2', '\xB42', '\xB44', '\x5', '\x2E8', '\x175', 
		'\x2', '\xB43', '\xB41', '\x3', '\x2', '\x2', '\x2', '\xB43', '\xB42', 
		'\x3', '\x2', '\x2', '\x2', '\xB44', '\xB4C', '\x3', '\x2', '\x2', '\x2', 
		'\xB45', '\xB48', '\a', '\x307', '\x2', '\x2', '\xB46', '\xB49', '\x5', 
		'\x418', '\x20D', '\x2', '\xB47', '\xB49', '\x5', '\x2E8', '\x175', '\x2', 
		'\xB48', '\xB46', '\x3', '\x2', '\x2', '\x2', '\xB48', '\xB47', '\x3', 
		'\x2', '\x2', '\x2', '\xB49', '\xB4B', '\x3', '\x2', '\x2', '\x2', '\xB4A', 
		'\xB45', '\x3', '\x2', '\x2', '\x2', '\xB4B', '\xB4E', '\x3', '\x2', '\x2', 
		'\x2', '\xB4C', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB4C', '\xB4D', 
		'\x3', '\x2', '\x2', '\x2', '\xB4D', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\xB4E', '\xB4C', '\x3', '\x2', '\x2', '\x2', '\xB4F', '\xB51', '\a', 
		'\x1CC', '\x2', '\x2', '\xB50', '\xB52', '\t', '\x1E', '\x2', '\x2', '\xB51', 
		'\xB50', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB52', '\x3', '\x2', '\x2', 
		'\x2', '\xB52', '\xB54', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB55', 
		'\a', '\xFA', '\x2', '\x2', '\xB54', '\xB53', '\x3', '\x2', '\x2', '\x2', 
		'\xB54', '\xB55', '\x3', '\x2', '\x2', '\x2', '\xB55', '\xB56', '\x3', 
		'\x2', '\x2', '\x2', '\xB56', '\xB58', '\x5', '\x450', '\x229', '\x2', 
		'\xB57', '\xB59', '\x5', '\x40E', '\x208', '\x2', '\xB58', '\xB57', '\x3', 
		'\x2', '\x2', '\x2', '\xB58', '\xB59', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB5E', '\x3', '\x2', '\x2', '\x2', '\xB5A', '\xB5F', '\x5', '\xEE', 
		'x', '\x2', '\xB5B', '\xB5C', '\a', '\x1FC', '\x2', '\x2', '\xB5C', '\xB5F', 
		'\x5', '\x3E4', '\x1F3', '\x2', '\xB5D', '\xB5F', '\x5', '\xF4', '{', 
		'\x2', '\xB5E', '\xB5A', '\x3', '\x2', '\x2', '\x2', '\xB5E', '\xB5B', 
		'\x3', '\x2', '\x2', '\x2', '\xB5E', '\xB5D', '\x3', '\x2', '\x2', '\x2', 
		'\xB5F', '\x10B', '\x3', '\x2', '\x2', '\x2', '\xB60', '\xB62', '\x5', 
		'\x110', '\x89', '\x2', '\xB61', '\xB63', '\x5', '\x15A', '\xAE', '\x2', 
		'\xB62', '\xB61', '\x3', '\x2', '\x2', '\x2', '\xB62', '\xB63', '\x3', 
		'\x2', '\x2', '\x2', '\xB63', '\xB67', '\x3', '\x2', '\x2', '\x2', '\xB64', 
		'\xB67', '\x5', '\x114', '\x8B', '\x2', '\xB65', '\xB67', '\x5', '\x10E', 
		'\x88', '\x2', '\xB66', '\xB60', '\x3', '\x2', '\x2', '\x2', '\xB66', 
		'\xB64', '\x3', '\x2', '\x2', '\x2', '\xB66', '\xB65', '\x3', '\x2', '\x2', 
		'\x2', '\xB67', '\x10D', '\x3', '\x2', '\x2', '\x2', '\xB68', '\xB69', 
		'\a', '\x30A', '\x2', '\x2', '\xB69', '\xB6A', '\x5', '\x10E', '\x88', 
		'\x2', '\xB6A', '\xB6B', '\a', '\x30B', '\x2', '\x2', '\xB6B', '\xB75', 
		'\x3', '\x2', '\x2', '\x2', '\xB6C', '\xB6D', '\x5', '\x110', '\x89', 
		'\x2', '\xB6D', '\xB6F', '\x5', '\x126', '\x94', '\x2', '\xB6E', '\xB70', 
		'\x5', '\x15A', '\xAE', '\x2', '\xB6F', '\xB6E', '\x3', '\x2', '\x2', 
		'\x2', '\xB6F', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB70', '\xB75', 
		'\x3', '\x2', '\x2', '\x2', '\xB71', '\xB72', '\x5', '\x15A', '\xAE', 
		'\x2', '\xB72', '\xB73', '\x5', '\x126', '\x94', '\x2', '\xB73', '\xB75', 
		'\x3', '\x2', '\x2', '\x2', '\xB74', '\xB68', '\x3', '\x2', '\x2', '\x2', 
		'\xB74', '\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB71', '\x3', 
		'\x2', '\x2', '\x2', '\xB75', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xB76', 
		'\xB77', '\x6', '\x89', '/', '\x2', '\xB77', '\xB79', '\x5', '\x142', 
		'\xA2', '\x2', '\xB78', '\xB76', '\x3', '\x2', '\x2', '\x2', '\xB78', 
		'\xB79', '\x3', '\x2', '\x2', '\x2', '\xB79', '\xB88', '\x3', '\x2', '\x2', 
		'\x2', '\xB7A', '\xB7C', '\x5', '\x112', '\x8A', '\x2', '\xB7B', '\xB7D', 
		'\x5', '\x14A', '\xA6', '\x2', '\xB7C', '\xB7B', '\x3', '\x2', '\x2', 
		'\x2', '\xB7C', '\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7D', '\xB7F', 
		'\x3', '\x2', '\x2', '\x2', '\xB7E', '\xB80', '\x5', '\x11E', '\x90', 
		'\x2', '\xB7F', '\xB7E', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xB80', 
		'\x3', '\x2', '\x2', '\x2', '\xB80', '\xB89', '\x3', '\x2', '\x2', '\x2', 
		'\xB81', '\xB83', '\x5', '\x114', '\x8B', '\x2', '\xB82', '\xB84', '\x5', 
		'\x14A', '\xA6', '\x2', '\xB83', '\xB82', '\x3', '\x2', '\x2', '\x2', 
		'\xB83', '\xB84', '\x3', '\x2', '\x2', '\x2', '\xB84', '\xB86', '\x3', 
		'\x2', '\x2', '\x2', '\xB85', '\xB87', '\x5', '\x11E', '\x90', '\x2', 
		'\xB86', '\xB85', '\x3', '\x2', '\x2', '\x2', '\xB86', '\xB87', '\x3', 
		'\x2', '\x2', '\x2', '\xB87', '\xB89', '\x3', '\x2', '\x2', '\x2', '\xB88', 
		'\xB7A', '\x3', '\x2', '\x2', '\x2', '\xB88', '\xB81', '\x3', '\x2', '\x2', 
		'\x2', '\xB89', '\xB8C', '\x3', '\x2', '\x2', '\x2', '\xB8A', '\xB8B', 
		'\x6', '\x89', '\x30', '\x2', '\xB8B', '\xB8D', '\x5', '\x128', '\x95', 
		'\x2', '\xB8C', '\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB8C', '\xB8D', 
		'\x3', '\x2', '\x2', '\x2', '\xB8D', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\xB8E', '\xB99', '\x5', '\x116', '\x8C', '\x2', '\xB8F', '\xB90', '\x5', 
		'\x114', '\x8B', '\x2', '\xB90', '\xB92', '\a', '\x262', '\x2', '\x2', 
		'\xB91', '\xB93', '\x5', '\x18E', '\xC8', '\x2', '\xB92', '\xB91', '\x3', 
		'\x2', '\x2', '\x2', '\xB92', '\xB93', '\x3', '\x2', '\x2', '\x2', '\xB93', 
		'\xB96', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB97', '\x5', '\x116', 
		'\x8C', '\x2', '\xB95', '\xB97', '\x5', '\x114', '\x8B', '\x2', '\xB96', 
		'\xB94', '\x3', '\x2', '\x2', '\x2', '\xB96', '\xB95', '\x3', '\x2', '\x2', 
		'\x2', '\xB97', '\xB99', '\x3', '\x2', '\x2', '\x2', '\xB98', '\xB8E', 
		'\x3', '\x2', '\x2', '\x2', '\xB98', '\xB8F', '\x3', '\x2', '\x2', '\x2', 
		'\xB99', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xB9A', '\xB9C', '\a', 
		'\x262', '\x2', '\x2', '\xB9B', '\xB9D', '\x5', '\x18E', '\xC8', '\x2', 
		'\xB9C', '\xB9B', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\x3', 
		'\x2', '\x2', '\x2', '\xB9D', '\xBA0', '\x3', '\x2', '\x2', '\x2', '\xB9E', 
		'\xBA1', '\x5', '\x116', '\x8C', '\x2', '\xB9F', '\xBA1', '\x5', '\x114', 
		'\x8B', '\x2', '\xBA0', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xBA0', 
		'\xB9F', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xBA3', '\x3', '\x2', '\x2', 
		'\x2', '\xBA2', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\xBA3', '\xBA6', 
		'\x3', '\x2', '\x2', '\x2', '\xBA4', '\xBA2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA4', '\xBA5', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\xBA6', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA7', 
		'\xBAD', '\a', '\x30A', '\x2', '\x2', '\xBA8', '\xBAE', '\x5', '\x114', 
		'\x8B', '\x2', '\xBA9', '\xBAB', '\x5', '\x110', '\x89', '\x2', '\xBAA', 
		'\xBAC', '\x5', '\x15A', '\xAE', '\x2', '\xBAB', '\xBAA', '\x3', '\x2', 
		'\x2', '\x2', '\xBAB', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAC', '\xBAE', 
		'\x3', '\x2', '\x2', '\x2', '\xBAD', '\xBA8', '\x3', '\x2', '\x2', '\x2', 
		'\xBAD', '\xBA9', '\x3', '\x2', '\x2', '\x2', '\xBAE', '\xBAF', '\x3', 
		'\x2', '\x2', '\x2', '\xBAF', '\xBB0', '\a', '\x30B', '\x2', '\x2', '\xBB0', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\xBB1', '\xBB7', '\x5', '\x118', 
		'\x8D', '\x2', '\xBB2', '\xBB3', '\x6', '\x8C', '\x31', '\x2', '\xBB3', 
		'\xBB7', '\x5', '\x152', '\xAA', '\x2', '\xBB4', '\xBB5', '\x6', '\x8C', 
		'\x32', '\x2', '\xBB5', '\xBB7', '\x5', '\x154', '\xAB', '\x2', '\xBB6', 
		'\xBB1', '\x3', '\x2', '\x2', '\x2', '\xBB6', '\xBB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBB6', '\xBB4', '\x3', '\x2', '\x2', '\x2', '\xBB7', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBBC', '\a', '\x1F3', '\x2', '\x2', 
		'\xBB9', '\xBBB', '\x5', '\x158', '\xAD', '\x2', '\xBBA', '\xBB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBBB', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBBC', 
		'\xBBA', '\x3', '\x2', '\x2', '\x2', '\xBBC', '\xBBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBBD', '\xBBF', '\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBC1', '\x5', '\x162', '\xB2', 
		'\x2', '\xBC0', '\xBC2', '\x5', '\x126', '\x94', '\x2', '\xBC1', '\xBC0', 
		'\x3', '\x2', '\x2', '\x2', '\xBC1', '\xBC2', '\x3', '\x2', '\x2', '\x2', 
		'\xBC2', '\xBC4', '\x3', '\x2', '\x2', '\x2', '\xBC3', '\xBC5', '\x5', 
		'\x14E', '\xA8', '\x2', '\xBC4', '\xBC3', '\x3', '\x2', '\x2', '\x2', 
		'\xBC4', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC5', '\xBC7', '\x3', 
		'\x2', '\x2', '\x2', '\xBC6', '\xBC8', '\x5', '\x168', '\xB5', '\x2', 
		'\xBC7', '\xBC6', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC8', '\x3', 
		'\x2', '\x2', '\x2', '\xBC8', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBC9', 
		'\xBCB', '\x5', '\x146', '\xA4', '\x2', '\xBCA', '\xBC9', '\x3', '\x2', 
		'\x2', '\x2', '\xBCA', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCD', 
		'\x3', '\x2', '\x2', '\x2', '\xBCC', '\xBCE', '\x5', '\x12A', '\x96', 
		'\x2', '\xBCD', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBCE', 
		'\x3', '\x2', '\x2', '\x2', '\xBCE', '\xBD1', '\x3', '\x2', '\x2', '\x2', 
		'\xBCF', '\xBD0', '\x6', '\x8D', '\x33', '\x2', '\xBD0', '\xBD2', '\x5', 
		'\x12C', '\x97', '\x2', '\xBD1', '\xBCF', '\x3', '\x2', '\x2', '\x2', 
		'\xBD1', '\xBD2', '\x3', '\x2', '\x2', '\x2', '\xBD2', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\xBD3', '\xBD4', '\x5', '\x114', '\x8B', '\x2', 
		'\xBD4', '\x11B', '\x3', '\x2', '\x2', '\x2', '\xBD5', '\xBD6', '\t', 
		'\x1F', '\x2', '\x2', '\xBD6', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xBD7', 
		'\xBD8', '\a', '\x116', '\x2', '\x2', '\xBD8', '\xBD9', '\x5', '\x122', 
		'\x92', '\x2', '\xBD9', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xBDA', 
		'\xBDB', '\a', '\x116', '\x2', '\x2', '\xBDB', '\xBDC', '\x5', '\x124', 
		'\x93', '\x2', '\xBDC', '\x121', '\x3', '\x2', '\x2', '\x2', '\xBDD', 
		'\xBE0', '\x5', '\x124', '\x93', '\x2', '\xBDE', '\xBDF', '\t', ' ', '\x2', 
		'\x2', '\xBDF', '\xBE1', '\x5', '\x124', '\x93', '\x2', '\xBE0', '\xBDE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE0', '\xBE1', '\x3', '\x2', '\x2', '\x2', 
		'\xBE1', '\x123', '\x3', '\x2', '\x2', '\x2', '\xBE2', '\xBE5', '\x5', 
		'\x46A', '\x236', '\x2', '\xBE3', '\xBE5', '\t', '!', '\x2', '\x2', '\xBE4', 
		'\xBE2', '\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBE3', '\x3', '\x2', '\x2', 
		'\x2', '\xBE5', '\x125', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xC02', 
		'\a', '\xFA', '\x2', '\x2', '\xBE7', '\xBE8', '\a', '\x18E', '\x2', '\x2', 
		'\xBE8', '\xBEA', '\x5', '\x484', '\x243', '\x2', '\xBE9', '\xBEB', '\x5', 
		'\x3E8', '\x1F5', '\x2', '\xBEA', '\xBE9', '\x3', '\x2', '\x2', '\x2', 
		'\xBEA', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBED', '\x3', 
		'\x2', '\x2', '\x2', '\xBEC', '\xBEE', '\x5', '\x3EA', '\x1F6', '\x2', 
		'\xBED', '\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEE', '\x3', 
		'\x2', '\x2', '\x2', '\xBEE', '\xBF0', '\x3', '\x2', '\x2', '\x2', '\xBEF', 
		'\xBF1', '\x5', '\x3EE', '\x1F8', '\x2', '\xBF0', '\xBEF', '\x3', '\x2', 
		'\x2', '\x2', '\xBF0', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBF1', '\xC03', 
		'\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBF3', '\a', '\x98', '\x2', '\x2', 
		'\xBF3', '\xC03', '\x5', '\x484', '\x243', '\x2', '\xBF4', '\xBF7', '\x5', 
		'\x49E', '\x250', '\x2', '\xBF5', '\xBF7', '\x5', '\x2E8', '\x175', '\x2', 
		'\xBF6', '\xBF4', '\x3', '\x2', '\x2', '\x2', '\xBF6', '\xBF5', '\x3', 
		'\x2', '\x2', '\x2', '\xBF7', '\xBFF', '\x3', '\x2', '\x2', '\x2', '\xBF8', 
		'\xBFB', '\a', '\x307', '\x2', '\x2', '\xBF9', '\xBFC', '\x5', '\x49E', 
		'\x250', '\x2', '\xBFA', '\xBFC', '\x5', '\x2E8', '\x175', '\x2', '\xBFB', 
		'\xBF9', '\x3', '\x2', '\x2', '\x2', '\xBFB', '\xBFA', '\x3', '\x2', '\x2', 
		'\x2', '\xBFC', '\xBFE', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBF8', 
		'\x3', '\x2', '\x2', '\x2', '\xBFE', '\xC01', '\x3', '\x2', '\x2', '\x2', 
		'\xBFF', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC00', '\x3', 
		'\x2', '\x2', '\x2', '\xC00', '\xC03', '\x3', '\x2', '\x2', '\x2', '\xC01', 
		'\xBFF', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xBE7', '\x3', '\x2', '\x2', 
		'\x2', '\xC02', '\xBF2', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xBF6', 
		'\x3', '\x2', '\x2', '\x2', '\xC03', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\xC04', '\xC05', '\a', '\x1A8', '\x2', '\x2', '\xC05', '\xC06', '\a', 
		'\xF', '\x2', '\x2', '\xC06', '\xC0C', '\a', '\x30A', '\x2', '\x2', '\xC07', 
		'\xC0A', '\a', '\x2ED', '\x2', '\x2', '\xC08', '\xC09', '\a', '\x307', 
		'\x2', '\x2', '\xC09', '\xC0B', '\a', '\x2ED', '\x2', '\x2', '\xC0A', 
		'\xC08', '\x3', '\x2', '\x2', '\x2', '\xC0A', '\xC0B', '\x3', '\x2', '\x2', 
		'\x2', '\xC0B', '\xC0D', '\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC07', 
		'\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0D', '\x3', '\x2', '\x2', '\x2', 
		'\xC0D', '\xC0E', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\a', 
		'\x30B', '\x2', '\x2', '\xC0F', '\x129', '\x3', '\x2', '\x2', '\x2', '\xC10', 
		'\xC11', '\a', '\xDF', '\x2', '\x2', '\xC11', '\xC12', '\x5', '\x2A6', 
		'\x154', '\x2', '\xC12', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xC13', 
		'\xC14', '\a', '\x2BD', '\x2', '\x2', '\xC14', '\xC19', '\x5', '\x12E', 
		'\x98', '\x2', '\xC15', '\xC16', '\a', '\x307', '\x2', '\x2', '\xC16', 
		'\xC18', '\x5', '\x12E', '\x98', '\x2', '\xC17', '\xC15', '\x3', '\x2', 
		'\x2', '\x2', '\xC18', '\xC1B', '\x3', '\x2', '\x2', '\x2', '\xC19', '\xC17', 
		'\x3', '\x2', '\x2', '\x2', '\xC19', '\xC1A', '\x3', '\x2', '\x2', '\x2', 
		'\xC1A', '\x12D', '\x3', '\x2', '\x2', '\x2', '\xC1B', '\xC19', '\x3', 
		'\x2', '\x2', '\x2', '\xC1C', '\xC1D', '\x5', '\x466', '\x234', '\x2', 
		'\xC1D', '\xC1E', '\a', '\x13', '\x2', '\x2', '\xC1E', '\xC1F', '\x5', 
		'\x130', '\x99', '\x2', '\xC1F', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\xC20', '\xC21', '\a', '\x30A', '\x2', '\x2', '\xC21', '\xC22', '\x5', 
		'\x132', '\x9A', '\x2', '\xC22', '\xC23', '\a', '\x30B', '\x2', '\x2', 
		'\xC23', '\x131', '\x3', '\x2', '\x2', '\x2', '\xC24', '\xC26', '\x5', 
		'\x466', '\x234', '\x2', '\xC25', '\xC24', '\x3', '\x2', '\x2', '\x2', 
		'\xC25', '\xC26', '\x3', '\x2', '\x2', '\x2', '\xC26', '\xC2A', '\x3', 
		'\x2', '\x2', '\x2', '\xC27', '\xC28', '\a', '\x197', '\x2', '\x2', '\xC28', 
		'\xC29', '\a', '/', '\x2', '\x2', '\xC29', '\xC2B', '\x5', '\x308', '\x185', 
		'\x2', '\xC2A', '\xC27', '\x3', '\x2', '\x2', '\x2', '\xC2A', '\xC2B', 
		'\x3', '\x2', '\x2', '\x2', '\xC2B', '\xC2D', '\x3', '\x2', '\x2', '\x2', 
		'\xC2C', '\xC2E', '\x5', '\x14A', '\xA6', '\x2', '\xC2D', '\xC2C', '\x3', 
		'\x2', '\x2', '\x2', '\xC2D', '\xC2E', '\x3', '\x2', '\x2', '\x2', '\xC2E', 
		'\xC30', '\x3', '\x2', '\x2', '\x2', '\xC2F', '\xC31', '\x5', '\x134', 
		'\x9B', '\x2', '\xC30', '\xC2F', '\x3', '\x2', '\x2', '\x2', '\xC30', 
		'\xC31', '\x3', '\x2', '\x2', '\x2', '\xC31', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\xC32', '\xC33', '\x5', '\x136', '\x9C', '\x2', '\xC33', '\xC35', 
		'\x5', '\x138', '\x9D', '\x2', '\xC34', '\xC36', '\x5', '\x140', '\xA1', 
		'\x2', '\xC35', '\xC34', '\x3', '\x2', '\x2', '\x2', '\xC35', '\xC36', 
		'\x3', '\x2', '\x2', '\x2', '\xC36', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\xC37', '\xC38', '\t', '\"', '\x2', '\x2', '\xC38', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '\xC39', '\xC3C', '\x5', '\x13A', '\x9E', '\x2', '\xC3A', 
		'\xC3C', '\x5', '\x13C', '\x9F', '\x2', '\xC3B', '\xC39', '\x3', '\x2', 
		'\x2', '\x2', '\xC3B', '\xC3A', '\x3', '\x2', '\x2', '\x2', '\xC3C', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC3E', '\a', '\x2BC', '\x2', '\x2', 
		'\xC3E', '\xC4C', '\a', '\x2B7', '\x2', '\x2', '\xC3F', '\xC40', '\x5', 
		'\x47A', '\x23E', '\x2', '\xC40', '\xC41', '\a', '\x2B7', '\x2', '\x2', 
		'\xC41', '\xC4C', '\x3', '\x2', '\x2', '\x2', '\xC42', '\xC43', '\a', 
		'\x315', '\x2', '\x2', '\xC43', '\xC4C', '\a', '\x2B7', '\x2', '\x2', 
		'\xC44', '\xC45', '\a', '\xF9', '\x2', '\x2', '\xC45', '\xC46', '\x5', 
		'\x2A6', '\x154', '\x2', '\xC46', '\xC47', '\x5', '\x2FE', '\x180', '\x2', 
		'\xC47', '\xC48', '\a', '\x2B7', '\x2', '\x2', '\xC48', '\xC4C', '\x3', 
		'\x2', '\x2', '\x2', '\xC49', '\xC4A', '\a', 'g', '\x2', '\x2', '\xC4A', 
		'\xC4C', '\a', '\x1E9', '\x2', '\x2', '\xC4B', '\xC3D', '\x3', '\x2', 
		'\x2', '\x2', '\xC4B', '\xC3F', '\x3', '\x2', '\x2', '\x2', '\xC4B', '\xC42', 
		'\x3', '\x2', '\x2', '\x2', '\xC4B', '\xC44', '\x3', '\x2', '\x2', '\x2', 
		'\xC4B', '\xC49', '\x3', '\x2', '\x2', '\x2', '\xC4C', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\xC4D', '\xC4E', '\a', ' ', '\x2', '\x2', '\xC4E', 
		'\xC4F', '\x5', '\x13E', '\xA0', '\x2', '\xC4F', '\xC50', '\a', '\x11', 
		'\x2', '\x2', '\xC50', '\xC51', '\x5', '\x13E', '\xA0', '\x2', '\xC51', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\xC52', '\xC60', '\x5', '\x13A', 
		'\x9E', '\x2', '\xC53', '\xC54', '\a', '\x2BC', '\x2', '\x2', '\xC54', 
		'\xC60', '\a', '\x2AC', '\x2', '\x2', '\xC55', '\xC56', '\x5', '\x47A', 
		'\x23E', '\x2', '\xC56', '\xC57', '\a', '\x2AC', '\x2', '\x2', '\xC57', 
		'\xC60', '\x3', '\x2', '\x2', '\x2', '\xC58', '\xC59', '\a', '\x315', 
		'\x2', '\x2', '\xC59', '\xC60', '\a', '\x2AC', '\x2', '\x2', '\xC5A', 
		'\xC5B', '\a', '\xF9', '\x2', '\x2', '\xC5B', '\xC5C', '\x5', '\x2A6', 
		'\x154', '\x2', '\xC5C', '\xC5D', '\x5', '\x2FE', '\x180', '\x2', '\xC5D', 
		'\xC5E', '\a', '\x2AC', '\x2', '\x2', '\xC5E', '\xC60', '\x3', '\x2', 
		'\x2', '\x2', '\xC5F', '\xC52', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC53', 
		'\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC55', '\x3', '\x2', '\x2', '\x2', 
		'\xC5F', '\xC58', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC5A', '\x3', 
		'\x2', '\x2', '\x2', '\xC60', '\x13F', '\x3', '\x2', '\x2', '\x2', '\xC61', 
		'\xC68', '\a', '\x2AA', '\x2', '\x2', '\xC62', '\xC63', '\a', 'g', '\x2', 
		'\x2', '\xC63', '\xC69', '\a', '\x1E9', '\x2', '\x2', '\xC64', '\xC69', 
		'\a', '\xDB', '\x2', '\x2', '\xC65', '\xC69', '\a', '\x2BB', '\x2', '\x2', 
		'\xC66', '\xC67', '\a', '\x177', '\x2', '\x2', '\xC67', '\xC69', '\a', 
		'\x2B4', '\x2', '\x2', '\xC68', '\xC62', '\x3', '\x2', '\x2', '\x2', '\xC68', 
		'\xC64', '\x3', '\x2', '\x2', '\x2', '\xC68', '\xC65', '\x3', '\x2', '\x2', 
		'\x2', '\xC68', '\xC66', '\x3', '\x2', '\x2', '\x2', '\xC69', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\xC6A', '\xC6C', '\a', '\x287', '\x2', '\x2', 
		'\xC6B', '\xC6D', '\a', '\x29B', '\x2', '\x2', '\xC6C', '\xC6B', '\x3', 
		'\x2', '\x2', '\x2', '\xC6C', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC6D', 
		'\xC6E', '\x3', '\x2', '\x2', '\x2', '\xC6E', '\xC73', '\x5', '\x144', 
		'\xA3', '\x2', '\xC6F', '\xC70', '\a', '\x307', '\x2', '\x2', '\xC70', 
		'\xC72', '\x5', '\x144', '\xA3', '\x2', '\xC71', '\xC6F', '\x3', '\x2', 
		'\x2', '\x2', '\xC72', '\xC75', '\x3', '\x2', '\x2', '\x2', '\xC73', '\xC71', 
		'\x3', '\x2', '\x2', '\x2', '\xC73', '\xC74', '\x3', '\x2', '\x2', '\x2', 
		'\xC74', '\x143', '\x3', '\x2', '\x2', '\x2', '\xC75', '\xC73', '\x3', 
		'\x2', '\x2', '\x2', '\xC76', '\xC78', '\x5', '\x46A', '\x236', '\x2', 
		'\xC77', '\xC79', '\x5', '\x416', '\x20C', '\x2', '\xC78', '\xC77', '\x3', 
		'\x2', '\x2', '\x2', '\xC78', '\xC79', '\x3', '\x2', '\x2', '\x2', '\xC79', 
		'\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC7A', '\xC7B', '\a', '\x13', '\x2', 
		'\x2', '\xC7B', '\xC7C', '\x5', '\x11A', '\x8E', '\x2', '\xC7C', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\xC7D', '\xC7E', '\a', '\xDB', '\x2', '\x2', 
		'\xC7E', '\xC7F', '\a', '/', '\x2', '\x2', '\xC7F', '\xC81', '\x5', '\x308', 
		'\x185', '\x2', '\xC80', '\xC82', '\x5', '\x148', '\xA5', '\x2', '\xC81', 
		'\xC80', '\x3', '\x2', '\x2', '\x2', '\xC81', '\xC82', '\x3', '\x2', '\x2', 
		'\x2', '\xC82', '\x147', '\x3', '\x2', '\x2', '\x2', '\xC83', '\xC84', 
		'\a', '\x287', '\x2', '\x2', '\xC84', '\xC89', '\a', '\x1E3', '\x2', '\x2', 
		'\xC85', '\xC86', '\x6', '\xA5', '\x34', '\x2', '\xC86', '\xC87', '\a', 
		'\x287', '\x2', '\x2', '\xC87', '\xC89', '\a', '\x65', '\x2', '\x2', '\xC88', 
		'\xC83', '\x3', '\x2', '\x2', '\x2', '\xC88', '\xC85', '\x3', '\x2', '\x2', 
		'\x2', '\xC89', '\x149', '\x3', '\x2', '\x2', '\x2', '\xC8A', '\xC8B', 
		'\a', '\x18B', '\x2', '\x2', '\xC8B', '\xC8C', '\a', '/', '\x2', '\x2', 
		'\xC8C', '\xC8D', '\x5', '\x308', '\x185', '\x2', '\xC8D', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\xC8E', '\xC8F', '\t', '#', '\x2', '\x2', '\xC8F', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\xC90', '\xC93', '\a', '\xCD', '\x2', 
		'\x2', '\xC91', '\xC94', '\a', '\x97', '\x2', '\x2', '\xC92', '\xC94', 
		'\x5', '\x150', '\xA9', '\x2', '\xC93', '\xC91', '\x3', '\x2', '\x2', 
		'\x2', '\xC93', '\xC92', '\x3', '\x2', '\x2', '\x2', '\xC94', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\xC95', '\xC9A', '\x5', '\x16A', '\xB6', 
		'\x2', '\xC96', '\xC97', '\a', '\x307', '\x2', '\x2', '\xC97', '\xC99', 
		'\x5', '\x16A', '\xB6', '\x2', '\xC98', '\xC96', '\x3', '\x2', '\x2', 
		'\x2', '\xC99', '\xC9C', '\x3', '\x2', '\x2', '\x2', '\xC9A', '\xC98', 
		'\x3', '\x2', '\x2', '\x2', '\xC9A', '\xC9B', '\x3', '\x2', '\x2', '\x2', 
		'\xC9B', '\x151', '\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC9A', '\x3', 
		'\x2', '\x2', '\x2', '\xC9D', '\xC9E', '\a', '\x274', '\x2', '\x2', '\xC9E', 
		'\xCA3', '\x5', '\x156', '\xAC', '\x2', '\xC9F', '\xCA0', '\a', '\x307', 
		'\x2', '\x2', '\xCA0', '\xCA2', '\x5', '\x156', '\xAC', '\x2', '\xCA1', 
		'\xC9F', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA5', '\x3', '\x2', '\x2', 
		'\x2', '\xCA3', '\xCA1', '\x3', '\x2', '\x2', '\x2', '\xCA3', '\xCA4', 
		'\x3', '\x2', '\x2', '\x2', '\xCA4', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\xCA5', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xCA6', '\xCA7', '\a', 
		'\x240', '\x2', '\x2', '\xCA7', '\xCA8', '\x5', '\x450', '\x229', '\x2', 
		'\xCA8', '\x155', '\x3', '\x2', '\x2', '\x2', '\xCA9', '\xCAA', '\a', 
		'\x1E9', '\x2', '\x2', '\xCAA', '\xCAC', '\a', '\x30A', '\x2', '\x2', 
		'\xCAB', '\xCAD', '\x5', '\xF8', '}', '\x2', '\xCAC', '\xCAB', '\x3', 
		'\x2', '\x2', '\x2', '\xCAC', '\xCAD', '\x3', '\x2', '\x2', '\x2', '\xCAD', 
		'\xCAE', '\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCAF', '\a', '\x30B', 
		'\x2', '\x2', '\xCAF', '\x157', '\x3', '\x2', '\x2', '\x2', '\xCB0', '\xCB9', 
		'\x5', '\x11C', '\x8F', '\x2', '\xCB1', '\xCB9', '\a', '\x219', '\x2', 
		'\x2', '\xCB2', '\xCB3', '\x6', '\xAD', '\x35', '\x2', '\xCB3', '\xCB9', 
		'\a', '\x217', '\x2', '\x2', '\xCB4', '\xCB5', '\x6', '\xAD', '\x36', 
		'\x2', '\xCB5', '\xCB6', '\a', '\x147', '\x2', '\x2', '\xCB6', '\xCB7', 
		'\a', '\x2F0', '\x2', '\x2', '\xCB7', '\xCB9', '\x5', '\x478', '\x23D', 
		'\x2', '\xCB8', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\xCB8', '\xCB1', 
		'\x3', '\x2', '\x2', '\x2', '\xCB8', '\xCB2', '\x3', '\x2', '\x2', '\x2', 
		'\xCB8', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCB9', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\xCBA', '\xCBC', '\x5', '\x15C', '\xAF', '\x2', 
		'\xCBB', '\xCBA', '\x3', '\x2', '\x2', '\x2', '\xCBC', '\xCBD', '\x3', 
		'\x2', '\x2', '\x2', '\xCBD', '\xCBB', '\x3', '\x2', '\x2', '\x2', '\xCBD', 
		'\xCBE', '\x3', '\x2', '\x2', '\x2', '\xCBE', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\xCBF', '\xCC0', '\a', '\xCA', '\x2', '\x2', '\xCC0', '\xCC4', 
		'\x5', '\x15E', '\xB0', '\x2', '\xCC1', '\xCC2', '\x6', '\xAF', '\x37', 
		'\x2', '\xCC2', '\xCC3', '\a', '\x29E', '\x2', '\x2', '\xCC3', '\xCC5', 
		'\x5', '\x454', '\x22B', '\x2', '\xCC4', '\xCC1', '\x3', '\x2', '\x2', 
		'\x2', '\xCC4', '\xCC5', '\x3', '\x2', '\x2', '\x2', '\xCC5', '\xCC8', 
		'\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCC7', '\x6', '\xAF', '\x38', '\x2', 
		'\xCC7', '\xCC9', '\x5', '\x160', '\xB1', '\x2', '\xCC8', '\xCC6', '\x3', 
		'\x2', '\x2', '\x2', '\xCC8', '\xCC9', '\x3', '\x2', '\x2', '\x2', '\xCC9', 
		'\xCCF', '\x3', '\x2', '\x2', '\x2', '\xCCA', '\xCCB', '\a', '\x121', 
		'\x2', '\x2', '\xCCB', '\xCCC', '\a', '\xFD', '\x2', '\x2', '\xCCC', '\xCCD', 
		'\a', '\x1FE', '\x2', '\x2', '\xCCD', '\xCCF', '\a', '\x15C', '\x2', '\x2', 
		'\xCCE', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCCE', '\xCCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCCF', '\x15D', '\x3', '\x2', '\x2', '\x2', '\xCD0', 
		'\xCD4', '\a', '\x268', '\x2', '\x2', '\xCD1', '\xCD2', '\x6', '\xB0', 
		'\x39', '\x2', '\xCD2', '\xCD4', '\a', '\x1FE', '\x2', '\x2', '\xCD3', 
		'\xCD0', '\x3', '\x2', '\x2', '\x2', '\xCD3', '\xCD1', '\x3', '\x2', '\x2', 
		'\x2', '\xCD4', '\x15F', '\x3', '\x2', '\x2', '\x2', '\xCD5', '\xCD6', 
		'\a', '\x29F', '\x2', '\x2', '\xCD6', '\xCD9', '\a', '\x2A0', '\x2', '\x2', 
		'\xCD7', '\xCD9', '\a', '\x2A1', '\x2', '\x2', '\xCD8', '\xCD5', '\x3', 
		'\x2', '\x2', '\x2', '\xCD8', '\xCD7', '\x3', '\x2', '\x2', '\x2', '\xCD9', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\xCDA', '\xCDD', '\x5', '\x164', 
		'\xB3', '\x2', '\xCDB', '\xCDD', '\a', '\x2FA', '\x2', '\x2', '\xCDC', 
		'\xCDA', '\x3', '\x2', '\x2', '\x2', '\xCDC', '\xCDB', '\x3', '\x2', '\x2', 
		'\x2', '\xCDD', '\xCE2', '\x3', '\x2', '\x2', '\x2', '\xCDE', '\xCDF', 
		'\a', '\x307', '\x2', '\x2', '\xCDF', '\xCE1', '\x5', '\x164', '\xB3', 
		'\x2', '\xCE0', '\xCDE', '\x3', '\x2', '\x2', '\x2', '\xCE1', '\xCE4', 
		'\x3', '\x2', '\x2', '\x2', '\xCE2', '\xCE0', '\x3', '\x2', '\x2', '\x2', 
		'\xCE2', '\xCE3', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\xCE4', '\xCE2', '\x3', '\x2', '\x2', '\x2', '\xCE5', 
		'\xCEB', '\x5', '\x420', '\x211', '\x2', '\xCE6', '\xCE8', '\x5', '\x2A6', 
		'\x154', '\x2', '\xCE7', '\xCE9', '\x5', '\x166', '\xB4', '\x2', '\xCE8', 
		'\xCE7', '\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCE9', '\x3', '\x2', '\x2', 
		'\x2', '\xCE9', '\xCEB', '\x3', '\x2', '\x2', '\x2', '\xCEA', '\xCE5', 
		'\x3', '\x2', '\x2', '\x2', '\xCEA', '\xCE6', '\x3', '\x2', '\x2', '\x2', 
		'\xCEB', '\x165', '\x3', '\x2', '\x2', '\x2', '\xCEC', '\xCEE', '\a', 
		'\x13', '\x2', '\x2', '\xCED', '\xCEC', '\x3', '\x2', '\x2', '\x2', '\xCED', 
		'\xCEE', '\x3', '\x2', '\x2', '\x2', '\xCEE', '\xCF1', '\x3', '\x2', '\x2', 
		'\x2', '\xCEF', '\xCF2', '\x5', '\x46A', '\x236', '\x2', '\xCF0', '\xCF2', 
		'\x5', '\x484', '\x243', '\x2', '\xCF1', '\xCEF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF1', '\xCF0', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF4', '\a', '\x285', '\x2', '\x2', 
		'\xCF4', '\xCF5', '\x5', '\x2A6', '\x154', '\x2', '\xCF5', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\xCF6', '\xD01', '\x5', '\x176', '\xBC', '\x2', 
		'\xCF7', '\xCFB', '\a', '\x30C', '\x2', '\x2', '\xCF8', '\xCF9', '\x6', 
		'\xB6', ':', '\x2', '\xCF9', '\xCFC', '\x5', '\x46A', '\x236', '\x2', 
		'\xCFA', '\xCFC', '\a', '\x2DE', '\x2', '\x2', '\xCFB', '\xCF8', '\x3', 
		'\x2', '\x2', '\x2', '\xCFB', '\xCFA', '\x3', '\x2', '\x2', '\x2', '\xCFC', 
		'\xCFD', '\x3', '\x2', '\x2', '\x2', '\xCFD', '\xCFE', '\x5', '\x16C', 
		'\xB7', '\x2', '\xCFE', '\xCFF', '\a', '\x30D', '\x2', '\x2', '\xCFF', 
		'\xD01', '\x3', '\x2', '\x2', '\x2', '\xD00', '\xCF6', '\x3', '\x2', '\x2', 
		'\x2', '\xD00', '\xCF7', '\x3', '\x2', '\x2', '\x2', '\xD01', '\xD05', 
		'\x3', '\x2', '\x2', '\x2', '\xD02', '\xD04', '\x5', '\x16E', '\xB8', 
		'\x2', '\xD03', '\xD02', '\x3', '\x2', '\x2', '\x2', '\xD04', '\xD07', 
		'\x3', '\x2', '\x2', '\x2', '\xD05', '\xD03', '\x3', '\x2', '\x2', '\x2', 
		'\xD05', '\xD06', '\x3', '\x2', '\x2', '\x2', '\xD06', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\xD07', '\xD05', '\x3', '\x2', '\x2', '\x2', '\xD08', 
		'\xD0C', '\x5', '\x176', '\xBC', '\x2', '\xD09', '\xD0B', '\x5', '\x16E', 
		'\xB8', '\x2', '\xD0A', '\xD09', '\x3', '\x2', '\x2', '\x2', '\xD0B', 
		'\xD0E', '\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD0A', '\x3', '\x2', '\x2', 
		'\x2', '\xD0C', '\xD0D', '\x3', '\x2', '\x2', '\x2', '\xD0D', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\xD0E', '\xD0C', '\x3', '\x2', '\x2', '\x2', 
		'\xD0F', '\xD10', '\x5', '\x172', '\xBA', '\x2', '\xD10', '\xD15', '\x5', 
		'\x16A', '\xB6', '\x2', '\xD11', '\xD12', '\a', '\x181', '\x2', '\x2', 
		'\xD12', '\xD16', '\x5', '\x2A6', '\x154', '\x2', '\xD13', '\xD14', '\a', 
		'\x26F', '\x2', '\x2', '\xD14', '\xD16', '\x5', '\x46E', '\x238', '\x2', 
		'\xD15', '\xD11', '\x3', '\x2', '\x2', '\x2', '\xD15', '\xD13', '\x3', 
		'\x2', '\x2', '\x2', '\xD15', '\xD16', '\x3', '\x2', '\x2', '\x2', '\xD16', 
		'\xD23', '\x3', '\x2', '\x2', '\x2', '\xD17', '\xD18', '\x5', '\x174', 
		'\xBB', '\x2', '\xD18', '\xD1D', '\x5', '\x16A', '\xB6', '\x2', '\xD19', 
		'\xD1A', '\a', '\x181', '\x2', '\x2', '\xD1A', '\xD1E', '\x5', '\x2A6', 
		'\x154', '\x2', '\xD1B', '\xD1C', '\a', '\x26F', '\x2', '\x2', '\xD1C', 
		'\xD1E', '\x5', '\x46E', '\x238', '\x2', '\xD1D', '\xD19', '\x3', '\x2', 
		'\x2', '\x2', '\xD1D', '\xD1B', '\x3', '\x2', '\x2', '\x2', '\xD1E', '\xD23', 
		'\x3', '\x2', '\x2', '\x2', '\xD1F', '\xD20', '\x5', '\x170', '\xB9', 
		'\x2', '\xD20', '\xD21', '\x5', '\x176', '\xBC', '\x2', '\xD21', '\xD23', 
		'\x3', '\x2', '\x2', '\x2', '\xD22', '\xD0F', '\x3', '\x2', '\x2', '\x2', 
		'\xD22', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD22', '\xD1F', '\x3', 
		'\x2', '\x2', '\x2', '\xD23', '\x16F', '\x3', '\x2', '\x2', '\x2', '\xD24', 
		'\xD26', '\a', '\x169', '\x2', '\x2', '\xD25', '\xD27', '\a', '\xF1', 
		'\x2', '\x2', '\xD26', '\xD25', '\x3', '\x2', '\x2', '\x2', '\xD26', '\xD27', 
		'\x3', '\x2', '\x2', '\x2', '\xD27', '\xD28', '\x3', '\x2', '\x2', '\x2', 
		'\xD28', '\xD30', '\a', '\x107', '\x2', '\x2', '\xD29', '\xD2A', '\a', 
		'\x169', '\x2', '\x2', '\xD2A', '\xD2C', '\t', '$', '\x2', '\x2', '\xD2B', 
		'\xD2D', '\a', '\x18D', '\x2', '\x2', '\xD2C', '\xD2B', '\x3', '\x2', 
		'\x2', '\x2', '\xD2C', '\xD2D', '\x3', '\x2', '\x2', '\x2', '\xD2D', '\xD2E', 
		'\x3', '\x2', '\x2', '\x2', '\xD2E', '\xD30', '\a', '\x107', '\x2', '\x2', 
		'\xD2F', '\xD24', '\x3', '\x2', '\x2', '\x2', '\xD2F', '\xD29', '\x3', 
		'\x2', '\x2', '\x2', '\xD30', '\x171', '\x3', '\x2', '\x2', '\x2', '\xD31', 
		'\xD33', '\t', '%', '\x2', '\x2', '\xD32', '\xD31', '\x3', '\x2', '\x2', 
		'\x2', '\xD32', '\xD33', '\x3', '\x2', '\x2', '\x2', '\xD33', '\xD34', 
		'\x3', '\x2', '\x2', '\x2', '\xD34', '\xD37', '\a', '\x107', '\x2', '\x2', 
		'\xD35', '\xD37', '\a', '\x22D', '\x2', '\x2', '\xD36', '\xD32', '\x3', 
		'\x2', '\x2', '\x2', '\xD36', '\xD35', '\x3', '\x2', '\x2', '\x2', '\xD37', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\xD38', '\xD3A', '\t', '$', '\x2', 
		'\x2', '\xD39', '\xD3B', '\a', '\x18D', '\x2', '\x2', '\xD3A', '\xD39', 
		'\x3', '\x2', '\x2', '\x2', '\xD3A', '\xD3B', '\x3', '\x2', '\x2', '\x2', 
		'\xD3B', '\xD3C', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3D', '\a', 
		'\x107', '\x2', '\x2', '\xD3D', '\x175', '\x3', '\x2', '\x2', '\x2', '\xD3E', 
		'\xD45', '\x5', '\x178', '\xBD', '\x2', '\xD3F', '\xD45', '\x5', '\x17A', 
		'\xBE', '\x2', '\xD40', '\xD45', '\x5', '\x17C', '\xBF', '\x2', '\xD41', 
		'\xD45', '\x5', '\x17E', '\xC0', '\x2', '\xD42', '\xD43', '\x6', '\xBC', 
		';', '\x2', '\xD43', '\xD45', '\x5', '\x180', '\xC1', '\x2', '\xD44', 
		'\xD3E', '\x3', '\x2', '\x2', '\x2', '\xD44', '\xD3F', '\x3', '\x2', '\x2', 
		'\x2', '\xD44', '\xD40', '\x3', '\x2', '\x2', '\x2', '\xD44', '\xD41', 
		'\x3', '\x2', '\x2', '\x2', '\xD44', '\xD42', '\x3', '\x2', '\x2', '\x2', 
		'\xD45', '\x177', '\x3', '\x2', '\x2', '\x2', '\xD46', '\xD48', '\x5', 
		'\x450', '\x229', '\x2', '\xD47', '\xD49', '\x5', '\x40E', '\x208', '\x2', 
		'\xD48', '\xD47', '\x3', '\x2', '\x2', '\x2', '\xD48', '\xD49', '\x3', 
		'\x2', '\x2', '\x2', '\xD49', '\xD4B', '\x3', '\x2', '\x2', '\x2', '\xD4A', 
		'\xD4C', '\x5', '\x190', '\xC9', '\x2', '\xD4B', '\xD4A', '\x3', '\x2', 
		'\x2', '\x2', '\xD4B', '\xD4C', '\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD4E', 
		'\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD4F', '\x5', '\x192', '\xCA', 
		'\x2', '\xD4E', '\xD4D', '\x3', '\x2', '\x2', '\x2', '\xD4E', '\xD4F', 
		'\x3', '\x2', '\x2', '\x2', '\xD4F', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\xD50', '\xD53', '\a', '\x30A', '\x2', '\x2', '\xD51', '\xD54', '\x5', 
		'\x178', '\xBD', '\x2', '\xD52', '\xD54', '\x5', '\x17A', '\xBE', '\x2', 
		'\xD53', '\xD51', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD52', '\x3', 
		'\x2', '\x2', '\x2', '\xD54', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD55', 
		'\xD56', '\a', '\x30B', '\x2', '\x2', '\xD56', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\xD57', '\xD59', '\x5', '\x11A', '\x8E', '\x2', '\xD58', 
		'\xD5A', '\x5', '\x190', '\xC9', '\x2', '\xD59', '\xD58', '\x3', '\x2', 
		'\x2', '\x2', '\xD59', '\xD5A', '\x3', '\x2', '\x2', '\x2', '\xD5A', '\xD5D', 
		'\x3', '\x2', '\x2', '\x2', '\xD5B', '\xD5C', '\x6', '\xBF', '<', '\x2', 
		'\xD5C', '\xD5E', '\x5', '\x416', '\x20C', '\x2', '\xD5D', '\xD5B', '\x3', 
		'\x2', '\x2', '\x2', '\xD5D', '\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD5E', 
		'\xD69', '\x3', '\x2', '\x2', '\x2', '\xD5F', '\xD60', '\x6', '\xBF', 
		'=', '\x2', '\xD60', '\xD61', '\a', '\x2D8', '\x2', '\x2', '\xD61', '\xD63', 
		'\x5', '\x11A', '\x8E', '\x2', '\xD62', '\xD64', '\x5', '\x190', '\xC9', 
		'\x2', '\xD63', '\xD62', '\x3', '\x2', '\x2', '\x2', '\xD63', '\xD64', 
		'\x3', '\x2', '\x2', '\x2', '\xD64', '\xD66', '\x3', '\x2', '\x2', '\x2', 
		'\xD65', '\xD67', '\x5', '\x416', '\x20C', '\x2', '\xD66', '\xD65', '\x3', 
		'\x2', '\x2', '\x2', '\xD66', '\xD67', '\x3', '\x2', '\x2', '\x2', '\xD67', 
		'\xD69', '\x3', '\x2', '\x2', '\x2', '\xD68', '\xD57', '\x3', '\x2', '\x2', 
		'\x2', '\xD68', '\xD5F', '\x3', '\x2', '\x2', '\x2', '\xD69', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\xD6A', '\xD6D', '\a', '\x30A', '\x2', '\x2', 
		'\xD6B', '\xD6E', '\x5', '\x150', '\xA9', '\x2', '\xD6C', '\xD6E', '\x5', 
		'\x17E', '\xC0', '\x2', '\xD6D', '\xD6B', '\x3', '\x2', '\x2', '\x2', 
		'\xD6D', '\xD6C', '\x3', '\x2', '\x2', '\x2', '\xD6E', '\xD6F', '\x3', 
		'\x2', '\x2', '\x2', '\xD6F', '\xD70', '\a', '\x30B', '\x2', '\x2', '\xD70', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\xD71', '\xD72', '\a', '\x2BF', 
		'\x2', '\x2', '\xD72', '\xD73', '\a', '\x30A', '\x2', '\x2', '\xD73', 
		'\xD74', '\x5', '\x2A6', '\x154', '\x2', '\xD74', '\xD75', '\a', '\x307', 
		'\x2', '\x2', '\xD75', '\xD76', '\x5', '\x484', '\x243', '\x2', '\xD76', 
		'\xD77', '\x5', '\x182', '\xC2', '\x2', '\xD77', '\xD79', '\a', '\x30B', 
		'\x2', '\x2', '\xD78', '\xD7A', '\x5', '\x190', '\xC9', '\x2', '\xD79', 
		'\xD78', '\x3', '\x2', '\x2', '\x2', '\xD79', '\xD7A', '\x3', '\x2', '\x2', 
		'\x2', '\xD7A', '\x181', '\x3', '\x2', '\x2', '\x2', '\xD7B', '\xD7C', 
		'\a', 'I', '\x2', '\x2', '\xD7C', '\xD7D', '\a', '\x30A', '\x2', '\x2', 
		'\xD7D', '\xD82', '\x5', '\x184', '\xC3', '\x2', '\xD7E', '\xD7F', '\a', 
		'\x307', '\x2', '\x2', '\xD7F', '\xD81', '\x5', '\x184', '\xC3', '\x2', 
		'\xD80', '\xD7E', '\x3', '\x2', '\x2', '\x2', '\xD81', '\xD84', '\x3', 
		'\x2', '\x2', '\x2', '\xD82', '\xD80', '\x3', '\x2', '\x2', '\x2', '\xD82', 
		'\xD83', '\x3', '\x2', '\x2', '\x2', '\xD83', '\xD85', '\x3', '\x2', '\x2', 
		'\x2', '\xD84', '\xD82', '\x3', '\x2', '\x2', '\x2', '\xD85', '\xD86', 
		'\a', '\x30B', '\x2', '\x2', '\xD86', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\xD87', '\xD88', '\x5', '\x46A', '\x236', '\x2', '\xD88', '\xD89', '\a', 
		'\xCA', '\x2', '\x2', '\xD89', '\xD8A', '\a', '\x2C1', '\x2', '\x2', '\xD8A', 
		'\xD9F', '\x3', '\x2', '\x2', '\x2', '\xD8B', '\xD8C', '\x5', '\x46A', 
		'\x236', '\x2', '\xD8C', '\xD8F', '\x5', '\x396', '\x1CC', '\x2', '\xD8D', 
		'\xD8E', '\x6', '\xC3', '>', '\x2', '\xD8E', '\xD90', '\x5', '\x3DC', 
		'\x1EF', '\x2', '\xD8F', '\xD8D', '\x3', '\x2', '\x2', '\x2', '\xD8F', 
		'\xD90', '\x3', '\x2', '\x2', '\x2', '\xD90', '\xD92', '\x3', '\x2', '\x2', 
		'\x2', '\xD91', '\xD93', '\a', '\xB0', '\x2', '\x2', '\xD92', '\xD91', 
		'\x3', '\x2', '\x2', '\x2', '\xD92', '\xD93', '\x3', '\x2', '\x2', '\x2', 
		'\xD93', '\xD94', '\x3', '\x2', '\x2', '\x2', '\xD94', '\xD95', '\a', 
		'\x2C2', '\x2', '\x2', '\xD95', '\xD97', '\x5', '\x484', '\x243', '\x2', 
		'\xD96', '\xD98', '\x5', '\x186', '\xC4', '\x2', '\xD97', '\xD96', '\x3', 
		'\x2', '\x2', '\x2', '\xD97', '\xD98', '\x3', '\x2', '\x2', '\x2', '\xD98', 
		'\xD9F', '\x3', '\x2', '\x2', '\x2', '\xD99', '\xD9A', '\a', '\x2C0', 
		'\x2', '\x2', '\xD9A', '\xD9B', '\a', '\x2C2', '\x2', '\x2', '\xD9B', 
		'\xD9C', '\x5', '\x484', '\x243', '\x2', '\xD9C', '\xD9D', '\x5', '\x182', 
		'\xC2', '\x2', '\xD9D', '\xD9F', '\x3', '\x2', '\x2', '\x2', '\xD9E', 
		'\xD87', '\x3', '\x2', '\x2', '\x2', '\xD9E', '\xD8B', '\x3', '\x2', '\x2', 
		'\x2', '\xD9E', '\xD99', '\x3', '\x2', '\x2', '\x2', '\xD9F', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\xDA0', '\xDA2', '\x5', '\x188', '\xC5', 
		'\x2', '\xDA1', '\xDA3', '\x5', '\x18A', '\xC6', '\x2', '\xDA2', '\xDA1', 
		'\x3', '\x2', '\x2', '\x2', '\xDA2', '\xDA3', '\x3', '\x2', '\x2', '\x2', 
		'\xDA3', '\xDA9', '\x3', '\x2', '\x2', '\x2', '\xDA4', '\xDA6', '\x5', 
		'\x18A', '\xC6', '\x2', '\xDA5', '\xDA7', '\x5', '\x188', '\xC5', '\x2', 
		'\xDA6', '\xDA5', '\x3', '\x2', '\x2', '\x2', '\xDA6', '\xDA7', '\x3', 
		'\x2', '\x2', '\x2', '\xDA7', '\xDA9', '\x3', '\x2', '\x2', '\x2', '\xDA8', 
		'\xDA0', '\x3', '\x2', '\x2', '\x2', '\xDA8', '\xDA4', '\x3', '\x2', '\x2', 
		'\x2', '\xDA9', '\x187', '\x3', '\x2', '\x2', '\x2', '\xDAA', '\xDAB', 
		'\x5', '\x18C', '\xC7', '\x2', '\xDAB', '\xDAC', '\a', '\x181', '\x2', 
		'\x2', '\xDAC', '\xDAD', '\a', '\x2BE', '\x2', '\x2', '\xDAD', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDAF', '\x5', '\x18C', '\xC7', 
		'\x2', '\xDAF', '\xDB0', '\a', '\x181', '\x2', '\x2', '\xDB0', '\xDB1', 
		'\a', '\xA7', '\x2', '\x2', '\xDB1', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\xDB2', '\xDB7', '\a', '\xA7', '\x2', '\x2', '\xDB3', '\xDB7', '\a', 
		'\x17A', '\x2', '\x2', '\xDB4', '\xDB5', '\a', '\x82', '\x2', '\x2', '\xDB5', 
		'\xDB7', '\x5', '\x484', '\x243', '\x2', '\xDB6', '\xDB2', '\x3', '\x2', 
		'\x2', '\x2', '\xDB6', '\xDB3', '\x3', '\x2', '\x2', '\x2', '\xDB6', '\xDB4', 
		'\x3', '\x2', '\x2', '\x2', '\xDB7', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\xDB8', '\xDB9', '\t', '&', '\x2', '\x2', '\xDB9', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\xDBA', '\xDBE', '\a', '\x13', '\x2', '\x2', '\xDBB', '\xDBC', 
		'\x6', '\xC9', '?', '\x2', '\xDBC', '\xDBE', '\a', '\x2F0', '\x2', '\x2', 
		'\xDBD', '\xDBA', '\x3', '\x2', '\x2', '\x2', '\xDBD', '\xDBB', '\x3', 
		'\x2', '\x2', '\x2', '\xDBD', '\xDBE', '\x3', '\x2', '\x2', '\x2', '\xDBE', 
		'\xDBF', '\x3', '\x2', '\x2', '\x2', '\xDBF', '\xDC0', '\x5', '\x46A', 
		'\x236', '\x2', '\xDC0', '\x191', '\x3', '\x2', '\x2', '\x2', '\xDC1', 
		'\xDC6', '\x5', '\x194', '\xCB', '\x2', '\xDC2', '\xDC3', '\a', '\x307', 
		'\x2', '\x2', '\xDC3', '\xDC5', '\x5', '\x194', '\xCB', '\x2', '\xDC4', 
		'\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDC5', '\xDC8', '\x3', '\x2', '\x2', 
		'\x2', '\xDC6', '\xDC4', '\x3', '\x2', '\x2', '\x2', '\xDC6', '\xDC7', 
		'\x3', '\x2', '\x2', '\x2', '\xDC7', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\xDC8', '\xDC6', '\x3', '\x2', '\x2', '\x2', '\xDC9', '\xDCA', '\x5', 
		'\x196', '\xCC', '\x2', '\xDCA', '\xDCC', '\x5', '\x198', '\xCD', '\x2', 
		'\xDCB', '\xDCD', '\x5', '\x19C', '\xCF', '\x2', '\xDCC', '\xDCB', '\x3', 
		'\x2', '\x2', '\x2', '\xDCC', '\xDCD', '\x3', '\x2', '\x2', '\x2', '\xDCD', 
		'\xDCE', '\x3', '\x2', '\x2', '\x2', '\xDCE', '\xDCF', '\a', '\x30A', 
		'\x2', '\x2', '\xDCF', '\xDD0', '\x5', '\x19E', '\xD0', '\x2', '\xDD0', 
		'\xDD1', '\a', '\x30B', '\x2', '\x2', '\xDD1', '\xDDE', '\x3', '\x2', 
		'\x2', '\x2', '\xDD2', '\xDD3', '\a', '\x26E', '\x2', '\x2', '\xDD3', 
		'\xDD5', '\x5', '\x198', '\xCD', '\x2', '\xDD4', '\xDD6', '\x5', '\x19C', 
		'\xCF', '\x2', '\xDD5', '\xDD4', '\x3', '\x2', '\x2', '\x2', '\xDD5', 
		'\xDD6', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDD7', '\xDD9', '\a', '\x30A', '\x2', '\x2', '\xDD8', '\xDDA', 
		'\x5', '\x19E', '\xD0', '\x2', '\xDD9', '\xDD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDD9', '\xDDA', '\x3', '\x2', '\x2', '\x2', '\xDDA', '\xDDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDDC', '\a', '\x30B', '\x2', '\x2', 
		'\xDDC', '\xDDE', '\x3', '\x2', '\x2', '\x2', '\xDDD', '\xDC9', '\x3', 
		'\x2', '\x2', '\x2', '\xDDD', '\xDD2', '\x3', '\x2', '\x2', '\x2', '\xDDE', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDE0', '\t', '\'', '\x2', 
		'\x2', '\xDE0', '\x197', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE2', 
		'\t', '(', '\x2', '\x2', '\xDE2', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\xDE3', '\xDE4', '\a', '\x1A6', '\x2', '\x2', '\xDE4', '\xDEA', '\a', 
		'\x10B', '\x2', '\x2', '\xDE5', '\xDE7', '\a', '\x263', '\x2', '\x2', 
		'\xDE6', '\xDE8', '\x5', '\x198', '\xCD', '\x2', '\xDE7', '\xDE6', '\x3', 
		'\x2', '\x2', '\x2', '\xDE7', '\xDE8', '\x3', '\x2', '\x2', '\x2', '\xDE8', 
		'\xDEA', '\x3', '\x2', '\x2', '\x2', '\xDE9', '\xDE3', '\x3', '\x2', '\x2', 
		'\x2', '\xDE9', '\xDE5', '\x3', '\x2', '\x2', '\x2', '\xDEA', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDF1', '\a', '\xCA', '\x2', '\x2', 
		'\xDEC', '\xDF2', '\a', '\x107', '\x2', '\x2', '\xDED', '\xDEE', '\a', 
		'\x18B', '\x2', '\x2', '\xDEE', '\xDF2', '\a', '/', '\x2', '\x2', '\xDEF', 
		'\xDF0', '\a', '\xDB', '\x2', '\x2', '\xDF0', '\xDF2', '\a', '/', '\x2', 
		'\x2', '\xDF1', '\xDEC', '\x3', '\x2', '\x2', '\x2', '\xDF1', '\xDED', 
		'\x3', '\x2', '\x2', '\x2', '\xDF1', '\xDEF', '\x3', '\x2', '\x2', '\x2', 
		'\xDF2', '\x19D', '\x3', '\x2', '\x2', '\x2', '\xDF3', '\xDF8', '\x5', 
		'\x1A0', '\xD1', '\x2', '\xDF4', '\xDF5', '\a', '\x307', '\x2', '\x2', 
		'\xDF5', '\xDF7', '\x5', '\x1A0', '\xD1', '\x2', '\xDF6', '\xDF4', '\x3', 
		'\x2', '\x2', '\x2', '\xDF7', '\xDFA', '\x3', '\x2', '\x2', '\x2', '\xDF8', 
		'\xDF6', '\x3', '\x2', '\x2', '\x2', '\xDF8', '\xDF9', '\x3', '\x2', '\x2', 
		'\x2', '\xDF9', '\x19F', '\x3', '\x2', '\x2', '\x2', '\xDFA', '\xDF8', 
		'\x3', '\x2', '\x2', '\x2', '\xDFB', '\xDFE', '\x5', '\x46A', '\x236', 
		'\x2', '\xDFC', '\xDFE', '\a', '\x1A6', '\x2', '\x2', '\xDFD', '\xDFB', 
		'\x3', '\x2', '\x2', '\x2', '\xDFD', '\xDFC', '\x3', '\x2', '\x2', '\x2', 
		'\xDFE', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\xDFF', '\xE00', '\x6', 
		'\xD2', '@', '\x2', '\xE00', '\xE02', '\x5', '\x142', '\xA2', '\x2', '\xE01', 
		'\xDFF', '\x3', '\x2', '\x2', '\x2', '\xE01', '\xE02', '\x3', '\x2', '\x2', 
		'\x2', '\xE02', '\xE03', '\x3', '\x2', '\x2', '\x2', '\xE03', '\xE05', 
		'\a', '\x268', '\x2', '\x2', '\xE04', '\xE06', '\a', '\x129', '\x2', '\x2', 
		'\xE05', '\xE04', '\x3', '\x2', '\x2', '\x2', '\xE05', '\xE06', '\x3', 
		'\x2', '\x2', '\x2', '\xE06', '\xE08', '\x3', '\x2', '\x2', '\x2', '\xE07', 
		'\xE09', '\a', '\xEA', '\x2', '\x2', '\xE08', '\xE07', '\x3', '\x2', '\x2', 
		'\x2', '\xE08', '\xE09', '\x3', '\x2', '\x2', '\x2', '\xE09', '\xE0A', 
		'\x3', '\x2', '\x2', '\x2', '\xE0A', '\xE0B', '\x5', '\x150', '\xA9', 
		'\x2', '\xE0B', '\xE0C', '\a', '\x1FC', '\x2', '\x2', '\xE0C', '\xE0E', 
		'\x5', '\x3E4', '\x1F3', '\x2', '\xE0D', '\xE0F', '\x5', '\x168', '\xB5', 
		'\x2', '\xE0E', '\xE0D', '\x3', '\x2', '\x2', '\x2', '\xE0E', '\xE0F', 
		'\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE11', '\x3', '\x2', '\x2', '\x2', 
		'\xE10', '\xE12', '\x5', '\x14A', '\xA6', '\x2', '\xE11', '\xE10', '\x3', 
		'\x2', '\x2', '\x2', '\xE11', '\xE12', '\x3', '\x2', '\x2', '\x2', '\xE12', 
		'\xE14', '\x3', '\x2', '\x2', '\x2', '\xE13', '\xE15', '\x5', '\x120', 
		'\x91', '\x2', '\xE14', '\xE13', '\x3', '\x2', '\x2', '\x2', '\xE14', 
		'\xE15', '\x3', '\x2', '\x2', '\x2', '\xE15', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\xE16', '\xE1B', '\x5', '\x1A6', '\xD4', '\x2', '\xE17', '\xE1B', 
		'\x5', '\x1AC', '\xD7', '\x2', '\xE18', '\xE1B', '\x5', '\x1AE', '\xD8', 
		'\x2', '\xE19', '\xE1B', '\x5', '\x1B4', '\xDB', '\x2', '\xE1A', '\xE16', 
		'\x3', '\x2', '\x2', '\x2', '\xE1A', '\xE17', '\x3', '\x2', '\x2', '\x2', 
		'\xE1A', '\xE18', '\x3', '\x2', '\x2', '\x2', '\xE1A', '\xE19', '\x3', 
		'\x2', '\x2', '\x2', '\xE1B', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\xE1C', 
		'\xE1D', '\a', '\x221', '\x2', '\x2', '\xE1D', '\xE21', '\a', '\x252', 
		'\x2', '\x2', '\xE1E', '\xE20', '\x5', '\x1AA', '\xD6', '\x2', '\xE1F', 
		'\xE1E', '\x3', '\x2', '\x2', '\x2', '\xE20', '\xE23', '\x3', '\x2', '\x2', 
		'\x2', '\xE21', '\xE1F', '\x3', '\x2', '\x2', '\x2', '\xE21', '\xE22', 
		'\x3', '\x2', '\x2', '\x2', '\xE22', '\xE36', '\x3', '\x2', '\x2', '\x2', 
		'\xE23', '\xE21', '\x3', '\x2', '\x2', '\x2', '\xE24', '\xE26', '\a', 
		'O', '\x2', '\x2', '\xE25', '\xE27', '\a', '\x289', '\x2', '\x2', '\xE26', 
		'\xE25', '\x3', '\x2', '\x2', '\x2', '\xE26', '\xE27', '\x3', '\x2', '\x2', 
		'\x2', '\xE27', '\xE2D', '\x3', '\x2', '\x2', '\x2', '\xE28', '\xE2A', 
		'\a', '\x11', '\x2', '\x2', '\xE29', '\xE2B', '\a', '\x177', '\x2', '\x2', 
		'\xE2A', '\xE29', '\x3', '\x2', '\x2', '\x2', '\xE2A', '\xE2B', '\x3', 
		'\x2', '\x2', '\x2', '\xE2B', '\xE2C', '\x3', '\x2', '\x2', '\x2', '\xE2C', 
		'\xE2E', '\a', '\x38', '\x2', '\x2', '\xE2D', '\xE28', '\x3', '\x2', '\x2', 
		'\x2', '\xE2D', '\xE2E', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE33', 
		'\x3', '\x2', '\x2', '\x2', '\xE2F', '\xE31', '\a', '\x177', '\x2', '\x2', 
		'\xE30', '\xE2F', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE31', '\x3', 
		'\x2', '\x2', '\x2', '\xE31', '\xE32', '\x3', '\x2', '\x2', '\x2', '\xE32', 
		'\xE34', '\a', '\x1C4', '\x2', '\x2', '\xE33', '\xE30', '\x3', '\x2', 
		'\x2', '\x2', '\xE33', '\xE34', '\x3', '\x2', '\x2', '\x2', '\xE34', '\xE36', 
		'\x3', '\x2', '\x2', '\x2', '\xE35', '\xE1C', '\x3', '\x2', '\x2', '\x2', 
		'\xE35', '\xE24', '\x3', '\x2', '\x2', '\x2', '\xE36', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\xE37', '\xE39', '\a', '\x1F', '\x2', '\x2', '\xE38', 
		'\xE3A', '\a', '\x289', '\x2', '\x2', '\xE39', '\xE38', '\x3', '\x2', 
		'\x2', '\x2', '\xE39', '\xE3A', '\x3', '\x2', '\x2', '\x2', '\xE3A', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\xE3B', '\xE3C', '\a', '\x287', '\x2', '\x2', 
		'\xE3C', '\xE3D', '\a', 'W', '\x2', '\x2', '\xE3D', '\xE42', '\a', '\x207', 
		'\x2', '\x2', '\xE3E', '\xE3F', '\x6', '\xD6', '\x41', '\x2', '\xE3F', 
		'\xE40', '\a', '\x1B5', '\x2', '\x2', '\xE40', '\xE42', '\t', ')', '\x2', 
		'\x2', '\xE41', '\xE3B', '\x3', '\x2', '\x2', '\x2', '\xE41', '\xE3E', 
		'\x3', '\x2', '\x2', '\x2', '\xE42', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\xE43', '\xE44', '\a', '\x1EB', '\x2', '\x2', '\xE44', '\xE61', '\x5', 
		'\x46A', '\x236', '\x2', '\xE45', '\xE47', '\a', '\x1E2', '\x2', '\x2', 
		'\xE46', '\xE48', '\a', '\x289', '\x2', '\x2', '\xE47', '\xE46', '\x3', 
		'\x2', '\x2', '\x2', '\xE47', '\xE48', '\x3', '\x2', '\x2', '\x2', '\xE48', 
		'\xE5B', '\x3', '\x2', '\x2', '\x2', '\xE49', '\xE4B', '\a', '\x250', 
		'\x2', '\x2', '\xE4A', '\xE4C', '\a', '\x1EB', '\x2', '\x2', '\xE4B', 
		'\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE4B', '\xE4C', '\x3', '\x2', '\x2', 
		'\x2', '\xE4C', '\xE4D', '\x3', '\x2', '\x2', '\x2', '\xE4D', '\xE5C', 
		'\x5', '\x46A', '\x236', '\x2', '\xE4E', '\xE50', '\a', '\x11', '\x2', 
		'\x2', '\xE4F', '\xE51', '\a', '\x177', '\x2', '\x2', '\xE50', '\xE4F', 
		'\x3', '\x2', '\x2', '\x2', '\xE50', '\xE51', '\x3', '\x2', '\x2', '\x2', 
		'\xE51', '\xE52', '\x3', '\x2', '\x2', '\x2', '\xE52', '\xE54', '\a', 
		'\x38', '\x2', '\x2', '\xE53', '\xE4E', '\x3', '\x2', '\x2', '\x2', '\xE53', 
		'\xE54', '\x3', '\x2', '\x2', '\x2', '\xE54', '\xE59', '\x3', '\x2', '\x2', 
		'\x2', '\xE55', '\xE57', '\a', '\x177', '\x2', '\x2', '\xE56', '\xE55', 
		'\x3', '\x2', '\x2', '\x2', '\xE56', '\xE57', '\x3', '\x2', '\x2', '\x2', 
		'\xE57', '\xE58', '\x3', '\x2', '\x2', '\x2', '\xE58', '\xE5A', '\a', 
		'\x1C4', '\x2', '\x2', '\xE59', '\xE56', '\x3', '\x2', '\x2', '\x2', '\xE59', 
		'\xE5A', '\x3', '\x2', '\x2', '\x2', '\xE5A', '\xE5C', '\x3', '\x2', '\x2', 
		'\x2', '\xE5B', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE5B', '\xE53', 
		'\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE61', '\x3', '\x2', '\x2', '\x2', 
		'\xE5D', '\xE5E', '\a', '\x1C4', '\x2', '\x2', '\xE5E', '\xE5F', '\a', 
		'\x1EB', '\x2', '\x2', '\xE5F', '\xE61', '\x5', '\x46A', '\x236', '\x2', 
		'\xE60', '\xE43', '\x3', '\x2', '\x2', '\x2', '\xE60', '\xE45', '\x3', 
		'\x2', '\x2', '\x2', '\xE60', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE61', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\xE62', '\xE63', '\a', '\x121', 
		'\x2', '\x2', '\xE63', '\xE64', '\t', '\x14', '\x2', '\x2', '\xE64', '\xE69', 
		'\x5', '\x1B0', '\xD9', '\x2', '\xE65', '\xE66', '\a', '\x307', '\x2', 
		'\x2', '\xE66', '\xE68', '\x5', '\x1B0', '\xD9', '\x2', '\xE67', '\xE65', 
		'\x3', '\x2', '\x2', '\x2', '\xE68', '\xE6B', '\x3', '\x2', '\x2', '\x2', 
		'\xE69', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE69', '\xE6A', '\x3', 
		'\x2', '\x2', '\x2', '\xE6A', '\xE79', '\x3', '\x2', '\x2', '\x2', '\xE6B', 
		'\xE69', '\x3', '\x2', '\x2', '\x2', '\xE6C', '\xE6D', '\x6', '\xD8', 
		'\x42', '\x2', '\xE6D', '\xE6E', '\a', '\x121', '\x2', '\x2', '\xE6E', 
		'\xE6F', '\a', '\xF6', '\x2', '\x2', '\xE6F', '\xE70', '\a', '\xCA', '\x2', 
		'\x2', '\xE70', '\xE79', '\a', '\x1D', '\x2', '\x2', '\xE71', '\xE76', 
		'\a', '\x265', '\x2', '\x2', '\xE72', '\xE77', '\a', '\x23D', '\x2', '\x2', 
		'\xE73', '\xE77', '\a', '\x240', '\x2', '\x2', '\xE74', '\xE75', '\x6', 
		'\xD8', '\x43', '\x2', '\xE75', '\xE77', '\a', '\xF6', '\x2', '\x2', '\xE76', 
		'\xE72', '\x3', '\x2', '\x2', '\x2', '\xE76', '\xE73', '\x3', '\x2', '\x2', 
		'\x2', '\xE76', '\xE74', '\x3', '\x2', '\x2', '\x2', '\xE77', '\xE79', 
		'\x3', '\x2', '\x2', '\x2', '\xE78', '\xE62', '\x3', '\x2', '\x2', '\x2', 
		'\xE78', '\xE6C', '\x3', '\x2', '\x2', '\x2', '\xE78', '\xE71', '\x3', 
		'\x2', '\x2', '\x2', '\xE79', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\xE7A', 
		'\xE7C', '\x5', '\x450', '\x229', '\x2', '\xE7B', '\xE7D', '\x5', '\x190', 
		'\xC9', '\x2', '\xE7C', '\xE7B', '\x3', '\x2', '\x2', '\x2', '\xE7C', 
		'\xE7D', '\x3', '\x2', '\x2', '\x2', '\xE7D', '\xE7E', '\x3', '\x2', '\x2', 
		'\x2', '\xE7E', '\xE7F', '\x5', '\x1B2', '\xDA', '\x2', '\xE7F', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\xE80', '\xE82', '\a', '\x1B5', '\x2', '\x2', 
		'\xE81', '\xE83', '\a', '\x11E', '\x2', '\x2', '\xE82', '\xE81', '\x3', 
		'\x2', '\x2', '\x2', '\xE82', '\xE83', '\x3', '\x2', '\x2', '\x2', '\xE83', 
		'\xE89', '\x3', '\x2', '\x2', '\x2', '\xE84', '\xE86', '\a', '\x129', 
		'\x2', '\x2', '\xE85', '\xE84', '\x3', '\x2', '\x2', '\x2', '\xE85', '\xE86', 
		'\x3', '\x2', '\x2', '\x2', '\xE86', '\xE87', '\x3', '\x2', '\x2', '\x2', 
		'\xE87', '\xE89', '\a', '\x28B', '\x2', '\x2', '\xE88', '\xE80', '\x3', 
		'\x2', '\x2', '\x2', '\xE88', '\xE85', '\x3', '\x2', '\x2', '\x2', '\xE89', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\xE8A', '\xEA5', '\a', '\x28D', 
		'\x2', '\x2', '\xE8B', '\xE8C', '\t', '*', '\x2', '\x2', '\xE8C', '\xE8E', 
		'\x5', '\x1B8', '\xDD', '\x2', '\xE8D', '\xE8F', '\t', '+', '\x2', '\x2', 
		'\xE8E', '\xE8D', '\x3', '\x2', '\x2', '\x2', '\xE8E', '\xE8F', '\x3', 
		'\x2', '\x2', '\x2', '\xE8F', '\xEA6', '\x3', '\x2', '\x2', '\x2', '\xE90', 
		'\xE91', '\a', '\xA1', '\x2', '\x2', '\xE91', '\xE97', '\x5', '\x1B8', 
		'\xDD', '\x2', '\xE92', '\xE95', '\a', '\x238', '\x2', '\x2', '\xE93', 
		'\xE94', '\a', '\xCA', '\x2', '\x2', '\xE94', '\xE96', '\a', '\x156', 
		'\x2', '\x2', '\xE95', '\xE93', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xE96', 
		'\x3', '\x2', '\x2', '\x2', '\xE96', '\xE98', '\x3', '\x2', '\x2', '\x2', 
		'\xE97', '\xE92', '\x3', '\x2', '\x2', '\x2', '\xE97', '\xE98', '\x3', 
		'\x2', '\x2', '\x2', '\xE98', '\xEA6', '\x3', '\x2', '\x2', '\x2', '\xE99', 
		'\xE9A', '\a', '\x1A3', '\x2', '\x2', '\xE9A', '\xEA6', '\x5', '\x1B8', 
		'\xDD', '\x2', '\xE9B', '\xE9C', '\a', 'O', '\x2', '\x2', '\xE9C', '\xE9F', 
		'\x5', '\x1B8', '\xDD', '\x2', '\xE9D', '\xE9E', '\a', '\x182', '\x2', 
		'\x2', '\xE9E', '\xEA0', '\a', '\x199', '\x2', '\x2', '\xE9F', '\xE9D', 
		'\x3', '\x2', '\x2', '\x2', '\xE9F', '\xEA0', '\x3', '\x2', '\x2', '\x2', 
		'\xEA0', '\xEA6', '\x3', '\x2', '\x2', '\x2', '\xEA1', '\xEA2', '\a', 
		'\x1E2', '\x2', '\x2', '\xEA2', '\xEA6', '\x5', '\x1B8', '\xDD', '\x2', 
		'\xEA3', '\xEA4', '\a', '\x1B9', '\x2', '\x2', '\xEA4', '\xEA6', '\x5', 
		'\x1B6', '\xDC', '\x2', '\xEA5', '\xE8B', '\x3', '\x2', '\x2', '\x2', 
		'\xEA5', '\xE90', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xE99', '\x3', 
		'\x2', '\x2', '\x2', '\xEA5', '\xE9B', '\x3', '\x2', '\x2', '\x2', '\xEA5', 
		'\xEA1', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA3', '\x3', '\x2', '\x2', 
		'\x2', '\xEA6', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEAA', 
		'\x6', '\xDC', '\x44', '\x2', '\xEA8', '\xEA9', '\a', '`', '\x2', '\x2', 
		'\xEA9', '\xEAB', '\a', '\x28E', '\x2', '\x2', '\xEAA', '\xEA8', '\x3', 
		'\x2', '\x2', '\x2', '\xEAA', '\xEAB', '\x3', '\x2', '\x2', '\x2', '\xEAB', 
		'\xEAE', '\x3', '\x2', '\x2', '\x2', '\xEAC', '\xEAE', '\x3', '\x2', '\x2', 
		'\x2', '\xEAD', '\xEA7', '\x3', '\x2', '\x2', '\x2', '\xEAD', '\xEAC', 
		'\x3', '\x2', '\x2', '\x2', '\xEAE', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\xEAF', '\xEB6', '\x5', '\x486', '\x244', '\x2', '\xEB0', '\xEB1', '\a', 
		'\x307', '\x2', '\x2', '\xEB1', '\xEB4', '\x5', '\x486', '\x244', '\x2', 
		'\xEB2', '\xEB3', '\a', '\x307', '\x2', '\x2', '\xEB3', '\xEB5', '\x5', 
		'\x476', '\x23C', '\x2', '\xEB4', '\xEB2', '\x3', '\x2', '\x2', '\x2', 
		'\xEB4', '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEB5', '\xEB7', '\x3', 
		'\x2', '\x2', '\x2', '\xEB6', '\xEB0', '\x3', '\x2', '\x2', '\x2', '\xEB6', 
		'\xEB7', '\x3', '\x2', '\x2', '\x2', '\xEB7', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB8', '\xEB9', '\a', '\x1AE', '\x2', '\x2', '\xEB9', '\xEBA', 
		'\t', ',', '\x2', '\x2', '\xEBA', '\xEBF', '\a', '\x123', '\x2', '\x2', 
		'\xEBB', '\xEBC', '\a', '\x250', '\x2', '\x2', '\xEBC', '\xEC0', '\x5', 
		'\x48A', '\x246', '\x2', '\xEBD', '\xEBE', '\a', '\x1E', '\x2', '\x2', 
		'\xEBE', '\xEC0', '\x5', '\x2A6', '\x154', '\x2', '\xEBF', '\xEBB', '\x3', 
		'\x2', '\x2', '\x2', '\xEBF', '\xEBD', '\x3', '\x2', '\x2', '\x2', '\xEC0', 
		'\xEDA', '\x3', '\x2', '\x2', '\x2', '\xEC1', '\xEDA', '\x5', '\x1C2', 
		'\xE2', '\x2', '\xEC2', '\xEC3', '\a', '\x1D6', '\x2', '\x2', '\xEC3', 
		'\xEC8', '\x5', '\x1BC', '\xDF', '\x2', '\xEC4', '\xEC5', '\a', '\x307', 
		'\x2', '\x2', '\xEC5', '\xEC7', '\x5', '\x1BC', '\xDF', '\x2', '\xEC6', 
		'\xEC4', '\x3', '\x2', '\x2', '\x2', '\xEC7', '\xECA', '\x3', '\x2', '\x2', 
		'\x2', '\xEC8', '\xEC6', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xEC9', 
		'\x3', '\x2', '\x2', '\x2', '\xEC9', '\xEDA', '\x3', '\x2', '\x2', '\x2', 
		'\xECA', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\xECB', '\xECC', '\x6', 
		'\xDE', '\x45', '\x2', '\xECC', '\xECD', '\a', '\x1D6', '\x2', '\x2', 
		'\xECD', '\xED1', '\a', '\x294', '\x2', '\x2', '\xECE', '\xECF', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\xECF', '\xED0', '\x5', '\x46A', '\x236', '\x2', 
		'\xED0', '\xED2', '\x3', '\x2', '\x2', '\x2', '\xED1', '\xECE', '\x3', 
		'\x2', '\x2', '\x2', '\xED1', '\xED2', '\x3', '\x2', '\x2', '\x2', '\xED2', 
		'\xEDA', '\x3', '\x2', '\x2', '\x2', '\xED3', '\xEDA', '\x5', '\x1E0', 
		'\xF1', '\x2', '\xED4', '\xED5', '\x6', '\xDE', '\x46', '\x2', '\xED5', 
		'\xEDA', '\x5', '\x1D2', '\xEA', '\x2', '\xED6', '\xEDA', '\x5', '\x1C0', 
		'\xE1', '\x2', '\xED7', '\xED8', '\x6', '\xDE', 'G', '\x2', '\xED8', '\xEDA', 
		'\x5', '\x1EA', '\xF6', '\x2', '\xED9', '\xEB8', '\x3', '\x2', '\x2', 
		'\x2', '\xED9', '\xEC1', '\x3', '\x2', '\x2', '\x2', '\xED9', '\xEC2', 
		'\x3', '\x2', '\x2', '\x2', '\xED9', '\xECB', '\x3', '\x2', '\x2', '\x2', 
		'\xED9', '\xED3', '\x3', '\x2', '\x2', '\x2', '\xED9', '\xED4', '\x3', 
		'\x2', '\x2', '\x2', '\xED9', '\xED6', '\x3', '\x2', '\x2', '\x2', '\xED9', 
		'\xED7', '\x3', '\x2', '\x2', '\x2', '\xEDA', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\xEDB', '\xEDD', '\a', '\x13E', '\x2', '\x2', '\xEDC', '\xEDE', 
		'\x5', '\x1BE', '\xE0', '\x2', '\xEDD', '\xEDC', '\x3', '\x2', '\x2', 
		'\x2', '\xEDD', '\xEDE', '\x3', '\x2', '\x2', '\x2', '\xEDE', '\xEEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEDF', '\xEE0', '\x6', '\xDF', 'H', '\x2', 
		'\xEE0', '\xEE1', '\a', '\x1B0', '\x2', '\x2', '\xEE1', '\xEEA', '\a', 
		'\x31', '\x2', '\x2', '\xEE2', '\xEE4', '\a', '\x204', '\x2', '\x2', '\xEE3', 
		'\xEE5', '\a', '\f', '\x2', '\x2', '\xEE4', '\xEE3', '\x3', '\x2', '\x2', 
		'\x2', '\xEE4', '\xEE5', '\x3', '\x2', '\x2', '\x2', '\xEE5', '\xEE7', 
		'\x3', '\x2', '\x2', '\x2', '\xEE6', '\xEE8', '\x5', '\x310', '\x189', 
		'\x2', '\xEE7', '\xEE6', '\x3', '\x2', '\x2', '\x2', '\xEE7', '\xEE8', 
		'\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEEA', '\x3', '\x2', '\x2', '\x2', 
		'\xEE9', '\xEDB', '\x3', '\x2', '\x2', '\x2', '\xEE9', '\xEDF', '\x3', 
		'\x2', '\x2', '\x2', '\xEE9', '\xEE2', '\x3', '\x2', '\x2', '\x2', '\xEEA', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\xEEB', '\xEEC', '\x6', '\xE0', 
		'I', '\x2', '\xEEC', '\xEF1', '\a', '\x250', '\x2', '\x2', '\xEED', '\xEEE', 
		'\x6', '\xE0', 'J', '\x2', '\xEEE', '\xEF2', '\x5', '\x478', '\x23D', 
		'\x2', '\xEEF', '\xEF0', '\x6', '\xE0', 'K', '\x2', '\xEF0', '\xEF2', 
		'\x5', '\x47C', '\x23F', '\x2', '\xEF1', '\xEED', '\x3', '\x2', '\x2', 
		'\x2', '\xEF1', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEF2', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\xEF3', '\xEF7', '\a', '\x11B', '\x2', '\x2', 
		'\xEF4', '\xEF8', '\a', 'r', '\x2', '\x2', '\xEF5', '\xEF6', '\a', '\x240', 
		'\x2', '\x2', '\xEF6', '\xEF8', '\x5', '\x450', '\x229', '\x2', '\xEF7', 
		'\xEF4', '\x3', '\x2', '\x2', '\x2', '\xEF7', '\xEF5', '\x3', '\x2', '\x2', 
		'\x2', '\xEF8', '\xEF9', '\x3', '\x2', '\x2', '\x2', '\xEF9', '\xEFA', 
		'\a', '\xCD', '\x2', '\x2', '\xEFA', '\xEFB', '\a', '\x13E', '\x2', '\x2', 
		'\xEFB', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\xEFC', '\xEFD', '\a', 
		'\x39', '\x2', '\x2', '\xEFD', '\xEFE', '\a', '\x13E', '\x2', '\x2', '\xEFE', 
		'\xEFF', '\a', '\x250', '\x2', '\x2', '\xEFF', '\xF01', '\x5', '\x1C4', 
		'\xE3', '\x2', '\xF00', '\xF02', '\x5', '\x310', '\x189', '\x2', '\xF01', 
		'\xF00', '\x3', '\x2', '\x2', '\x2', '\xF01', '\xF02', '\x3', '\x2', '\x2', 
		'\x2', '\xF02', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\xF03', '\xF08', 
		'\x5', '\x1C6', '\xE4', '\x2', '\xF04', '\xF05', '\a', '\x307', '\x2', 
		'\x2', '\xF05', '\xF07', '\x5', '\x1C6', '\xE4', '\x2', '\xF06', '\xF04', 
		'\x3', '\x2', '\x2', '\x2', '\xF07', '\xF0A', '\x3', '\x2', '\x2', '\x2', 
		'\xF08', '\xF06', '\x3', '\x2', '\x2', '\x2', '\xF08', '\xF09', '\x3', 
		'\x2', '\x2', '\x2', '\xF09', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\xF0A', 
		'\xF08', '\x3', '\x2', '\x2', '\x2', '\xF0B', '\xF0C', '\a', '\x12E', 
		'\x2', '\x2', '\xF0C', '\xF0D', '\a', '\x2F0', '\x2', '\x2', '\xF0D', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF0E', '\xF0F', '\a', '\x2DB', 
		'\x2', '\x2', '\xF0F', '\xF10', '\a', '\x2F0', '\x2', '\x2', '\xF10', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF11', '\xF12', '\a', '\x12B', 
		'\x2', '\x2', '\xF12', '\xF13', '\a', '\x2F0', '\x2', '\x2', '\xF13', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF14', '\xF15', '\a', '\x140', 
		'\x2', '\x2', '\xF15', '\xF16', '\a', '\x2F0', '\x2', '\x2', '\xF16', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF17', '\xF18', '\a', '\x131', 
		'\x2', '\x2', '\xF18', '\xF19', '\a', '\x2F0', '\x2', '\x2', '\xF19', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF1A', '\xF1B', '\a', '\x132', 
		'\x2', '\x2', '\xF1B', '\xF1C', '\a', '\x2F0', '\x2', '\x2', '\xF1C', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF1D', '\xF1E', '\a', '\x12C', 
		'\x2', '\x2', '\xF1E', '\xF1F', '\a', '\x2F0', '\x2', '\x2', '\xF1F', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF20', '\xF21', '\a', '\x133', 
		'\x2', '\x2', '\xF21', '\xF22', '\a', '\x2F0', '\x2', '\x2', '\xF22', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF23', '\xF24', '\a', '\x12D', 
		'\x2', '\x2', '\xF24', '\xF25', '\a', '\x2F0', '\x2', '\x2', '\xF25', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF26', '\xF27', '\a', '\x13C', 
		'\x2', '\x2', '\xF27', '\xF28', '\a', '\x2F0', '\x2', '\x2', '\xF28', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF29', '\xF2A', '\a', '\x136', 
		'\x2', '\x2', '\xF2A', '\xF2B', '\a', '\x2F0', '\x2', '\x2', '\xF2B', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF2C', '\xF2D', '\a', '\x135', 
		'\x2', '\x2', '\xF2D', '\xF2E', '\a', '\x2F0', '\x2', '\x2', '\xF2E', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF2F', '\xF30', '\a', '\x13F', 
		'\x2', '\x2', '\xF30', '\xF31', '\a', '\x2F0', '\x2', '\x2', '\xF31', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF32', '\xF33', '\a', '\x137', 
		'\x2', '\x2', '\xF33', '\xF34', '\a', '\x2F0', '\x2', '\x2', '\xF34', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF35', '\xF36', '\a', '\x2E4', 
		'\x2', '\x2', '\xF36', '\xF37', '\a', '\x2F0', '\x2', '\x2', '\xF37', 
		'\xF67', '\x5', '\x1CC', '\xE7', '\x2', '\xF38', '\xF39', '\a', '\x138', 
		'\x2', '\x2', '\xF39', '\xF3A', '\a', '\x2F0', '\x2', '\x2', '\xF3A', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF3B', '\xF3C', '\a', '\x13B', 
		'\x2', '\x2', '\xF3C', '\xF3D', '\a', '\x2F0', '\x2', '\x2', '\xF3D', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF3E', '\xF3F', '\a', '\x13D', 
		'\x2', '\x2', '\xF3F', '\xF40', '\a', '\x2F0', '\x2', '\x2', '\xF40', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF41', '\xF42', '\a', '\x139', 
		'\x2', '\x2', '\xF42', '\xF43', '\a', '\x2F0', '\x2', '\x2', '\xF43', 
		'\xF67', '\x5', '\x48A', '\x246', '\x2', '\xF44', '\xF45', '\a', '\x13A', 
		'\x2', '\x2', '\xF45', '\xF46', '\a', '\x2F0', '\x2', '\x2', '\xF46', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF47', '\xF48', '\a', '\x2CA', 
		'\x2', '\x2', '\xF48', '\xF49', '\a', '\x2F0', '\x2', '\x2', '\xF49', 
		'\xF67', '\x5', '\x48C', '\x247', '\x2', '\xF4A', '\xF4B', '\a', '\x2CB', 
		'\x2', '\x2', '\xF4B', '\xF4C', '\a', '\x2F0', '\x2', '\x2', '\xF4C', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF4D', '\xF4E', '\a', '\x141', 
		'\x2', '\x2', '\xF4E', '\xF4F', '\a', '\x2F0', '\x2', '\x2', '\xF4F', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF50', '\xF51', '\a', '\xEB', 
		'\x2', '\x2', '\xF51', '\xF52', '\a', '\x2F0', '\x2', '\x2', '\xF52', 
		'\xF67', '\x5', '\x1D0', '\xE9', '\x2', '\xF53', '\xF54', '\a', '\x2E1', 
		'\x2', '\x2', '\xF54', '\xF55', '\a', '\x2F0', '\x2', '\x2', '\xF55', 
		'\xF67', '\x5', '\x484', '\x243', '\x2', '\xF56', '\xF57', '\a', '\x2E2', 
		'\x2', '\x2', '\xF57', '\xF58', '\a', '\x2F0', '\x2', '\x2', '\xF58', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF59', '\xF5A', '\a', '\x12A', 
		'\x2', '\x2', '\xF5A', '\xF5B', '\a', '\x2F0', '\x2', '\x2', '\xF5B', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF5C', '\xF5D', '\a', '\x2E3', 
		'\x2', '\x2', '\xF5D', '\xF5E', '\a', '\x2F0', '\x2', '\x2', '\xF5E', 
		'\xF67', '\x5', '\x1C8', '\xE5', '\x2', '\xF5F', '\xF60', '\a', '\x2E5', 
		'\x2', '\x2', '\xF60', '\xF61', '\a', '\x2F0', '\x2', '\x2', '\xF61', 
		'\xF67', '\x5', '\x476', '\x23C', '\x2', '\xF62', '\xF63', '\a', '\x2E8', 
		'\x2', '\x2', '\xF63', '\xF64', '\a', '\x2F0', '\x2', '\x2', '\xF64', 
		'\xF67', '\x5', '\x1CA', '\xE6', '\x2', '\xF65', '\xF67', '\x5', '\x1CE', 
		'\xE8', '\x2', '\xF66', '\xF0B', '\x3', '\x2', '\x2', '\x2', '\xF66', 
		'\xF0E', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF11', '\x3', '\x2', '\x2', 
		'\x2', '\xF66', '\xF14', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF17', 
		'\x3', '\x2', '\x2', '\x2', '\xF66', '\xF1A', '\x3', '\x2', '\x2', '\x2', 
		'\xF66', '\xF1D', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF20', '\x3', 
		'\x2', '\x2', '\x2', '\xF66', '\xF23', '\x3', '\x2', '\x2', '\x2', '\xF66', 
		'\xF26', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF29', '\x3', '\x2', '\x2', 
		'\x2', '\xF66', '\xF2C', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF2F', 
		'\x3', '\x2', '\x2', '\x2', '\xF66', '\xF32', '\x3', '\x2', '\x2', '\x2', 
		'\xF66', '\xF35', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF38', '\x3', 
		'\x2', '\x2', '\x2', '\xF66', '\xF3B', '\x3', '\x2', '\x2', '\x2', '\xF66', 
		'\xF3E', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF41', '\x3', '\x2', '\x2', 
		'\x2', '\xF66', '\xF44', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF47', 
		'\x3', '\x2', '\x2', '\x2', '\xF66', '\xF4A', '\x3', '\x2', '\x2', '\x2', 
		'\xF66', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF50', '\x3', 
		'\x2', '\x2', '\x2', '\xF66', '\xF53', '\x3', '\x2', '\x2', '\x2', '\xF66', 
		'\xF56', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF59', '\x3', '\x2', '\x2', 
		'\x2', '\xF66', '\xF5C', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF5F', 
		'\x3', '\x2', '\x2', '\x2', '\xF66', '\xF62', '\x3', '\x2', '\x2', '\x2', 
		'\xF66', '\xF65', '\x3', '\x2', '\x2', '\x2', '\xF67', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\xF68', '\xF6B', '\x5', '\x402', '\x202', '\x2', 
		'\xF69', '\xF6B', '\a', '\x17A', '\x2', '\x2', '\xF6A', '\xF68', '\x3', 
		'\x2', '\x2', '\x2', '\xF6A', '\xF69', '\x3', '\x2', '\x2', '\x2', '\xF6B', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF6D', '\t', '-', '\x2', 
		'\x2', '\xF6D', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xF6E', '\xF71', 
		'\x5', '\x48C', '\x247', '\x2', '\xF6F', '\xF71', '\a', '\x17A', '\x2', 
		'\x2', '\xF70', '\xF6E', '\x3', '\x2', '\x2', '\x2', '\xF70', '\xF6F', 
		'\x3', '\x2', '\x2', '\x2', '\xF71', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\xF72', '\xF73', '\a', '\x12F', '\x2', '\x2', '\xF73', '\xF74', '\a', 
		'\x2F0', '\x2', '\x2', '\xF74', '\xF7F', '\x5', '\x48C', '\x247', '\x2', 
		'\xF75', '\xF76', '\a', '\x130', '\x2', '\x2', '\xF76', '\xF77', '\a', 
		'\x2F0', '\x2', '\x2', '\xF77', '\xF7F', '\x5', '\x47A', '\x23E', '\x2', 
		'\xF78', '\xF79', '\a', '\x1C1', '\x2', '\x2', '\xF79', '\xF7A', '\a', 
		'\x2F0', '\x2', '\x2', '\xF7A', '\xF7F', '\x5', '\x48C', '\x247', '\x2', 
		'\xF7B', '\xF7C', '\a', '\x1C2', '\x2', '\x2', '\xF7C', '\xF7D', '\a', 
		'\x2F0', '\x2', '\x2', '\xF7D', '\xF7F', '\x5', '\x476', '\x23C', '\x2', 
		'\xF7E', '\xF72', '\x3', '\x2', '\x2', '\x2', '\xF7E', '\xF75', '\x3', 
		'\x2', '\x2', '\x2', '\xF7E', '\xF78', '\x3', '\x2', '\x2', '\x2', '\xF7E', 
		'\xF7B', '\x3', '\x2', '\x2', '\x2', '\xF7F', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\xF80', '\xF89', '\a', '\x30A', '\x2', '\x2', '\xF81', '\xF86', 
		'\x5', '\x476', '\x23C', '\x2', '\xF82', '\xF83', '\a', '\x307', '\x2', 
		'\x2', '\xF83', '\xF85', '\x5', '\x476', '\x23C', '\x2', '\xF84', '\xF82', 
		'\x3', '\x2', '\x2', '\x2', '\xF85', '\xF88', '\x3', '\x2', '\x2', '\x2', 
		'\xF86', '\xF84', '\x3', '\x2', '\x2', '\x2', '\xF86', '\xF87', '\x3', 
		'\x2', '\x2', '\x2', '\xF87', '\xF8A', '\x3', '\x2', '\x2', '\x2', '\xF88', 
		'\xF86', '\x3', '\x2', '\x2', '\x2', '\xF89', '\xF81', '\x3', '\x2', '\x2', 
		'\x2', '\xF89', '\xF8A', '\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF8B', 
		'\x3', '\x2', '\x2', '\x2', '\xF8B', '\xF8C', '\a', '\x30B', '\x2', '\x2', 
		'\xF8C', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\xF8D', '\xF8E', '\a', 
		'\x39', '\x2', '\x2', '\xF8E', '\xF8F', '\a', '\x1CD', '\x2', '\x2', '\xF8F', 
		'\xF90', '\a', '\xC0', '\x2', '\x2', '\xF90', '\xF95', '\x5', '\x1D4', 
		'\xEB', '\x2', '\xF91', '\xF92', '\a', '\x307', '\x2', '\x2', '\xF92', 
		'\xF94', '\x5', '\x1D4', '\xEB', '\x2', '\xF93', '\xF91', '\x3', '\x2', 
		'\x2', '\x2', '\xF94', '\xF97', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF93', 
		'\x3', '\x2', '\x2', '\x2', '\xF95', '\xF96', '\x3', '\x2', '\x2', '\x2', 
		'\xF96', '\xF9A', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF95', '\x3', 
		'\x2', '\x2', '\x2', '\xF98', '\xF99', '\x6', '\xEA', 'L', '\x2', '\xF99', 
		'\xF9B', '\x5', '\x310', '\x189', '\x2', '\xF9A', '\xF98', '\x3', '\x2', 
		'\x2', '\x2', '\xF9A', '\xF9B', '\x3', '\x2', '\x2', '\x2', '\xF9B', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\xF9C', '\xF9D', '\a', '\x1CE', '\x2', '\x2', 
		'\xF9D', '\xF9E', '\a', '\x2F0', '\x2', '\x2', '\xF9E', '\xFA0', '\a', 
		'\x30A', '\x2', '\x2', '\xF9F', '\xFA1', '\x5', '\x1D6', '\xEC', '\x2', 
		'\xFA0', '\xF9F', '\x3', '\x2', '\x2', '\x2', '\xFA0', '\xFA1', '\x3', 
		'\x2', '\x2', '\x2', '\xFA1', '\xFA2', '\x3', '\x2', '\x2', '\x2', '\xFA2', 
		'\xFCE', '\a', '\x30B', '\x2', '\x2', '\xFA3', '\xFA4', '\a', '\x1CF', 
		'\x2', '\x2', '\xFA4', '\xFA5', '\a', '\x2F0', '\x2', '\x2', '\xFA5', 
		'\xFA7', '\a', '\x30A', '\x2', '\x2', '\xFA6', '\xFA8', '\x5', '\x1D6', 
		'\xEC', '\x2', '\xFA7', '\xFA6', '\x3', '\x2', '\x2', '\x2', '\xFA7', 
		'\xFA8', '\x3', '\x2', '\x2', '\x2', '\xFA8', '\xFA9', '\x3', '\x2', '\x2', 
		'\x2', '\xFA9', '\xFCE', '\a', '\x30B', '\x2', '\x2', '\xFAA', '\xFAB', 
		'\a', '\x1D0', '\x2', '\x2', '\xFAB', '\xFAC', '\a', '\x2F0', '\x2', '\x2', 
		'\xFAC', '\xFAE', '\a', '\x30A', '\x2', '\x2', '\xFAD', '\xFAF', '\x5', 
		'\x1D8', '\xED', '\x2', '\xFAE', '\xFAD', '\x3', '\x2', '\x2', '\x2', 
		'\xFAE', '\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFB0', '\x3', 
		'\x2', '\x2', '\x2', '\xFB0', '\xFCE', '\a', '\x30B', '\x2', '\x2', '\xFB1', 
		'\xFB2', '\a', '\x1D1', '\x2', '\x2', '\xFB2', '\xFB3', '\a', '\x2F0', 
		'\x2', '\x2', '\xFB3', '\xFB5', '\a', '\x30A', '\x2', '\x2', '\xFB4', 
		'\xFB6', '\x5', '\x1D8', '\xED', '\x2', '\xFB5', '\xFB4', '\x3', '\x2', 
		'\x2', '\x2', '\xFB5', '\xFB6', '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB7', 
		'\x3', '\x2', '\x2', '\x2', '\xFB7', '\xFCE', '\a', '\x30B', '\x2', '\x2', 
		'\xFB8', '\xFB9', '\a', '\x1D2', '\x2', '\x2', '\xFB9', '\xFBA', '\a', 
		'\x2F0', '\x2', '\x2', '\xFBA', '\xFBC', '\a', '\x30A', '\x2', '\x2', 
		'\xFBB', '\xFBD', '\x5', '\x1DA', '\xEE', '\x2', '\xFBC', '\xFBB', '\x3', 
		'\x2', '\x2', '\x2', '\xFBC', '\xFBD', '\x3', '\x2', '\x2', '\x2', '\xFBD', 
		'\xFBE', '\x3', '\x2', '\x2', '\x2', '\xFBE', '\xFCE', '\a', '\x30B', 
		'\x2', '\x2', '\xFBF', '\xFC0', '\a', '\x1D3', '\x2', '\x2', '\xFC0', 
		'\xFC1', '\a', '\x2F0', '\x2', '\x2', '\xFC1', '\xFC3', '\a', '\x30A', 
		'\x2', '\x2', '\xFC2', '\xFC4', '\x5', '\x1DA', '\xEE', '\x2', '\xFC3', 
		'\xFC2', '\x3', '\x2', '\x2', '\x2', '\xFC3', '\xFC4', '\x3', '\x2', '\x2', 
		'\x2', '\xFC4', '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFC5', '\xFCE', 
		'\a', '\x30B', '\x2', '\x2', '\xFC6', '\xFC7', '\a', '\x1D4', '\x2', '\x2', 
		'\xFC7', '\xFC8', '\a', '\x2F0', '\x2', '\x2', '\xFC8', '\xFCA', '\a', 
		'\x30A', '\x2', '\x2', '\xFC9', '\xFCB', '\x5', '\x1DE', '\xF0', '\x2', 
		'\xFCA', '\xFC9', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFCB', '\x3', 
		'\x2', '\x2', '\x2', '\xFCB', '\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFCC', 
		'\xFCE', '\a', '\x30B', '\x2', '\x2', '\xFCD', '\xF9C', '\x3', '\x2', 
		'\x2', '\x2', '\xFCD', '\xFA3', '\x3', '\x2', '\x2', '\x2', '\xFCD', '\xFAA', 
		'\x3', '\x2', '\x2', '\x2', '\xFCD', '\xFB1', '\x3', '\x2', '\x2', '\x2', 
		'\xFCD', '\xFB8', '\x3', '\x2', '\x2', '\x2', '\xFCD', '\xFBF', '\x3', 
		'\x2', '\x2', '\x2', '\xFCD', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFCE', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\xFCF', '\xFD4', '\x5', '\x424', 
		'\x213', '\x2', '\xFD0', '\xFD1', '\a', '\x307', '\x2', '\x2', '\xFD1', 
		'\xFD3', '\x5', '\x424', '\x213', '\x2', '\xFD2', '\xFD0', '\x3', '\x2', 
		'\x2', '\x2', '\xFD3', '\xFD6', '\x3', '\x2', '\x2', '\x2', '\xFD4', '\xFD2', 
		'\x3', '\x2', '\x2', '\x2', '\xFD4', '\xFD5', '\x3', '\x2', '\x2', '\x2', 
		'\xFD5', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xFD6', '\xFD4', '\x3', 
		'\x2', '\x2', '\x2', '\xFD7', '\xFDC', '\x5', '\x44C', '\x227', '\x2', 
		'\xFD8', '\xFD9', '\a', '\x307', '\x2', '\x2', '\xFD9', '\xFDB', '\x5', 
		'\x44C', '\x227', '\x2', '\xFDA', '\xFD8', '\x3', '\x2', '\x2', '\x2', 
		'\xFDB', '\xFDE', '\x3', '\x2', '\x2', '\x2', '\xFDC', '\xFDA', '\x3', 
		'\x2', '\x2', '\x2', '\xFDC', '\xFDD', '\x3', '\x2', '\x2', '\x2', '\xFDD', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\xFDE', '\xFDC', '\x3', '\x2', '\x2', 
		'\x2', '\xFDF', '\xFE4', '\x5', '\x1DC', '\xEF', '\x2', '\xFE0', '\xFE1', 
		'\a', '\x307', '\x2', '\x2', '\xFE1', '\xFE3', '\x5', '\x1DC', '\xEF', 
		'\x2', '\xFE2', '\xFE0', '\x3', '\x2', '\x2', '\x2', '\xFE3', '\xFE6', 
		'\x3', '\x2', '\x2', '\x2', '\xFE4', '\xFE2', '\x3', '\x2', '\x2', '\x2', 
		'\xFE4', '\xFE5', '\x3', '\x2', '\x2', '\x2', '\xFE5', '\x1DB', '\x3', 
		'\x2', '\x2', '\x2', '\xFE6', '\xFE4', '\x3', '\x2', '\x2', '\x2', '\xFE7', 
		'\xFE8', '\x5', '\x48C', '\x247', '\x2', '\xFE8', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', '\xFE9', '\xFEE', '\x5', '\x3E0', '\x1F1', '\x2', '\xFEA', 
		'\xFEB', '\a', '\x307', '\x2', '\x2', '\xFEB', '\xFED', '\x5', '\x3E0', 
		'\x1F1', '\x2', '\xFEC', '\xFEA', '\x3', '\x2', '\x2', '\x2', '\xFED', 
		'\xFF0', '\x3', '\x2', '\x2', '\x2', '\xFEE', '\xFEC', '\x3', '\x2', '\x2', 
		'\x2', '\xFEE', '\xFEF', '\x3', '\x2', '\x2', '\x2', '\xFEF', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFEE', '\x3', '\x2', '\x2', '\x2', 
		'\xFF1', '\xFF2', '\a', '\x221', '\x2', '\x2', '\xFF2', '\xFF4', '\a', 
		'\x204', '\x2', '\x2', '\xFF3', '\xFF5', '\x5', '\x1E6', '\xF4', '\x2', 
		'\xFF4', '\xFF3', '\x3', '\x2', '\x2', '\x2', '\xFF4', '\xFF5', '\x3', 
		'\x2', '\x2', '\x2', '\xFF5', '\xFF8', '\x3', '\x2', '\x2', '\x2', '\xFF6', 
		'\xFF7', '\a', '\x267', '\x2', '\x2', '\xFF7', '\xFF9', '\x5', '\x1E2', 
		'\xF2', '\x2', '\xFF8', '\xFF6', '\x3', '\x2', '\x2', '\x2', '\xFF8', 
		'\xFF9', '\x3', '\x2', '\x2', '\x2', '\xFF9', '\xFFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFFA', '\xFFC', '\x5', '\x1E4', '\xF3', '\x2', '\xFFB', '\xFFD', 
		'\x5', '\x310', '\x189', '\x2', '\xFFC', '\xFFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFFC', '\xFFD', '\x3', '\x2', '\x2', '\x2', '\xFFD', '\x1007', 
		'\x3', '\x2', '\x2', '\x2', '\xFFE', '\xFFF', '\a', '\x22A', '\x2', '\x2', 
		'\xFFF', '\x1001', '\a', '\x204', '\x2', '\x2', '\x1000', '\x1002', '\x5', 
		'\x1E6', '\xF4', '\x2', '\x1001', '\x1000', '\x3', '\x2', '\x2', '\x2', 
		'\x1001', '\x1002', '\x3', '\x2', '\x2', '\x2', '\x1002', '\x1004', '\x3', 
		'\x2', '\x2', '\x2', '\x1003', '\x1005', '\x5', '\x310', '\x189', '\x2', 
		'\x1004', '\x1003', '\x3', '\x2', '\x2', '\x2', '\x1004', '\x1005', '\x3', 
		'\x2', '\x2', '\x2', '\x1005', '\x1007', '\x3', '\x2', '\x2', '\x2', '\x1006', 
		'\xFF1', '\x3', '\x2', '\x2', '\x2', '\x1006', '\xFFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1007', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1008', 
		'\x1010', '\x5', '\x1CE', '\xE8', '\x2', '\x1009', '\x100A', '\x6', '\xF2', 
		'M', '\x2', '\x100A', '\x100B', '\t', '.', '\x2', '\x2', '\x100B', '\x100C', 
		'\a', '\x2F0', '\x2', '\x2', '\x100C', '\x1010', '\x5', '\x486', '\x244', 
		'\x2', '\x100D', '\x100E', '\x6', '\xF2', 'N', '\x2', '\x100E', '\x1010', 
		'\a', '\x213', '\x2', '\x2', '\x100F', '\x1008', '\x3', '\x2', '\x2', 
		'\x2', '\x100F', '\x1009', '\x3', '\x2', '\x2', '\x2', '\x100F', '\x100D', 
		'\x3', '\x2', '\x2', '\x2', '\x1010', '\x1015', '\x3', '\x2', '\x2', '\x2', 
		'\x1011', '\x1012', '\a', '\x307', '\x2', '\x2', '\x1012', '\x1014', '\x5', 
		'\x1CE', '\xE8', '\x2', '\x1013', '\x1011', '\x3', '\x2', '\x2', '\x2', 
		'\x1014', '\x1017', '\x3', '\x2', '\x2', '\x2', '\x1015', '\x1013', '\x3', 
		'\x2', '\x2', '\x2', '\x1015', '\x1016', '\x3', '\x2', '\x2', '\x2', '\x1016', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1017', '\x1015', '\x3', '\x2', 
		'\x2', '\x2', '\x1018', '\x101C', '\x6', '\xF3', 'O', '\x2', '\x1019', 
		'\x101A', '\a', '\x26C', '\x2', '\x2', '\x101A', '\x101B', '\a', '\x2F0', 
		'\x2', '\x2', '\x101B', '\x101D', '\x5', '\x486', '\x244', '\x2', '\x101C', 
		'\x1019', '\x3', '\x2', '\x2', '\x2', '\x101C', '\x101D', '\x3', '\x2', 
		'\x2', '\x2', '\x101D', '\x1021', '\x3', '\x2', '\x2', '\x2', '\x101E', 
		'\x101F', '\a', '\x198', '\x2', '\x2', '\x101F', '\x1020', '\a', '\x2F0', 
		'\x2', '\x2', '\x1020', '\x1022', '\x5', '\x486', '\x244', '\x2', '\x1021', 
		'\x101E', '\x3', '\x2', '\x2', '\x2', '\x1021', '\x1022', '\x3', '\x2', 
		'\x2', '\x2', '\x1022', '\x1026', '\x3', '\x2', '\x2', '\x2', '\x1023', 
		'\x1024', '\a', '\x83', '\x2', '\x2', '\x1024', '\x1025', '\a', '\x2F0', 
		'\x2', '\x2', '\x1025', '\x1027', '\x5', '\x486', '\x244', '\x2', '\x1026', 
		'\x1023', '\x3', '\x2', '\x2', '\x2', '\x1026', '\x1027', '\x3', '\x2', 
		'\x2', '\x2', '\x1027', '\x102B', '\x3', '\x2', '\x2', '\x2', '\x1028', 
		'\x1029', '\a', '\x19B', '\x2', '\x2', '\x1029', '\x102A', '\a', '\x2F0', 
		'\x2', '\x2', '\x102A', '\x102C', '\x5', '\x486', '\x244', '\x2', '\x102B', 
		'\x1028', '\x3', '\x2', '\x2', '\x2', '\x102B', '\x102C', '\x3', '\x2', 
		'\x2', '\x2', '\x102C', '\x102F', '\x3', '\x2', '\x2', '\x2', '\x102D', 
		'\x102F', '\x3', '\x2', '\x2', '\x2', '\x102E', '\x1018', '\x3', '\x2', 
		'\x2', '\x2', '\x102E', '\x102D', '\x3', '\x2', '\x2', '\x2', '\x102F', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1030', '\x1035', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x1031', '\x1032', '\a', '\x307', '\x2', '\x2', '\x1032', 
		'\x1034', '\x5', '\x1E8', '\xF5', '\x2', '\x1033', '\x1031', '\x3', '\x2', 
		'\x2', '\x2', '\x1034', '\x1037', '\x3', '\x2', '\x2', '\x2', '\x1035', 
		'\x1033', '\x3', '\x2', '\x2', '\x2', '\x1035', '\x1036', '\x3', '\x2', 
		'\x2', '\x2', '\x1036', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1037', 
		'\x1035', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x1039', '\t', '/', '\x2', 
		'\x2', '\x1039', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x103A', '\x103B', 
		'\t', '\x30', '\x2', '\x2', '\x103B', '\x103C', '\a', '\xD4', '\x2', '\x2', 
		'\x103C', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x103D', '\x103E', '\a', 
		'\x1A3', '\x2', '\x2', '\x103E', '\x103F', '\x5', '\x46A', '\x236', '\x2', 
		'\x103F', '\x1042', '\a', '\xCD', '\x2', '\x2', '\x1040', '\x1043', '\x5', 
		'\x48A', '\x246', '\x2', '\x1041', '\x1043', '\x5', '\x2E8', '\x175', 
		'\x2', '\x1042', '\x1040', '\x3', '\x2', '\x2', '\x2', '\x1042', '\x1041', 
		'\x3', '\x2', '\x2', '\x2', '\x1043', '\x1049', '\x3', '\x2', '\x2', '\x2', 
		'\x1044', '\x1049', '\x5', '\x1EE', '\xF8', '\x2', '\x1045', '\x1046', 
		'\t', '\x31', '\x2', '\x2', '\x1046', '\x1047', '\a', '\x1A3', '\x2', 
		'\x2', '\x1047', '\x1049', '\x5', '\x46A', '\x236', '\x2', '\x1048', '\x103D', 
		'\x3', '\x2', '\x2', '\x2', '\x1048', '\x1044', '\x3', '\x2', '\x2', '\x2', 
		'\x1048', '\x1045', '\x3', '\x2', '\x2', '\x2', '\x1049', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x104A', '\x104B', '\a', '\xAF', '\x2', '\x2', '\x104B', 
		'\x104E', '\x5', '\x46A', '\x236', '\x2', '\x104C', '\x104D', '\a', '\x26F', 
		'\x2', '\x2', '\x104D', '\x104F', '\x5', '\x1F0', '\xF9', '\x2', '\x104E', 
		'\x104C', '\x3', '\x2', '\x2', '\x2', '\x104E', '\x104F', '\x3', '\x2', 
		'\x2', '\x2', '\x104F', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1050', 
		'\x1055', '\x5', '\x2E8', '\x175', '\x2', '\x1051', '\x1052', '\a', '\x307', 
		'\x2', '\x2', '\x1052', '\x1054', '\x5', '\x2E8', '\x175', '\x2', '\x1053', 
		'\x1051', '\x3', '\x2', '\x2', '\x2', '\x1054', '\x1057', '\x3', '\x2', 
		'\x2', '\x2', '\x1055', '\x1053', '\x3', '\x2', '\x2', '\x2', '\x1055', 
		'\x1056', '\x3', '\x2', '\x2', '\x2', '\x1056', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1057', '\x1055', '\x3', '\x2', '\x2', '\x2', '\x1058', 
		'\x1071', '\a', '\x2A7', '\x2', '\x2', '\x1059', '\x105A', '\a', '\x11E', 
		'\x2', '\x2', '\x105A', '\x105B', '\a', 'r', '\x2', '\x2', '\x105B', '\x105D', 
		'\a', '\x8D', '\x2', '\x2', '\x105C', '\x105E', '\x5', '\x4A8', '\x255', 
		'\x2', '\x105D', '\x105C', '\x3', '\x2', '\x2', '\x2', '\x105D', '\x105E', 
		'\x3', '\x2', '\x2', '\x2', '\x105E', '\x105F', '\x3', '\x2', '\x2', '\x2', 
		'\x105F', '\x1072', '\x5', '\x484', '\x243', '\x2', '\x1060', '\x1063', 
		'\a', '\x2A6', '\x2', '\x2', '\x1061', '\x1062', '\a', '\xCA', '\x2', 
		'\x2', '\x1062', '\x1064', '\a', '\x1CD', '\x2', '\x2', '\x1063', '\x1061', 
		'\x3', '\x2', '\x2', '\x2', '\x1063', '\x1064', '\x3', '\x2', '\x2', '\x2', 
		'\x1064', '\x1072', '\x3', '\x2', '\x2', '\x2', '\x1065', '\x1066', '\x6', 
		'\xFA', 'P', '\x2', '\x1066', '\x1067', '\a', '\xF6', '\x2', '\x2', '\x1067', 
		'\x1068', '\a', '\xCD', '\x2', '\x2', '\x1068', '\x1069', '\x5', '\x404', 
		'\x203', '\x2', '\x1069', '\x106A', '\a', '\x309', '\x2', '\x2', '\x106A', 
		'\x106B', '\x5', '\x476', '\x23C', '\x2', '\x106B', '\x106C', '\a', '\xE8', 
		'\x2', '\x2', '\x106C', '\x106D', '\a', '/', '\x2', '\x2', '\x106D', '\x106F', 
		'\x5', '\x484', '\x243', '\x2', '\x106E', '\x1070', '\x5', '\x1F4', '\xFB', 
		'\x2', '\x106F', '\x106E', '\x3', '\x2', '\x2', '\x2', '\x106F', '\x1070', 
		'\x3', '\x2', '\x2', '\x2', '\x1070', '\x1072', '\x3', '\x2', '\x2', '\x2', 
		'\x1071', '\x1059', '\x3', '\x2', '\x2', '\x2', '\x1071', '\x1060', '\x3', 
		'\x2', '\x2', '\x2', '\x1071', '\x1065', '\x3', '\x2', '\x2', '\x2', '\x1072', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1073', '\x107E', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x1074', '\x1075', '\a', 'r', '\x2', '\x2', '\x1075', 
		'\x1077', '\a', '\x8D', '\x2', '\x2', '\x1076', '\x1078', '\x5', '\x4A8', 
		'\x255', '\x2', '\x1077', '\x1076', '\x3', '\x2', '\x2', '\x2', '\x1077', 
		'\x1078', '\x3', '\x2', '\x2', '\x2', '\x1078', '\x1079', '\x3', '\x2', 
		'\x2', '\x2', '\x1079', '\x107B', '\x5', '\x484', '\x243', '\x2', '\x107A', 
		'\x107C', '\x5', '\x1F6', '\xFC', '\x2', '\x107B', '\x107A', '\x3', '\x2', 
		'\x2', '\x2', '\x107B', '\x107C', '\x3', '\x2', '\x2', '\x2', '\x107C', 
		'\x107E', '\x3', '\x2', '\x2', '\x2', '\x107D', '\x1073', '\x3', '\x2', 
		'\x2', '\x2', '\x107D', '\x1074', '\x3', '\x2', '\x2', '\x2', '\x107E', 
		'\x1F5', '\x3', '\x2', '\x2', '\x2', '\x107F', '\x1081', '\a', '\x1D5', 
		'\x2', '\x2', '\x1080', '\x1082', '\a', '\x177', '\x2', '\x2', '\x1081', 
		'\x1080', '\x3', '\x2', '\x2', '\x2', '\x1081', '\x1082', '\x3', '\x2', 
		'\x2', '\x2', '\x1082', '\x1083', '\x3', '\x2', '\x2', '\x2', '\x1083', 
		'\x1084', '\a', '\x21D', '\x2', '\x2', '\x1084', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1085', '\x1086', '\x6', '\xFD', 'Q', '\x2', '\x1086', 
		'\x108F', '\x5', '\x1FA', '\xFE', '\x2', '\x1087', '\x108F', '\x5', '\x200', 
		'\x101', '\x2', '\x1088', '\x108F', '\x5', '\x20C', '\x107', '\x2', '\x1089', 
		'\x108F', '\x5', '\x20E', '\x108', '\x2', '\x108A', '\x108F', '\x5', '\x21C', 
		'\x10F', '\x2', '\x108B', '\x108F', '\x5', '\x21E', '\x110', '\x2', '\x108C', 
		'\x108D', '\x6', '\xFD', 'R', '\x2', '\x108D', '\x108F', '\x5', '\x230', 
		'\x119', '\x2', '\x108E', '\x1085', '\x3', '\x2', '\x2', '\x2', '\x108E', 
		'\x1087', '\x3', '\x2', '\x2', '\x2', '\x108E', '\x1088', '\x3', '\x2', 
		'\x2', '\x2', '\x108E', '\x1089', '\x3', '\x2', '\x2', '\x2', '\x108E', 
		'\x108A', '\x3', '\x2', '\x2', '\x2', '\x108E', '\x108B', '\x3', '\x2', 
		'\x2', '\x2', '\x108E', '\x108C', '\x3', '\x2', '\x2', '\x2', '\x108F', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1090', '\x1091', '\a', '\r', '\x2', 
		'\x2', '\x1091', '\x1094', '\a', '\x26C', '\x2', '\x2', '\x1092', '\x1093', 
		'\x6', '\xFE', 'S', '\x2', '\x1093', '\x1095', '\x5', '\x3D4', '\x1EB', 
		'\x2', '\x1094', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x1094', '\x1095', 
		'\x3', '\x2', '\x2', '\x2', '\x1095', '\x1096', '\x3', '\x2', '\x2', '\x2', 
		'\x1096', '\x1097', '\x5', '\x1FC', '\xFF', '\x2', '\x1097', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1098', '\x1099', '\x6', '\xFF', 'T', '\x2', 
		'\x1099', '\x109D', '\x5', '\x3F4', '\x1FB', '\x2', '\x109A', '\x109B', 
		'\x6', '\xFF', 'U', '\x2', '\x109B', '\x109D', '\x5', '\x3F6', '\x1FC', 
		'\x2', '\x109C', '\x1098', '\x3', '\x2', '\x2', '\x2', '\x109C', '\x109A', 
		'\x3', '\x2', '\x2', '\x2', '\x109D', '\x109E', '\x3', '\x2', '\x2', '\x2', 
		'\x109E', '\x109F', '\x5', '\x202', '\x102', '\x2', '\x109F', '\x10CF', 
		'\x3', '\x2', '\x2', '\x2', '\x10A0', '\x10A1', '\x6', '\xFF', 'V', '\x2', 
		'\x10A1', '\x10A2', '\x5', '\x404', '\x203', '\x2', '\x10A2', '\x10A3', 
		'\a', '\xE8', '\x2', '\x2', '\x10A3', '\x10A4', '\a', '/', '\x2', '\x2', 
		'\x10A4', '\x10A7', '\x5', '\x486', '\x244', '\x2', '\x10A5', '\x10A6', 
		'\x6', '\xFF', 'W', '\x2', '\x10A6', '\x10A8', '\x5', '\x400', '\x201', 
		'\x2', '\x10A7', '\x10A5', '\x3', '\x2', '\x2', '\x2', '\x10A7', '\x10A8', 
		'\x3', '\x2', '\x2', '\x2', '\x10A8', '\x10AB', '\x3', '\x2', '\x2', '\x2', 
		'\x10A9', '\x10AA', '\x6', '\xFF', 'X', '\x2', '\x10AA', '\x10AC', '\x5', 
		'\x3FC', '\x1FF', '\x2', '\x10AB', '\x10A9', '\x3', '\x2', '\x2', '\x2', 
		'\x10AB', '\x10AC', '\x3', '\x2', '\x2', '\x2', '\x10AC', '\x10CF', '\x3', 
		'\x2', '\x2', '\x2', '\x10AD', '\x10AE', '\x6', '\xFF', 'Y', '\x2', '\x10AE', 
		'\x10AF', '\x5', '\x404', '\x203', '\x2', '\x10AF', '\x10B0', '\x5', '\x3FE', 
		'\x200', '\x2', '\x10B0', '\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10B1', 
		'\x10B2', '\x6', '\xFF', 'Z', '\x2', '\x10B2', '\x10B3', '\x5', '\x404', 
		'\x203', '\x2', '\x10B3', '\x10B4', '\a', '\x82', '\x2', '\x2', '\x10B4', 
		'\x10B8', '\a', '\x295', '\x2', '\x2', '\x10B5', '\x10B9', '\a', '\f', 
		'\x2', '\x2', '\x10B6', '\x10B9', '\a', '\x173', '\x2', '\x2', '\x10B7', 
		'\x10B9', '\x5', '\x232', '\x11A', '\x2', '\x10B8', '\x10B5', '\x3', '\x2', 
		'\x2', '\x2', '\x10B8', '\x10B6', '\x3', '\x2', '\x2', '\x2', '\x10B8', 
		'\x10B7', '\x3', '\x2', '\x2', '\x2', '\x10B9', '\x10CF', '\x3', '\x2', 
		'\x2', '\x2', '\x10BA', '\x10BB', '\x6', '\xFF', '[', '\x2', '\x10BB', 
		'\x10BC', '\x5', '\x404', '\x203', '\x2', '\x10BC', '\x10BF', '\a', '\xE8', 
		'\x2', '\x2', '\x10BD', '\x10BE', '\a', '\x287', '\x2', '\x2', '\x10BE', 
		'\x10C0', '\x5', '\x49E', '\x250', '\x2', '\x10BF', '\x10BD', '\x3', '\x2', 
		'\x2', '\x2', '\x10BF', '\x10C0', '\x3', '\x2', '\x2', '\x2', '\x10C0', 
		'\x10C1', '\x3', '\x2', '\x2', '\x2', '\x10C1', '\x10C2', '\a', '/', '\x2', 
		'\x2', '\x10C2', '\x10C3', '\a', '\x2E0', '\x2', '\x2', '\x10C3', '\x10C5', 
		'\a', '\x198', '\x2', '\x2', '\x10C4', '\x10C6', '\x5', '\x3FC', '\x1FF', 
		'\x2', '\x10C5', '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C5', '\x10C6', 
		'\x3', '\x2', '\x2', '\x2', '\x10C6', '\x10CF', '\x3', '\x2', '\x2', '\x2', 
		'\x10C7', '\x10C8', '\a', '\x2E7', '\x2', '\x2', '\x10C8', '\x10CF', '\x5', 
		'\x478', '\x23D', '\x2', '\x10C9', '\x10CC', '\a', '\x2E6', '\x2', '\x2', 
		'\x10CA', '\x10CD', '\x5', '\x478', '\x23D', '\x2', '\x10CB', '\x10CD', 
		'\a', '\x2BC', '\x2', '\x2', '\x10CC', '\x10CA', '\x3', '\x2', '\x2', 
		'\x2', '\x10CC', '\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10CD', '\x10CF', 
		'\x3', '\x2', '\x2', '\x2', '\x10CE', '\x109C', '\x3', '\x2', '\x2', '\x2', 
		'\x10CE', '\x10A0', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10AD', '\x3', 
		'\x2', '\x2', '\x2', '\x10CE', '\x10B1', '\x3', '\x2', '\x2', '\x2', '\x10CE', 
		'\x10BA', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10C7', '\x3', '\x2', 
		'\x2', '\x2', '\x10CE', '\x10C9', '\x3', '\x2', '\x2', '\x2', '\x10CF', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x10D0', '\x10D1', '\a', '\x26C', 
		'\x2', '\x2', '\x10D1', '\x10D2', '\x5', '\x4A6', '\x254', '\x2', '\x10D2', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x10D3', '\x10D4', '\a', '\x63', 
		'\x2', '\x2', '\x10D4', '\x10D8', '\a', '\x26C', '\x2', '\x2', '\x10D5', 
		'\x10D6', '\x6', '\x101', '\\', '\x2', '\x10D6', '\x10D9', '\x5', '\x3D6', 
		'\x1EC', '\x2', '\x10D7', '\x10D9', '\x3', '\x2', '\x2', '\x2', '\x10D8', 
		'\x10D5', '\x3', '\x2', '\x2', '\x2', '\x10D8', '\x10D7', '\x3', '\x2', 
		'\x2', '\x2', '\x10D9', '\x10DA', '\x3', '\x2', '\x2', '\x2', '\x10DA', 
		'\x10DB', '\x5', '\x3F4', '\x1FB', '\x2', '\x10DB', '\x10DC', '\x5', '\x204', 
		'\x103', '\x2', '\x10DC', '\x10DD', '\x5', '\x202', '\x102', '\x2', '\x10DD', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x10DE', '\x10E0', '\x6', '\x102', 
		']', '\x2', '\x10DF', '\x10E1', '\x5', '\x206', '\x104', '\x2', '\x10E0', 
		'\x10DF', '\x3', '\x2', '\x2', '\x2', '\x10E0', '\x10E1', '\x3', '\x2', 
		'\x2', '\x2', '\x10E1', '\x10E3', '\x3', '\x2', '\x2', '\x2', '\x10E2', 
		'\x10E4', '\x5', '\x208', '\x105', '\x2', '\x10E3', '\x10E2', '\x3', '\x2', 
		'\x2', '\x2', '\x10E3', '\x10E4', '\x3', '\x2', '\x2', '\x2', '\x10E4', 
		'\x10E8', '\x3', '\x2', '\x2', '\x2', '\x10E5', '\x10E7', '\x5', '\x20A', 
		'\x106', '\x2', '\x10E6', '\x10E5', '\x3', '\x2', '\x2', '\x2', '\x10E7', 
		'\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10E8', '\x10E6', '\x3', '\x2', 
		'\x2', '\x2', '\x10E8', '\x10E9', '\x3', '\x2', '\x2', '\x2', '\x10E9', 
		'\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10EA', '\x10E8', '\x3', '\x2', 
		'\x2', '\x2', '\x10EB', '\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10EC', 
		'\x10DE', '\x3', '\x2', '\x2', '\x2', '\x10EC', '\x10EB', '\x3', '\x2', 
		'\x2', '\x2', '\x10ED', '\x203', '\x3', '\x2', '\x2', '\x2', '\x10EE', 
		'\x10F2', '\x6', '\x103', '^', '\x2', '\x10EF', '\x10F0', '\a', '\x82', 
		'\x2', '\x2', '\x10F0', '\x10F1', '\a', '\x295', '\x2', '\x2', '\x10F1', 
		'\x10F3', '\x5', '\x232', '\x11A', '\x2', '\x10F2', '\x10EF', '\x3', '\x2', 
		'\x2', '\x2', '\x10F2', '\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F3', 
		'\x10F6', '\x3', '\x2', '\x2', '\x2', '\x10F4', '\x10F6', '\x3', '\x2', 
		'\x2', '\x2', '\x10F5', '\x10EE', '\x3', '\x2', '\x2', '\x2', '\x10F5', 
		'\x10F4', '\x3', '\x2', '\x2', '\x2', '\x10F6', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x10F7', '\x10FA', '\a', '\x1D5', '\x2', '\x2', '\x10F8', 
		'\x10FB', '\x5', '\x22A', '\x116', '\x2', '\x10F9', '\x10FB', '\t', '\x32', 
		'\x2', '\x2', '\x10FA', '\x10F8', '\x3', '\x2', '\x2', '\x2', '\x10FA', 
		'\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10FB', '\x207', '\x3', '\x2', 
		'\x2', '\x2', '\x10FC', '\x1105', '\a', '\x287', '\x2', '\x2', '\x10FD', 
		'\x10FE', '\a', '\x144', '\x2', '\x2', '\x10FE', '\x1106', '\x5', '\x476', 
		'\x23C', '\x2', '\x10FF', '\x1100', '\a', '\x149', '\x2', '\x2', '\x1100', 
		'\x1106', '\x5', '\x476', '\x23C', '\x2', '\x1101', '\x1102', '\a', '\x143', 
		'\x2', '\x2', '\x1102', '\x1106', '\x5', '\x476', '\x23C', '\x2', '\x1103', 
		'\x1104', '\a', '\x14A', '\x2', '\x2', '\x1104', '\x1106', '\x5', '\x476', 
		'\x23C', '\x2', '\x1105', '\x10FD', '\x3', '\x2', '\x2', '\x2', '\x1105', 
		'\x10FF', '\x3', '\x2', '\x2', '\x2', '\x1105', '\x1101', '\x3', '\x2', 
		'\x2', '\x2', '\x1105', '\x1103', '\x3', '\x2', '\x2', '\x2', '\x1106', 
		'\x1107', '\x3', '\x2', '\x2', '\x2', '\x1107', '\x1105', '\x3', '\x2', 
		'\x2', '\x2', '\x1107', '\x1108', '\x3', '\x2', '\x2', '\x2', '\x1108', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x1109', '\x110A', '\a', '\x4', 
		'\x2', '\x2', '\x110A', '\x112B', '\t', '\x33', '\x2', '\x2', '\x110B', 
		'\x1128', '\a', '\x198', '\x2', '\x2', '\x110C', '\x1113', '\a', '\xB3', 
		'\x2', '\x2', '\x110D', '\x110E', '\a', '\xF9', '\x2', '\x2', '\x110E', 
		'\x110F', '\x5', '\x478', '\x23D', '\x2', '\x110F', '\x1110', '\a', '|', 
		'\x2', '\x2', '\x1110', '\x1114', '\x3', '\x2', '\x2', '\x2', '\x1111', 
		'\x1114', '\a', '\x16F', '\x2', '\x2', '\x1112', '\x1114', '\a', '\x82', 
		'\x2', '\x2', '\x1113', '\x110D', '\x3', '\x2', '\x2', '\x2', '\x1113', 
		'\x1111', '\x3', '\x2', '\x2', '\x2', '\x1113', '\x1112', '\x3', '\x2', 
		'\x2', '\x2', '\x1113', '\x1114', '\x3', '\x2', '\x2', '\x2', '\x1114', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x1115', '\x1118', '\a', '\x2C3', 
		'\x2', '\x2', '\x1116', '\x1119', '\x5', '\x478', '\x23D', '\x2', '\x1117', 
		'\x1119', '\a', '\x82', '\x2', '\x2', '\x1118', '\x1116', '\x3', '\x2', 
		'\x2', '\x2', '\x1118', '\x1117', '\x3', '\x2', '\x2', '\x2', '\x1119', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x111A', '\x111B', '\a', '\x2C4', 
		'\x2', '\x2', '\x111B', '\x1120', '\a', '\xF9', '\x2', '\x2', '\x111C', 
		'\x111D', '\x5', '\x478', '\x23D', '\x2', '\x111D', '\x111E', '\a', '|', 
		'\x2', '\x2', '\x111E', '\x1121', '\x3', '\x2', '\x2', '\x2', '\x111F', 
		'\x1121', '\a', '\x82', '\x2', '\x2', '\x1120', '\x111C', '\x3', '\x2', 
		'\x2', '\x2', '\x1120', '\x111F', '\x3', '\x2', '\x2', '\x2', '\x1121', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x1122', '\x1123', '\x6', '\x106', 
		'_', '\x2', '\x1123', '\x1124', '\a', '\x1D5', '\x2', '\x2', '\x1124', 
		'\x1126', '\a', 'g', '\x2', '\x2', '\x1125', '\x1127', '\t', '\x34', '\x2', 
		'\x2', '\x1126', '\x1125', '\x3', '\x2', '\x2', '\x2', '\x1126', '\x1127', 
		'\x3', '\x2', '\x2', '\x2', '\x1127', '\x1129', '\x3', '\x2', '\x2', '\x2', 
		'\x1128', '\x110C', '\x3', '\x2', '\x2', '\x2', '\x1128', '\x1115', '\x3', 
		'\x2', '\x2', '\x2', '\x1128', '\x111A', '\x3', '\x2', '\x2', '\x2', '\x1128', 
		'\x1122', '\x3', '\x2', '\x2', '\x2', '\x1129', '\x112B', '\x3', '\x2', 
		'\x2', '\x2', '\x112A', '\x1109', '\x3', '\x2', '\x2', '\x2', '\x112A', 
		'\x110B', '\x3', '\x2', '\x2', '\x2', '\x112B', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', '\x112C', '\x112D', '\a', '\x96', '\x2', '\x2', '\x112D', 
		'\x1130', '\a', '\x26C', '\x2', '\x2', '\x112E', '\x112F', '\x6', '\x107', 
		'`', '\x2', '\x112F', '\x1131', '\x5', '\x3D4', '\x1EB', '\x2', '\x1130', 
		'\x112E', '\x3', '\x2', '\x2', '\x2', '\x1130', '\x1131', '\x3', '\x2', 
		'\x2', '\x2', '\x1131', '\x1132', '\x3', '\x2', '\x2', '\x2', '\x1132', 
		'\x1133', '\x5', '\x3F2', '\x1FA', '\x2', '\x1133', '\x20D', '\x3', '\x2', 
		'\x2', '\x2', '\x1134', '\x115F', '\a', '\xD9', '\x2', '\x2', '\x1135', 
		'\x1136', '\x6', '\x108', '\x61', '\x2', '\x1136', '\x1137', '\x5', '\x224', 
		'\x113', '\x2', '\x1137', '\x1138', '\a', '\x250', '\x2', '\x2', '\x1138', 
		'\x113C', '\x5', '\x3F2', '\x1FA', '\x2', '\x1139', '\x113A', '\a', '\x287', 
		'\x2', '\x2', '\x113A', '\x113B', '\a', '\x296', '\x2', '\x2', '\x113B', 
		'\x113D', '\a', '\x189', '\x2', '\x2', '\x113C', '\x1139', '\x3', '\x2', 
		'\x2', '\x2', '\x113C', '\x113D', '\x3', '\x2', '\x2', '\x2', '\x113D', 
		'\x1160', '\x3', '\x2', '\x2', '\x2', '\x113E', '\x1144', '\x5', '\x224', 
		'\x113', '\x2', '\x113F', '\x1141', '\a', '\f', '\x2', '\x2', '\x1140', 
		'\x1142', '\a', '\x1A7', '\x2', '\x2', '\x1141', '\x1140', '\x3', '\x2', 
		'\x2', '\x2', '\x1141', '\x1142', '\x3', '\x2', '\x2', '\x2', '\x1142', 
		'\x1144', '\x3', '\x2', '\x2', '\x2', '\x1143', '\x113E', '\x3', '\x2', 
		'\x2', '\x2', '\x1143', '\x113F', '\x3', '\x2', '\x2', '\x2', '\x1144', 
		'\x1145', '\x3', '\x2', '\x2', '\x2', '\x1145', '\x1147', '\a', '\x181', 
		'\x2', '\x2', '\x1146', '\x1148', '\x5', '\x222', '\x112', '\x2', '\x1147', 
		'\x1146', '\x3', '\x2', '\x2', '\x2', '\x1147', '\x1148', '\x3', '\x2', 
		'\x2', '\x2', '\x1148', '\x1149', '\x3', '\x2', '\x2', '\x2', '\x1149', 
		'\x114A', '\x5', '\x228', '\x115', '\x2', '\x114A', '\x114B', '\a', '\x250', 
		'\x2', '\x2', '\x114B', '\x114D', '\x5', '\x210', '\x109', '\x2', '\x114C', 
		'\x114E', '\x5', '\x21A', '\x10E', '\x2', '\x114D', '\x114C', '\x3', '\x2', 
		'\x2', '\x2', '\x114D', '\x114E', '\x3', '\x2', '\x2', '\x2', '\x114E', 
		'\x1150', '\x3', '\x2', '\x2', '\x2', '\x114F', '\x1151', '\x5', '\x212', 
		'\x10A', '\x2', '\x1150', '\x114F', '\x3', '\x2', '\x2', '\x2', '\x1150', 
		'\x1151', '\x3', '\x2', '\x2', '\x2', '\x1151', '\x1153', '\x3', '\x2', 
		'\x2', '\x2', '\x1152', '\x1154', '\x5', '\x218', '\x10D', '\x2', '\x1153', 
		'\x1152', '\x3', '\x2', '\x2', '\x2', '\x1153', '\x1154', '\x3', '\x2', 
		'\x2', '\x2', '\x1154', '\x1160', '\x3', '\x2', '\x2', '\x2', '\x1155', 
		'\x1156', '\a', '\x1AD', '\x2', '\x2', '\x1156', '\x1157', '\a', '\x181', 
		'\x2', '\x2', '\x1157', '\x1158', '\x5', '\x404', '\x203', '\x2', '\x1158', 
		'\x1159', '\a', '\x250', '\x2', '\x2', '\x1159', '\x115D', '\x5', '\x210', 
		'\x109', '\x2', '\x115A', '\x115B', '\a', '\x287', '\x2', '\x2', '\x115B', 
		'\x115C', '\a', '\xD9', '\x2', '\x2', '\x115C', '\x115E', '\a', '\x189', 
		'\x2', '\x2', '\x115D', '\x115A', '\x3', '\x2', '\x2', '\x2', '\x115D', 
		'\x115E', '\x3', '\x2', '\x2', '\x2', '\x115E', '\x1160', '\x3', '\x2', 
		'\x2', '\x2', '\x115F', '\x1135', '\x3', '\x2', '\x2', '\x2', '\x115F', 
		'\x1143', '\x3', '\x2', '\x2', '\x2', '\x115F', '\x1155', '\x3', '\x2', 
		'\x2', '\x2', '\x1160', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x1161', 
		'\x1162', '\x6', '\x109', '\x62', '\x2', '\x1162', '\x1166', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x1163', '\x1164', '\x6', '\x109', '\x63', '\x2', '\x1164', 
		'\x1166', '\x5', '\x3F2', '\x1FA', '\x2', '\x1165', '\x1161', '\x3', '\x2', 
		'\x2', '\x2', '\x1165', '\x1163', '\x3', '\x2', '\x2', '\x2', '\x1166', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x1167', '\x1168', '\x6', '\x10A', 
		'\x64', '\x2', '\x1168', '\x116A', '\a', '\x287', '\x2', '\x2', '\x1169', 
		'\x116B', '\x5', '\x22E', '\x118', '\x2', '\x116A', '\x1169', '\x3', '\x2', 
		'\x2', '\x2', '\x116B', '\x116C', '\x3', '\x2', '\x2', '\x2', '\x116C', 
		'\x116A', '\x3', '\x2', '\x2', '\x2', '\x116C', '\x116D', '\x3', '\x2', 
		'\x2', '\x2', '\x116D', '\x1173', '\x3', '\x2', '\x2', '\x2', '\x116E', 
		'\x116F', '\x6', '\x10A', '\x65', '\x2', '\x116F', '\x1170', '\a', '\x287', 
		'\x2', '\x2', '\x1170', '\x1171', '\a', '\xD9', '\x2', '\x2', '\x1171', 
		'\x1173', '\a', '\x189', '\x2', '\x2', '\x1172', '\x1167', '\x3', '\x2', 
		'\x2', '\x2', '\x1172', '\x116E', '\x3', '\x2', '\x2', '\x2', '\x1173', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x1174', '\x1175', '\a', '\x299', 
		'\x2', '\x2', '\x1175', '\x1176', '\x5', '\x232', '\x11A', '\x2', '\x1176', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x1177', '\x1178', '\a', '\x287', 
		'\x2', '\x2', '\x1178', '\x1180', '\a', '\x295', '\x2', '\x2', '\x1179', 
		'\x1181', '\x5', '\x232', '\x11A', '\x2', '\x117A', '\x117C', '\a', '\f', 
		'\x2', '\x2', '\x117B', '\x117D', '\x5', '\x214', '\x10B', '\x2', '\x117C', 
		'\x117B', '\x3', '\x2', '\x2', '\x2', '\x117C', '\x117D', '\x3', '\x2', 
		'\x2', '\x2', '\x117D', '\x1181', '\x3', '\x2', '\x2', '\x2', '\x117E', 
		'\x1181', '\a', '\x173', '\x2', '\x2', '\x117F', '\x1181', '\a', '\x82', 
		'\x2', '\x2', '\x1180', '\x1179', '\x3', '\x2', '\x2', '\x2', '\x1180', 
		'\x117A', '\x3', '\x2', '\x2', '\x2', '\x1180', '\x117E', '\x3', '\x2', 
		'\x2', '\x2', '\x1180', '\x117F', '\x3', '\x2', '\x2', '\x2', '\x1181', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1182', '\x1183', '\a', '\x13', 
		'\x2', '\x2', '\x1183', '\x1185', '\a', '\x26C', '\x2', '\x2', '\x1184', 
		'\x1186', '\x5', '\x216', '\x10C', '\x2', '\x1185', '\x1184', '\x3', '\x2', 
		'\x2', '\x2', '\x1185', '\x1186', '\x3', '\x2', '\x2', '\x2', '\x1186', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x1187', '\x1188', '\x6', '\x10E', 
		'\x66', '\x2', '\x1188', '\x1189', '\x5', '\x206', '\x104', '\x2', '\x1189', 
		'\x21B', '\x3', '\x2', '\x2', '\x2', '\x118A', '\x118B', '\a', '\x1C7', 
		'\x2', '\x2', '\x118B', '\x118C', '\a', '\x26C', '\x2', '\x2', '\x118C', 
		'\x118D', '\x5', '\x404', '\x203', '\x2', '\x118D', '\x118E', '\a', '\x250', 
		'\x2', '\x2', '\x118E', '\x1196', '\x5', '\x404', '\x203', '\x2', '\x118F', 
		'\x1190', '\a', '\x307', '\x2', '\x2', '\x1190', '\x1191', '\x5', '\x404', 
		'\x203', '\x2', '\x1191', '\x1192', '\a', '\x250', '\x2', '\x2', '\x1192', 
		'\x1193', '\x5', '\x404', '\x203', '\x2', '\x1193', '\x1195', '\x3', '\x2', 
		'\x2', '\x2', '\x1194', '\x118F', '\x3', '\x2', '\x2', '\x2', '\x1195', 
		'\x1198', '\x3', '\x2', '\x2', '\x2', '\x1196', '\x1194', '\x3', '\x2', 
		'\x2', '\x2', '\x1196', '\x1197', '\x3', '\x2', '\x2', '\x2', '\x1197', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x1198', '\x1196', '\x3', '\x2', 
		'\x2', '\x2', '\x1199', '\x11BB', '\a', '\x1DF', '\x2', '\x2', '\x119A', 
		'\x119B', '\x6', '\x110', 'g', '\x2', '\x119B', '\x119C', '\x5', '\x224', 
		'\x113', '\x2', '\x119C', '\x119D', '\a', '\xCD', '\x2', '\x2', '\x119D', 
		'\x119E', '\x5', '\x3F2', '\x1FA', '\x2', '\x119E', '\x11BC', '\x3', '\x2', 
		'\x2', '\x2', '\x119F', '\x11A0', '\x5', '\x224', '\x113', '\x2', '\x11A0', 
		'\x11A1', '\x5', '\x220', '\x111', '\x2', '\x11A1', '\x11A2', '\a', '\xCD', 
		'\x2', '\x2', '\x11A2', '\x11A3', '\x5', '\x3F2', '\x1FA', '\x2', '\x11A3', 
		'\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11A4', '\x11A6', '\a', '\f', 
		'\x2', '\x2', '\x11A5', '\x11A7', '\a', '\x1A7', '\x2', '\x2', '\x11A6', 
		'\x11A5', '\x3', '\x2', '\x2', '\x2', '\x11A6', '\x11A7', '\x3', '\x2', 
		'\x2', '\x2', '\x11A7', '\x11B3', '\x3', '\x2', '\x2', '\x2', '\x11A8', 
		'\x11A9', '\x6', '\x110', 'h', '\x2', '\x11A9', '\x11AB', '\a', '\x181', 
		'\x2', '\x2', '\x11AA', '\x11AC', '\x5', '\x222', '\x112', '\x2', '\x11AB', 
		'\x11AA', '\x3', '\x2', '\x2', '\x2', '\x11AB', '\x11AC', '\x3', '\x2', 
		'\x2', '\x2', '\x11AC', '\x11AD', '\x3', '\x2', '\x2', '\x2', '\x11AD', 
		'\x11B4', '\x5', '\x228', '\x115', '\x2', '\x11AE', '\x11AF', '\a', '\x307', 
		'\x2', '\x2', '\x11AF', '\x11B0', '\a', '\xD9', '\x2', '\x2', '\x11B0', 
		'\x11B1', '\a', '\x189', '\x2', '\x2', '\x11B1', '\x11B2', '\a', '\xCD', 
		'\x2', '\x2', '\x11B2', '\x11B4', '\x5', '\x3F2', '\x1FA', '\x2', '\x11B3', 
		'\x11A8', '\x3', '\x2', '\x2', '\x2', '\x11B3', '\x11AE', '\x3', '\x2', 
		'\x2', '\x2', '\x11B4', '\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11B5', 
		'\x11B6', '\a', '\x1AD', '\x2', '\x2', '\x11B6', '\x11B7', '\a', '\x181', 
		'\x2', '\x2', '\x11B7', '\x11B8', '\x5', '\x404', '\x203', '\x2', '\x11B8', 
		'\x11B9', '\a', '\xCD', '\x2', '\x2', '\x11B9', '\x11BA', '\x5', '\x3F2', 
		'\x1FA', '\x2', '\x11BA', '\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11BB', 
		'\x119A', '\x3', '\x2', '\x2', '\x2', '\x11BB', '\x119F', '\x3', '\x2', 
		'\x2', '\x2', '\x11BB', '\x11A4', '\x3', '\x2', '\x2', '\x2', '\x11BB', 
		'\x11B5', '\x3', '\x2', '\x2', '\x2', '\x11BC', '\x21F', '\x3', '\x2', 
		'\x2', '\x2', '\x11BD', '\x11BE', '\x6', '\x111', 'i', '\x2', '\x11BE', 
		'\x11C0', '\a', '\x181', '\x2', '\x2', '\x11BF', '\x11C1', '\x5', '\x222', 
		'\x112', '\x2', '\x11C0', '\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11C0', 
		'\x11C1', '\x3', '\x2', '\x2', '\x2', '\x11C1', '\x11C2', '\x3', '\x2', 
		'\x2', '\x2', '\x11C2', '\x11CC', '\x5', '\x228', '\x115', '\x2', '\x11C3', 
		'\x11C9', '\x6', '\x111', 'j', '\x2', '\x11C4', '\x11C6', '\a', '\x181', 
		'\x2', '\x2', '\x11C5', '\x11C7', '\x5', '\x222', '\x112', '\x2', '\x11C6', 
		'\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11C6', '\x11C7', '\x3', '\x2', 
		'\x2', '\x2', '\x11C7', '\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11C8', 
		'\x11CA', '\x5', '\x228', '\x115', '\x2', '\x11C9', '\x11C4', '\x3', '\x2', 
		'\x2', '\x2', '\x11C9', '\x11CA', '\x3', '\x2', '\x2', '\x2', '\x11CA', 
		'\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11CB', '\x11BD', '\x3', '\x2', 
		'\x2', '\x2', '\x11CB', '\x11C3', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x11CD', '\x11CE', '\t', '\x35', 
		'\x2', '\x2', '\x11CE', '\x223', '\x3', '\x2', '\x2', '\x2', '\x11CF', 
		'\x11D4', '\x5', '\x226', '\x114', '\x2', '\x11D0', '\x11D1', '\a', '\x307', 
		'\x2', '\x2', '\x11D1', '\x11D3', '\x5', '\x226', '\x114', '\x2', '\x11D2', 
		'\x11D0', '\x3', '\x2', '\x2', '\x2', '\x11D3', '\x11D6', '\x3', '\x2', 
		'\x2', '\x2', '\x11D4', '\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D4', 
		'\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11D5', '\x225', '\x3', '\x2', 
		'\x2', '\x2', '\x11D6', '\x11D4', '\x3', '\x2', '\x2', '\x2', '\x11D7', 
		'\x11E2', '\x6', '\x114', 'k', '\x2', '\x11D8', '\x11DA', '\x5', '\x4A2', 
		'\x252', '\x2', '\x11D9', '\x11DB', '\x5', '\x416', '\x20C', '\x2', '\x11DA', 
		'\x11D9', '\x3', '\x2', '\x2', '\x2', '\x11DA', '\x11DB', '\x3', '\x2', 
		'\x2', '\x2', '\x11DB', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11DC', 
		'\x11E0', '\x5', '\x4A2', '\x252', '\x2', '\x11DD', '\x11E1', '\a', '\x312', 
		'\x2', '\x2', '\x11DE', '\x11DF', '\a', '\x311', '\x2', '\x2', '\x11DF', 
		'\x11E1', '\x5', '\x49E', '\x250', '\x2', '\x11E0', '\x11DD', '\x3', '\x2', 
		'\x2', '\x2', '\x11E0', '\x11DE', '\x3', '\x2', '\x2', '\x2', '\x11E1', 
		'\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11E2', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11E2', '\x11DC', '\x3', '\x2', '\x2', '\x2', '\x11E3', 
		'\x1201', '\x3', '\x2', '\x2', '\x2', '\x11E4', '\x11E6', '\t', '\x36', 
		'\x2', '\x2', '\x11E5', '\x11E7', '\x5', '\x416', '\x20C', '\x2', '\x11E6', 
		'\x11E5', '\x3', '\x2', '\x2', '\x2', '\x11E6', '\x11E7', '\x3', '\x2', 
		'\x2', '\x2', '\x11E7', '\x1201', '\x3', '\x2', '\x2', '\x2', '\x11E8', 
		'\x1201', '\t', '\x37', '\x2', '\x2', '\x11E9', '\x11EA', '\a', '\xD9', 
		'\x2', '\x2', '\x11EA', '\x1201', '\a', '\x189', '\x2', '\x2', '\x11EB', 
		'\x11EC', '\a', '\x1FF', '\x2', '\x2', '\x11EC', '\x1201', '\a', 'p', 
		'\x2', '\x2', '\x11ED', '\x11F1', '\a', '\x63', '\x2', '\x2', '\x11EE', 
		'\x11EF', '\a', '\x243', '\x2', '\x2', '\x11EF', '\x11F2', '\a', '\x23D', 
		'\x2', '\x2', '\x11F0', '\x11F2', '\t', '\x38', '\x2', '\x2', '\x11F1', 
		'\x11EE', '\x3', '\x2', '\x2', '\x2', '\x11F1', '\x11F0', '\x3', '\x2', 
		'\x2', '\x2', '\x11F1', '\x11F2', '\x3', '\x2', '\x2', '\x2', '\x11F2', 
		'\x1201', '\x3', '\x2', '\x2', '\x2', '\x11F3', '\x11F4', '\a', '\x121', 
		'\x2', '\x2', '\x11F4', '\x1201', '\a', '\x23D', '\x2', '\x2', '\x11F5', 
		'\x11F6', '\a', '\x1CD', '\x2', '\x2', '\x11F6', '\x1201', '\t', '\x39', 
		'\x2', '\x2', '\x11F7', '\x11F8', '\a', '\x1FF', '\x2', '\x2', '\x11F8', 
		'\x1201', '\a', '\x27E', '\x2', '\x2', '\x11F9', '\x11FB', '\a', '\r', 
		'\x2', '\x2', '\x11FA', '\x11FC', '\a', '\x1E5', '\x2', '\x2', '\x11FB', 
		'\x11FA', '\x3', '\x2', '\x2', '\x2', '\x11FB', '\x11FC', '\x3', '\x2', 
		'\x2', '\x2', '\x11FC', '\x1201', '\x3', '\x2', '\x2', '\x2', '\x11FD', 
		'\x11FE', '\x6', '\x114', 'l', '\x2', '\x11FE', '\x11FF', '\t', ':', '\x2', 
		'\x2', '\x11FF', '\x1201', '\a', '\x295', '\x2', '\x2', '\x1200', '\x11D7', 
		'\x3', '\x2', '\x2', '\x2', '\x1200', '\x11E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1200', '\x11E8', '\x3', '\x2', '\x2', '\x2', '\x1200', '\x11E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1200', '\x11EB', '\x3', '\x2', '\x2', '\x2', '\x1200', 
		'\x11ED', '\x3', '\x2', '\x2', '\x2', '\x1200', '\x11F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1200', '\x11F5', '\x3', '\x2', '\x2', '\x2', '\x1200', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x1200', '\x11F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1200', '\x11FD', '\x3', '\x2', '\x2', '\x2', '\x1201', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x1202', '\x1205', '\a', '\x2FA', 
		'\x2', '\x2', '\x1203', '\x1204', '\a', '\x306', '\x2', '\x2', '\x1204', 
		'\x1206', '\a', '\x2FA', '\x2', '\x2', '\x1205', '\x1203', '\x3', '\x2', 
		'\x2', '\x2', '\x1205', '\x1206', '\x3', '\x2', '\x2', '\x2', '\x1206', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x1207', '\x120A', '\x5', '\x424', 
		'\x213', '\x2', '\x1208', '\x1209', '\a', '\x306', '\x2', '\x2', '\x1209', 
		'\x120B', '\a', '\x2FA', '\x2', '\x2', '\x120A', '\x1208', '\x3', '\x2', 
		'\x2', '\x2', '\x120A', '\x120B', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x120C', '\x1213', '\x5', '\x450', 
		'\x229', '\x2', '\x120D', '\x120E', '\x6', '\x115', 'm', '\x2', '\x120E', 
		'\x120F', '\x5', '\x424', '\x213', '\x2', '\x120F', '\x1210', '\a', '\x306', 
		'\x2', '\x2', '\x1210', '\x1211', '\x5', '\x450', '\x229', '\x2', '\x1211', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x1212', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1212', '\x1207', '\x3', '\x2', '\x2', '\x2', '\x1212', 
		'\x120C', '\x3', '\x2', '\x2', '\x2', '\x1212', '\x120D', '\x3', '\x2', 
		'\x2', '\x2', '\x1213', '\x229', '\x3', '\x2', '\x2', '\x2', '\x1214', 
		'\x121B', '\x5', '\x22C', '\x117', '\x2', '\x1215', '\x1217', '\a', '\x11', 
		'\x2', '\x2', '\x1216', '\x1215', '\x3', '\x2', '\x2', '\x2', '\x1216', 
		'\x1217', '\x3', '\x2', '\x2', '\x2', '\x1217', '\x1218', '\x3', '\x2', 
		'\x2', '\x2', '\x1218', '\x121A', '\x5', '\x22C', '\x117', '\x2', '\x1219', 
		'\x1216', '\x3', '\x2', '\x2', '\x2', '\x121A', '\x121D', '\x3', '\x2', 
		'\x2', '\x2', '\x121B', '\x1219', '\x3', '\x2', '\x2', '\x2', '\x121B', 
		'\x121C', '\x3', '\x2', '\x2', '\x2', '\x121C', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', '\x121D', '\x121B', '\x3', '\x2', '\x2', '\x2', '\x121E', 
		'\x121F', '\a', '\x41', '\x2', '\x2', '\x121F', '\x1225', '\x5', '\x486', 
		'\x244', '\x2', '\x1220', '\x1221', '\a', '\x105', '\x2', '\x2', '\x1221', 
		'\x1225', '\x5', '\x486', '\x244', '\x2', '\x1222', '\x1223', '\a', '\x231', 
		'\x2', '\x2', '\x1223', '\x1225', '\x5', '\x486', '\x244', '\x2', '\x1224', 
		'\x121E', '\x3', '\x2', '\x2', '\x2', '\x1224', '\x1220', '\x3', '\x2', 
		'\x2', '\x2', '\x1224', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1225', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x1226', '\x1227', '\a', '\xD9', 
		'\x2', '\x2', '\x1227', '\x1231', '\a', '\x189', '\x2', '\x2', '\x1228', 
		'\x1229', '\a', '\x144', '\x2', '\x2', '\x1229', '\x1231', '\x5', '\x476', 
		'\x23C', '\x2', '\x122A', '\x122B', '\a', '\x149', '\x2', '\x2', '\x122B', 
		'\x1231', '\x5', '\x476', '\x23C', '\x2', '\x122C', '\x122D', '\a', '\x143', 
		'\x2', '\x2', '\x122D', '\x1231', '\x5', '\x476', '\x23C', '\x2', '\x122E', 
		'\x122F', '\a', '\x14A', '\x2', '\x2', '\x122F', '\x1231', '\x5', '\x476', 
		'\x23C', '\x2', '\x1230', '\x1226', '\x3', '\x2', '\x2', '\x2', '\x1230', 
		'\x1228', '\x3', '\x2', '\x2', '\x2', '\x1230', '\x122A', '\x3', '\x2', 
		'\x2', '\x2', '\x1230', '\x122C', '\x3', '\x2', '\x2', '\x2', '\x1230', 
		'\x122E', '\x3', '\x2', '\x2', '\x2', '\x1231', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x1232', '\x1233', '\a', '\x1FC', '\x2', '\x2', '\x1233', 
		'\x1234', '\a', '\x295', '\x2', '\x2', '\x1234', '\x124A', '\x5', '\x232', 
		'\x11A', '\x2', '\x1235', '\x1236', '\a', '\x1FC', '\x2', '\x2', '\x1236', 
		'\x1237', '\a', '\x295', '\x2', '\x2', '\x1237', '\x124A', '\t', ';', 
		'\x2', '\x2', '\x1238', '\x1239', '\a', '\x1FC', '\x2', '\x2', '\x1239', 
		'\x123A', '\a', '\x82', '\x2', '\x2', '\x123A', '\x123E', '\a', '\x295', 
		'\x2', '\x2', '\x123B', '\x123F', '\x5', '\x232', '\x11A', '\x2', '\x123C', 
		'\x123F', '\a', '\x173', '\x2', '\x2', '\x123D', '\x123F', '\a', '\f', 
		'\x2', '\x2', '\x123E', '\x123B', '\x3', '\x2', '\x2', '\x2', '\x123E', 
		'\x123C', '\x3', '\x2', '\x2', '\x2', '\x123E', '\x123D', '\x3', '\x2', 
		'\x2', '\x2', '\x123F', '\x1240', '\x3', '\x2', '\x2', '\x2', '\x1240', 
		'\x1241', '\a', '\x250', '\x2', '\x2', '\x1241', '\x124A', '\x5', '\x232', 
		'\x11A', '\x2', '\x1242', '\x1243', '\a', '\x1FC', '\x2', '\x2', '\x1243', 
		'\x1244', '\a', '\x295', '\x2', '\x2', '\x1244', '\x1247', '\a', '\f', 
		'\x2', '\x2', '\x1245', '\x1246', '\a', '\x299', '\x2', '\x2', '\x1246', 
		'\x1248', '\x5', '\x232', '\x11A', '\x2', '\x1247', '\x1245', '\x3', '\x2', 
		'\x2', '\x2', '\x1247', '\x1248', '\x3', '\x2', '\x2', '\x2', '\x1248', 
		'\x124A', '\x3', '\x2', '\x2', '\x2', '\x1249', '\x1232', '\x3', '\x2', 
		'\x2', '\x2', '\x1249', '\x1235', '\x3', '\x2', '\x2', '\x2', '\x1249', 
		'\x1238', '\x3', '\x2', '\x2', '\x2', '\x1249', '\x1242', '\x3', '\x2', 
		'\x2', '\x2', '\x124A', '\x231', '\x3', '\x2', '\x2', '\x2', '\x124B', 
		'\x1250', '\x5', '\x234', '\x11B', '\x2', '\x124C', '\x124D', '\a', '\x307', 
		'\x2', '\x2', '\x124D', '\x124F', '\x5', '\x234', '\x11B', '\x2', '\x124E', 
		'\x124C', '\x3', '\x2', '\x2', '\x2', '\x124F', '\x1252', '\x3', '\x2', 
		'\x2', '\x2', '\x1250', '\x124E', '\x3', '\x2', '\x2', '\x2', '\x1250', 
		'\x1251', '\x3', '\x2', '\x2', '\x2', '\x1251', '\x233', '\x3', '\x2', 
		'\x2', '\x2', '\x1252', '\x1250', '\x3', '\x2', '\x2', '\x2', '\x1253', 
		'\x1257', '\x5', '\x4A2', '\x252', '\x2', '\x1254', '\x1255', '\a', '\x311', 
		'\x2', '\x2', '\x1255', '\x1258', '\x5', '\x49E', '\x250', '\x2', '\x1256', 
		'\x1258', '\a', '\x312', '\x2', '\x2', '\x1257', '\x1254', '\x3', '\x2', 
		'\x2', '\x2', '\x1257', '\x1256', '\x3', '\x2', '\x2', '\x2', '\x1257', 
		'\x1258', '\x3', '\x2', '\x2', '\x2', '\x1258', '\x235', '\x3', '\x2', 
		'\x2', '\x2', '\x1259', '\x125B', '\a', '\x10', '\x2', '\x2', '\x125A', 
		'\x125C', '\x5', '\x40C', '\x207', '\x2', '\x125B', '\x125A', '\x3', '\x2', 
		'\x2', '\x2', '\x125B', '\x125C', '\x3', '\x2', '\x2', '\x2', '\x125C', 
		'\x125D', '\x3', '\x2', '\x2', '\x2', '\x125D', '\x125E', '\a', '\x240', 
		'\x2', '\x2', '\x125E', '\x1261', '\x5', '\x452', '\x22A', '\x2', '\x125F', 
		'\x1260', '\x6', '\x11C', 'n', '\x2', '\x1260', '\x1262', '\x5', '\x238', 
		'\x11D', '\x2', '\x1261', '\x125F', '\x3', '\x2', '\x2', '\x2', '\x1261', 
		'\x1262', '\x3', '\x2', '\x2', '\x2', '\x1262', '\x1285', '\x3', '\x2', 
		'\x2', '\x2', '\x1263', '\x1264', '\a', '@', '\x2', '\x2', '\x1264', '\x1265', 
		'\a', '\x240', '\x2', '\x2', '\x1265', '\x1269', '\x5', '\x452', '\x22A', 
		'\x2', '\x1266', '\x1268', '\x5', '\x23A', '\x11E', '\x2', '\x1267', '\x1266', 
		'\x3', '\x2', '\x2', '\x2', '\x1268', '\x126B', '\x3', '\x2', '\x2', '\x2', 
		'\x1269', '\x1267', '\x3', '\x2', '\x2', '\x2', '\x1269', '\x126A', '\x3', 
		'\x2', '\x2', '\x2', '\x126A', '\x1285', '\x3', '\x2', '\x2', '\x2', '\x126B', 
		'\x1269', '\x3', '\x2', '\x2', '\x2', '\x126C', '\x126D', '\a', '?', '\x2', 
		'\x2', '\x126D', '\x126E', '\a', '\x240', '\x2', '\x2', '\x126E', '\x1270', 
		'\x5', '\x452', '\x22A', '\x2', '\x126F', '\x1271', '\t', '<', '\x2', 
		'\x2', '\x1270', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x1270', '\x1271', 
		'\x3', '\x2', '\x2', '\x2', '\x1271', '\x1285', '\x3', '\x2', '\x2', '\x2', 
		'\x1272', '\x1274', '\a', '\x186', '\x2', '\x2', '\x1273', '\x1275', '\x5', 
		'\x40C', '\x207', '\x2', '\x1274', '\x1273', '\x3', '\x2', '\x2', '\x2', 
		'\x1274', '\x1275', '\x3', '\x2', '\x2', '\x2', '\x1275', '\x1276', '\x3', 
		'\x2', '\x2', '\x2', '\x1276', '\x1277', '\a', '\x240', '\x2', '\x2', 
		'\x1277', '\x1285', '\x5', '\x452', '\x22A', '\x2', '\x1278', '\x127A', 
		'\a', '\x1C9', '\x2', '\x2', '\x1279', '\x127B', '\x5', '\x40C', '\x207', 
		'\x2', '\x127A', '\x1279', '\x3', '\x2', '\x2', '\x2', '\x127A', '\x127B', 
		'\x3', '\x2', '\x2', '\x2', '\x127B', '\x127C', '\x3', '\x2', '\x2', '\x2', 
		'\x127C', '\x127D', '\a', '\x240', '\x2', '\x2', '\x127D', '\x1281', '\x5', 
		'\x452', '\x22A', '\x2', '\x127E', '\x1280', '\x5', '\x23C', '\x11F', 
		'\x2', '\x127F', '\x127E', '\x3', '\x2', '\x2', '\x2', '\x1280', '\x1283', 
		'\x3', '\x2', '\x2', '\x2', '\x1281', '\x127F', '\x3', '\x2', '\x2', '\x2', 
		'\x1281', '\x1282', '\x3', '\x2', '\x2', '\x2', '\x1282', '\x1285', '\x3', 
		'\x2', '\x2', '\x2', '\x1283', '\x1281', '\x3', '\x2', '\x2', '\x2', '\x1284', 
		'\x1259', '\x3', '\x2', '\x2', '\x2', '\x1284', '\x1263', '\x3', '\x2', 
		'\x2', '\x2', '\x1284', '\x126C', '\x3', '\x2', '\x2', '\x2', '\x1284', 
		'\x1272', '\x3', '\x2', '\x2', '\x2', '\x1284', '\x1278', '\x3', '\x2', 
		'\x2', '\x2', '\x1285', '\x237', '\x3', '\x2', '\x2', '\x2', '\x1286', 
		'\x1287', '\a', '\x268', '\x2', '\x2', '\x1287', '\x1288', '\a', '\x2A4', 
		'\x2', '\x2', '\x1288', '\x1289', '\a', '\x181', '\x2', '\x2', '\x1289', 
		'\x128D', '\x5', '\x46C', '\x237', '\x2', '\x128A', '\x128B', '\a', '\x287', 
		'\x2', '\x2', '\x128B', '\x128C', '\a', '\x2ED', '\x2', '\x2', '\x128C', 
		'\x128E', '\a', '\x2A5', '\x2', '\x2', '\x128D', '\x128A', '\x3', '\x2', 
		'\x2', '\x2', '\x128D', '\x128E', '\x3', '\x2', '\x2', '\x2', '\x128E', 
		'\x1294', '\x3', '\x2', '\x2', '\x2', '\x128F', '\x1290', '\a', '\x96', 
		'\x2', '\x2', '\x1290', '\x1291', '\a', '\x2A4', '\x2', '\x2', '\x1291', 
		'\x1292', '\a', '\x181', '\x2', '\x2', '\x1292', '\x1294', '\x5', '\x46C', 
		'\x237', '\x2', '\x1293', '\x1286', '\x3', '\x2', '\x2', '\x2', '\x1293', 
		'\x128F', '\x3', '\x2', '\x2', '\x2', '\x1294', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x1295', '\x1296', '\a', '\xCA', '\x2', '\x2', '\x1296', 
		'\x1299', '\a', '\x269', '\x2', '\x2', '\x1297', '\x1299', '\t', '=', 
		'\x2', '\x2', '\x1298', '\x1295', '\x3', '\x2', '\x2', '\x2', '\x1298', 
		'\x1297', '\x3', '\x2', '\x2', '\x2', '\x1299', '\x23B', '\x3', '\x2', 
		'\x2', '\x2', '\x129A', '\x129B', '\t', '>', '\x2', '\x2', '\x129B', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x129C', '\x129D', '\a', '\xF7', '\x2', '\x2', 
		'\x129D', '\x129E', '\a', '\x19C', '\x2', '\x2', '\x129E', '\x129F', '\x5', 
		'\x46A', '\x236', '\x2', '\x129F', '\x12A0', '\a', '\x20A', '\x2', '\x2', 
		'\x12A0', '\x12A1', '\x5', '\x484', '\x243', '\x2', '\x12A1', '\x12B3', 
		'\x3', '\x2', '\x2', '\x2', '\x12A2', '\x12A3', '\a', '\xF7', '\x2', '\x2', 
		'\x12A3', '\x12A4', '\a', '\x29A', '\x2', '\x2', '\x12A4', '\x12B3', '\x5', 
		'\x48E', '\x248', '\x2', '\x12A5', '\x12A6', '\a', '\x261', '\x2', '\x2', 
		'\x12A6', '\x12A7', '\a', '\x19C', '\x2', '\x2', '\x12A7', '\x12B3', '\x5', 
		'\x460', '\x231', '\x2', '\x12A8', '\x12A9', '\a', '\x261', '\x2', '\x2', 
		'\x12A9', '\x12AA', '\a', '\x29A', '\x2', '\x2', '\x12AA', '\x12AF', '\x5', 
		'\x462', '\x232', '\x2', '\x12AB', '\x12AC', '\a', '\x307', '\x2', '\x2', 
		'\x12AC', '\x12AE', '\x5', '\x462', '\x232', '\x2', '\x12AD', '\x12AB', 
		'\x3', '\x2', '\x2', '\x2', '\x12AE', '\x12B1', '\x3', '\x2', '\x2', '\x2', 
		'\x12AF', '\x12AD', '\x3', '\x2', '\x2', '\x2', '\x12AF', '\x12B0', '\x3', 
		'\x2', '\x2', '\x2', '\x12B0', '\x12B3', '\x3', '\x2', '\x2', '\x2', '\x12B1', 
		'\x12AF', '\x3', '\x2', '\x2', '\x2', '\x12B2', '\x129C', '\x3', '\x2', 
		'\x2', '\x2', '\x12B2', '\x12A2', '\x3', '\x2', '\x2', '\x2', '\x12B2', 
		'\x12A5', '\x3', '\x2', '\x2', '\x2', '\x12B2', '\x12A8', '\x3', '\x2', 
		'\x2', '\x2', '\x12B3', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x12B4', 
		'\x12B5', '\a', '\x1FC', '\x2', '\x2', '\x12B5', '\x12B6', '\x5', '\x242', 
		'\x122', '\x2', '\x12B6', '\x241', '\x3', '\x2', '\x2', '\x2', '\x12B7', 
		'\x12B8', '\x5', '\x24C', '\x127', '\x2', '\x12B8', '\x12B9', '\x5', '\x24A', 
		'\x126', '\x2', '\x12B9', '\x12F0', '\x3', '\x2', '\x2', '\x2', '\x12BA', 
		'\x12BB', '\a', '\x252', '\x2', '\x2', '\x12BB', '\x12F0', '\x5', '\x244', 
		'\x123', '\x2', '\x12BC', '\x12BD', '\x5', '\x4AA', '\x256', '\x2', '\x12BD', 
		'\x12BE', '\x5', '\x252', '\x12A', '\x2', '\x12BE', '\x12F0', '\x3', '\x2', 
		'\x2', '\x2', '\x12BF', '\x12C2', '\a', '\x198', '\x2', '\x2', '\x12C0', 
		'\x12C1', '\a', '\xCA', '\x2', '\x2', '\x12C1', '\x12C3', '\x5', '\x404', 
		'\x203', '\x2', '\x12C2', '\x12C0', '\x3', '\x2', '\x2', '\x2', '\x12C2', 
		'\x12C3', '\x3', '\x2', '\x2', '\x2', '\x12C3', '\x12C4', '\x3', '\x2', 
		'\x2', '\x2', '\x12C4', '\x12DF', '\x5', '\x4A8', '\x255', '\x2', '\x12C5', 
		'\x12C7', '\x5', '\x486', '\x244', '\x2', '\x12C6', '\x12C8', '\x5', '\x400', 
		'\x201', '\x2', '\x12C7', '\x12C6', '\x3', '\x2', '\x2', '\x2', '\x12C7', 
		'\x12C8', '\x3', '\x2', '\x2', '\x2', '\x12C8', '\x12CA', '\x3', '\x2', 
		'\x2', '\x2', '\x12C9', '\x12CB', '\x5', '\x3FC', '\x1FF', '\x2', '\x12CA', 
		'\x12C9', '\x3', '\x2', '\x2', '\x2', '\x12CA', '\x12CB', '\x3', '\x2', 
		'\x2', '\x2', '\x12CB', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12CC', 
		'\x12CE', '\x5', '\x486', '\x244', '\x2', '\x12CD', '\x12CF', '\x5', '\x400', 
		'\x201', '\x2', '\x12CE', '\x12CD', '\x3', '\x2', '\x2', '\x2', '\x12CE', 
		'\x12CF', '\x3', '\x2', '\x2', '\x2', '\x12CF', '\x12D1', '\x3', '\x2', 
		'\x2', '\x2', '\x12D0', '\x12D2', '\x5', '\x3FC', '\x1FF', '\x2', '\x12D1', 
		'\x12D0', '\x3', '\x2', '\x2', '\x2', '\x12D1', '\x12D2', '\x3', '\x2', 
		'\x2', '\x2', '\x12D2', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12D3', 
		'\x12D4', '\x6', '\x122', 'o', '\x2', '\x12D4', '\x12D5', '\a', '\x180', 
		'\x2', '\x2', '\x12D5', '\x12D6', '\a', '\x30A', '\x2', '\x2', '\x12D6', 
		'\x12D7', '\x5', '\x486', '\x244', '\x2', '\x12D7', '\x12D8', '\a', '\x30B', 
		'\x2', '\x2', '\x12D8', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12D9', 
		'\x12DA', '\x6', '\x122', 'p', '\x2', '\x12DA', '\x12DB', '\a', '\x198', 
		'\x2', '\x2', '\x12DB', '\x12DC', '\a', '\x30A', '\x2', '\x2', '\x12DC', 
		'\x12DD', '\x5', '\x486', '\x244', '\x2', '\x12DD', '\x12DE', '\a', '\x30B', 
		'\x2', '\x2', '\x12DE', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12DF', 
		'\x12C5', '\x3', '\x2', '\x2', '\x2', '\x12DF', '\x12CC', '\x3', '\x2', 
		'\x2', '\x2', '\x12DF', '\x12D3', '\x3', '\x2', '\x2', '\x2', '\x12DF', 
		'\x12D9', '\x3', '\x2', '\x2', '\x2', '\x12E0', '\x12F0', '\x3', '\x2', 
		'\x2', '\x2', '\x12E1', '\x12E2', '\x6', '\x122', 'q', '\x2', '\x12E2', 
		'\x12E5', '\a', '\x198', '\x2', '\x2', '\x12E3', '\x12E4', '\a', '\xCA', 
		'\x2', '\x2', '\x12E4', '\x12E6', '\x5', '\x404', '\x203', '\x2', '\x12E5', 
		'\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12E5', '\x12E6', '\x3', '\x2', 
		'\x2', '\x2', '\x12E6', '\x12E7', '\x3', '\x2', '\x2', '\x2', '\x12E7', 
		'\x12E8', '\a', '\x250', '\x2', '\x2', '\x12E8', '\x12EA', '\a', '\x2E0', 
		'\x2', '\x2', '\x12E9', '\x12EB', '\x5', '\x400', '\x201', '\x2', '\x12EA', 
		'\x12E9', '\x3', '\x2', '\x2', '\x2', '\x12EA', '\x12EB', '\x3', '\x2', 
		'\x2', '\x2', '\x12EB', '\x12ED', '\x3', '\x2', '\x2', '\x2', '\x12EC', 
		'\x12EE', '\x5', '\x3FC', '\x1FF', '\x2', '\x12ED', '\x12EC', '\x3', '\x2', 
		'\x2', '\x2', '\x12ED', '\x12EE', '\x3', '\x2', '\x2', '\x2', '\x12EE', 
		'\x12F0', '\x3', '\x2', '\x2', '\x2', '\x12EF', '\x12B7', '\x3', '\x2', 
		'\x2', '\x2', '\x12EF', '\x12BA', '\x3', '\x2', '\x2', '\x2', '\x12EF', 
		'\x12BC', '\x3', '\x2', '\x2', '\x2', '\x12EF', '\x12BF', '\x3', '\x2', 
		'\x2', '\x2', '\x12EF', '\x12E1', '\x3', '\x2', '\x2', '\x2', '\x12F0', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x12F1', '\x12F3', '\x5', '\x246', 
		'\x124', '\x2', '\x12F2', '\x12F4', '\x5', '\x248', '\x125', '\x2', '\x12F3', 
		'\x12F2', '\x3', '\x2', '\x2', '\x2', '\x12F3', '\x12F4', '\x3', '\x2', 
		'\x2', '\x2', '\x12F4', '\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12F5', 
		'\x12F8', '\x5', '\x248', '\x125', '\x2', '\x12F6', '\x12F7', '\a', '\x307', 
		'\x2', '\x2', '\x12F7', '\x12F9', '\x5', '\x246', '\x124', '\x2', '\x12F8', 
		'\x12F6', '\x3', '\x2', '\x2', '\x2', '\x12F8', '\x12F9', '\x3', '\x2', 
		'\x2', '\x2', '\x12F9', '\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12FA', 
		'\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12FA', '\x12F5', '\x3', '\x2', 
		'\x2', '\x2', '\x12FB', '\x245', '\x3', '\x2', '\x2', '\x2', '\x12FC', 
		'\x12FD', '\a', '\x1B5', '\x2', '\x2', '\x12FD', '\x12FE', '\t', ')', 
		'\x2', '\x2', '\x12FE', '\x247', '\x3', '\x2', '\x2', '\x2', '\x12FF', 
		'\x1300', '\a', '\x104', '\x2', '\x2', '\x1300', '\x1306', '\a', '\x114', 
		'\x2', '\x2', '\x1301', '\x1302', '\a', '\x1CA', '\x2', '\x2', '\x1302', 
		'\x1307', '\a', '\x1B5', '\x2', '\x2', '\x1303', '\x1304', '\a', '\x1B5', 
		'\x2', '\x2', '\x1304', '\x1307', '\t', '?', '\x2', '\x2', '\x1305', '\x1307', 
		'\a', '\x1F6', '\x2', '\x2', '\x1306', '\x1301', '\x3', '\x2', '\x2', 
		'\x2', '\x1306', '\x1303', '\x3', '\x2', '\x2', '\x2', '\x1306', '\x1305', 
		'\x3', '\x2', '\x2', '\x2', '\x1307', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x1308', '\x1309', '\a', '\x307', '\x2', '\x2', '\x1309', '\x130B', '\x5', 
		'\x24E', '\x128', '\x2', '\x130A', '\x1308', '\x3', '\x2', '\x2', '\x2', 
		'\x130B', '\x130E', '\x3', '\x2', '\x2', '\x2', '\x130C', '\x130A', '\x3', 
		'\x2', '\x2', '\x2', '\x130C', '\x130D', '\x3', '\x2', '\x2', '\x2', '\x130D', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x130E', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x130F', '\x1310', '\x5', '\x2EC', '\x177', '\x2', '\x1310', 
		'\x1311', '\x5', '\x4A8', '\x255', '\x2', '\x1311', '\x1312', '\x5', '\x256', 
		'\x12C', '\x2', '\x1312', '\x1329', '\x3', '\x2', '\x2', '\x2', '\x1313', 
		'\x1329', '\x5', '\x3E8', '\x1F5', '\x2', '\x1314', '\x1315', '\x5', '\x2E8', 
		'\x175', '\x2', '\x1315', '\x1316', '\x5', '\x4A8', '\x255', '\x2', '\x1316', 
		'\x1317', '\x5', '\x2A6', '\x154', '\x2', '\x1317', '\x1329', '\x3', '\x2', 
		'\x2', '\x2', '\x1318', '\x1319', '\x5', '\x250', '\x129', '\x2', '\x1319', 
		'\x131A', '\x5', '\x4A8', '\x255', '\x2', '\x131A', '\x131B', '\x5', '\x256', 
		'\x12C', '\x2', '\x131B', '\x1329', '\x3', '\x2', '\x2', '\x2', '\x131C', 
		'\x1326', '\a', '\x166', '\x2', '\x2', '\x131D', '\x131E', '\x5', '\x4A8', 
		'\x255', '\x2', '\x131E', '\x131F', '\x5', '\x2A6', '\x154', '\x2', '\x131F', 
		'\x1327', '\x3', '\x2', '\x2', '\x2', '\x1320', '\x1322', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x1321', '\x1323', '\x5', '\x3DC', '\x1EF', '\x2', '\x1322', 
		'\x1321', '\x3', '\x2', '\x2', '\x2', '\x1322', '\x1323', '\x3', '\x2', 
		'\x2', '\x2', '\x1323', '\x1327', '\x3', '\x2', '\x2', '\x2', '\x1324', 
		'\x1325', '\x6', '\x127', 'r', '\x2', '\x1325', '\x1327', '\a', '\x82', 
		'\x2', '\x2', '\x1326', '\x131D', '\x3', '\x2', '\x2', '\x2', '\x1326', 
		'\x1320', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x1324', '\x3', '\x2', 
		'\x2', '\x2', '\x1327', '\x1329', '\x3', '\x2', '\x2', '\x2', '\x1328', 
		'\x130F', '\x3', '\x2', '\x2', '\x2', '\x1328', '\x1313', '\x3', '\x2', 
		'\x2', '\x2', '\x1328', '\x1314', '\x3', '\x2', '\x2', '\x2', '\x1328', 
		'\x1318', '\x3', '\x2', '\x2', '\x2', '\x1328', '\x131C', '\x3', '\x2', 
		'\x2', '\x2', '\x1329', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x132A', 
		'\x132B', '\x5', '\x4AA', '\x256', '\x2', '\x132B', '\x132C', '\x5', '\x2EC', 
		'\x177', '\x2', '\x132C', '\x132D', '\x5', '\x4A8', '\x255', '\x2', '\x132D', 
		'\x132E', '\x5', '\x256', '\x12C', '\x2', '\x132E', '\x1331', '\x3', '\x2', 
		'\x2', '\x2', '\x132F', '\x1331', '\x5', '\x24C', '\x127', '\x2', '\x1330', 
		'\x132A', '\x3', '\x2', '\x2', '\x2', '\x1330', '\x132F', '\x3', '\x2', 
		'\x2', '\x2', '\x1331', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x1332', 
		'\x1334', '\a', '\x313', '\x2', '\x2', '\x1333', '\x1335', '\x5', '\x4AE', 
		'\x258', '\x2', '\x1334', '\x1333', '\x3', '\x2', '\x2', '\x2', '\x1334', 
		'\x1335', '\x3', '\x2', '\x2', '\x2', '\x1335', '\x1336', '\x3', '\x2', 
		'\x2', '\x2', '\x1336', '\x1337', '\x5', '\x2EC', '\x177', '\x2', '\x1337', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x1338', '\x1339', '\x5', '\x254', 
		'\x12B', '\x2', '\x1339', '\x133A', '\x5', '\x24A', '\x126', '\x2', '\x133A', 
		'\x133E', '\x3', '\x2', '\x2', '\x2', '\x133B', '\x133C', '\a', '\x252', 
		'\x2', '\x2', '\x133C', '\x133E', '\x5', '\x244', '\x123', '\x2', '\x133D', 
		'\x1338', '\x3', '\x2', '\x2', '\x2', '\x133D', '\x133B', '\x3', '\x2', 
		'\x2', '\x2', '\x133E', '\x253', '\x3', '\x2', '\x2', '\x2', '\x133F', 
		'\x1340', '\x5', '\x2EC', '\x177', '\x2', '\x1340', '\x1341', '\x5', '\x4A8', 
		'\x255', '\x2', '\x1341', '\x1342', '\x5', '\x256', '\x12C', '\x2', '\x1342', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x1343', '\x1348', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1344', '\x1348', '\t', '@', '\x2', '\x2', '\x1345', 
		'\x1346', '\x6', '\x12C', 's', '\x2', '\x1346', '\x1348', '\t', '\x41', 
		'\x2', '\x2', '\x1347', '\x1343', '\x3', '\x2', '\x2', '\x2', '\x1347', 
		'\x1344', '\x3', '\x2', '\x2', '\x2', '\x1347', '\x1345', '\x3', '\x2', 
		'\x2', '\x2', '\x1348', '\x257', '\x3', '\x2', '\x2', '\x2', '\x1349', 
		'\x1425', '\a', '\x1FF', '\x2', '\x2', '\x134A', '\x134B', '\x6', '\x12D', 
		't', '\x2', '\x134B', '\x1426', '\a', '\x18', '\x2', '\x2', '\x134C', 
		'\x134E', '\a', 'p', '\x2', '\x2', '\x134D', '\x134F', '\x5', '\x408', 
		'\x205', '\x2', '\x134E', '\x134D', '\x3', '\x2', '\x2', '\x2', '\x134E', 
		'\x134F', '\x3', '\x2', '\x2', '\x2', '\x134F', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x1350', '\x1352', '\x5', '\x25A', '\x12E', '\x2', '\x1351', 
		'\x1350', '\x3', '\x2', '\x2', '\x2', '\x1351', '\x1352', '\x3', '\x2', 
		'\x2', '\x2', '\x1352', '\x1353', '\x3', '\x2', '\x2', '\x2', '\x1353', 
		'\x1355', '\a', '\x23D', '\x2', '\x2', '\x1354', '\x1356', '\x5', '\x260', 
		'\x131', '\x2', '\x1355', '\x1354', '\x3', '\x2', '\x2', '\x2', '\x1355', 
		'\x1356', '\x3', '\x2', '\x2', '\x2', '\x1356', '\x1358', '\x3', '\x2', 
		'\x2', '\x2', '\x1357', '\x1359', '\x5', '\x408', '\x205', '\x2', '\x1358', 
		'\x1357', '\x3', '\x2', '\x2', '\x2', '\x1358', '\x1359', '\x3', '\x2', 
		'\x2', '\x2', '\x1359', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x135A', 
		'\x135C', '\a', '\xCE', '\x2', '\x2', '\x135B', '\x135A', '\x3', '\x2', 
		'\x2', '\x2', '\x135B', '\x135C', '\x3', '\x2', '\x2', '\x2', '\x135C', 
		'\x135D', '\x3', '\x2', '\x2', '\x2', '\x135D', '\x135F', '\a', '\x253', 
		'\x2', '\x2', '\x135E', '\x1360', '\x5', '\x260', '\x131', '\x2', '\x135F', 
		'\x135E', '\x3', '\x2', '\x2', '\x2', '\x135F', '\x1360', '\x3', '\x2', 
		'\x2', '\x2', '\x1360', '\x1362', '\x3', '\x2', '\x2', '\x2', '\x1361', 
		'\x1363', '\x5', '\x408', '\x205', '\x2', '\x1362', '\x1361', '\x3', '\x2', 
		'\x2', '\x2', '\x1362', '\x1363', '\x3', '\x2', '\x2', '\x2', '\x1363', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x1364', '\x1366', '\a', '\xAB', 
		'\x2', '\x2', '\x1365', '\x1367', '\x5', '\x260', '\x131', '\x2', '\x1366', 
		'\x1365', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x1367', '\x3', '\x2', 
		'\x2', '\x2', '\x1367', '\x1369', '\x3', '\x2', '\x2', '\x2', '\x1368', 
		'\x136A', '\x5', '\x408', '\x205', '\x2', '\x1369', '\x1368', '\x3', '\x2', 
		'\x2', '\x2', '\x1369', '\x136A', '\x3', '\x2', '\x2', '\x2', '\x136A', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x136B', '\x136C', '\a', '\x240', 
		'\x2', '\x2', '\x136C', '\x136E', '\a', '\x225', '\x2', '\x2', '\x136D', 
		'\x136F', '\x5', '\x260', '\x131', '\x2', '\x136E', '\x136D', '\x3', '\x2', 
		'\x2', '\x2', '\x136E', '\x136F', '\x3', '\x2', '\x2', '\x2', '\x136F', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1372', '\x5', '\x408', 
		'\x205', '\x2', '\x1371', '\x1370', '\x3', '\x2', '\x2', '\x2', '\x1371', 
		'\x1372', '\x3', '\x2', '\x2', '\x2', '\x1372', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x1373', '\x1374', '\a', '\x185', '\x2', '\x2', '\x1374', 
		'\x1376', '\a', '\x23D', '\x2', '\x2', '\x1375', '\x1377', '\x5', '\x260', 
		'\x131', '\x2', '\x1376', '\x1375', '\x3', '\x2', '\x2', '\x2', '\x1376', 
		'\x1377', '\x3', '\x2', '\x2', '\x2', '\x1377', '\x1379', '\x3', '\x2', 
		'\x2', '\x2', '\x1378', '\x137A', '\x5', '\x408', '\x205', '\x2', '\x1379', 
		'\x1378', '\x3', '\x2', '\x2', '\x2', '\x1379', '\x137A', '\x3', '\x2', 
		'\x2', '\x2', '\x137A', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x137B', 
		'\x1426', '\a', '\x19A', '\x2', '\x2', '\x137C', '\x137F', '\a', '\xA5', 
		'\x2', '\x2', '\x137D', '\x1380', '\x5', '\x448', '\x225', '\x2', '\x137E', 
		'\x1380', '\a', '\f', '\x2', '\x2', '\x137F', '\x137D', '\x3', '\x2', 
		'\x2', '\x2', '\x137F', '\x137E', '\x3', '\x2', '\x2', '\x2', '\x1380', 
		'\x1381', '\x3', '\x2', '\x2', '\x2', '\x1381', '\x1426', '\t', '\x42', 
		'\x2', '\x2', '\x1382', '\x1384', '\x5', '\x25A', '\x12E', '\x2', '\x1383', 
		'\x1382', '\x3', '\x2', '\x2', '\x2', '\x1383', '\x1384', '\x3', '\x2', 
		'\x2', '\x2', '\x1384', '\x1385', '\x3', '\x2', '\x2', '\x2', '\x1385', 
		'\x1386', '\a', 'I', '\x2', '\x2', '\x1386', '\x1387', '\t', '\x43', '\x2', 
		'\x2', '\x1387', '\x1389', '\x5', '\x450', '\x229', '\x2', '\x1388', '\x138A', 
		'\x5', '\x260', '\x131', '\x2', '\x1389', '\x1388', '\x3', '\x2', '\x2', 
		'\x2', '\x1389', '\x138A', '\x3', '\x2', '\x2', '\x2', '\x138A', '\x138C', 
		'\x3', '\x2', '\x2', '\x2', '\x138B', '\x138D', '\x5', '\x408', '\x205', 
		'\x2', '\x138C', '\x138B', '\x3', '\x2', '\x2', '\x2', '\x138C', '\x138D', 
		'\x3', '\x2', '\x2', '\x2', '\x138D', '\x1426', '\x3', '\x2', '\x2', '\x2', 
		'\x138E', '\x138F', '\t', ',', '\x2', '\x2', '\x138F', '\x1426', '\a', 
		'\x123', '\x2', '\x2', '\x1390', '\x1397', '\a', '\x204', '\x2', '\x2', 
		'\x1391', '\x1398', '\a', '\xE3', '\x2', '\x2', '\x1392', '\x1393', '\a', 
		'\x225', '\x2', '\x2', '\x1393', '\x1395', '\x5', '\x25C', '\x12F', '\x2', 
		'\x1394', '\x1396', '\x5', '\x310', '\x189', '\x2', '\x1395', '\x1394', 
		'\x3', '\x2', '\x2', '\x2', '\x1395', '\x1396', '\x3', '\x2', '\x2', '\x2', 
		'\x1396', '\x1398', '\x3', '\x2', '\x2', '\x2', '\x1397', '\x1391', '\x3', 
		'\x2', '\x2', '\x2', '\x1397', '\x1392', '\x3', '\x2', '\x2', '\x2', '\x1398', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x1399', '\x139A', '\t', '\x44', 
		'\x2', '\x2', '\x139A', '\x139D', '\a', '\xAB', '\x2', '\x2', '\x139B', 
		'\x139C', '\a', '\xFD', '\x2', '\x2', '\x139C', '\x139E', '\x5', '\x486', 
		'\x244', '\x2', '\x139D', '\x139B', '\x3', '\x2', '\x2', '\x2', '\x139D', 
		'\x139E', '\x3', '\x2', '\x2', '\x2', '\x139E', '\x13A1', '\x3', '\x2', 
		'\x2', '\x2', '\x139F', '\x13A0', '\a', '\xCD', '\x2', '\x2', '\x13A0', 
		'\x13A2', '\x5', '\x47A', '\x23E', '\x2', '\x13A1', '\x139F', '\x3', '\x2', 
		'\x2', '\x2', '\x13A1', '\x13A2', '\x3', '\x2', '\x2', '\x2', '\x13A2', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x13A5', '\x5', '\x11E', 
		'\x90', '\x2', '\x13A4', '\x13A3', '\x3', '\x2', '\x2', '\x2', '\x13A4', 
		'\x13A5', '\x3', '\x2', '\x2', '\x2', '\x13A5', '\x13A7', '\x3', '\x2', 
		'\x2', '\x2', '\x13A6', '\x13A8', '\x5', '\x310', '\x189', '\x2', '\x13A7', 
		'\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13A7', '\x13A8', '\x3', '\x2', 
		'\x2', '\x2', '\x13A8', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x13A9', 
		'\x13AA', '\x6', '\x12D', 'u', '\x2', '\x13AA', '\x13AC', '\a', '\xB6', 
		'\x2', '\x2', '\x13AB', '\x13A9', '\x3', '\x2', '\x2', '\x2', '\x13AB', 
		'\x13AC', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x13AD', '\x3', '\x2', 
		'\x2', '\x2', '\x13AD', '\x13AE', '\t', '\x45', '\x2', '\x2', '\x13AE', 
		'\x13AF', '\x5', '\x25E', '\x130', '\x2', '\x13AF', '\x13B1', '\x5', '\x450', 
		'\x229', '\x2', '\x13B0', '\x13B2', '\x5', '\x260', '\x131', '\x2', '\x13B1', 
		'\x13B0', '\x3', '\x2', '\x2', '\x2', '\x13B1', '\x13B2', '\x3', '\x2', 
		'\x2', '\x2', '\x13B2', '\x13B4', '\x3', '\x2', '\x2', '\x2', '\x13B3', 
		'\x13B5', '\x5', '\x168', '\xB5', '\x2', '\x13B4', '\x13B3', '\x3', '\x2', 
		'\x2', '\x2', '\x13B4', '\x13B5', '\x3', '\x2', '\x2', '\x2', '\x13B5', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x13B6', '\x13B8', '\a', '\x22B', 
		'\x2', '\x2', '\x13B7', '\x13B6', '\x3', '\x2', '\x2', '\x2', '\x13B7', 
		'\x13B8', '\x3', '\x2', '\x2', '\x2', '\x13B8', '\x13B9', '\x3', '\x2', 
		'\x2', '\x2', '\x13B9', '\x1426', '\a', '\xA4', '\x2', '\x2', '\x13BA', 
		'\x13BB', '\a', '\x61', '\x2', '\x2', '\x13BB', '\x13BC', '\a', '\x30A', 
		'\x2', '\x2', '\x13BC', '\x13BD', '\a', '\x2FA', '\x2', '\x2', '\x13BD', 
		'\x13BE', '\a', '\x30B', '\x2', '\x2', '\x13BE', '\x1426', '\t', '\x46', 
		'\x2', '\x2', '\x13BF', '\x13C1', '\a', '\x281', '\x2', '\x2', '\x13C0', 
		'\x13C2', '\x5', '\x11E', '\x90', '\x2', '\x13C1', '\x13C0', '\x3', '\x2', 
		'\x2', '\x2', '\x13C1', '\x13C2', '\x3', '\x2', '\x2', '\x2', '\x13C2', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x13C3', '\x13C5', '\a', '\xA8', 
		'\x2', '\x2', '\x13C4', '\x13C6', '\x5', '\x11E', '\x90', '\x2', '\x13C5', 
		'\x13C4', '\x3', '\x2', '\x2', '\x2', '\x13C5', '\x13C6', '\x3', '\x2', 
		'\x2', '\x2', '\x13C6', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x13C7', 
		'\x1426', '\a', '\x1AC', '\x2', '\x2', '\x13C8', '\x13D1', '\a', '\x1AB', 
		'\x2', '\x2', '\x13C9', '\x13CE', '\x5', '\x262', '\x132', '\x2', '\x13CA', 
		'\x13CB', '\a', '\x307', '\x2', '\x2', '\x13CB', '\x13CD', '\x5', '\x262', 
		'\x132', '\x2', '\x13CC', '\x13CA', '\x3', '\x2', '\x2', '\x2', '\x13CD', 
		'\x13D0', '\x3', '\x2', '\x2', '\x2', '\x13CE', '\x13CC', '\x3', '\x2', 
		'\x2', '\x2', '\x13CE', '\x13CF', '\x3', '\x2', '\x2', '\x2', '\x13CF', 
		'\x13D2', '\x3', '\x2', '\x2', '\x2', '\x13D0', '\x13CE', '\x3', '\x2', 
		'\x2', '\x2', '\x13D1', '\x13C9', '\x3', '\x2', '\x2', '\x2', '\x13D1', 
		'\x13D2', '\x3', '\x2', '\x2', '\x2', '\x13D2', '\x13D6', '\x3', '\x2', 
		'\x2', '\x2', '\x13D3', '\x13D4', '\a', '\xCA', '\x2', '\x2', '\x13D4', 
		'\x13D5', '\a', '\x1B0', '\x2', '\x2', '\x13D5', '\x13D7', '\a', '\x2ED', 
		'\x2', '\x2', '\x13D6', '\x13D3', '\x3', '\x2', '\x2', '\x2', '\x13D6', 
		'\x13D7', '\x3', '\x2', '\x2', '\x2', '\x13D7', '\x13D9', '\x3', '\x2', 
		'\x2', '\x2', '\x13D8', '\x13DA', '\x5', '\x11E', '\x90', '\x2', '\x13D9', 
		'\x13D8', '\x3', '\x2', '\x2', '\x2', '\x13D9', '\x13DA', '\x3', '\x2', 
		'\x2', '\x2', '\x13DA', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x13DB', 
		'\x13DD', '\x5', '\x4AA', '\x256', '\x2', '\x13DC', '\x13DB', '\x3', '\x2', 
		'\x2', '\x2', '\x13DC', '\x13DD', '\x3', '\x2', '\x2', '\x2', '\x13DD', 
		'\x13DE', '\x3', '\x2', '\x2', '\x2', '\x13DE', '\x13E0', '\t', 'G', '\x2', 
		'\x2', '\x13DF', '\x13E1', '\x5', '\x408', '\x205', '\x2', '\x13E0', '\x13DF', 
		'\x3', '\x2', '\x2', '\x2', '\x13E0', '\x13E1', '\x3', '\x2', '\x2', '\x2', 
		'\x13E1', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x13E2', '\x13E4', '\a', 
		'\xCE', '\x2', '\x2', '\x13E3', '\x13E2', '\x3', '\x2', '\x2', '\x2', 
		'\x13E3', '\x13E4', '\x3', '\x2', '\x2', '\x2', '\x13E4', '\x13E5', '\x3', 
		'\x2', '\x2', '\x2', '\x13E5', '\x1426', '\a', '\x1AA', '\x2', '\x2', 
		'\x13E6', '\x13E8', '\x5', '\x2F8', '\x17D', '\x2', '\x13E7', '\x13E9', 
		'\x5', '\x408', '\x205', '\x2', '\x13E8', '\x13E7', '\x3', '\x2', '\x2', 
		'\x2', '\x13E8', '\x13E9', '\x3', '\x2', '\x2', '\x2', '\x13E9', '\x1426', 
		'\x3', '\x2', '\x2', '\x2', '\x13EA', '\x13EC', '\a', 'H', '\x2', '\x2', 
		'\x13EB', '\x13ED', '\x5', '\x408', '\x205', '\x2', '\x13EC', '\x13EB', 
		'\x3', '\x2', '\x2', '\x2', '\x13EC', '\x13ED', '\x3', '\x2', '\x2', '\x2', 
		'\x13ED', '\x1426', '\x3', '\x2', '\x2', '\x2', '\x13EE', '\x13EF', '\x6', 
		'\x12D', 'v', '\x2', '\x13EF', '\x1426', '\a', '_', '\x2', '\x2', '\x13F0', 
		'\x1426', '\a', '\x1A7', '\x2', '\x2', '\x13F1', '\x13F4', '\a', '\xDA', 
		'\x2', '\x2', '\x13F2', '\x13F3', '\a', '\xCA', '\x2', '\x2', '\x13F3', 
		'\x13F5', '\x5', '\x404', '\x203', '\x2', '\x13F4', '\x13F2', '\x3', '\x2', 
		'\x2', '\x2', '\x13F4', '\x13F5', '\x3', '\x2', '\x2', '\x2', '\x13F5', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x13F6', '\x13F7', '\a', '\xDA', 
		'\x2', '\x2', '\x13F7', '\x13F8', '\a', '\xCA', '\x2', '\x2', '\x13F8', 
		'\x13F9', '\x5', '\x404', '\x203', '\x2', '\x13F9', '\x13FA', '\a', '\x26F', 
		'\x2', '\x2', '\x13FA', '\x13FB', '\x5', '\x3F2', '\x1FA', '\x2', '\x13FB', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x13FC', '\x13FD', '\a', '\x13E', 
		'\x2', '\x2', '\x13FD', '\x1426', '\a', '\x225', '\x2', '\x2', '\x13FE', 
		'\x1413', '\a', '\x63', '\x2', '\x2', '\x13FF', '\x1401', '\a', 'o', '\x2', 
		'\x2', '\x1400', '\x1402', '\x5', '\x3D6', '\x1EC', '\x2', '\x1401', '\x1400', 
		'\x3', '\x2', '\x2', '\x2', '\x1401', '\x1402', '\x3', '\x2', '\x2', '\x2', 
		'\x1402', '\x1403', '\x3', '\x2', '\x2', '\x2', '\x1403', '\x1414', '\x5', 
		'\x424', '\x213', '\x2', '\x1404', '\x1405', '\a', '\xAC', '\x2', '\x2', 
		'\x1405', '\x1414', '\x5', '\x440', '\x221', '\x2', '\x1406', '\x1407', 
		'\a', '\xD0', '\x2', '\x2', '\x1407', '\x1414', '\x5', '\x42C', '\x217', 
		'\x2', '\x1408', '\x1409', '\a', '\x1A8', '\x2', '\x2', '\x1409', '\x1414', 
		'\x5', '\x428', '\x215', '\x2', '\x140A', '\x140B', '\a', '\x240', '\x2', 
		'\x2', '\x140B', '\x1414', '\x5', '\x450', '\x229', '\x2', '\x140C', '\x140D', 
		'\a', '\x254', '\x2', '\x2', '\x140D', '\x1414', '\x5', '\x430', '\x219', 
		'\x2', '\x140E', '\x140F', '\a', '\x27E', '\x2', '\x2', '\x140F', '\x1414', 
		'\x5', '\x434', '\x21B', '\x2', '\x1410', '\x1411', '\x6', '\x12D', 'w', 
		'\x2', '\x1411', '\x1412', '\a', '\x26C', '\x2', '\x2', '\x1412', '\x1414', 
		'\x5', '\x404', '\x203', '\x2', '\x1413', '\x13FF', '\x3', '\x2', '\x2', 
		'\x2', '\x1413', '\x1404', '\x3', '\x2', '\x2', '\x2', '\x1413', '\x1406', 
		'\x3', '\x2', '\x2', '\x2', '\x1413', '\x1408', '\x3', '\x2', '\x2', '\x2', 
		'\x1413', '\x140A', '\x3', '\x2', '\x2', '\x2', '\x1413', '\x140C', '\x3', 
		'\x2', '\x2', '\x2', '\x1413', '\x140E', '\x3', '\x2', '\x2', '\x2', '\x1413', 
		'\x1410', '\x3', '\x2', '\x2', '\x2', '\x1414', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x1415', '\x1416', '\a', '\x1A8', '\x2', '\x2', '\x1416', 
		'\x1418', '\a', '\x225', '\x2', '\x2', '\x1417', '\x1419', '\x5', '\x408', 
		'\x205', '\x2', '\x1418', '\x1417', '\x3', '\x2', '\x2', '\x2', '\x1418', 
		'\x1419', '\x3', '\x2', '\x2', '\x2', '\x1419', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x141A', '\x141B', '\a', '\xD0', '\x2', '\x2', '\x141B', 
		'\x141D', '\a', '\x225', '\x2', '\x2', '\x141C', '\x141E', '\x5', '\x408', 
		'\x205', '\x2', '\x141D', '\x141C', '\x3', '\x2', '\x2', '\x2', '\x141D', 
		'\x141E', '\x3', '\x2', '\x2', '\x2', '\x141E', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x141F', '\x1420', '\a', '\x1A8', '\x2', '\x2', '\x1420', 
		'\x1421', '\a', '\x46', '\x2', '\x2', '\x1421', '\x1426', '\x5', '\x428', 
		'\x215', '\x2', '\x1422', '\x1423', '\a', '\xD0', '\x2', '\x2', '\x1423', 
		'\x1424', '\a', '\x46', '\x2', '\x2', '\x1424', '\x1426', '\x5', '\x42C', 
		'\x217', '\x2', '\x1425', '\x134A', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x134C', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x1351', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x135B', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x1364', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x136B', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1373', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x137B', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x137C', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1383', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x138E', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x1390', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1399', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13AB', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13B7', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x13BA', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13BF', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x13C7', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13C8', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13DC', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x13E3', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13E6', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13EA', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x13EE', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13F0', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x13F6', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x13FC', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x13FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1415', '\x3', '\x2', '\x2', '\x2', '\x1425', 
		'\x141A', '\x3', '\x2', '\x2', '\x2', '\x1425', '\x141F', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1422', '\x3', '\x2', '\x2', '\x2', '\x1426', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x1427', '\x142E', '\a', '\xCE', 
		'\x2', '\x2', '\x1428', '\x1429', '\x6', '\x12E', 'x', '\x2', '\x1429', 
		'\x142B', '\a', '\xB6', '\x2', '\x2', '\x142A', '\x142C', '\a', '\xCE', 
		'\x2', '\x2', '\x142B', '\x142A', '\x3', '\x2', '\x2', '\x2', '\x142B', 
		'\x142C', '\x3', '\x2', '\x2', '\x2', '\x142C', '\x142E', '\x3', '\x2', 
		'\x2', '\x2', '\x142D', '\x1427', '\x3', '\x2', '\x2', '\x2', '\x142D', 
		'\x1428', '\x3', '\x2', '\x2', '\x2', '\x142E', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x142F', '\x1431', '\x6', '\x12F', 'y', '\x2', '\x1430', 
		'\x1432', '\a', '\x174', '\x2', '\x2', '\x1431', '\x1430', '\x3', '\x2', 
		'\x2', '\x2', '\x1431', '\x1432', '\x3', '\x2', '\x2', '\x2', '\x1432', 
		'\x1435', '\x3', '\x2', '\x2', '\x2', '\x1433', '\x1435', '\x3', '\x2', 
		'\x2', '\x2', '\x1434', '\x142F', '\x3', '\x2', '\x2', '\x2', '\x1434', 
		'\x1433', '\x3', '\x2', '\x2', '\x2', '\x1435', '\x25D', '\x3', '\x2', 
		'\x2', '\x2', '\x1436', '\x1437', '\t', '\x43', '\x2', '\x2', '\x1437', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x1438', '\x1439', '\x5', '\x25E', 
		'\x130', '\x2', '\x1439', '\x143A', '\x5', '\x46A', '\x236', '\x2', '\x143A', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x143B', '\x143C', '\a', '*', '\x2', 
		'\x2', '\x143C', '\x1443', '\a', '\x101', '\x2', '\x2', '\x143D', '\x143E', 
		'\a', ']', '\x2', '\x2', '\x143E', '\x1443', '\a', '\x23A', '\x2', '\x2', 
		'\x143F', '\x1440', '\a', '\x192', '\x2', '\x2', '\x1440', '\x1443', '\a', 
		'\xBB', '\x2', '\x2', '\x1441', '\x1443', '\t', 'H', '\x2', '\x2', '\x1442', 
		'\x143B', '\x3', '\x2', '\x2', '\x2', '\x1442', '\x143D', '\x3', '\x2', 
		'\x2', '\x2', '\x1442', '\x143F', '\x3', '\x2', '\x2', '\x2', '\x1442', 
		'\x1441', '\x3', '\x2', '\x2', '\x2', '\x1443', '\x263', '\x3', '\x2', 
		'\x2', '\x2', '\x1444', '\x1445', '\a', '#', '\x2', '\x2', '\x1445', '\x146A', 
		'\x5', '\x48A', '\x246', '\x2', '\x1446', '\x1447', '\a', '\x31', '\x2', 
		'\x2', '\x1447', '\x1448', '\a', '\xEE', '\x2', '\x2', '\x1448', '\x1449', 
		'\x5', '\x266', '\x134', '\x2', '\x1449', '\x144C', '\a', '\xFD', '\x2', 
		'\x2', '\x144A', '\x144D', '\x5', '\x46A', '\x236', '\x2', '\x144B', '\x144D', 
		'\a', '\x82', '\x2', '\x2', '\x144C', '\x144A', '\x3', '\x2', '\x2', '\x2', 
		'\x144C', '\x144B', '\x3', '\x2', '\x2', '\x2', '\x144D', '\x146A', '\x3', 
		'\x2', '\x2', '\x2', '\x144E', '\x1450', '\a', '\xC6', '\x2', '\x2', '\x144F', 
		'\x1451', '\x5', '\x40C', '\x207', '\x2', '\x1450', '\x144F', '\x3', '\x2', 
		'\x2', '\x2', '\x1450', '\x1451', '\x3', '\x2', '\x2', '\x2', '\x1451', 
		'\x145B', '\x3', '\x2', '\x2', '\x2', '\x1452', '\x145C', '\x5', '\x278', 
		'\x13D', '\x2', '\x1453', '\x1458', '\x5', '\x274', '\x13B', '\x2', '\x1454', 
		'\x1455', '\a', '\x307', '\x2', '\x2', '\x1455', '\x1457', '\x5', '\x274', 
		'\x13B', '\x2', '\x1456', '\x1454', '\x3', '\x2', '\x2', '\x2', '\x1457', 
		'\x145A', '\x3', '\x2', '\x2', '\x2', '\x1458', '\x1456', '\x3', '\x2', 
		'\x2', '\x2', '\x1458', '\x1459', '\x3', '\x2', '\x2', '\x2', '\x1459', 
		'\x145C', '\x3', '\x2', '\x2', '\x2', '\x145A', '\x1458', '\x3', '\x2', 
		'\x2', '\x2', '\x145B', '\x1452', '\x3', '\x2', '\x2', '\x2', '\x145B', 
		'\x1453', '\x3', '\x2', '\x2', '\x2', '\x145C', '\x146A', '\x3', '\x2', 
		'\x2', '\x2', '\x145D', '\x145F', '\a', '\x10C', '\x2', '\x2', '\x145E', 
		'\x1460', '\t', 'I', '\x2', '\x2', '\x145F', '\x145E', '\x3', '\x2', '\x2', 
		'\x2', '\x145F', '\x1460', '\x3', '\x2', '\x2', '\x2', '\x1460', '\x1461', 
		'\x3', '\x2', '\x2', '\x2', '\x1461', '\x146A', '\x5', '\x2A6', '\x154', 
		'\x2', '\x1462', '\x1463', '\a', '\x11B', '\x2', '\x2', '\x1463', '\x1464', 
		'\a', '\xEE', '\x2', '\x2', '\x1464', '\x1465', '\a', '\xFA', '\x2', '\x2', 
		'\x1465', '\x1466', '\a', '\x31', '\x2', '\x2', '\x1466', '\x146A', '\x5', 
		'\x27C', '\x13F', '\x2', '\x1467', '\x1468', '\x6', '\x133', 'z', '\x2', 
		'\x1468', '\x146A', '\a', '\x200', '\x2', '\x2', '\x1469', '\x1444', '\x3', 
		'\x2', '\x2', '\x2', '\x1469', '\x1446', '\x3', '\x2', '\x2', '\x2', '\x1469', 
		'\x144E', '\x3', '\x2', '\x2', '\x2', '\x1469', '\x145D', '\x3', '\x2', 
		'\x2', '\x2', '\x1469', '\x1462', '\x3', '\x2', '\x2', '\x2', '\x1469', 
		'\x1467', '\x3', '\x2', '\x2', '\x2', '\x146A', '\x265', '\x3', '\x2', 
		'\x2', '\x2', '\x146B', '\x146E', '\x5', '\x268', '\x135', '\x2', '\x146C', 
		'\x146E', '\x5', '\x26C', '\x137', '\x2', '\x146D', '\x146B', '\x3', '\x2', 
		'\x2', '\x2', '\x146D', '\x146C', '\x3', '\x2', '\x2', '\x2', '\x146E', 
		'\x267', '\x3', '\x2', '\x2', '\x2', '\x146F', '\x1474', '\x5', '\x26A', 
		'\x136', '\x2', '\x1470', '\x1471', '\a', '\x307', '\x2', '\x2', '\x1471', 
		'\x1473', '\x5', '\x26A', '\x136', '\x2', '\x1472', '\x1470', '\x3', '\x2', 
		'\x2', '\x2', '\x1473', '\x1476', '\x3', '\x2', '\x2', '\x2', '\x1474', 
		'\x1472', '\x3', '\x2', '\x2', '\x2', '\x1474', '\x1475', '\x3', '\x2', 
		'\x2', '\x2', '\x1475', '\x269', '\x3', '\x2', '\x2', '\x2', '\x1476', 
		'\x1474', '\x3', '\x2', '\x2', '\x2', '\x1477', '\x1479', '\x5', '\x450', 
		'\x229', '\x2', '\x1478', '\x147A', '\x5', '\x26E', '\x138', '\x2', '\x1479', 
		'\x1478', '\x3', '\x2', '\x2', '\x2', '\x1479', '\x147A', '\x3', '\x2', 
		'\x2', '\x2', '\x147A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x147B', 
		'\x147C', '\x5', '\x450', '\x229', '\x2', '\x147C', '\x147D', '\a', '\x197', 
		'\x2', '\x2', '\x147D', '\x147E', '\a', '\x30A', '\x2', '\x2', '\x147E', 
		'\x147F', '\x5', '\x36', '\x1C', '\x2', '\x147F', '\x1481', '\a', '\x30B', 
		'\x2', '\x2', '\x1480', '\x1482', '\x5', '\x26E', '\x138', '\x2', '\x1481', 
		'\x1480', '\x3', '\x2', '\x2', '\x2', '\x1481', '\x1482', '\x3', '\x2', 
		'\x2', '\x2', '\x1482', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x1483', 
		'\x1484', '\x5', '\x198', '\xCD', '\x2', '\x1484', '\x1486', '\a', '\x30A', 
		'\x2', '\x2', '\x1485', '\x1487', '\x5', '\x272', '\x13A', '\x2', '\x1486', 
		'\x1485', '\x3', '\x2', '\x2', '\x2', '\x1486', '\x1487', '\x3', '\x2', 
		'\x2', '\x2', '\x1487', '\x1488', '\x3', '\x2', '\x2', '\x2', '\x1488', 
		'\x1489', '\a', '\x30B', '\x2', '\x2', '\x1489', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x148A', '\x148D', '\x5', '\x46A', '\x236', '\x2', '\x148B', 
		'\x148D', '\a', '\x1A6', '\x2', '\x2', '\x148C', '\x148A', '\x3', '\x2', 
		'\x2', '\x2', '\x148C', '\x148B', '\x3', '\x2', '\x2', '\x2', '\x148D', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x148E', '\x1493', '\x5', '\x270', 
		'\x139', '\x2', '\x148F', '\x1490', '\a', '\x307', '\x2', '\x2', '\x1490', 
		'\x1492', '\x5', '\x270', '\x139', '\x2', '\x1491', '\x148F', '\x3', '\x2', 
		'\x2', '\x2', '\x1492', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x1493', 
		'\x1491', '\x3', '\x2', '\x2', '\x2', '\x1493', '\x1494', '\x3', '\x2', 
		'\x2', '\x2', '\x1494', '\x273', '\x3', '\x2', '\x2', '\x2', '\x1495', 
		'\x1493', '\x3', '\x2', '\x2', '\x2', '\x1496', '\x14A6', '\t', 'J', '\x2', 
		'\x2', '\x1497', '\x1499', '\x5', '\x276', '\x13C', '\x2', '\x1498', '\x1497', 
		'\x3', '\x2', '\x2', '\x2', '\x1498', '\x1499', '\x3', '\x2', '\x2', '\x2', 
		'\x1499', '\x149A', '\x3', '\x2', '\x2', '\x2', '\x149A', '\x14A6', '\a', 
		'\x123', '\x2', '\x2', '\x149B', '\x149C', '\a', '\x1BF', '\x2', '\x2', 
		'\x149C', '\x149E', '\a', '\x123', '\x2', '\x2', '\x149D', '\x149F', '\x5', 
		'\x310', '\x189', '\x2', '\x149E', '\x149D', '\x3', '\x2', '\x2', '\x2', 
		'\x149E', '\x149F', '\x3', '\x2', '\x2', '\x2', '\x149F', '\x14A6', '\x3', 
		'\x2', '\x2', '\x2', '\x14A0', '\x14A1', '\x6', '\x13B', '{', '\x2', '\x14A1', 
		'\x14A2', '\a', '\x1B0', '\x2', '\x2', '\x14A2', '\x14A6', '\a', '\x31', 
		'\x2', '\x2', '\x14A3', '\x14A4', '\x6', '\x13B', '|', '\x2', '\x14A4', 
		'\x14A6', '\a', '\x187', '\x2', '\x2', '\x14A5', '\x1496', '\x3', '\x2', 
		'\x2', '\x2', '\x14A5', '\x1498', '\x3', '\x2', '\x2', '\x2', '\x14A5', 
		'\x149B', '\x3', '\x2', '\x2', '\x2', '\x14A5', '\x14A0', '\x3', '\x2', 
		'\x2', '\x2', '\x14A5', '\x14A3', '\x3', '\x2', '\x2', '\x2', '\x14A6', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x14A7', '\x14A8', '\t', 'K', '\x2', 
		'\x2', '\x14A8', '\x277', '\x3', '\x2', '\x2', '\x2', '\x14A9', '\x14B1', 
		'\t', '\x14', '\x2', '\x2', '\x14AA', '\x14AB', '\a', '\x287', '\x2', 
		'\x2', '\x14AB', '\x14AC', '\a', '\x1B5', '\x2', '\x2', '\x14AC', '\x14B2', 
		'\a', '\x121', '\x2', '\x2', '\x14AD', '\x14AF', '\x5', '\x46C', '\x237', 
		'\x2', '\x14AE', '\x14B0', '\x5', '\x27A', '\x13E', '\x2', '\x14AF', '\x14AE', 
		'\x3', '\x2', '\x2', '\x2', '\x14AF', '\x14B0', '\x3', '\x2', '\x2', '\x2', 
		'\x14B0', '\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B1', '\x14AA', '\x3', 
		'\x2', '\x2', '\x2', '\x14B1', '\x14AD', '\x3', '\x2', '\x2', '\x2', '\x14B1', 
		'\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B2', '\x279', '\x3', '\x2', 
		'\x2', '\x2', '\x14B3', '\x14B4', '\x6', '\x13E', '}', '\x2', '\x14B4', 
		'\x14B5', '\a', '\xCA', '\x2', '\x2', '\x14B5', '\x14BA', '\a', '\xB5', 
		'\x2', '\x2', '\x14B6', '\x14B7', '\a', '\x287', '\x2', '\x2', '\x14B7', 
		'\x14B8', '\a', '\x1B5', '\x2', '\x2', '\x14B8', '\x14BA', '\a', '\x121', 
		'\x2', '\x2', '\x14B9', '\x14B3', '\x3', '\x2', '\x2', '\x2', '\x14B9', 
		'\x14B6', '\x3', '\x2', '\x2', '\x2', '\x14BA', '\x27B', '\x3', '\x2', 
		'\x2', '\x2', '\x14BB', '\x14BC', '\x5', '\x450', '\x229', '\x2', '\x14BC', 
		'\x14BE', '\x5', '\x282', '\x142', '\x2', '\x14BD', '\x14BF', '\x5', '\x26E', 
		'\x138', '\x2', '\x14BE', '\x14BD', '\x3', '\x2', '\x2', '\x2', '\x14BE', 
		'\x14BF', '\x3', '\x2', '\x2', '\x2', '\x14BF', '\x14C2', '\x3', '\x2', 
		'\x2', '\x2', '\x14C0', '\x14C1', '\a', '\xEA', '\x2', '\x2', '\x14C1', 
		'\x14C3', '\a', '\x110', '\x2', '\x2', '\x14C2', '\x14C0', '\x3', '\x2', 
		'\x2', '\x2', '\x14C2', '\x14C3', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x14C6', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x14C6', '\x5', '\x27E', 
		'\x140', '\x2', '\x14C5', '\x14BB', '\x3', '\x2', '\x2', '\x2', '\x14C5', 
		'\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14C6', '\x27D', '\x3', '\x2', 
		'\x2', '\x2', '\x14C7', '\x14CC', '\x5', '\x280', '\x141', '\x2', '\x14C8', 
		'\x14C9', '\a', '\x307', '\x2', '\x2', '\x14C9', '\x14CB', '\x5', '\x280', 
		'\x141', '\x2', '\x14CA', '\x14C8', '\x3', '\x2', '\x2', '\x2', '\x14CB', 
		'\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14CC', '\x14CA', '\x3', '\x2', 
		'\x2', '\x2', '\x14CC', '\x14CD', '\x3', '\x2', '\x2', '\x2', '\x14CD', 
		'\x27F', '\x3', '\x2', '\x2', '\x2', '\x14CE', '\x14CC', '\x3', '\x2', 
		'\x2', '\x2', '\x14CF', '\x14D1', '\x5', '\x450', '\x229', '\x2', '\x14D0', 
		'\x14D2', '\x5', '\x26E', '\x138', '\x2', '\x14D1', '\x14D0', '\x3', '\x2', 
		'\x2', '\x2', '\x14D1', '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14D2', 
		'\x14D5', '\x3', '\x2', '\x2', '\x2', '\x14D3', '\x14D4', '\a', '\xEA', 
		'\x2', '\x2', '\x14D4', '\x14D6', '\a', '\x110', '\x2', '\x2', '\x14D5', 
		'\x14D3', '\x3', '\x2', '\x2', '\x2', '\x14D5', '\x14D6', '\x3', '\x2', 
		'\x2', '\x2', '\x14D6', '\x281', '\x3', '\x2', '\x2', '\x2', '\x14D7', 
		'\x14D8', '\a', '\x197', '\x2', '\x2', '\x14D8', '\x14D9', '\a', '\x30A', 
		'\x2', '\x2', '\x14D9', '\x14DA', '\x5', '\x36', '\x1C', '\x2', '\x14DA', 
		'\x14DB', '\a', '\x30B', '\x2', '\x2', '\x14DB', '\x283', '\x3', '\x2', 
		'\x2', '\x2', '\x14DC', '\x14E1', '\x5', '\x286', '\x144', '\x2', '\x14DD', 
		'\x14E1', '\x5', '\x290', '\x149', '\x2', '\x14DE', '\x14E1', '\x5', '\x292', 
		'\x14A', '\x2', '\x14DF', '\x14E1', '\x5', '\x296', '\x14C', '\x2', '\x14E0', 
		'\x14DC', '\x3', '\x2', '\x2', '\x2', '\x14E0', '\x14DD', '\x3', '\x2', 
		'\x2', '\x2', '\x14E0', '\x14DE', '\x3', '\x2', '\x2', '\x2', '\x14E0', 
		'\x14DF', '\x3', '\x2', '\x2', '\x2', '\x14E1', '\x285', '\x3', '\x2', 
		'\x2', '\x2', '\x14E2', '\x14E3', '\a', '\x63', '\x2', '\x2', '\x14E3', 
		'\x14E4', '\a', '\x2C7', '\x2', '\x2', '\x14E4', '\x14E5', '\a', '\xDB', 
		'\x2', '\x2', '\x14E5', '\x14E6', '\x5', '\x46A', '\x236', '\x2', '\x14E6', 
		'\x14E8', '\a', '\x259', '\x2', '\x2', '\x14E7', '\x14E9', '\x5', '\x4A8', 
		'\x255', '\x2', '\x14E8', '\x14E7', '\x3', '\x2', '\x2', '\x2', '\x14E8', 
		'\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14E9', '\x14EA', '\x3', '\x2', 
		'\x2', '\x2', '\x14EA', '\x14EC', '\t', 'L', '\x2', '\x2', '\x14EB', '\x14ED', 
		'\x5', '\x288', '\x145', '\x2', '\x14EC', '\x14EB', '\x3', '\x2', '\x2', 
		'\x2', '\x14EC', '\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14ED', '\x14EF', 
		'\x3', '\x2', '\x2', '\x2', '\x14EE', '\x14F0', '\x5', '\x28C', '\x147', 
		'\x2', '\x14EF', '\x14EE', '\x3', '\x2', '\x2', '\x2', '\x14EF', '\x14F0', 
		'\x3', '\x2', '\x2', '\x2', '\x14F0', '\x14F2', '\x3', '\x2', '\x2', '\x2', 
		'\x14F1', '\x14F3', '\x5', '\x28E', '\x148', '\x2', '\x14F2', '\x14F1', 
		'\x3', '\x2', '\x2', '\x2', '\x14F2', '\x14F3', '\x3', '\x2', '\x2', '\x2', 
		'\x14F3', '\x287', '\x3', '\x2', '\x2', '\x2', '\x14F4', '\x14F6', '\a', 
		'\x2C9', '\x2', '\x2', '\x14F5', '\x14F7', '\x5', '\x4A8', '\x255', '\x2', 
		'\x14F6', '\x14F5', '\x3', '\x2', '\x2', '\x2', '\x14F6', '\x14F7', '\x3', 
		'\x2', '\x2', '\x2', '\x14F7', '\x14F8', '\x3', '\x2', '\x2', '\x2', '\x14F8', 
		'\x14FF', '\x5', '\x28A', '\x146', '\x2', '\x14F9', '\x14FB', '\a', '\x307', 
		'\x2', '\x2', '\x14FA', '\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14FA', 
		'\x14FB', '\x3', '\x2', '\x2', '\x2', '\x14FB', '\x14FC', '\x3', '\x2', 
		'\x2', '\x2', '\x14FC', '\x14FE', '\x5', '\x28A', '\x146', '\x2', '\x14FD', 
		'\x14FA', '\x3', '\x2', '\x2', '\x2', '\x14FE', '\x1501', '\x3', '\x2', 
		'\x2', '\x2', '\x14FF', '\x14FD', '\x3', '\x2', '\x2', '\x2', '\x14FF', 
		'\x1500', '\x3', '\x2', '\x2', '\x2', '\x1500', '\x289', '\x3', '\x2', 
		'\x2', '\x2', '\x1501', '\x14FF', '\x3', '\x2', '\x2', '\x2', '\x1502', 
		'\x1505', '\a', '\x2ED', '\x2', '\x2', '\x1503', '\x1504', '\a', '\x2F9', 
		'\x2', '\x2', '\x1504', '\x1506', '\a', '\x2ED', '\x2', '\x2', '\x1505', 
		'\x1503', '\x3', '\x2', '\x2', '\x2', '\x1505', '\x1506', '\x3', '\x2', 
		'\x2', '\x2', '\x1506', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x1507', 
		'\x1509', '\a', '\x2C6', '\x2', '\x2', '\x1508', '\x150A', '\x5', '\x4A8', 
		'\x255', '\x2', '\x1509', '\x1508', '\x3', '\x2', '\x2', '\x2', '\x1509', 
		'\x150A', '\x3', '\x2', '\x2', '\x2', '\x150A', '\x150B', '\x3', '\x2', 
		'\x2', '\x2', '\x150B', '\x150C', '\a', '\x2ED', '\x2', '\x2', '\x150C', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x150D', '\x150E', '\t', 'M', '\x2', 
		'\x2', '\x150E', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x150F', '\x1510', 
		'\a', '\r', '\x2', '\x2', '\x1510', '\x1511', '\a', '\x2C7', '\x2', '\x2', 
		'\x1511', '\x1512', '\a', '\xDB', '\x2', '\x2', '\x1512', '\x1514', '\x5', 
		'\x464', '\x233', '\x2', '\x1513', '\x1515', '\x5', '\x288', '\x145', 
		'\x2', '\x1514', '\x1513', '\x3', '\x2', '\x2', '\x2', '\x1514', '\x1515', 
		'\x3', '\x2', '\x2', '\x2', '\x1515', '\x1517', '\x3', '\x2', '\x2', '\x2', 
		'\x1516', '\x1518', '\x5', '\x28C', '\x147', '\x2', '\x1517', '\x1516', 
		'\x3', '\x2', '\x2', '\x2', '\x1517', '\x1518', '\x3', '\x2', '\x2', '\x2', 
		'\x1518', '\x151A', '\x3', '\x2', '\x2', '\x2', '\x1519', '\x151B', '\x5', 
		'\x28E', '\x148', '\x2', '\x151A', '\x1519', '\x3', '\x2', '\x2', '\x2', 
		'\x151A', '\x151B', '\x3', '\x2', '\x2', '\x2', '\x151B', '\x151D', '\x3', 
		'\x2', '\x2', '\x2', '\x151C', '\x151E', '\a', '\xC8', '\x2', '\x2', '\x151D', 
		'\x151C', '\x3', '\x2', '\x2', '\x2', '\x151D', '\x151E', '\x3', '\x2', 
		'\x2', '\x2', '\x151E', '\x291', '\x3', '\x2', '\x2', '\x2', '\x151F', 
		'\x1520', '\a', '\x1FC', '\x2', '\x2', '\x1520', '\x1521', '\a', '\x2C7', 
		'\x2', '\x2', '\x1521', '\x1522', '\a', '\xDB', '\x2', '\x2', '\x1522', 
		'\x1525', '\x5', '\x46A', '\x236', '\x2', '\x1523', '\x1524', '\a', '\xCA', 
		'\x2', '\x2', '\x1524', '\x1526', '\x5', '\x294', '\x14B', '\x2', '\x1525', 
		'\x1523', '\x3', '\x2', '\x2', '\x2', '\x1525', '\x1526', '\x3', '\x2', 
		'\x2', '\x2', '\x1526', '\x293', '\x3', '\x2', '\x2', '\x2', '\x1527', 
		'\x152E', '\x5', '\x478', '\x23D', '\x2', '\x1528', '\x152A', '\a', '\x307', 
		'\x2', '\x2', '\x1529', '\x1528', '\x3', '\x2', '\x2', '\x2', '\x1529', 
		'\x152A', '\x3', '\x2', '\x2', '\x2', '\x152A', '\x152B', '\x3', '\x2', 
		'\x2', '\x2', '\x152B', '\x152D', '\x5', '\x478', '\x23D', '\x2', '\x152C', 
		'\x1529', '\x3', '\x2', '\x2', '\x2', '\x152D', '\x1530', '\x3', '\x2', 
		'\x2', '\x2', '\x152E', '\x152C', '\x3', '\x2', '\x2', '\x2', '\x152E', 
		'\x152F', '\x3', '\x2', '\x2', '\x2', '\x152F', '\x295', '\x3', '\x2', 
		'\x2', '\x2', '\x1530', '\x152E', '\x3', '\x2', '\x2', '\x2', '\x1531', 
		'\x1532', '\a', '\x96', '\x2', '\x2', '\x1532', '\x1533', '\a', '\x2C7', 
		'\x2', '\x2', '\x1533', '\x1534', '\a', '\xDB', '\x2', '\x2', '\x1534', 
		'\x1536', '\x5', '\x464', '\x233', '\x2', '\x1535', '\x1537', '\a', '\xC8', 
		'\x2', '\x2', '\x1536', '\x1535', '\x3', '\x2', '\x2', '\x2', '\x1536', 
		'\x1537', '\x3', '\x2', '\x2', '\x2', '\x1537', '\x297', '\x3', '\x2', 
		'\x2', '\x2', '\x1538', '\x153F', '\x5', '\x29A', '\x14E', '\x2', '\x1539', 
		'\x153F', '\x5', '\x29C', '\x14F', '\x2', '\x153A', '\x153F', '\x5', '\x2A0', 
		'\x151', '\x2', '\x153B', '\x153F', '\x5', '\x2A2', '\x152', '\x2', '\x153C', 
		'\x153D', '\x6', '\x14D', '~', '\x2', '\x153D', '\x153F', '\x5', '\x2A4', 
		'\x153', '\x2', '\x153E', '\x1538', '\x3', '\x2', '\x2', '\x2', '\x153E', 
		'\x1539', '\x3', '\x2', '\x2', '\x2', '\x153E', '\x153A', '\x3', '\x2', 
		'\x2', '\x2', '\x153E', '\x153B', '\x3', '\x2', '\x2', '\x2', '\x153E', 
		'\x153C', '\x3', '\x2', '\x2', '\x2', '\x153F', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\x1540', '\x1541', '\t', 'N', '\x2', '\x2', '\x1541', '\x1544', 
		'\x5', '\x450', '\x229', '\x2', '\x1542', '\x1545', '\x5', '\x486', '\x244', 
		'\x2', '\x1543', '\x1545', '\x5', '\x418', '\x20D', '\x2', '\x1544', '\x1542', 
		'\x3', '\x2', '\x2', '\x2', '\x1544', '\x1543', '\x3', '\x2', '\x2', '\x2', 
		'\x1544', '\x1545', '\x3', '\x2', '\x2', '\x2', '\x1545', '\x29B', '\x3', 
		'\x2', '\x2', '\x2', '\x1546', '\x1556', '\t', 'N', '\x2', '\x2', '\x1547', 
		'\x1548', '\x6', '\x14F', '\x7F', '\x2', '\x1548', '\x1557', '\a', '\xB6', 
		'\x2', '\x2', '\x1549', '\x154A', '\x6', '\x14F', '\x80', '\x2', '\x154A', 
		'\x1557', '\a', '\x196', '\x2', '\x2', '\x154B', '\x154C', '\x6', '\x14F', 
		'\x81', '\x2', '\x154C', '\x154D', '\a', '\xCB', '\x2', '\x2', '\x154D', 
		'\x154E', '\a', '\x2F0', '\x2', '\x2', '\x154E', '\x1557', '\x5', '\x49E', 
		'\x250', '\x2', '\x154F', '\x1550', '\x6', '\x14F', '\x82', '\x2', '\x1550', 
		'\x1557', '\a', '\x10', '\x2', '\x2', '\x1551', '\x1552', '\x6', '\x14F', 
		'\x83', '\x2', '\x1552', '\x1553', '\a', '\x10', '\x2', '\x2', '\x1553', 
		'\x1554', '\a', '\xCB', '\x2', '\x2', '\x1554', '\x1555', '\a', '\x2F0', 
		'\x2', '\x2', '\x1555', '\x1557', '\x5', '\x49E', '\x250', '\x2', '\x1556', 
		'\x1547', '\x3', '\x2', '\x2', '\x2', '\x1556', '\x1549', '\x3', '\x2', 
		'\x2', '\x2', '\x1556', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x1556', 
		'\x154F', '\x3', '\x2', '\x2', '\x2', '\x1556', '\x1551', '\x3', '\x2', 
		'\x2', '\x2', '\x1556', '\x1557', '\x3', '\x2', '\x2', '\x2', '\x1557', 
		'\x1558', '\x3', '\x2', '\x2', '\x2', '\x1558', '\x1559', '\x5', '\x29E', 
		'\x150', '\x2', '\x1559', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x155A', 
		'\x1567', '\x5', '\x10C', '\x87', '\x2', '\x155B', '\x1560', '\x6', '\x150', 
		'\x84', '\x2', '\x155C', '\x1561', '\x5', '\xDE', 'p', '\x2', '\x155D', 
		'\x1561', '\x5', '\xEA', 'v', '\x2', '\x155E', '\x1561', '\x5', '\x10A', 
		'\x86', '\x2', '\x155F', '\x1561', '\x5', '\x1A2', '\xD2', '\x2', '\x1560', 
		'\x155C', '\x3', '\x2', '\x2', '\x2', '\x1560', '\x155D', '\x3', '\x2', 
		'\x2', '\x2', '\x1560', '\x155E', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x155F', '\x3', '\x2', '\x2', '\x2', '\x1561', '\x1567', '\x3', '\x2', 
		'\x2', '\x2', '\x1562', '\x1563', '\x6', '\x150', '\x85', '\x2', '\x1563', 
		'\x1564', '\a', '\xCA', '\x2', '\x2', '\x1564', '\x1565', '\a', 'V', '\x2', 
		'\x2', '\x1565', '\x1567', '\x5', '\x478', '\x23D', '\x2', '\x1566', '\x155A', 
		'\x3', '\x2', '\x2', '\x2', '\x1566', '\x155B', '\x3', '\x2', '\x2', '\x2', 
		'\x1566', '\x1562', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x1568', '\x1569', '\a', '\xE0', '\x2', '\x2', '\x1569', 
		'\x156A', '\x5', '\x49E', '\x250', '\x2', '\x156A', '\x2A1', '\x3', '\x2', 
		'\x2', '\x2', '\x156B', '\x156C', '\a', '\x26E', '\x2', '\x2', '\x156C', 
		'\x156D', '\x5', '\x46A', '\x236', '\x2', '\x156D', '\x2A3', '\x3', '\x2', 
		'\x2', '\x2', '\x156E', '\x156F', '\a', '\x2CC', '\x2', '\x2', '\x156F', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x1570', '\x1571', '\b', '\x154', 
		'\x1', '\x2', '\x1571', '\x1577', '\x5', '\x2A8', '\x155', '\x2', '\x1572', 
		'\x1574', '\a', '\x103', '\x2', '\x2', '\x1573', '\x1575', '\x5', '\x2FA', 
		'\x17E', '\x2', '\x1574', '\x1573', '\x3', '\x2', '\x2', '\x2', '\x1574', 
		'\x1575', '\x3', '\x2', '\x2', '\x2', '\x1575', '\x1576', '\x3', '\x2', 
		'\x2', '\x2', '\x1576', '\x1578', '\t', 'O', '\x2', '\x2', '\x1577', '\x1572', 
		'\x3', '\x2', '\x2', '\x2', '\x1577', '\x1578', '\x3', '\x2', '\x2', '\x2', 
		'\x1578', '\x157C', '\x3', '\x2', '\x2', '\x2', '\x1579', '\x157A', '\a', 
		'\x175', '\x2', '\x2', '\x157A', '\x157C', '\x5', '\x2A6', '\x154', '\x6', 
		'\x157B', '\x1570', '\x3', '\x2', '\x2', '\x2', '\x157B', '\x1579', '\x3', 
		'\x2', '\x2', '\x2', '\x157C', '\x1588', '\x3', '\x2', '\x2', '\x2', '\x157D', 
		'\x157E', '\f', '\x5', '\x2', '\x2', '\x157E', '\x157F', '\t', 'P', '\x2', 
		'\x2', '\x157F', '\x1587', '\x5', '\x2A6', '\x154', '\x6', '\x1580', '\x1581', 
		'\f', '\x4', '\x2', '\x2', '\x1581', '\x1582', '\a', '\x290', '\x2', '\x2', 
		'\x1582', '\x1587', '\x5', '\x2A6', '\x154', '\x5', '\x1583', '\x1584', 
		'\f', '\x3', '\x2', '\x2', '\x1584', '\x1585', '\t', 'Q', '\x2', '\x2', 
		'\x1585', '\x1587', '\x5', '\x2A6', '\x154', '\x4', '\x1586', '\x157D', 
		'\x3', '\x2', '\x2', '\x2', '\x1586', '\x1580', '\x3', '\x2', '\x2', '\x2', 
		'\x1586', '\x1583', '\x3', '\x2', '\x2', '\x2', '\x1587', '\x158A', '\x3', 
		'\x2', '\x2', '\x2', '\x1588', '\x1586', '\x3', '\x2', '\x2', '\x2', '\x1588', 
		'\x1589', '\x3', '\x2', '\x2', '\x2', '\x1589', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x158A', '\x1588', '\x3', '\x2', '\x2', '\x2', '\x158B', 
		'\x158C', '\b', '\x155', '\x1', '\x2', '\x158C', '\x158D', '\x5', '\x2AC', 
		'\x157', '\x2', '\x158D', '\x159F', '\x3', '\x2', '\x2', '\x2', '\x158E', 
		'\x158F', '\f', '\x5', '\x2', '\x2', '\x158F', '\x1591', '\a', '\x103', 
		'\x2', '\x2', '\x1590', '\x1592', '\x5', '\x2FA', '\x17E', '\x2', '\x1591', 
		'\x1590', '\x3', '\x2', '\x2', '\x2', '\x1591', '\x1592', '\x3', '\x2', 
		'\x2', '\x2', '\x1592', '\x1593', '\x3', '\x2', '\x2', '\x2', '\x1593', 
		'\x159E', '\a', '\x17A', '\x2', '\x2', '\x1594', '\x1595', '\f', '\x4', 
		'\x2', '\x2', '\x1595', '\x1596', '\x5', '\x2AA', '\x156', '\x2', '\x1596', 
		'\x1597', '\x5', '\x2AC', '\x157', '\x2', '\x1597', '\x159E', '\x3', '\x2', 
		'\x2', '\x2', '\x1598', '\x1599', '\f', '\x3', '\x2', '\x2', '\x1599', 
		'\x159A', '\x5', '\x2AA', '\x156', '\x2', '\x159A', '\x159B', '\t', 'R', 
		'\x2', '\x2', '\x159B', '\x159C', '\x5', '\x11A', '\x8E', '\x2', '\x159C', 
		'\x159E', '\x3', '\x2', '\x2', '\x2', '\x159D', '\x158E', '\x3', '\x2', 
		'\x2', '\x2', '\x159D', '\x1594', '\x3', '\x2', '\x2', '\x2', '\x159D', 
		'\x1598', '\x3', '\x2', '\x2', '\x2', '\x159E', '\x15A1', '\x3', '\x2', 
		'\x2', '\x2', '\x159F', '\x159D', '\x3', '\x2', '\x2', '\x2', '\x159F', 
		'\x15A0', '\x3', '\x2', '\x2', '\x2', '\x15A0', '\x2A9', '\x3', '\x2', 
		'\x2', '\x2', '\x15A1', '\x159F', '\x3', '\x2', '\x2', '\x2', '\x15A2', 
		'\x15A3', '\t', 'S', '\x2', '\x2', '\x15A3', '\x2AB', '\x3', '\x2', '\x2', 
		'\x2', '\x15A4', '\x15B2', '\x5', '\x2B0', '\x159', '\x2', '\x15A5', '\x15A7', 
		'\x5', '\x2FA', '\x17E', '\x2', '\x15A6', '\x15A5', '\x3', '\x2', '\x2', 
		'\x2', '\x15A6', '\x15A7', '\x3', '\x2', '\x2', '\x2', '\x15A7', '\x15A8', 
		'\x3', '\x2', '\x2', '\x2', '\x15A8', '\x15B3', '\x5', '\x2AE', '\x158', 
		'\x2', '\x15A9', '\x15AA', '\x6', '\x157', '\x8C', '\x2', '\x15AA', '\x15AC', 
		'\a', '\x2DF', '\x2', '\x2', '\x15AB', '\x15AD', '\a', '\x29E', '\x2', 
		'\x2', '\x15AC', '\x15AB', '\x3', '\x2', '\x2', '\x2', '\x15AC', '\x15AD', 
		'\x3', '\x2', '\x2', '\x2', '\x15AD', '\x15AE', '\x3', '\x2', '\x2', '\x2', 
		'\x15AE', '\x15B3', '\x5', '\x306', '\x184', '\x2', '\x15AF', '\x15B0', 
		'\a', '\x20B', '\x2', '\x2', '\x15B0', '\x15B1', '\a', '\x115', '\x2', 
		'\x2', '\x15B1', '\x15B3', '\x5', '\x2B0', '\x159', '\x2', '\x15B2', '\x15A6', 
		'\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15A9', '\x3', '\x2', '\x2', '\x2', 
		'\x15B2', '\x15AF', '\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15B3', '\x3', 
		'\x2', '\x2', '\x2', '\x15B3', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x15B4', 
		'\x15BA', '\a', '\xFD', '\x2', '\x2', '\x15B5', '\x15BB', '\x5', '\x11A', 
		'\x8E', '\x2', '\x15B6', '\x15B7', '\a', '\x30A', '\x2', '\x2', '\x15B7', 
		'\x15B8', '\x5', '\x2F6', '\x17C', '\x2', '\x15B8', '\x15B9', '\a', '\x30B', 
		'\x2', '\x2', '\x15B9', '\x15BB', '\x3', '\x2', '\x2', '\x2', '\x15BA', 
		'\x15B5', '\x3', '\x2', '\x2', '\x2', '\x15BA', '\x15B6', '\x3', '\x2', 
		'\x2', '\x2', '\x15BB', '\x15CA', '\x3', '\x2', '\x2', '\x2', '\x15BC', 
		'\x15BD', '\a', ' ', '\x2', '\x2', '\x15BD', '\x15BE', '\x5', '\x2B0', 
		'\x159', '\x2', '\x15BE', '\x15BF', '\a', '\x11', '\x2', '\x2', '\x15BF', 
		'\x15C0', '\x5', '\x2AC', '\x157', '\x2', '\x15C0', '\x15CA', '\x3', '\x2', 
		'\x2', '\x2', '\x15C1', '\x15C2', '\a', '\x115', '\x2', '\x2', '\x15C2', 
		'\x15C5', '\x5', '\x2B2', '\x15A', '\x2', '\x15C3', '\x15C4', '\a', '\xAA', 
		'\x2', '\x2', '\x15C4', '\x15C6', '\x5', '\x2B2', '\x15A', '\x2', '\x15C5', 
		'\x15C3', '\x3', '\x2', '\x2', '\x2', '\x15C5', '\x15C6', '\x3', '\x2', 
		'\x2', '\x2', '\x15C6', '\x15CA', '\x3', '\x2', '\x2', '\x2', '\x15C7', 
		'\x15C8', '\a', '\x1BE', '\x2', '\x2', '\x15C8', '\x15CA', '\x5', '\x2B0', 
		'\x159', '\x2', '\x15C9', '\x15B4', '\x3', '\x2', '\x2', '\x2', '\x15C9', 
		'\x15BC', '\x3', '\x2', '\x2', '\x2', '\x15C9', '\x15C1', '\x3', '\x2', 
		'\x2', '\x2', '\x15C9', '\x15C7', '\x3', '\x2', '\x2', '\x2', '\x15CA', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x15CB', '\x15CC', '\b', '\x159', 
		'\x1', '\x2', '\x15CC', '\x15CD', '\x5', '\x2B2', '\x15A', '\x2', '\x15CD', 
		'\x15E8', '\x3', '\x2', '\x2', '\x2', '\x15CE', '\x15CF', '\f', '\t', 
		'\x2', '\x2', '\x15CF', '\x15D0', '\a', '\x303', '\x2', '\x2', '\x15D0', 
		'\x15E7', '\x5', '\x2B0', '\x159', '\n', '\x15D1', '\x15D2', '\f', '\b', 
		'\x2', '\x2', '\x15D2', '\x15D3', '\t', 'T', '\x2', '\x2', '\x15D3', '\x15E7', 
		'\x5', '\x2B0', '\x159', '\t', '\x15D4', '\x15D5', '\f', '\a', '\x2', 
		'\x2', '\x15D5', '\x15D6', '\t', 'U', '\x2', '\x2', '\x15D6', '\x15E7', 
		'\x5', '\x2B0', '\x159', '\b', '\x15D7', '\x15D8', '\f', '\x5', '\x2', 
		'\x2', '\x15D8', '\x15D9', '\t', 'V', '\x2', '\x2', '\x15D9', '\x15E7', 
		'\x5', '\x2B0', '\x159', '\x6', '\x15DA', '\x15DB', '\f', '\x4', '\x2', 
		'\x2', '\x15DB', '\x15DC', '\a', '\x302', '\x2', '\x2', '\x15DC', '\x15E7', 
		'\x5', '\x2B0', '\x159', '\x5', '\x15DD', '\x15DE', '\f', '\x3', '\x2', 
		'\x2', '\x15DE', '\x15DF', '\a', '\x305', '\x2', '\x2', '\x15DF', '\x15E7', 
		'\x5', '\x2B0', '\x159', '\x4', '\x15E0', '\x15E1', '\f', '\x6', '\x2', 
		'\x2', '\x15E1', '\x15E2', '\t', 'U', '\x2', '\x2', '\x15E2', '\x15E3', 
		'\a', '\xF9', '\x2', '\x2', '\x15E3', '\x15E4', '\x5', '\x2A6', '\x154', 
		'\x2', '\x15E4', '\x15E5', '\x5', '\x2FE', '\x180', '\x2', '\x15E5', '\x15E7', 
		'\x3', '\x2', '\x2', '\x2', '\x15E6', '\x15CE', '\x3', '\x2', '\x2', '\x2', 
		'\x15E6', '\x15D1', '\x3', '\x2', '\x2', '\x2', '\x15E6', '\x15D4', '\x3', 
		'\x2', '\x2', '\x2', '\x15E6', '\x15D7', '\x3', '\x2', '\x2', '\x2', '\x15E6', 
		'\x15DA', '\x3', '\x2', '\x2', '\x2', '\x15E6', '\x15DD', '\x3', '\x2', 
		'\x2', '\x2', '\x15E6', '\x15E0', '\x3', '\x2', '\x2', '\x2', '\x15E7', 
		'\x15EA', '\x3', '\x2', '\x2', '\x2', '\x15E8', '\x15E6', '\x3', '\x2', 
		'\x2', '\x2', '\x15E8', '\x15E9', '\x3', '\x2', '\x2', '\x2', '\x15E9', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x15EA', '\x15E8', '\x3', '\x2', 
		'\x2', '\x2', '\x15EB', '\x15EC', '\b', '\x15A', '\x1', '\x2', '\x15EC', 
		'\x15F0', '\x5', '\x2E6', '\x174', '\x2', '\x15ED', '\x15EE', '\x5', '\x4A8', 
		'\x255', '\x2', '\x15EE', '\x15EF', '\x5', '\x2A6', '\x154', '\x2', '\x15EF', 
		'\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F0', '\x15ED', '\x3', '\x2', 
		'\x2', '\x2', '\x15F0', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F1', 
		'\x1659', '\x3', '\x2', '\x2', '\x2', '\x15F2', '\x15F4', '\x5', '\x418', 
		'\x20D', '\x2', '\x15F3', '\x15F5', '\x5', '\x2B6', '\x15C', '\x2', '\x15F4', 
		'\x15F3', '\x3', '\x2', '\x2', '\x2', '\x15F4', '\x15F5', '\x3', '\x2', 
		'\x2', '\x2', '\x15F5', '\x1659', '\x3', '\x2', '\x2', '\x2', '\x15F6', 
		'\x1659', '\x5', '\x2CE', '\x168', '\x2', '\x15F7', '\x1659', '\x5', '\x2E0', 
		'\x171', '\x2', '\x15F8', '\x1659', '\x5', '\x47E', '\x240', '\x2', '\x15F9', 
		'\x1659', '\a', '\x315', '\x2', '\x2', '\x15FA', '\x1659', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x15FB', '\x15FC', '\x6', '\x15A', '\x94', '\x2', '\x15FC', 
		'\x1659', '\x5', '\x2BA', '\x15E', '\x2', '\x15FD', '\x15FE', '\x6', '\x15A', 
		'\x95', '\x2', '\x15FE', '\x1659', '\x5', '\x2BC', '\x15F', '\x2', '\x15FF', 
		'\x1600', '\t', 'W', '\x2', '\x2', '\x1600', '\x1659', '\x5', '\x2B2', 
		'\x15A', '\x10', '\x1601', '\x1602', '\x5', '\x2FC', '\x17F', '\x2', '\x1602', 
		'\x1603', '\x5', '\x2B2', '\x15A', '\xF', '\x1603', '\x1659', '\x3', '\x2', 
		'\x2', '\x2', '\x1604', '\x1606', '\a', '\x1E9', '\x2', '\x2', '\x1605', 
		'\x1604', '\x3', '\x2', '\x2', '\x2', '\x1605', '\x1606', '\x3', '\x2', 
		'\x2', '\x2', '\x1606', '\x1607', '\x3', '\x2', '\x2', '\x2', '\x1607', 
		'\x1608', '\a', '\x30A', '\x2', '\x2', '\x1608', '\x1609', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x1609', '\x160A', '\a', '\x30B', '\x2', '\x2', '\x160A', 
		'\x1659', '\x3', '\x2', '\x2', '\x2', '\x160B', '\x160D', '\a', '\xB0', 
		'\x2', '\x2', '\x160C', '\x160B', '\x3', '\x2', '\x2', '\x2', '\x160C', 
		'\x160D', '\x3', '\x2', '\x2', '\x2', '\x160D', '\x160E', '\x3', '\x2', 
		'\x2', '\x2', '\x160E', '\x1659', '\x5', '\x11A', '\x8E', '\x2', '\x160F', 
		'\x1610', '\a', '\x30C', '\x2', '\x2', '\x1610', '\x1611', '\x5', '\x46A', 
		'\x236', '\x2', '\x1611', '\x1612', '\x5', '\x2A6', '\x154', '\x2', '\x1612', 
		'\x1613', '\a', '\x30D', '\x2', '\x2', '\x1613', '\x1659', '\x3', '\x2', 
		'\x2', '\x2', '\x1614', '\x1615', '\a', '\x142', '\x2', '\x2', '\x1615', 
		'\x1616', '\x5', '\x2C8', '\x165', '\x2', '\x1616', '\x1617', '\a', '\t', 
		'\x2', '\x2', '\x1617', '\x1618', '\a', '\x30A', '\x2', '\x2', '\x1618', 
		'\x161A', '\x5', '\x2B0', '\x159', '\x2', '\x1619', '\x161B', '\x5', '\x2CC', 
		'\x167', '\x2', '\x161A', '\x1619', '\x3', '\x2', '\x2', '\x2', '\x161A', 
		'\x161B', '\x3', '\x2', '\x2', '\x2', '\x161B', '\x161C', '\x3', '\x2', 
		'\x2', '\x2', '\x161C', '\x161D', '\a', '\x30B', '\x2', '\x2', '\x161D', 
		'\x1659', '\x3', '\x2', '\x2', '\x2', '\x161E', '\x161F', '\a', '\"', 
		'\x2', '\x2', '\x161F', '\x1659', '\x5', '\x2B2', '\x15A', '\n', '\x1620', 
		'\x1621', '\a', '\x36', '\x2', '\x2', '\x1621', '\x1622', '\a', '\x30A', 
		'\x2', '\x2', '\x1622', '\x1623', '\x5', '\x2A6', '\x154', '\x2', '\x1623', 
		'\x1624', '\a', '\x13', '\x2', '\x2', '\x1624', '\x1626', '\x5', '\x2F4', 
		'\x17B', '\x2', '\x1625', '\x1627', '\x5', '\x2B4', '\x15B', '\x2', '\x1626', 
		'\x1625', '\x3', '\x2', '\x2', '\x2', '\x1626', '\x1627', '\x3', '\x2', 
		'\x2', '\x2', '\x1627', '\x1628', '\x3', '\x2', '\x2', '\x2', '\x1628', 
		'\x1629', '\a', '\x30B', '\x2', '\x2', '\x1629', '\x1659', '\x3', '\x2', 
		'\x2', '\x2', '\x162A', '\x162C', '\a', '\x35', '\x2', '\x2', '\x162B', 
		'\x162D', '\x5', '\x2A6', '\x154', '\x2', '\x162C', '\x162B', '\x3', '\x2', 
		'\x2', '\x2', '\x162C', '\x162D', '\x3', '\x2', '\x2', '\x2', '\x162D', 
		'\x1631', '\x3', '\x2', '\x2', '\x2', '\x162E', '\x162F', '\x5', '\x2EE', 
		'\x178', '\x2', '\x162F', '\x1630', '\x5', '\x2F0', '\x179', '\x2', '\x1630', 
		'\x1632', '\x3', '\x2', '\x2', '\x2', '\x1631', '\x162E', '\x3', '\x2', 
		'\x2', '\x2', '\x1632', '\x1633', '\x3', '\x2', '\x2', '\x2', '\x1633', 
		'\x1631', '\x3', '\x2', '\x2', '\x2', '\x1633', '\x1634', '\x3', '\x2', 
		'\x2', '\x2', '\x1634', '\x1636', '\x3', '\x2', '\x2', '\x2', '\x1635', 
		'\x1637', '\x5', '\x2F2', '\x17A', '\x2', '\x1636', '\x1635', '\x3', '\x2', 
		'\x2', '\x2', '\x1636', '\x1637', '\x3', '\x2', '\x2', '\x2', '\x1637', 
		'\x1638', '\x3', '\x2', '\x2', '\x2', '\x1638', '\x1639', '\a', '\xA1', 
		'\x2', '\x2', '\x1639', '\x1659', '\x3', '\x2', '\x2', '\x2', '\x163A', 
		'\x163B', '\a', '`', '\x2', '\x2', '\x163B', '\x163C', '\a', '\x30A', 
		'\x2', '\x2', '\x163C', '\x163D', '\x5', '\x2A6', '\x154', '\x2', '\x163D', 
		'\x163E', '\a', '\x307', '\x2', '\x2', '\x163E', '\x163F', '\x5', '\x2F4', 
		'\x17B', '\x2', '\x163F', '\x1640', '\a', '\x30B', '\x2', '\x2', '\x1640', 
		'\x1659', '\x3', '\x2', '\x2', '\x2', '\x1641', '\x1642', '\a', '`', '\x2', 
		'\x2', '\x1642', '\x1643', '\a', '\x30A', '\x2', '\x2', '\x1643', '\x1644', 
		'\x5', '\x2A6', '\x154', '\x2', '\x1644', '\x1645', '\a', '\x26F', '\x2', 
		'\x2', '\x1645', '\x1646', '\x5', '\x3AA', '\x1D6', '\x2', '\x1646', '\x1647', 
		'\a', '\x30B', '\x2', '\x2', '\x1647', '\x1659', '\x3', '\x2', '\x2', 
		'\x2', '\x1648', '\x1649', '\a', '\x82', '\x2', '\x2', '\x1649', '\x164A', 
		'\a', '\x30A', '\x2', '\x2', '\x164A', '\x164B', '\x5', '\x472', '\x23A', 
		'\x2', '\x164B', '\x164C', '\a', '\x30B', '\x2', '\x2', '\x164C', '\x1659', 
		'\x3', '\x2', '\x2', '\x2', '\x164D', '\x164E', '\a', '\x274', '\x2', 
		'\x2', '\x164E', '\x164F', '\a', '\x30A', '\x2', '\x2', '\x164F', '\x1650', 
		'\x5', '\x472', '\x23A', '\x2', '\x1650', '\x1651', '\a', '\x30B', '\x2', 
		'\x2', '\x1651', '\x1659', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x1653', 
		'\a', '\xF9', '\x2', '\x2', '\x1653', '\x1654', '\x5', '\x2A6', '\x154', 
		'\x2', '\x1654', '\x1655', '\x5', '\x2FE', '\x180', '\x2', '\x1655', '\x1656', 
		'\a', '\x2F8', '\x2', '\x2', '\x1656', '\x1657', '\x5', '\x2A6', '\x154', 
		'\x2', '\x1657', '\x1659', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x15EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1658', '\x15F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1658', '\x15F6', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x15F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1658', '\x15F8', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x15F9', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x15FA', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x15FB', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x15FD', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x15FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x1601', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x1605', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x160C', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x160F', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x1614', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x161E', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x1620', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x162A', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x163A', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x1641', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x1648', '\x3', '\x2', '\x2', '\x2', '\x1658', '\x164D', '\x3', '\x2', 
		'\x2', '\x2', '\x1658', '\x1652', '\x3', '\x2', '\x2', '\x2', '\x1659', 
		'\x1662', '\x3', '\x2', '\x2', '\x2', '\x165A', '\x165B', '\f', '\x11', 
		'\x2', '\x2', '\x165B', '\x165C', '\a', '\x2EC', '\x2', '\x2', '\x165C', 
		'\x1661', '\x5', '\x2B2', '\x15A', '\x12', '\x165D', '\x165E', '\f', '\x17', 
		'\x2', '\x2', '\x165E', '\x165F', '\a', 'G', '\x2', '\x2', '\x165F', '\x1661', 
		'\x5', '\x49E', '\x250', '\x2', '\x1660', '\x165A', '\x3', '\x2', '\x2', 
		'\x2', '\x1660', '\x165D', '\x3', '\x2', '\x2', '\x2', '\x1661', '\x1664', 
		'\x3', '\x2', '\x2', '\x2', '\x1662', '\x1660', '\x3', '\x2', '\x2', '\x2', 
		'\x1662', '\x1663', '\x3', '\x2', '\x2', '\x2', '\x1663', '\x2B3', '\x3', 
		'\x2', '\x2', '\x2', '\x1664', '\x1662', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x1666', '\x6', '\x15B', '\x98', '\x2', '\x1666', '\x1667', '\a', '\x2DD', 
		'\x2', '\x2', '\x1667', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x1668', 
		'\x1669', '\x6', '\x15C', '\x99', '\x2', '\x1669', '\x166A', '\a', '\x30F', 
		'\x2', '\x2', '\x166A', '\x166F', '\x5', '\x484', '\x243', '\x2', '\x166B', 
		'\x166C', '\x6', '\x15C', '\x9A', '\x2', '\x166C', '\x166D', '\a', '\x310', 
		'\x2', '\x2', '\x166D', '\x166F', '\x5', '\x484', '\x243', '\x2', '\x166E', 
		'\x1668', '\x3', '\x2', '\x2', '\x2', '\x166E', '\x166B', '\x3', '\x2', 
		'\x2', '\x2', '\x166F', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x1670', 
		'\x1671', '\a', '\x1C', '\x2', '\x2', '\x1671', '\x1673', '\a', '\x30A', 
		'\x2', '\x2', '\x1672', '\x1674', '\a', '\x91', '\x2', '\x2', '\x1673', 
		'\x1672', '\x3', '\x2', '\x2', '\x2', '\x1673', '\x1674', '\x3', '\x2', 
		'\x2', '\x2', '\x1674', '\x1675', '\x3', '\x2', '\x2', '\x2', '\x1675', 
		'\x1676', '\x5', '\x2C6', '\x164', '\x2', '\x1676', '\x1679', '\a', '\x30B', 
		'\x2', '\x2', '\x1677', '\x1678', '\x6', '\x15D', '\x9B', '\x2', '\x1678', 
		'\x167A', '\x5', '\x2BE', '\x160', '\x2', '\x1679', '\x1677', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x167A', '\x3', '\x2', '\x2', '\x2', '\x167A', 
		'\x16F4', '\x3', '\x2', '\x2', '\x2', '\x167B', '\x167C', '\t', 'X', '\x2', 
		'\x2', '\x167C', '\x167D', '\a', '\x30A', '\x2', '\x2', '\x167D', '\x167E', 
		'\x5', '\x2C6', '\x164', '\x2', '\x167E', '\x1681', '\a', '\x30B', '\x2', 
		'\x2', '\x167F', '\x1680', '\x6', '\x15D', '\x9C', '\x2', '\x1680', '\x1682', 
		'\x5', '\x2BE', '\x160', '\x2', '\x1681', '\x167F', '\x3', '\x2', '\x2', 
		'\x2', '\x1681', '\x1682', '\x3', '\x2', '\x2', '\x2', '\x1682', '\x16F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1683', '\x1684', '\x6', '\x15D', '\x9D', 
		'\x2', '\x1684', '\x16F4', '\x5', '\x2C4', '\x163', '\x2', '\x1685', '\x1686', 
		'\a', '\x61', '\x2', '\x2', '\x1686', '\x1688', '\a', '\x30A', '\x2', 
		'\x2', '\x1687', '\x1689', '\a', '\f', '\x2', '\x2', '\x1688', '\x1687', 
		'\x3', '\x2', '\x2', '\x2', '\x1688', '\x1689', '\x3', '\x2', '\x2', '\x2', 
		'\x1689', '\x168A', '\x3', '\x2', '\x2', '\x2', '\x168A', '\x168B', '\a', 
		'\x2FA', '\x2', '\x2', '\x168B', '\x168E', '\a', '\x30B', '\x2', '\x2', 
		'\x168C', '\x168D', '\x6', '\x15D', '\x9E', '\x2', '\x168D', '\x168F', 
		'\x5', '\x2BE', '\x160', '\x2', '\x168E', '\x168C', '\x3', '\x2', '\x2', 
		'\x2', '\x168E', '\x168F', '\x3', '\x2', '\x2', '\x2', '\x168F', '\x16F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1690', '\x1691', '\a', '\x61', '\x2', '\x2', 
		'\x1691', '\x1699', '\a', '\x30A', '\x2', '\x2', '\x1692', '\x1694', '\a', 
		'\f', '\x2', '\x2', '\x1693', '\x1692', '\x3', '\x2', '\x2', '\x2', '\x1693', 
		'\x1694', '\x3', '\x2', '\x2', '\x2', '\x1694', '\x1695', '\x3', '\x2', 
		'\x2', '\x2', '\x1695', '\x169A', '\a', '\x2FA', '\x2', '\x2', '\x1696', 
		'\x169A', '\x5', '\x2C6', '\x164', '\x2', '\x1697', '\x1698', '\a', '\x91', 
		'\x2', '\x2', '\x1698', '\x169A', '\x5', '\x2F6', '\x17C', '\x2', '\x1699', 
		'\x1693', '\x3', '\x2', '\x2', '\x2', '\x1699', '\x1696', '\x3', '\x2', 
		'\x2', '\x2', '\x1699', '\x1697', '\x3', '\x2', '\x2', '\x2', '\x169A', 
		'\x169B', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x169E', '\a', '\x30B', 
		'\x2', '\x2', '\x169C', '\x169D', '\x6', '\x15D', '\x9F', '\x2', '\x169D', 
		'\x169F', '\x5', '\x2BE', '\x160', '\x2', '\x169E', '\x169C', '\x3', '\x2', 
		'\x2', '\x2', '\x169E', '\x169F', '\x3', '\x2', '\x2', '\x2', '\x169F', 
		'\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16A0', '\x16A1', '\a', '\x15B', 
		'\x2', '\x2', '\x16A1', '\x16A3', '\a', '\x30A', '\x2', '\x2', '\x16A2', 
		'\x16A4', '\a', '\x91', '\x2', '\x2', '\x16A3', '\x16A2', '\x3', '\x2', 
		'\x2', '\x2', '\x16A3', '\x16A4', '\x3', '\x2', '\x2', '\x2', '\x16A4', 
		'\x16A5', '\x3', '\x2', '\x2', '\x2', '\x16A5', '\x16A6', '\x5', '\x2C6', 
		'\x164', '\x2', '\x16A6', '\x16A9', '\a', '\x30B', '\x2', '\x2', '\x16A7', 
		'\x16A8', '\x6', '\x15D', '\xA0', '\x2', '\x16A8', '\x16AA', '\x5', '\x2BE', 
		'\x160', '\x2', '\x16A9', '\x16A7', '\x3', '\x2', '\x2', '\x2', '\x16A9', 
		'\x16AA', '\x3', '\x2', '\x2', '\x2', '\x16AA', '\x16F4', '\x3', '\x2', 
		'\x2', '\x2', '\x16AB', '\x16AC', '\a', '\x148', '\x2', '\x2', '\x16AC', 
		'\x16AE', '\a', '\x30A', '\x2', '\x2', '\x16AD', '\x16AF', '\a', '\x91', 
		'\x2', '\x2', '\x16AE', '\x16AD', '\x3', '\x2', '\x2', '\x2', '\x16AE', 
		'\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16AF', '\x16B0', '\x3', '\x2', 
		'\x2', '\x2', '\x16B0', '\x16B1', '\x5', '\x2C6', '\x164', '\x2', '\x16B1', 
		'\x16B4', '\a', '\x30B', '\x2', '\x2', '\x16B2', '\x16B3', '\x6', '\x15D', 
		'\xA1', '\x2', '\x16B3', '\x16B5', '\x5', '\x2BE', '\x160', '\x2', '\x16B4', 
		'\x16B2', '\x3', '\x2', '\x2', '\x2', '\x16B4', '\x16B5', '\x3', '\x2', 
		'\x2', '\x2', '\x16B5', '\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16B6', 
		'\x16B7', '\a', '\x229', '\x2', '\x2', '\x16B7', '\x16B8', '\a', '\x30A', 
		'\x2', '\x2', '\x16B8', '\x16B9', '\x5', '\x2C6', '\x164', '\x2', '\x16B9', 
		'\x16BC', '\a', '\x30B', '\x2', '\x2', '\x16BA', '\x16BB', '\x6', '\x15D', 
		'\xA2', '\x2', '\x16BB', '\x16BD', '\x5', '\x2BE', '\x160', '\x2', '\x16BC', 
		'\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16BC', '\x16BD', '\x3', '\x2', 
		'\x2', '\x2', '\x16BD', '\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16BE', 
		'\x16BF', '\a', '\x27A', '\x2', '\x2', '\x16BF', '\x16C0', '\a', '\x30A', 
		'\x2', '\x2', '\x16C0', '\x16C1', '\x5', '\x2C6', '\x164', '\x2', '\x16C1', 
		'\x16C4', '\a', '\x30B', '\x2', '\x2', '\x16C2', '\x16C3', '\x6', '\x15D', 
		'\xA3', '\x2', '\x16C3', '\x16C5', '\x5', '\x2BE', '\x160', '\x2', '\x16C4', 
		'\x16C2', '\x3', '\x2', '\x2', '\x2', '\x16C4', '\x16C5', '\x3', '\x2', 
		'\x2', '\x2', '\x16C5', '\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16C6', 
		'\x16C7', '\a', '\x226', '\x2', '\x2', '\x16C7', '\x16C8', '\a', '\x30A', 
		'\x2', '\x2', '\x16C8', '\x16C9', '\x5', '\x2C6', '\x164', '\x2', '\x16C9', 
		'\x16CC', '\a', '\x30B', '\x2', '\x2', '\x16CA', '\x16CB', '\x6', '\x15D', 
		'\xA4', '\x2', '\x16CB', '\x16CD', '\x5', '\x2BE', '\x160', '\x2', '\x16CC', 
		'\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16CC', '\x16CD', '\x3', '\x2', 
		'\x2', '\x2', '\x16CD', '\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16CE', 
		'\x16CF', '\a', '\x27D', '\x2', '\x2', '\x16CF', '\x16D0', '\a', '\x30A', 
		'\x2', '\x2', '\x16D0', '\x16D1', '\x5', '\x2C6', '\x164', '\x2', '\x16D1', 
		'\x16D4', '\a', '\x30B', '\x2', '\x2', '\x16D2', '\x16D3', '\x6', '\x15D', 
		'\xA5', '\x2', '\x16D3', '\x16D5', '\x5', '\x2BE', '\x160', '\x2', '\x16D4', 
		'\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16D4', '\x16D5', '\x3', '\x2', 
		'\x2', '\x2', '\x16D5', '\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16D6', 
		'\x16D7', '\a', '\x236', '\x2', '\x2', '\x16D7', '\x16D9', '\a', '\x30A', 
		'\x2', '\x2', '\x16D8', '\x16DA', '\a', '\x91', '\x2', '\x2', '\x16D9', 
		'\x16D8', '\x3', '\x2', '\x2', '\x2', '\x16D9', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16DA', '\x16DB', '\x3', '\x2', '\x2', '\x2', '\x16DB', 
		'\x16DC', '\x5', '\x2C6', '\x164', '\x2', '\x16DC', '\x16DF', '\a', '\x30B', 
		'\x2', '\x2', '\x16DD', '\x16DE', '\x6', '\x15D', '\xA6', '\x2', '\x16DE', 
		'\x16E0', '\x5', '\x2BE', '\x160', '\x2', '\x16DF', '\x16DD', '\x3', '\x2', 
		'\x2', '\x2', '\x16DF', '\x16E0', '\x3', '\x2', '\x2', '\x2', '\x16E0', 
		'\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16E1', '\x16E2', '\a', '\xDC', 
		'\x2', '\x2', '\x16E2', '\x16E4', '\a', '\x30A', '\x2', '\x2', '\x16E3', 
		'\x16E5', '\a', '\x91', '\x2', '\x2', '\x16E4', '\x16E3', '\x3', '\x2', 
		'\x2', '\x2', '\x16E4', '\x16E5', '\x3', '\x2', '\x2', '\x2', '\x16E5', 
		'\x16E6', '\x3', '\x2', '\x2', '\x2', '\x16E6', '\x16E8', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x16E7', '\x16E9', '\x5', '\x14A', '\xA6', '\x2', '\x16E8', 
		'\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16E8', '\x16E9', '\x3', '\x2', 
		'\x2', '\x2', '\x16E9', '\x16EC', '\x3', '\x2', '\x2', '\x2', '\x16EA', 
		'\x16EB', '\a', '\x1F5', '\x2', '\x2', '\x16EB', '\x16ED', '\x5', '\x486', 
		'\x244', '\x2', '\x16EC', '\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16EC', 
		'\x16ED', '\x3', '\x2', '\x2', '\x2', '\x16ED', '\x16EE', '\x3', '\x2', 
		'\x2', '\x2', '\x16EE', '\x16F1', '\a', '\x30B', '\x2', '\x2', '\x16EF', 
		'\x16F0', '\x6', '\x15D', '\xA7', '\x2', '\x16F0', '\x16F2', '\x5', '\x2BE', 
		'\x160', '\x2', '\x16F1', '\x16EF', '\x3', '\x2', '\x2', '\x2', '\x16F1', 
		'\x16F2', '\x3', '\x2', '\x2', '\x2', '\x16F2', '\x16F4', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x1670', '\x3', '\x2', '\x2', '\x2', '\x16F3', 
		'\x167B', '\x3', '\x2', '\x2', '\x2', '\x16F3', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x1685', '\x3', '\x2', '\x2', '\x2', '\x16F3', 
		'\x1690', '\x3', '\x2', '\x2', '\x2', '\x16F3', '\x16A0', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x16AB', '\x3', '\x2', '\x2', '\x2', '\x16F3', 
		'\x16B6', '\x3', '\x2', '\x2', '\x2', '\x16F3', '\x16BE', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x16C6', '\x3', '\x2', '\x2', '\x2', '\x16F3', 
		'\x16CE', '\x3', '\x2', '\x2', '\x2', '\x16F3', '\x16D6', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x16E1', '\x3', '\x2', '\x2', '\x2', '\x16F4', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x16F5', '\x16F6', '\a', '\x2A2', 
		'\x2', '\x2', '\x16F6', '\x16F7', '\a', '\x30A', '\x2', '\x2', '\x16F7', 
		'\x16F8', '\x5', '\x2F6', '\x17C', '\x2', '\x16F8', '\x16F9', '\a', '\x30B', 
		'\x2', '\x2', '\x16F9', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x16FA', 
		'\x16FB', '\t', 'Y', '\x2', '\x2', '\x16FB', '\x16FC', '\x5', '\x4A6', 
		'\x254', '\x2', '\x16FC', '\x16FD', '\x5', '\x2BE', '\x160', '\x2', '\x16FD', 
		'\x1725', '\x3', '\x2', '\x2', '\x2', '\x16FE', '\x16FF', '\a', '\x2B2', 
		'\x2', '\x2', '\x16FF', '\x1700', '\x5', '\x306', '\x184', '\x2', '\x1700', 
		'\x1701', '\x5', '\x2BE', '\x160', '\x2', '\x1701', '\x1725', '\x3', '\x2', 
		'\x2', '\x2', '\x1702', '\x1703', '\t', 'Z', '\x2', '\x2', '\x1703', '\x1704', 
		'\a', '\x30A', '\x2', '\x2', '\x1704', '\x1706', '\x5', '\x2A6', '\x154', 
		'\x2', '\x1705', '\x1707', '\x5', '\x2C0', '\x161', '\x2', '\x1706', '\x1705', 
		'\x3', '\x2', '\x2', '\x2', '\x1706', '\x1707', '\x3', '\x2', '\x2', '\x2', 
		'\x1707', '\x1708', '\x3', '\x2', '\x2', '\x2', '\x1708', '\x170A', '\a', 
		'\x30B', '\x2', '\x2', '\x1709', '\x170B', '\x5', '\x2C2', '\x162', '\x2', 
		'\x170A', '\x1709', '\x3', '\x2', '\x2', '\x2', '\x170A', '\x170B', '\x3', 
		'\x2', '\x2', '\x2', '\x170B', '\x170C', '\x3', '\x2', '\x2', '\x2', '\x170C', 
		'\x170D', '\x5', '\x2BE', '\x160', '\x2', '\x170D', '\x1725', '\x3', '\x2', 
		'\x2', '\x2', '\x170E', '\x170F', '\t', '[', '\x2', '\x2', '\x170F', '\x1711', 
		'\x5', '\x304', '\x183', '\x2', '\x1710', '\x1712', '\x5', '\x2C2', '\x162', 
		'\x2', '\x1711', '\x1710', '\x3', '\x2', '\x2', '\x2', '\x1711', '\x1712', 
		'\x3', '\x2', '\x2', '\x2', '\x1712', '\x1713', '\x3', '\x2', '\x2', '\x2', 
		'\x1713', '\x1714', '\x5', '\x2BE', '\x160', '\x2', '\x1714', '\x1725', 
		'\x3', '\x2', '\x2', '\x2', '\x1715', '\x1716', '\a', '\x2B1', '\x2', 
		'\x2', '\x1716', '\x1717', '\a', '\x30A', '\x2', '\x2', '\x1717', '\x1718', 
		'\x5', '\x2A6', '\x154', '\x2', '\x1718', '\x1719', '\a', '\x307', '\x2', 
		'\x2', '\x1719', '\x171A', '\x5', '\x2B2', '\x15A', '\x2', '\x171A', '\x171D', 
		'\a', '\x30B', '\x2', '\x2', '\x171B', '\x171C', '\a', '\xCD', '\x2', 
		'\x2', '\x171C', '\x171E', '\t', '\\', '\x2', '\x2', '\x171D', '\x171B', 
		'\x3', '\x2', '\x2', '\x2', '\x171D', '\x171E', '\x3', '\x2', '\x2', '\x2', 
		'\x171E', '\x1720', '\x3', '\x2', '\x2', '\x2', '\x171F', '\x1721', '\x5', 
		'\x2C2', '\x162', '\x2', '\x1720', '\x171F', '\x3', '\x2', '\x2', '\x2', 
		'\x1720', '\x1721', '\x3', '\x2', '\x2', '\x2', '\x1721', '\x1722', '\x3', 
		'\x2', '\x2', '\x2', '\x1722', '\x1723', '\x5', '\x2BE', '\x160', '\x2', 
		'\x1723', '\x1725', '\x3', '\x2', '\x2', '\x2', '\x1724', '\x16FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1724', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1724', 
		'\x1702', '\x3', '\x2', '\x2', '\x2', '\x1724', '\x170E', '\x3', '\x2', 
		'\x2', '\x2', '\x1724', '\x1715', '\x3', '\x2', '\x2', '\x2', '\x1725', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\x1726', '\x1729', '\a', '\x2B5', 
		'\x2', '\x2', '\x1727', '\x172A', '\x5', '\x466', '\x234', '\x2', '\x1728', 
		'\x172A', '\x5', '\x130', '\x99', '\x2', '\x1729', '\x1727', '\x3', '\x2', 
		'\x2', '\x2', '\x1729', '\x1728', '\x3', '\x2', '\x2', '\x2', '\x172A', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x172B', '\x172E', '\a', '\x307', 
		'\x2', '\x2', '\x172C', '\x172F', '\x5', '\x47A', '\x23E', '\x2', '\x172D', 
		'\x172F', '\a', '\x315', '\x2', '\x2', '\x172E', '\x172C', '\x3', '\x2', 
		'\x2', '\x2', '\x172E', '\x172D', '\x3', '\x2', '\x2', '\x2', '\x172F', 
		'\x1732', '\x3', '\x2', '\x2', '\x2', '\x1730', '\x1731', '\a', '\x307', 
		'\x2', '\x2', '\x1731', '\x1733', '\x5', '\x2A6', '\x154', '\x2', '\x1732', 
		'\x1730', '\x3', '\x2', '\x2', '\x2', '\x1732', '\x1733', '\x3', '\x2', 
		'\x2', '\x2', '\x1733', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x1734', 
		'\x1735', '\t', ']', '\x2', '\x2', '\x1735', '\x1736', '\a', '\x2B3', 
		'\x2', '\x2', '\x1736', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x1737', 
		'\x1738', '\a', '\x29D', '\x2', '\x2', '\x1738', '\x1739', '\a', '\x30A', 
		'\x2', '\x2', '\x1739', '\x173A', '\x5', '\x2C6', '\x164', '\x2', '\x173A', 
		'\x173C', '\a', '\x30B', '\x2', '\x2', '\x173B', '\x173D', '\x5', '\x2BE', 
		'\x160', '\x2', '\x173C', '\x173B', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x173D', '\x1748', '\x3', '\x2', 
		'\x2', '\x2', '\x173E', '\x173F', '\a', '\x29C', '\x2', '\x2', '\x173F', 
		'\x1740', '\a', '\x30A', '\x2', '\x2', '\x1740', '\x1741', '\x5', '\x2C6', 
		'\x164', '\x2', '\x1741', '\x1742', '\a', '\x307', '\x2', '\x2', '\x1742', 
		'\x1743', '\x5', '\x2C6', '\x164', '\x2', '\x1743', '\x1745', '\a', '\x30B', 
		'\x2', '\x2', '\x1744', '\x1746', '\x5', '\x2BE', '\x160', '\x2', '\x1745', 
		'\x1744', '\x3', '\x2', '\x2', '\x2', '\x1745', '\x1746', '\x3', '\x2', 
		'\x2', '\x2', '\x1746', '\x1748', '\x3', '\x2', '\x2', '\x2', '\x1747', 
		'\x1737', '\x3', '\x2', '\x2', '\x2', '\x1747', '\x173E', '\x3', '\x2', 
		'\x2', '\x2', '\x1748', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x1749', 
		'\x174B', '\a', '\f', '\x2', '\x2', '\x174A', '\x1749', '\x3', '\x2', 
		'\x2', '\x2', '\x174A', '\x174B', '\x3', '\x2', '\x2', '\x2', '\x174B', 
		'\x174C', '\x3', '\x2', '\x2', '\x2', '\x174C', '\x174D', '\x5', '\x2A6', 
		'\x154', '\x2', '\x174D', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x174E', 
		'\x1754', '\x5', '\x2CA', '\x166', '\x2', '\x174F', '\x1750', '\a', '\x30A', 
		'\x2', '\x2', '\x1750', '\x1751', '\x5', '\x2CA', '\x166', '\x2', '\x1751', 
		'\x1752', '\a', '\x30B', '\x2', '\x2', '\x1752', '\x1754', '\x3', '\x2', 
		'\x2', '\x2', '\x1753', '\x174E', '\x3', '\x2', '\x2', '\x2', '\x1753', 
		'\x174F', '\x3', '\x2', '\x2', '\x2', '\x1754', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\x1755', '\x175A', '\x5', '\x472', '\x23A', '\x2', '\x1756', 
		'\x1757', '\a', '\x307', '\x2', '\x2', '\x1757', '\x1759', '\x5', '\x472', 
		'\x23A', '\x2', '\x1758', '\x1756', '\x3', '\x2', '\x2', '\x2', '\x1759', 
		'\x175C', '\x3', '\x2', '\x2', '\x2', '\x175A', '\x1758', '\x3', '\x2', 
		'\x2', '\x2', '\x175A', '\x175B', '\x3', '\x2', '\x2', '\x2', '\x175B', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x175C', '\x175A', '\x3', '\x2', 
		'\x2', '\x2', '\x175D', '\x175E', '\a', '\xFD', '\x2', '\x2', '\x175E', 
		'\x175F', '\a', '+', '\x2', '\x2', '\x175F', '\x176D', '\a', '\x15C', 
		'\x2', '\x2', '\x1760', '\x1761', '\a', '\xFD', '\x2', '\x2', '\x1761', 
		'\x1762', '\a', '\x169', '\x2', '\x2', '\x1762', '\x1763', '\a', '\x10D', 
		'\x2', '\x2', '\x1763', '\x1767', '\a', '\x15C', '\x2', '\x2', '\x1764', 
		'\x1765', '\a', '\x287', '\x2', '\x2', '\x1765', '\x1766', '\a', '\x1B0', 
		'\x2', '\x2', '\x1766', '\x1768', '\a', '\xB2', '\x2', '\x2', '\x1767', 
		'\x1764', '\x3', '\x2', '\x2', '\x2', '\x1767', '\x1768', '\x3', '\x2', 
		'\x2', '\x2', '\x1768', '\x176D', '\x3', '\x2', '\x2', '\x2', '\x1769', 
		'\x176A', '\a', '\x287', '\x2', '\x2', '\x176A', '\x176B', '\a', '\x1B0', 
		'\x2', '\x2', '\x176B', '\x176D', '\a', '\xB2', '\x2', '\x2', '\x176C', 
		'\x175D', '\x3', '\x2', '\x2', '\x2', '\x176C', '\x1760', '\x3', '\x2', 
		'\x2', '\x2', '\x176C', '\x1769', '\x3', '\x2', '\x2', '\x2', '\x176D', 
		'\x2CD', '\x3', '\x2', '\x2', '\x2', '\x176E', '\x176F', '\a', '>', '\x2', 
		'\x2', '\x176F', '\x1770', '\a', '\x30A', '\x2', '\x2', '\x1770', '\x1773', 
		'\x5', '\x2F6', '\x17C', '\x2', '\x1771', '\x1772', '\a', '\x26F', '\x2', 
		'\x2', '\x1772', '\x1774', '\x5', '\x3AA', '\x1D6', '\x2', '\x1773', '\x1771', 
		'\x3', '\x2', '\x2', '\x2', '\x1773', '\x1774', '\x3', '\x2', '\x2', '\x2', 
		'\x1774', '\x1775', '\x3', '\x2', '\x2', '\x2', '\x1775', '\x1776', '\a', 
		'\x30B', '\x2', '\x2', '\x1776', '\x1880', '\x3', '\x2', '\x2', '\x2', 
		'\x1777', '\x1779', '\a', 'k', '\x2', '\x2', '\x1778', '\x177A', '\x5', 
		'\x4A6', '\x254', '\x2', '\x1779', '\x1778', '\x3', '\x2', '\x2', '\x2', 
		'\x1779', '\x177A', '\x3', '\x2', '\x2', '\x2', '\x177A', '\x1880', '\x3', 
		'\x2', '\x2', '\x2', '\x177B', '\x177C', '\a', 'v', '\x2', '\x2', '\x177C', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x177D', '\x177E', '\a', '|', 
		'\x2', '\x2', '\x177E', '\x1880', '\x5', '\x304', '\x183', '\x2', '\x177F', 
		'\x1780', '\a', '\xE7', '\x2', '\x2', '\x1780', '\x1880', '\x5', '\x304', 
		'\x183', '\x2', '\x1781', '\x1782', '\a', '\xF4', '\x2', '\x2', '\x1782', 
		'\x1783', '\a', '\x30A', '\x2', '\x2', '\x1783', '\x1784', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1784', '\x1785', '\a', '\x307', '\x2', '\x2', '\x1785', 
		'\x1786', '\x5', '\x2A6', '\x154', '\x2', '\x1786', '\x1787', '\a', '\x307', 
		'\x2', '\x2', '\x1787', '\x1788', '\x5', '\x2A6', '\x154', '\x2', '\x1788', 
		'\x1789', '\a', '\x307', '\x2', '\x2', '\x1789', '\x178A', '\x5', '\x2A6', 
		'\x154', '\x2', '\x178A', '\x178B', '\a', '\x30B', '\x2', '\x2', '\x178B', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x178C', '\x178D', '\a', '\xF9', 
		'\x2', '\x2', '\x178D', '\x178E', '\a', '\x30A', '\x2', '\x2', '\x178E', 
		'\x1791', '\x5', '\x2A6', '\x154', '\x2', '\x178F', '\x1790', '\a', '\x307', 
		'\x2', '\x2', '\x1790', '\x1792', '\x5', '\x2A6', '\x154', '\x2', '\x1791', 
		'\x178F', '\x3', '\x2', '\x2', '\x2', '\x1792', '\x1793', '\x3', '\x2', 
		'\x2', '\x2', '\x1793', '\x1791', '\x3', '\x2', '\x2', '\x2', '\x1793', 
		'\x1794', '\x3', '\x2', '\x2', '\x2', '\x1794', '\x1795', '\x3', '\x2', 
		'\x2', '\x2', '\x1795', '\x1796', '\a', '\x30B', '\x2', '\x2', '\x1796', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x1797', '\x1798', '\a', '\x112', 
		'\x2', '\x2', '\x1798', '\x1799', '\a', '\x30A', '\x2', '\x2', '\x1799', 
		'\x179A', '\x5', '\x2A6', '\x154', '\x2', '\x179A', '\x179B', '\a', '\x307', 
		'\x2', '\x2', '\x179B', '\x179C', '\x5', '\x2A6', '\x154', '\x2', '\x179C', 
		'\x179D', '\a', '\x30B', '\x2', '\x2', '\x179D', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x179E', '\x179F', '\a', '\x159', '\x2', '\x2', '\x179F', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x17A0', '\x17A1', '\a', '\x160', 
		'\x2', '\x2', '\x17A1', '\x1880', '\x5', '\x304', '\x183', '\x2', '\x17A2', 
		'\x17A3', '\a', '\x1E0', '\x2', '\x2', '\x17A3', '\x17A4', '\a', '\x30A', 
		'\x2', '\x2', '\x17A4', '\x17A5', '\x5', '\x2A6', '\x154', '\x2', '\x17A5', 
		'\x17A6', '\a', '\x307', '\x2', '\x2', '\x17A6', '\x17A7', '\x5', '\x2A6', 
		'\x154', '\x2', '\x17A7', '\x17A8', '\a', '\x30B', '\x2', '\x2', '\x17A8', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x17A9', '\x17AA', '\a', '\x1F1', 
		'\x2', '\x2', '\x17AA', '\x1880', '\x5', '\x304', '\x183', '\x2', '\x17AB', 
		'\x17AC', '\a', '\x24C', '\x2', '\x2', '\x17AC', '\x1880', '\x5', '\x304', 
		'\x183', '\x2', '\x17AD', '\x17AE', '\a', '\x249', '\x2', '\x2', '\x17AE', 
		'\x17AF', '\a', '\x30A', '\x2', '\x2', '\x17AF', '\x17B2', '\x5', '\x2A6', 
		'\x154', '\x2', '\x17B0', '\x17B1', '\a', '\x307', '\x2', '\x2', '\x17B1', 
		'\x17B3', '\x5', '\x2A6', '\x154', '\x2', '\x17B2', '\x17B0', '\x3', '\x2', 
		'\x2', '\x2', '\x17B2', '\x17B3', '\x3', '\x2', '\x2', '\x2', '\x17B3', 
		'\x17B4', '\x3', '\x2', '\x2', '\x2', '\x17B4', '\x17B5', '\a', '\x30B', 
		'\x2', '\x2', '\x17B5', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x17B6', 
		'\x1880', '\x5', '\x2DC', '\x16F', '\x2', '\x17B7', '\x17B8', '\a', '\x26C', 
		'\x2', '\x2', '\x17B8', '\x1880', '\x5', '\x4A6', '\x254', '\x2', '\x17B9', 
		'\x17BA', '\a', '\x274', '\x2', '\x2', '\x17BA', '\x1880', '\x5', '\x304', 
		'\x183', '\x2', '\x17BB', '\x17BC', '\a', '\x292', '\x2', '\x2', '\x17BC', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x17BD', '\x17BE', '\t', '^', 
		'\x2', '\x2', '\x17BE', '\x17BF', '\a', '\x30A', '\x2', '\x2', '\x17BF', 
		'\x17C0', '\x5', '\x2A6', '\x154', '\x2', '\x17C0', '\x17C6', '\a', '\x307', 
		'\x2', '\x2', '\x17C1', '\x17C7', '\x5', '\x2A6', '\x154', '\x2', '\x17C2', 
		'\x17C3', '\a', '\xF9', '\x2', '\x2', '\x17C3', '\x17C4', '\x5', '\x2A6', 
		'\x154', '\x2', '\x17C4', '\x17C5', '\x5', '\x2FE', '\x180', '\x2', '\x17C5', 
		'\x17C7', '\x3', '\x2', '\x2', '\x2', '\x17C6', '\x17C1', '\x3', '\x2', 
		'\x2', '\x2', '\x17C6', '\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17C7', 
		'\x17C8', '\x3', '\x2', '\x2', '\x2', '\x17C8', '\x17C9', '\a', '\x30B', 
		'\x2', '\x2', '\x17C9', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x17CA', 
		'\x17CC', '\a', '\x66', '\x2', '\x2', '\x17CB', '\x17CD', '\x5', '\x4A6', 
		'\x254', '\x2', '\x17CC', '\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17CC', 
		'\x17CD', '\x3', '\x2', '\x2', '\x2', '\x17CD', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x17CE', '\x17D0', '\a', 'n', '\x2', '\x2', '\x17CF', '\x17D1', 
		'\x5', '\x2D2', '\x16A', '\x2', '\x17D0', '\x17CF', '\x3', '\x2', '\x2', 
		'\x2', '\x17D0', '\x17D1', '\x3', '\x2', '\x2', '\x2', '\x17D1', '\x1880', 
		'\x3', '\x2', '\x2', '\x2', '\x17D2', '\x17D3', '\t', '_', '\x2', '\x2', 
		'\x17D3', '\x17D4', '\a', '\x30A', '\x2', '\x2', '\x17D4', '\x17D5', '\x5', 
		'\x2A6', '\x154', '\x2', '\x17D5', '\x17D6', '\a', '\x307', '\x2', '\x2', 
		'\x17D6', '\x17D7', '\a', '\xF9', '\x2', '\x2', '\x17D7', '\x17D8', '\x5', 
		'\x2A6', '\x154', '\x2', '\x17D8', '\x17D9', '\x5', '\x2FE', '\x180', 
		'\x2', '\x17D9', '\x17DA', '\a', '\x30B', '\x2', '\x2', '\x17DA', '\x1880', 
		'\x3', '\x2', '\x2', '\x2', '\x17DB', '\x17DC', '\a', '\xB8', '\x2', '\x2', 
		'\x17DC', '\x17DD', '\a', '\x30A', '\x2', '\x2', '\x17DD', '\x17DE', '\x5', 
		'\x2FE', '\x180', '\x2', '\x17DE', '\x17DF', '\a', '\xCD', '\x2', '\x2', 
		'\x17DF', '\x17E0', '\x5', '\x2A6', '\x154', '\x2', '\x17E0', '\x17E1', 
		'\a', '\x30B', '\x2', '\x2', '\x17E1', '\x1880', '\x3', '\x2', '\x2', 
		'\x2', '\x17E2', '\x17E3', '\a', '\xD7', '\x2', '\x2', '\x17E3', '\x17E4', 
		'\a', '\x30A', '\x2', '\x2', '\x17E4', '\x17E5', '\x5', '\x2DA', '\x16E', 
		'\x2', '\x17E5', '\x17E6', '\a', '\x307', '\x2', '\x2', '\x17E6', '\x17E7', 
		'\x5', '\x2A6', '\x154', '\x2', '\x17E7', '\x17E8', '\a', '\x30B', '\x2', 
		'\x2', '\x17E8', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x17E9', '\x17EB', 
		'\a', '\x176', '\x2', '\x2', '\x17EA', '\x17EC', '\x5', '\x2D2', '\x16A', 
		'\x2', '\x17EB', '\x17EA', '\x3', '\x2', '\x2', '\x2', '\x17EB', '\x17EC', 
		'\x3', '\x2', '\x2', '\x2', '\x17EC', '\x1880', '\x3', '\x2', '\x2', '\x2', 
		'\x17ED', '\x17EE', '\a', '\x1A0', '\x2', '\x2', '\x17EE', '\x17EF', '\a', 
		'\x30A', '\x2', '\x2', '\x17EF', '\x17F0', '\x5', '\x2B0', '\x159', '\x2', 
		'\x17F0', '\x17F1', '\a', '\xFD', '\x2', '\x2', '\x17F1', '\x17F2', '\x5', 
		'\x2A6', '\x154', '\x2', '\x17F2', '\x17F3', '\a', '\x30B', '\x2', '\x2', 
		'\x17F3', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x17F4', '\x1880', '\x5', 
		'\x2DE', '\x170', '\x2', '\x17F5', '\x17F7', '\a', '\x23B', '\x2', '\x2', 
		'\x17F6', '\x17F8', '\x5', '\x2D2', '\x16A', '\x2', '\x17F7', '\x17F6', 
		'\x3', '\x2', '\x2', '\x2', '\x17F7', '\x17F8', '\x3', '\x2', '\x2', '\x2', 
		'\x17F8', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x17F9', '\x17FA', '\t', 
		'`', '\x2', '\x2', '\x17FA', '\x17FB', '\a', '\x30A', '\x2', '\x2', '\x17FB', 
		'\x17FC', '\x5', '\x300', '\x181', '\x2', '\x17FC', '\x17FD', '\a', '\x307', 
		'\x2', '\x2', '\x17FD', '\x17FE', '\x5', '\x2A6', '\x154', '\x2', '\x17FE', 
		'\x17FF', '\a', '\x307', '\x2', '\x2', '\x17FF', '\x1800', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1800', '\x1801', '\a', '\x30B', '\x2', '\x2', '\x1801', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x1802', '\x1804', '\a', '\x270', 
		'\x2', '\x2', '\x1803', '\x1805', '\x5', '\x4A6', '\x254', '\x2', '\x1804', 
		'\x1803', '\x3', '\x2', '\x2', '\x2', '\x1804', '\x1805', '\x3', '\x2', 
		'\x2', '\x2', '\x1805', '\x1880', '\x3', '\x2', '\x2', '\x2', '\x1806', 
		'\x1808', '\a', '\x272', '\x2', '\x2', '\x1807', '\x1809', '\x5', '\x2D2', 
		'\x16A', '\x2', '\x1808', '\x1807', '\x3', '\x2', '\x2', '\x2', '\x1808', 
		'\x1809', '\x3', '\x2', '\x2', '\x2', '\x1809', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x180A', '\x180C', '\a', '\x271', '\x2', '\x2', '\x180B', 
		'\x180D', '\x5', '\x2D2', '\x16A', '\x2', '\x180C', '\x180B', '\x3', '\x2', 
		'\x2', '\x2', '\x180C', '\x180D', '\x3', '\x2', '\x2', '\x2', '\x180D', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x180E', '\x180F', '\a', '\x15', 
		'\x2', '\x2', '\x180F', '\x1880', '\x5', '\x304', '\x183', '\x2', '\x1810', 
		'\x1811', '\a', '<', '\x2', '\x2', '\x1811', '\x1880', '\x5', '\x304', 
		'\x183', '\x2', '\x1812', '\x1813', '\a', '\x45', '\x2', '\x2', '\x1813', 
		'\x1880', '\x5', '\x302', '\x182', '\x2', '\x1814', '\x1815', '\a', 'H', 
		'\x2', '\x2', '\x1815', '\x1880', '\x5', '\x304', '\x183', '\x2', '\x1816', 
		'\x1817', '\a', 'o', '\x2', '\x2', '\x1817', '\x1880', '\x5', '\x4A6', 
		'\x254', '\x2', '\x1818', '\x1819', '\a', '\xE9', '\x2', '\x2', '\x1819', 
		'\x181A', '\a', '\x30A', '\x2', '\x2', '\x181A', '\x181B', '\x5', '\x2A6', 
		'\x154', '\x2', '\x181B', '\x181C', '\a', '\x307', '\x2', '\x2', '\x181C', 
		'\x181D', '\x5', '\x2A6', '\x154', '\x2', '\x181D', '\x181E', '\a', '\x307', 
		'\x2', '\x2', '\x181E', '\x181F', '\x5', '\x2A6', '\x154', '\x2', '\x181F', 
		'\x1820', '\a', '\x30B', '\x2', '\x2', '\x1820', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1821', '\x1822', '\a', '\xCB', '\x2', '\x2', '\x1822', 
		'\x1823', '\a', '\x30A', '\x2', '\x2', '\x1823', '\x1824', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1824', '\x1825', '\a', '\x307', '\x2', '\x2', '\x1825', 
		'\x1828', '\x5', '\x2A6', '\x154', '\x2', '\x1826', '\x1827', '\a', '\x307', 
		'\x2', '\x2', '\x1827', '\x1829', '\x5', '\x2A6', '\x154', '\x2', '\x1828', 
		'\x1826', '\x3', '\x2', '\x2', '\x2', '\x1828', '\x1829', '\x3', '\x2', 
		'\x2', '\x2', '\x1829', '\x182A', '\x3', '\x2', '\x2', '\x2', '\x182A', 
		'\x182B', '\a', '\x30B', '\x2', '\x2', '\x182B', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x182C', '\x182D', '\a', '\x153', '\x2', '\x2', '\x182D', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x182E', '\x182F', '\a', '\x15F', 
		'\x2', '\x2', '\x182F', '\x1830', '\a', '\x30A', '\x2', '\x2', '\x1830', 
		'\x1831', '\x5', '\x2A6', '\x154', '\x2', '\x1831', '\x1832', '\a', '\x307', 
		'\x2', '\x2', '\x1832', '\x1833', '\x5', '\x2A6', '\x154', '\x2', '\x1833', 
		'\x1834', '\a', '\x30B', '\x2', '\x2', '\x1834', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1835', '\x1836', '\x6', '\x168', '\xA8', '\x2', '\x1836', 
		'\x1837', '\a', '\x180', '\x2', '\x2', '\x1837', '\x1838', '\a', '\x30A', 
		'\x2', '\x2', '\x1838', '\x1839', '\x5', '\x48A', '\x246', '\x2', '\x1839', 
		'\x183A', '\a', '\x30B', '\x2', '\x2', '\x183A', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x183B', '\x183C', '\x6', '\x168', '\xA9', '\x2', '\x183C', 
		'\x183D', '\a', '\x198', '\x2', '\x2', '\x183D', '\x1880', '\x5', '\x304', 
		'\x183', '\x2', '\x183E', '\x183F', '\a', '\x1AF', '\x2', '\x2', '\x183F', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x1840', '\x1841', '\a', '\x1CB', 
		'\x2', '\x2', '\x1841', '\x1842', '\a', '\x30A', '\x2', '\x2', '\x1842', 
		'\x1843', '\x5', '\x2A6', '\x154', '\x2', '\x1843', '\x1844', '\a', '\x307', 
		'\x2', '\x2', '\x1844', '\x1845', '\x5', '\x2A6', '\x154', '\x2', '\x1845', 
		'\x1846', '\a', '\x30B', '\x2', '\x2', '\x1846', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1847', '\x1848', '\a', '\x1CC', '\x2', '\x2', '\x1848', 
		'\x1849', '\a', '\x30A', '\x2', '\x2', '\x1849', '\x184A', '\x5', '\x2A6', 
		'\x154', '\x2', '\x184A', '\x184B', '\a', '\x307', '\x2', '\x2', '\x184B', 
		'\x184C', '\x5', '\x2A6', '\x154', '\x2', '\x184C', '\x184D', '\a', '\x307', 
		'\x2', '\x2', '\x184D', '\x184E', '\x5', '\x2A6', '\x154', '\x2', '\x184E', 
		'\x184F', '\a', '\x30B', '\x2', '\x2', '\x184F', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1850', '\x1851', '\a', '\x1DE', '\x2', '\x2', '\x1851', 
		'\x1880', '\x5', '\x304', '\x183', '\x2', '\x1852', '\x1853', '\a', '\x1E7', 
		'\x2', '\x2', '\x1853', '\x1880', '\x5', '\x4A6', '\x254', '\x2', '\x1854', 
		'\x1855', '\a', '\x257', '\x2', '\x2', '\x1855', '\x1856', '\a', '\x30A', 
		'\x2', '\x2', '\x1856', '\x1857', '\x5', '\x2A6', '\x154', '\x2', '\x1857', 
		'\x1858', '\a', '\x307', '\x2', '\x2', '\x1858', '\x1859', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1859', '\x185A', '\a', '\x30B', '\x2', '\x2', '\x185A', 
		'\x1880', '\x3', '\x2', '\x2', '\x2', '\x185B', '\x185C', '\a', '\x282', 
		'\x2', '\x2', '\x185C', '\x185D', '\a', '\x30A', '\x2', '\x2', '\x185D', 
		'\x1860', '\x5', '\x2A6', '\x154', '\x2', '\x185E', '\x185F', '\a', '\x307', 
		'\x2', '\x2', '\x185F', '\x1861', '\x5', '\x2A6', '\x154', '\x2', '\x1860', 
		'\x185E', '\x3', '\x2', '\x2', '\x2', '\x1860', '\x1861', '\x3', '\x2', 
		'\x2', '\x2', '\x1861', '\x1862', '\x3', '\x2', '\x2', '\x2', '\x1862', 
		'\x1863', '\a', '\x30B', '\x2', '\x2', '\x1863', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1864', '\x1865', '\a', '\x283', '\x2', '\x2', '\x1865', 
		'\x1866', '\a', '\x30A', '\x2', '\x2', '\x1866', '\x187A', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1867', '\x1868', '\a', '\x13', '\x2', '\x2', '\x1868', 
		'\x1869', '\a', '>', '\x2', '\x2', '\x1869', '\x186B', '\x5', '\x3A6', 
		'\x1D4', '\x2', '\x186A', '\x1867', '\x3', '\x2', '\x2', '\x2', '\x186A', 
		'\x186B', '\x3', '\x2', '\x2', '\x2', '\x186B', '\x186E', '\x3', '\x2', 
		'\x2', '\x2', '\x186C', '\x186D', '\x6', '\x168', '\xAA', '\x2', '\x186D', 
		'\x186F', '\x5', '\x2D6', '\x16C', '\x2', '\x186E', '\x186C', '\x3', '\x2', 
		'\x2', '\x2', '\x186E', '\x186F', '\x3', '\x2', '\x2', '\x2', '\x186F', 
		'\x187B', '\x3', '\x2', '\x2', '\x2', '\x1870', '\x1871', '\a', '\x13', 
		'\x2', '\x2', '\x1871', '\x1872', '\a', '\"', '\x2', '\x2', '\x1872', 
		'\x187B', '\x5', '\x3A6', '\x1D4', '\x2', '\x1873', '\x1874', '\a', '\x307', 
		'\x2', '\x2', '\x1874', '\x1875', '\x5', '\x476', '\x23C', '\x2', '\x1875', 
		'\x1876', '\a', '\x307', '\x2', '\x2', '\x1876', '\x1877', '\x5', '\x476', 
		'\x23C', '\x2', '\x1877', '\x1878', '\a', '\x307', '\x2', '\x2', '\x1878', 
		'\x1879', '\x5', '\x476', '\x23C', '\x2', '\x1879', '\x187B', '\x3', '\x2', 
		'\x2', '\x2', '\x187A', '\x186A', '\x3', '\x2', '\x2', '\x2', '\x187A', 
		'\x1870', '\x3', '\x2', '\x2', '\x2', '\x187A', '\x1873', '\x3', '\x2', 
		'\x2', '\x2', '\x187B', '\x187C', '\x3', '\x2', '\x2', '\x2', '\x187C', 
		'\x187D', '\a', '\x30B', '\x2', '\x2', '\x187D', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x187E', '\x1880', '\x5', '\x2D0', '\x169', '\x2', '\x187F', 
		'\x176E', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1777', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x177B', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x177D', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x177F', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1781', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x178C', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1797', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x179E', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17A0', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17A2', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17A9', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17AB', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17AD', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17B6', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17B7', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17B9', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17BB', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17BD', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17CA', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17CE', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17D2', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17DB', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17E2', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17E9', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17ED', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x17F4', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x17F5', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x17F9', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1802', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x1806', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x180A', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x180E', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x1810', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1812', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1814', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x1816', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1818', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1821', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x182C', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x182E', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1835', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x183B', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x183E', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1840', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x1847', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1850', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1852', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x1854', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x185B', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1864', '\x3', '\x2', '\x2', '\x2', '\x187F', 
		'\x187E', '\x3', '\x2', '\x2', '\x2', '\x1880', '\x2CF', '\x3', '\x2', 
		'\x2', '\x2', '\x1881', '\x1882', '\x6', '\x169', '\xAB', '\x2', '\x1882', 
		'\x1883', '\a', '\\', '\x2', '\x2', '\x1883', '\x1884', '\a', '\x30A', 
		'\x2', '\x2', '\x1884', '\x1885', '\x5', '\x2A6', '\x154', '\x2', '\x1885', 
		'\x1886', '\a', '\x307', '\x2', '\x2', '\x1886', '\x1887', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1887', '\x1888', '\a', '\x30B', '\x2', '\x2', '\x1888', 
		'\x18A1', '\x3', '\x2', '\x2', '\x2', '\x1889', '\x188A', '\a', '\xD5', 
		'\x2', '\x2', '\x188A', '\x188C', '\a', '\x30A', '\x2', '\x2', '\x188B', 
		'\x188D', '\x5', '\x2F6', '\x17C', '\x2', '\x188C', '\x188B', '\x3', '\x2', 
		'\x2', '\x2', '\x188C', '\x188D', '\x3', '\x2', '\x2', '\x2', '\x188D', 
		'\x188E', '\x3', '\x2', '\x2', '\x2', '\x188E', '\x18A1', '\a', '\x30B', 
		'\x2', '\x2', '\x188F', '\x1890', '\a', '\x119', '\x2', '\x2', '\x1890', 
		'\x18A1', '\x5', '\x302', '\x182', '\x2', '\x1891', '\x1892', '\a', '\x161', 
		'\x2', '\x2', '\x1892', '\x18A1', '\x5', '\x302', '\x182', '\x2', '\x1893', 
		'\x1894', '\a', '\x162', '\x2', '\x2', '\x1894', '\x18A1', '\x5', '\x302', 
		'\x182', '\x2', '\x1895', '\x1896', '\a', '\x163', '\x2', '\x2', '\x1896', 
		'\x18A1', '\x5', '\x302', '\x182', '\x2', '\x1897', '\x1898', '\a', '\x19D', 
		'\x2', '\x2', '\x1898', '\x1899', '\a', '\x30A', '\x2', '\x2', '\x1899', 
		'\x189A', '\x5', '\x2A6', '\x154', '\x2', '\x189A', '\x189B', '\a', '\x307', 
		'\x2', '\x2', '\x189B', '\x189C', '\x5', '\x2A6', '\x154', '\x2', '\x189C', 
		'\x189D', '\a', '\x30B', '\x2', '\x2', '\x189D', '\x18A1', '\x3', '\x2', 
		'\x2', '\x2', '\x189E', '\x189F', '\a', '\x19E', '\x2', '\x2', '\x189F', 
		'\x18A1', '\x5', '\x302', '\x182', '\x2', '\x18A0', '\x1881', '\x3', '\x2', 
		'\x2', '\x2', '\x18A0', '\x1889', '\x3', '\x2', '\x2', '\x2', '\x18A0', 
		'\x188F', '\x3', '\x2', '\x2', '\x2', '\x18A0', '\x1891', '\x3', '\x2', 
		'\x2', '\x2', '\x18A0', '\x1893', '\x3', '\x2', '\x2', '\x2', '\x18A0', 
		'\x1895', '\x3', '\x2', '\x2', '\x2', '\x18A0', '\x1897', '\x3', '\x2', 
		'\x2', '\x2', '\x18A0', '\x189E', '\x3', '\x2', '\x2', '\x2', '\x18A1', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x18A2', '\x18A4', '\a', '\x30A', 
		'\x2', '\x2', '\x18A3', '\x18A5', '\x5', '\x2D4', '\x16B', '\x2', '\x18A4', 
		'\x18A3', '\x3', '\x2', '\x2', '\x2', '\x18A4', '\x18A5', '\x3', '\x2', 
		'\x2', '\x2', '\x18A5', '\x18A6', '\x3', '\x2', '\x2', '\x2', '\x18A6', 
		'\x18A7', '\a', '\x30B', '\x2', '\x2', '\x18A7', '\x2D3', '\x3', '\x2', 
		'\x2', '\x2', '\x18A8', '\x18A9', '\x6', '\x16B', '\xAC', '\x2', '\x18A9', 
		'\x18AA', '\a', '\x2ED', '\x2', '\x2', '\x18AA', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', '\x18AB', '\x18B8', '\a', '\x114', '\x2', '\x2', '\x18AC', 
		'\x18AD', '\x5', '\x478', '\x23D', '\x2', '\x18AD', '\x18AE', '\a', '\x2F9', 
		'\x2', '\x2', '\x18AE', '\x18AF', '\x5', '\x478', '\x23D', '\x2', '\x18AF', 
		'\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18B0', '\x18B5', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x18B1', '\x18B2', '\a', '\x307', '\x2', '\x2', '\x18B2', 
		'\x18B4', '\x5', '\x2D8', '\x16D', '\x2', '\x18B3', '\x18B1', '\x3', '\x2', 
		'\x2', '\x2', '\x18B4', '\x18B7', '\x3', '\x2', '\x2', '\x2', '\x18B5', 
		'\x18B3', '\x3', '\x2', '\x2', '\x2', '\x18B5', '\x18B6', '\x3', '\x2', 
		'\x2', '\x2', '\x18B6', '\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18B7', 
		'\x18B5', '\x3', '\x2', '\x2', '\x2', '\x18B8', '\x18AC', '\x3', '\x2', 
		'\x2', '\x2', '\x18B8', '\x18B0', '\x3', '\x2', '\x2', '\x2', '\x18B9', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x18BA', '\x18C0', '\x5', '\x478', 
		'\x23D', '\x2', '\x18BB', '\x18BD', '\t', '#', '\x2', '\x2', '\x18BC', 
		'\x18BE', '\a', '\x1DE', '\x2', '\x2', '\x18BD', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x18BD', '\x18BE', '\x3', '\x2', '\x2', '\x2', '\x18BE', 
		'\x18C1', '\x3', '\x2', '\x2', '\x2', '\x18BF', '\x18C1', '\a', '\x1DE', 
		'\x2', '\x2', '\x18C0', '\x18BB', '\x3', '\x2', '\x2', '\x2', '\x18C0', 
		'\x18BF', '\x3', '\x2', '\x2', '\x2', '\x18C0', '\x18C1', '\x3', '\x2', 
		'\x2', '\x2', '\x18C1', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x18C2', 
		'\x18C3', '\t', '\x61', '\x2', '\x2', '\x18C3', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x18C4', '\x18C5', '\a', '\x255', '\x2', '\x2', '\x18C5', 
		'\x18DD', '\a', '\x30A', '\x2', '\x2', '\x18C6', '\x18C9', '\x5', '\x2A6', 
		'\x154', '\x2', '\x18C7', '\x18C8', '\a', '\xCD', '\x2', '\x2', '\x18C8', 
		'\x18CA', '\x5', '\x2A6', '\x154', '\x2', '\x18C9', '\x18C7', '\x3', '\x2', 
		'\x2', '\x2', '\x18C9', '\x18CA', '\x3', '\x2', '\x2', '\x2', '\x18CA', 
		'\x18DE', '\x3', '\x2', '\x2', '\x2', '\x18CB', '\x18CD', '\a', '\x10F', 
		'\x2', '\x2', '\x18CC', '\x18CE', '\x5', '\x2A6', '\x154', '\x2', '\x18CD', 
		'\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18CD', '\x18CE', '\x3', '\x2', 
		'\x2', '\x2', '\x18CE', '\x18CF', '\x3', '\x2', '\x2', '\x2', '\x18CF', 
		'\x18D0', '\a', '\xCD', '\x2', '\x2', '\x18D0', '\x18DE', '\x5', '\x2A6', 
		'\x154', '\x2', '\x18D1', '\x18D3', '\a', '\x251', '\x2', '\x2', '\x18D2', 
		'\x18D4', '\x5', '\x2A6', '\x154', '\x2', '\x18D3', '\x18D2', '\x3', '\x2', 
		'\x2', '\x2', '\x18D3', '\x18D4', '\x3', '\x2', '\x2', '\x2', '\x18D4', 
		'\x18D5', '\x3', '\x2', '\x2', '\x2', '\x18D5', '\x18D6', '\a', '\xCD', 
		'\x2', '\x2', '\x18D6', '\x18DE', '\x5', '\x2A6', '\x154', '\x2', '\x18D7', 
		'\x18D9', '\a', '-', '\x2', '\x2', '\x18D8', '\x18DA', '\x5', '\x2A6', 
		'\x154', '\x2', '\x18D9', '\x18D8', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18DA', '\x3', '\x2', '\x2', '\x2', '\x18DA', '\x18DB', '\x3', '\x2', 
		'\x2', '\x2', '\x18DB', '\x18DC', '\a', '\xCD', '\x2', '\x2', '\x18DC', 
		'\x18DE', '\x5', '\x2A6', '\x154', '\x2', '\x18DD', '\x18C6', '\x3', '\x2', 
		'\x2', '\x2', '\x18DD', '\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18DD', 
		'\x18D1', '\x3', '\x2', '\x2', '\x2', '\x18DD', '\x18D7', '\x3', '\x2', 
		'\x2', '\x2', '\x18DE', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18DF', 
		'\x18E0', '\a', '\x30B', '\x2', '\x2', '\x18E0', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', '\x18E1', '\x18E2', '\a', '\x235', '\x2', '\x2', '\x18E2', 
		'\x18E3', '\a', '\x30A', '\x2', '\x2', '\x18E3', '\x18F0', '\x5', '\x2A6', 
		'\x154', '\x2', '\x18E4', '\x18E5', '\a', '\x307', '\x2', '\x2', '\x18E5', 
		'\x18E8', '\x5', '\x2A6', '\x154', '\x2', '\x18E6', '\x18E7', '\a', '\x307', 
		'\x2', '\x2', '\x18E7', '\x18E9', '\x5', '\x2A6', '\x154', '\x2', '\x18E8', 
		'\x18E6', '\x3', '\x2', '\x2', '\x2', '\x18E8', '\x18E9', '\x3', '\x2', 
		'\x2', '\x2', '\x18E9', '\x18F1', '\x3', '\x2', '\x2', '\x2', '\x18EA', 
		'\x18EB', '\a', '\xCD', '\x2', '\x2', '\x18EB', '\x18EE', '\x5', '\x2A6', 
		'\x154', '\x2', '\x18EC', '\x18ED', '\a', '\xCA', '\x2', '\x2', '\x18ED', 
		'\x18EF', '\x5', '\x2A6', '\x154', '\x2', '\x18EE', '\x18EC', '\x3', '\x2', 
		'\x2', '\x2', '\x18EE', '\x18EF', '\x3', '\x2', '\x2', '\x2', '\x18EF', 
		'\x18F1', '\x3', '\x2', '\x2', '\x2', '\x18F0', '\x18E4', '\x3', '\x2', 
		'\x2', '\x2', '\x18F0', '\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18F1', 
		'\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18F2', '\x18F3', '\a', '\x30B', 
		'\x2', '\x2', '\x18F3', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x18F4', 
		'\x18F5', '\x5', '\x468', '\x235', '\x2', '\x18F5', '\x18F7', '\a', '\x30A', 
		'\x2', '\x2', '\x18F6', '\x18F8', '\x5', '\x2E2', '\x172', '\x2', '\x18F7', 
		'\x18F6', '\x3', '\x2', '\x2', '\x2', '\x18F7', '\x18F8', '\x3', '\x2', 
		'\x2', '\x2', '\x18F8', '\x18F9', '\x3', '\x2', '\x2', '\x2', '\x18F9', 
		'\x18FA', '\a', '\x30B', '\x2', '\x2', '\x18FA', '\x1903', '\x3', '\x2', 
		'\x2', '\x2', '\x18FB', '\x18FC', '\x5', '\x470', '\x239', '\x2', '\x18FC', 
		'\x18FE', '\a', '\x30A', '\x2', '\x2', '\x18FD', '\x18FF', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x18FE', '\x18FD', '\x3', '\x2', '\x2', '\x2', '\x18FE', 
		'\x18FF', '\x3', '\x2', '\x2', '\x2', '\x18FF', '\x1900', '\x3', '\x2', 
		'\x2', '\x2', '\x1900', '\x1901', '\a', '\x30B', '\x2', '\x2', '\x1901', 
		'\x1903', '\x3', '\x2', '\x2', '\x2', '\x1902', '\x18F4', '\x3', '\x2', 
		'\x2', '\x2', '\x1902', '\x18FB', '\x3', '\x2', '\x2', '\x2', '\x1903', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x1904', '\x1909', '\x5', '\x2E4', 
		'\x173', '\x2', '\x1905', '\x1906', '\a', '\x307', '\x2', '\x2', '\x1906', 
		'\x1908', '\x5', '\x2E4', '\x173', '\x2', '\x1907', '\x1905', '\x3', '\x2', 
		'\x2', '\x2', '\x1908', '\x190B', '\x3', '\x2', '\x2', '\x2', '\x1909', 
		'\x1907', '\x3', '\x2', '\x2', '\x2', '\x1909', '\x190A', '\x3', '\x2', 
		'\x2', '\x2', '\x190A', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x190B', 
		'\x1909', '\x3', '\x2', '\x2', '\x2', '\x190C', '\x190E', '\x5', '\x2A6', 
		'\x154', '\x2', '\x190D', '\x190F', '\x5', '\x166', '\xB4', '\x2', '\x190E', 
		'\x190D', '\x3', '\x2', '\x2', '\x2', '\x190E', '\x190F', '\x3', '\x2', 
		'\x2', '\x2', '\x190F', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x1910', 
		'\x1913', '\x5', '\x2E8', '\x175', '\x2', '\x1911', '\x1913', '\x5', '\x2EA', 
		'\x176', '\x2', '\x1912', '\x1910', '\x3', '\x2', '\x2', '\x2', '\x1912', 
		'\x1911', '\x3', '\x2', '\x2', '\x2', '\x1913', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1914', '\x1915', '\a', '\x311', '\x2', '\x2', '\x1915', 
		'\x1918', '\x5', '\x49E', '\x250', '\x2', '\x1916', '\x1918', '\a', '\x312', 
		'\x2', '\x2', '\x1917', '\x1914', '\x3', '\x2', '\x2', '\x2', '\x1917', 
		'\x1916', '\x3', '\x2', '\x2', '\x2', '\x1918', '\x2E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1919', '\x191B', '\a', '\x313', '\x2', '\x2', '\x191A', 
		'\x191C', '\x5', '\x4AC', '\x257', '\x2', '\x191B', '\x191A', '\x3', '\x2', 
		'\x2', '\x2', '\x191B', '\x191C', '\x3', '\x2', '\x2', '\x2', '\x191C', 
		'\x191D', '\x3', '\x2', '\x2', '\x2', '\x191D', '\x191F', '\x5', '\x49E', 
		'\x250', '\x2', '\x191E', '\x1920', '\x5', '\x474', '\x23B', '\x2', '\x191F', 
		'\x191E', '\x3', '\x2', '\x2', '\x2', '\x191F', '\x1920', '\x3', '\x2', 
		'\x2', '\x2', '\x1920', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x1921', 
		'\x1922', '\x6', '\x177', '\xAD', '\x2', '\x1922', '\x1924', '\x5', '\x46A', 
		'\x236', '\x2', '\x1923', '\x1925', '\x5', '\x474', '\x23B', '\x2', '\x1924', 
		'\x1923', '\x3', '\x2', '\x2', '\x2', '\x1924', '\x1925', '\x3', '\x2', 
		'\x2', '\x2', '\x1925', '\x192C', '\x3', '\x2', '\x2', '\x2', '\x1926', 
		'\x1927', '\x6', '\x177', '\xAE', '\x2', '\x1927', '\x1929', '\x5', '\x4A0', 
		'\x251', '\x2', '\x1928', '\x192A', '\x5', '\x474', '\x23B', '\x2', '\x1929', 
		'\x1928', '\x3', '\x2', '\x2', '\x2', '\x1929', '\x192A', '\x3', '\x2', 
		'\x2', '\x2', '\x192A', '\x192C', '\x3', '\x2', '\x2', '\x2', '\x192B', 
		'\x1921', '\x3', '\x2', '\x2', '\x2', '\x192B', '\x1926', '\x3', '\x2', 
		'\x2', '\x2', '\x192C', '\x1930', '\x3', '\x2', '\x2', '\x2', '\x192D', 
		'\x192E', '\a', '\x82', '\x2', '\x2', '\x192E', '\x1930', '\x5', '\x474', 
		'\x23B', '\x2', '\x192F', '\x192B', '\x3', '\x2', '\x2', '\x2', '\x192F', 
		'\x192D', '\x3', '\x2', '\x2', '\x2', '\x1930', '\x2ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1931', '\x1932', '\a', '\x284', '\x2', '\x2', '\x1932', 
		'\x1933', '\x5', '\x2A6', '\x154', '\x2', '\x1933', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', '\x1934', '\x1935', '\a', '\x248', '\x2', '\x2', '\x1935', 
		'\x1936', '\x5', '\x2A6', '\x154', '\x2', '\x1936', '\x2F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1937', '\x1938', '\a', '\x9C', '\x2', '\x2', '\x1938', 
		'\x1939', '\x5', '\x2A6', '\x154', '\x2', '\x1939', '\x2F3', '\x3', '\x2', 
		'\x2', '\x2', '\x193A', '\x193C', '\a', '\"', '\x2', '\x2', '\x193B', 
		'\x193D', '\x5', '\x39C', '\x1CF', '\x2', '\x193C', '\x193B', '\x3', '\x2', 
		'\x2', '\x2', '\x193C', '\x193D', '\x3', '\x2', '\x2', '\x2', '\x193D', 
		'\x1968', '\x3', '\x2', '\x2', '\x2', '\x193E', '\x1940', '\a', '>', '\x2', 
		'\x2', '\x193F', '\x1941', '\x5', '\x39C', '\x1CF', '\x2', '\x1940', '\x193F', 
		'\x3', '\x2', '\x2', '\x2', '\x1940', '\x1941', '\x3', '\x2', '\x2', '\x2', 
		'\x1941', '\x1943', '\x3', '\x2', '\x2', '\x2', '\x1942', '\x1944', '\x5', 
		'\x3A0', '\x1D1', '\x2', '\x1943', '\x1942', '\x3', '\x2', '\x2', '\x2', 
		'\x1943', '\x1944', '\x3', '\x2', '\x2', '\x2', '\x1944', '\x1968', '\x3', 
		'\x2', '\x2', '\x2', '\x1945', '\x1947', '\x5', '\x398', '\x1CD', '\x2', 
		'\x1946', '\x1948', '\x5', '\x39C', '\x1CF', '\x2', '\x1947', '\x1946', 
		'\x3', '\x2', '\x2', '\x2', '\x1947', '\x1948', '\x3', '\x2', '\x2', '\x2', 
		'\x1948', '\x1968', '\x3', '\x2', '\x2', '\x2', '\x1949', '\x194B', '\a', 
		'\x202', '\x2', '\x2', '\x194A', '\x194C', '\a', '\xFB', '\x2', '\x2', 
		'\x194B', '\x194A', '\x3', '\x2', '\x2', '\x2', '\x194B', '\x194C', '\x3', 
		'\x2', '\x2', '\x2', '\x194C', '\x1968', '\x3', '\x2', '\x2', '\x2', '\x194D', 
		'\x194F', '\a', '\x266', '\x2', '\x2', '\x194E', '\x1950', '\a', '\xFB', 
		'\x2', '\x2', '\x194F', '\x194E', '\x3', '\x2', '\x2', '\x2', '\x194F', 
		'\x1950', '\x3', '\x2', '\x2', '\x2', '\x1950', '\x1968', '\x3', '\x2', 
		'\x2', '\x2', '\x1951', '\x1968', '\a', 'v', '\x2', '\x2', '\x1952', '\x1954', 
		'\a', '\x24C', '\x2', '\x2', '\x1953', '\x1955', '\x5', '\x3A8', '\x1D5', 
		'\x2', '\x1954', '\x1953', '\x3', '\x2', '\x2', '\x2', '\x1954', '\x1955', 
		'\x3', '\x2', '\x2', '\x2', '\x1955', '\x1968', '\x3', '\x2', '\x2', '\x2', 
		'\x1956', '\x1958', '\a', 's', '\x2', '\x2', '\x1957', '\x1959', '\x5', 
		'\x3A8', '\x1D5', '\x2', '\x1958', '\x1957', '\x3', '\x2', '\x2', '\x2', 
		'\x1958', '\x1959', '\x3', '\x2', '\x2', '\x2', '\x1959', '\x1968', '\x3', 
		'\x2', '\x2', '\x2', '\x195A', '\x195C', '\a', '\x80', '\x2', '\x2', '\x195B', 
		'\x195D', '\x5', '\x498', '\x24D', '\x2', '\x195C', '\x195B', '\x3', '\x2', 
		'\x2', '\x2', '\x195C', '\x195D', '\x3', '\x2', '\x2', '\x2', '\x195D', 
		'\x1968', '\x3', '\x2', '\x2', '\x2', '\x195E', '\x195F', '\x6', '\x17B', 
		'\xAF', '\x2', '\x195F', '\x1968', '\a', '\x108', '\x2', '\x2', '\x1960', 
		'\x1961', '\x6', '\x17B', '\xB0', '\x2', '\x1961', '\x1968', '\x5', '\x39A', 
		'\x1CE', '\x2', '\x1962', '\x1963', '\x6', '\x17B', '\xB1', '\x2', '\x1963', 
		'\x1965', '\a', '\xC5', '\x2', '\x2', '\x1964', '\x1966', '\x5', '\x49A', 
		'\x24E', '\x2', '\x1965', '\x1964', '\x3', '\x2', '\x2', '\x2', '\x1965', 
		'\x1966', '\x3', '\x2', '\x2', '\x2', '\x1966', '\x1968', '\x3', '\x2', 
		'\x2', '\x2', '\x1967', '\x193A', '\x3', '\x2', '\x2', '\x2', '\x1967', 
		'\x193E', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1945', '\x3', '\x2', 
		'\x2', '\x2', '\x1967', '\x1949', '\x3', '\x2', '\x2', '\x2', '\x1967', 
		'\x194D', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1951', '\x3', '\x2', 
		'\x2', '\x2', '\x1967', '\x1952', '\x3', '\x2', '\x2', '\x2', '\x1967', 
		'\x1956', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x195A', '\x3', '\x2', 
		'\x2', '\x2', '\x1967', '\x195E', '\x3', '\x2', '\x2', '\x2', '\x1967', 
		'\x1960', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1962', '\x3', '\x2', 
		'\x2', '\x2', '\x1968', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x1969', 
		'\x196E', '\x5', '\x2A6', '\x154', '\x2', '\x196A', '\x196B', '\a', '\x307', 
		'\x2', '\x2', '\x196B', '\x196D', '\x5', '\x2A6', '\x154', '\x2', '\x196C', 
		'\x196A', '\x3', '\x2', '\x2', '\x2', '\x196D', '\x1970', '\x3', '\x2', 
		'\x2', '\x2', '\x196E', '\x196C', '\x3', '\x2', '\x2', '\x2', '\x196E', 
		'\x196F', '\x3', '\x2', '\x2', '\x2', '\x196F', '\x2F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1970', '\x196E', '\x3', '\x2', '\x2', '\x2', '\x1971', 
		'\x1972', '\a', '>', '\x2', '\x2', '\x1972', '\x1975', '\a', '\x1FC', 
		'\x2', '\x2', '\x1973', '\x1975', '\a', '<', '\x2', '\x2', '\x1974', '\x1971', 
		'\x3', '\x2', '\x2', '\x2', '\x1974', '\x1973', '\x3', '\x2', '\x2', '\x2', 
		'\x1975', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x1976', '\x1977', '\t', 
		'\x62', '\x2', '\x2', '\x1977', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x1978', 
		'\x1979', '\t', '\x63', '\x2', '\x2', '\x1979', '\x2FD', '\x3', '\x2', 
		'\x2', '\x2', '\x197A', '\x197D', '\x5', '\x300', '\x181', '\x2', '\x197B', 
		'\x197D', '\t', '\x64', '\x2', '\x2', '\x197C', '\x197A', '\x3', '\x2', 
		'\x2', '\x2', '\x197C', '\x197B', '\x3', '\x2', '\x2', '\x2', '\x197D', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x197E', '\x197F', '\t', '\x65', 
		'\x2', '\x2', '\x197F', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1980', 
		'\x1981', '\a', '\x30A', '\x2', '\x2', '\x1981', '\x1982', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x1982', '\x1983', '\a', '\x30B', '\x2', '\x2', '\x1983', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\x1984', '\x1985', '\a', '\x30A', 
		'\x2', '\x2', '\x1985', '\x1986', '\x5', '\x2A6', '\x154', '\x2', '\x1986', 
		'\x1987', '\a', '\x30B', '\x2', '\x2', '\x1987', '\x305', '\x3', '\x2', 
		'\x2', '\x2', '\x1988', '\x1989', '\a', '\x30A', '\x2', '\x2', '\x1989', 
		'\x198A', '\x5', '\x2B2', '\x15A', '\x2', '\x198A', '\x198B', '\a', '\x30B', 
		'\x2', '\x2', '\x198B', '\x307', '\x3', '\x2', '\x2', '\x2', '\x198C', 
		'\x1991', '\x5', '\x30A', '\x186', '\x2', '\x198D', '\x198E', '\a', '\x307', 
		'\x2', '\x2', '\x198E', '\x1990', '\x5', '\x30A', '\x186', '\x2', '\x198F', 
		'\x198D', '\x3', '\x2', '\x2', '\x2', '\x1990', '\x1993', '\x3', '\x2', 
		'\x2', '\x2', '\x1991', '\x198F', '\x3', '\x2', '\x2', '\x2', '\x1991', 
		'\x1992', '\x3', '\x2', '\x2', '\x2', '\x1992', '\x309', '\x3', '\x2', 
		'\x2', '\x2', '\x1993', '\x1991', '\x3', '\x2', '\x2', '\x2', '\x1994', 
		'\x1996', '\x5', '\x2A6', '\x154', '\x2', '\x1995', '\x1997', '\x5', '\x14C', 
		'\xA7', '\x2', '\x1996', '\x1995', '\x3', '\x2', '\x2', '\x2', '\x1996', 
		'\x1997', '\x3', '\x2', '\x2', '\x2', '\x1997', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x1998', '\x199D', '\x5', '\x30E', '\x188', '\x2', '\x1999', 
		'\x199A', '\a', '\x307', '\x2', '\x2', '\x199A', '\x199C', '\x5', '\x30E', 
		'\x188', '\x2', '\x199B', '\x1999', '\x3', '\x2', '\x2', '\x2', '\x199C', 
		'\x199F', '\x3', '\x2', '\x2', '\x2', '\x199D', '\x199B', '\x3', '\x2', 
		'\x2', '\x2', '\x199D', '\x199E', '\x3', '\x2', '\x2', '\x2', '\x199E', 
		'\x30D', '\x3', '\x2', '\x2', '\x2', '\x199F', '\x199D', '\x3', '\x2', 
		'\x2', '\x2', '\x19A0', '\x19A1', '\x5', '\x2A6', '\x154', '\x2', '\x19A1', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x19A2', '\x19A3', '\x6', '\x189', 
		'\xB2', '\x2', '\x19A3', '\x19A4', '\a', '\xCA', '\x2', '\x2', '\x19A4', 
		'\x19A5', '\a', ';', '\x2', '\x2', '\x19A5', '\x19A6', '\x5', '\x48C', 
		'\x247', '\x2', '\x19A6', '\x311', '\x3', '\x2', '\x2', '\x2', '\x19A7', 
		'\x19B5', '\x5', '\x4', '\x3', '\x2', '\x19A8', '\x19B5', '\x5', '\x314', 
		'\x18B', '\x2', '\x19A9', '\x19B5', '\x5', '\x316', '\x18C', '\x2', '\x19AA', 
		'\x19B5', '\x5', '\x31E', '\x190', '\x2', '\x19AB', '\x19B5', '\x5', '\x322', 
		'\x192', '\x2', '\x19AC', '\x19B5', '\x5', '\x324', '\x193', '\x2', '\x19AD', 
		'\x19B5', '\x5', '\x32A', '\x196', '\x2', '\x19AE', '\x19B5', '\x5', '\x32C', 
		'\x197', '\x2', '\x19AF', '\x19B5', '\x5', '\x348', '\x1A5', '\x2', '\x19B0', 
		'\x19B5', '\x5', '\x346', '\x1A4', '\x2', '\x19B1', '\x19B5', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x19B2', '\x19B5', '\x5', '\x35E', '\x1B0', '\x2', '\x19B3', 
		'\x19B5', '\x5', '\x35C', '\x1AF', '\x2', '\x19B4', '\x19A7', '\x3', '\x2', 
		'\x2', '\x2', '\x19B4', '\x19A8', '\x3', '\x2', '\x2', '\x2', '\x19B4', 
		'\x19A9', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19AA', '\x3', '\x2', 
		'\x2', '\x2', '\x19B4', '\x19AB', '\x3', '\x2', '\x2', '\x2', '\x19B4', 
		'\x19AC', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19AD', '\x3', '\x2', 
		'\x2', '\x2', '\x19B4', '\x19AE', '\x3', '\x2', '\x2', '\x2', '\x19B4', 
		'\x19AF', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19B0', '\x3', '\x2', 
		'\x2', '\x2', '\x19B4', '\x19B1', '\x3', '\x2', '\x2', '\x2', '\x19B4', 
		'\x19B2', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19B3', '\x3', '\x2', 
		'\x2', '\x2', '\x19B5', '\x313', '\x3', '\x2', '\x2', '\x2', '\x19B6', 
		'\x19B7', '\a', '\x1DD', '\x2', '\x2', '\x19B7', '\x19B8', '\x5', '\x2A6', 
		'\x154', '\x2', '\x19B8', '\x315', '\x3', '\x2', '\x2', '\x2', '\x19B9', 
		'\x19BA', '\a', '\xE9', '\x2', '\x2', '\x19BA', '\x19BB', '\x5', '\x318', 
		'\x18D', '\x2', '\x19BB', '\x19BC', '\a', '\xA1', '\x2', '\x2', '\x19BC', 
		'\x19BD', '\a', '\xE9', '\x2', '\x2', '\x19BD', '\x317', '\x3', '\x2', 
		'\x2', '\x2', '\x19BE', '\x19BF', '\x5', '\x2A6', '\x154', '\x2', '\x19BF', 
		'\x19C4', '\x5', '\x31A', '\x18E', '\x2', '\x19C0', '\x19C1', '\a', '\x9D', 
		'\x2', '\x2', '\x19C1', '\x19C5', '\x5', '\x318', '\x18D', '\x2', '\x19C2', 
		'\x19C3', '\a', '\x9C', '\x2', '\x2', '\x19C3', '\x19C5', '\x5', '\x31C', 
		'\x18F', '\x2', '\x19C4', '\x19C0', '\x3', '\x2', '\x2', '\x2', '\x19C4', 
		'\x19C2', '\x3', '\x2', '\x2', '\x2', '\x19C4', '\x19C5', '\x3', '\x2', 
		'\x2', '\x2', '\x19C5', '\x319', '\x3', '\x2', '\x2', '\x2', '\x19C6', 
		'\x19C7', '\a', '\x248', '\x2', '\x2', '\x19C7', '\x19C8', '\x5', '\x31C', 
		'\x18F', '\x2', '\x19C8', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x19C9', 
		'\x19CA', '\x5', '\x312', '\x18A', '\x2', '\x19CA', '\x19CB', '\a', '\x308', 
		'\x2', '\x2', '\x19CB', '\x19CD', '\x3', '\x2', '\x2', '\x2', '\x19CC', 
		'\x19C9', '\x3', '\x2', '\x2', '\x2', '\x19CD', '\x19CE', '\x3', '\x2', 
		'\x2', '\x2', '\x19CE', '\x19CC', '\x3', '\x2', '\x2', '\x2', '\x19CE', 
		'\x19CF', '\x3', '\x2', '\x2', '\x2', '\x19CF', '\x31D', '\x3', '\x2', 
		'\x2', '\x2', '\x19D0', '\x19D2', '\a', '\x35', '\x2', '\x2', '\x19D1', 
		'\x19D3', '\x5', '\x2A6', '\x154', '\x2', '\x19D2', '\x19D1', '\x3', '\x2', 
		'\x2', '\x2', '\x19D2', '\x19D3', '\x3', '\x2', '\x2', '\x2', '\x19D3', 
		'\x19D7', '\x3', '\x2', '\x2', '\x2', '\x19D4', '\x19D5', '\x5', '\x2EE', 
		'\x178', '\x2', '\x19D5', '\x19D6', '\x5', '\x31A', '\x18E', '\x2', '\x19D6', 
		'\x19D8', '\x3', '\x2', '\x2', '\x2', '\x19D7', '\x19D4', '\x3', '\x2', 
		'\x2', '\x2', '\x19D8', '\x19D9', '\x3', '\x2', '\x2', '\x2', '\x19D9', 
		'\x19D7', '\x3', '\x2', '\x2', '\x2', '\x19D9', '\x19DA', '\x3', '\x2', 
		'\x2', '\x2', '\x19DA', '\x19DC', '\x3', '\x2', '\x2', '\x2', '\x19DB', 
		'\x19DD', '\x5', '\x320', '\x191', '\x2', '\x19DC', '\x19DB', '\x3', '\x2', 
		'\x2', '\x2', '\x19DC', '\x19DD', '\x3', '\x2', '\x2', '\x2', '\x19DD', 
		'\x19DE', '\x3', '\x2', '\x2', '\x2', '\x19DE', '\x19DF', '\a', '\xA1', 
		'\x2', '\x2', '\x19DF', '\x19E0', '\a', '\x35', '\x2', '\x2', '\x19E0', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\x19E1', '\x19E2', '\a', '\x9C', 
		'\x2', '\x2', '\x19E2', '\x19E3', '\x5', '\x31C', '\x18F', '\x2', '\x19E3', 
		'\x321', '\x3', '\x2', '\x2', '\x2', '\x19E4', '\x19E5', '\x5', '\x326', 
		'\x194', '\x2', '\x19E5', '\x19E7', '\x5', '\x328', '\x195', '\x2', '\x19E6', 
		'\x19E8', '\x5', '\x45A', '\x22E', '\x2', '\x19E7', '\x19E6', '\x3', '\x2', 
		'\x2', '\x2', '\x19E7', '\x19E8', '\x3', '\x2', '\x2', '\x2', '\x19E8', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x19E9', '\x19EA', '\x5', '\x328', 
		'\x195', '\x2', '\x19EA', '\x325', '\x3', '\x2', '\x2', '\x2', '\x19EB', 
		'\x19EC', '\x5', '\x458', '\x22D', '\x2', '\x19EC', '\x19ED', '\a', '\x309', 
		'\x2', '\x2', '\x19ED', '\x327', '\x3', '\x2', '\x2', '\x2', '\x19EE', 
		'\x19F0', '\a', '\x1F', '\x2', '\x2', '\x19EF', '\x19F1', '\x5', '\x334', 
		'\x19B', '\x2', '\x19F0', '\x19EF', '\x3', '\x2', '\x2', '\x2', '\x19F0', 
		'\x19F1', '\x3', '\x2', '\x2', '\x2', '\x19F1', '\x19F3', '\x3', '\x2', 
		'\x2', '\x2', '\x19F2', '\x19F4', '\x5', '\x31C', '\x18F', '\x2', '\x19F3', 
		'\x19F2', '\x3', '\x2', '\x2', '\x2', '\x19F3', '\x19F4', '\x3', '\x2', 
		'\x2', '\x2', '\x19F4', '\x19F5', '\x3', '\x2', '\x2', '\x2', '\x19F5', 
		'\x19F6', '\a', '\xA1', '\x2', '\x2', '\x19F6', '\x329', '\x3', '\x2', 
		'\x2', '\x2', '\x19F7', '\x19F8', '\x5', '\x326', '\x194', '\x2', '\x19F8', 
		'\x19FA', '\x5', '\x32C', '\x197', '\x2', '\x19F9', '\x19FB', '\x5', '\x45A', 
		'\x22E', '\x2', '\x19FA', '\x19F9', '\x3', '\x2', '\x2', '\x2', '\x19FA', 
		'\x19FB', '\x3', '\x2', '\x2', '\x2', '\x19FB', '\x32B', '\x3', '\x2', 
		'\x2', '\x2', '\x19FC', '\x1A00', '\x5', '\x32E', '\x198', '\x2', '\x19FD', 
		'\x1A00', '\x5', '\x330', '\x199', '\x2', '\x19FE', '\x1A00', '\x5', '\x332', 
		'\x19A', '\x2', '\x19FF', '\x19FC', '\x3', '\x2', '\x2', '\x2', '\x19FF', 
		'\x19FD', '\x3', '\x2', '\x2', '\x2', '\x19FF', '\x19FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1A00', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x1A01', 
		'\x1A02', '\a', '\x128', '\x2', '\x2', '\x1A02', '\x1A03', '\x5', '\x31C', 
		'\x18F', '\x2', '\x1A03', '\x1A04', '\a', '\xA1', '\x2', '\x2', '\x1A04', 
		'\x1A05', '\a', '\x128', '\x2', '\x2', '\x1A05', '\x32F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A06', '\x1A07', '\a', '\x286', '\x2', '\x2', '\x1A07', 
		'\x1A08', '\x5', '\x2A6', '\x154', '\x2', '\x1A08', '\x1A09', '\a', '\x95', 
		'\x2', '\x2', '\x1A09', '\x1A0A', '\x5', '\x31C', '\x18F', '\x2', '\x1A0A', 
		'\x1A0B', '\a', '\xA1', '\x2', '\x2', '\x1A0B', '\x1A0C', '\a', '\x286', 
		'\x2', '\x2', '\x1A0C', '\x331', '\x3', '\x2', '\x2', '\x2', '\x1A0D', 
		'\x1A0E', '\a', '\x1CB', '\x2', '\x2', '\x1A0E', '\x1A0F', '\x5', '\x31C', 
		'\x18F', '\x2', '\x1A0F', '\x1A10', '\a', '\x267', '\x2', '\x2', '\x1A10', 
		'\x1A11', '\x5', '\x2A6', '\x154', '\x2', '\x1A11', '\x1A12', '\a', '\xA1', 
		'\x2', '\x2', '\x1A12', '\x1A13', '\a', '\x1CB', '\x2', '\x2', '\x1A13', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x1A14', '\x1A15', '\x5', '\x336', 
		'\x19C', '\x2', '\x1A15', '\x1A16', '\a', '\x308', '\x2', '\x2', '\x1A16', 
		'\x1A18', '\x3', '\x2', '\x2', '\x2', '\x1A17', '\x1A14', '\x3', '\x2', 
		'\x2', '\x2', '\x1A18', '\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A19', 
		'\x1A17', '\x3', '\x2', '\x2', '\x2', '\x1A19', '\x1A1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1A', '\x335', '\x3', '\x2', '\x2', '\x2', '\x1A1B', 
		'\x1A20', '\x5', '\x338', '\x19D', '\x2', '\x1A1C', '\x1A20', '\x5', '\x33A', 
		'\x19E', '\x2', '\x1A1D', '\x1A20', '\x5', '\x340', '\x1A1', '\x2', '\x1A1E', 
		'\x1A20', '\x5', '\x344', '\x1A3', '\x2', '\x1A1F', '\x1A1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1F', '\x1A1C', '\x3', '\x2', '\x2', '\x2', '\x1A1F', 
		'\x1A1D', '\x3', '\x2', '\x2', '\x2', '\x1A1F', '\x1A1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x337', '\x3', '\x2', '\x2', '\x2', '\x1A21', 
		'\x1A22', '\a', '\x81', '\x2', '\x2', '\x1A22', '\x1A23', '\x5', '\x46C', 
		'\x237', '\x2', '\x1A23', '\x1A25', '\x5', '\x396', '\x1CC', '\x2', '\x1A24', 
		'\x1A26', '\x5', '\x3DC', '\x1EF', '\x2', '\x1A25', '\x1A24', '\x3', '\x2', 
		'\x2', '\x2', '\x1A25', '\x1A26', '\x3', '\x2', '\x2', '\x2', '\x1A26', 
		'\x1A29', '\x3', '\x2', '\x2', '\x2', '\x1A27', '\x1A28', '\a', '\x82', 
		'\x2', '\x2', '\x1A28', '\x1A2A', '\x5', '\x2A6', '\x154', '\x2', '\x1A29', 
		'\x1A27', '\x3', '\x2', '\x2', '\x2', '\x1A29', '\x1A2A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2A', '\x339', '\x3', '\x2', '\x2', '\x2', '\x1A2B', 
		'\x1A2C', '\a', '\x81', '\x2', '\x2', '\x1A2C', '\x1A2D', '\x5', '\x46A', 
		'\x236', '\x2', '\x1A2D', '\x1A2E', '\a', 'U', '\x2', '\x2', '\x1A2E', 
		'\x1A2F', '\a', '\xCA', '\x2', '\x2', '\x1A2F', '\x1A30', '\x5', '\x33C', 
		'\x19F', '\x2', '\x1A30', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x1A31', 
		'\x1A34', '\x5', '\x476', '\x23C', '\x2', '\x1A32', '\x1A34', '\x5', '\x33E', 
		'\x1A0', '\x2', '\x1A33', '\x1A31', '\x3', '\x2', '\x2', '\x2', '\x1A33', 
		'\x1A32', '\x3', '\x2', '\x2', '\x2', '\x1A34', '\x33D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A35', '\x1A37', '\a', '\x210', '\x2', '\x2', '\x1A36', 
		'\x1A38', '\a', '\x275', '\x2', '\x2', '\x1A37', '\x1A36', '\x3', '\x2', 
		'\x2', '\x2', '\x1A37', '\x1A38', '\x3', '\x2', '\x2', '\x2', '\x1A38', 
		'\x1A39', '\x3', '\x2', '\x2', '\x2', '\x1A39', '\x1A3A', '\x5', '\x48A', 
		'\x246', '\x2', '\x1A3A', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x1A3B', 
		'\x1A3C', '\a', '\x81', '\x2', '\x2', '\x1A3C', '\x1A3D', '\t', '\x66', 
		'\x2', '\x2', '\x1A3D', '\x1A3E', '\a', '\xDD', '\x2', '\x2', '\x1A3E', 
		'\x1A3F', '\a', '\xCA', '\x2', '\x2', '\x1A3F', '\x1A44', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1A40', '\x1A41', '\a', '\x307', '\x2', '\x2', '\x1A41', 
		'\x1A43', '\x5', '\x342', '\x1A2', '\x2', '\x1A42', '\x1A40', '\x3', '\x2', 
		'\x2', '\x2', '\x1A43', '\x1A46', '\x3', '\x2', '\x2', '\x2', '\x1A44', 
		'\x1A42', '\x3', '\x2', '\x2', '\x2', '\x1A44', '\x1A45', '\x3', '\x2', 
		'\x2', '\x2', '\x1A45', '\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A46', 
		'\x1A44', '\x3', '\x2', '\x2', '\x2', '\x1A47', '\x1A48', '\x5', '\x312', 
		'\x18A', '\x2', '\x1A48', '\x341', '\x3', '\x2', '\x2', '\x2', '\x1A49', 
		'\x1A51', '\x5', '\x33C', '\x19F', '\x2', '\x1A4A', '\x1A51', '\x5', '\x46A', 
		'\x236', '\x2', '\x1A4B', '\x1A51', '\a', '\x211', '\x2', '\x2', '\x1A4C', 
		'\x1A4D', '\x5', '\x2FA', '\x17E', '\x2', '\x1A4D', '\x1A4E', '\a', '\xCC', 
		'\x2', '\x2', '\x1A4E', '\x1A51', '\x3', '\x2', '\x2', '\x2', '\x1A4F', 
		'\x1A51', '\a', '\x20F', '\x2', '\x2', '\x1A50', '\x1A49', '\x3', '\x2', 
		'\x2', '\x2', '\x1A50', '\x1A4A', '\x3', '\x2', '\x2', '\x2', '\x1A50', 
		'\x1A4B', '\x3', '\x2', '\x2', '\x2', '\x1A50', '\x1A4C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A50', '\x1A4F', '\x3', '\x2', '\x2', '\x2', '\x1A51', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x1A52', '\x1A53', '\a', '\x81', 
		'\x2', '\x2', '\x1A53', '\x1A54', '\x5', '\x46A', '\x236', '\x2', '\x1A54', 
		'\x1A55', '\a', 'l', '\x2', '\x2', '\x1A55', '\x1A56', '\a', '\xCA', '\x2', 
		'\x2', '\x1A56', '\x1A57', '\x5', '\x10C', '\x87', '\x2', '\x1A57', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x1A58', '\x1A59', '\a', '\x106', '\x2', 
		'\x2', '\x1A59', '\x1A5A', '\x5', '\x45A', '\x22E', '\x2', '\x1A5A', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5B', '\x1A5C', '\a', '\x111', '\x2', 
		'\x2', '\x1A5C', '\x1A5D', '\x5', '\x45A', '\x22E', '\x2', '\x1A5D', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5E', '\x1A62', '\a', '\xD1', '\x2', '\x2', 
		'\x1A5F', '\x1A63', '\a', 'g', '\x2', '\x2', '\x1A60', '\x1A61', '\x6', 
		'\x1A6', '\xB3', '\x2', '\x1A61', '\x1A63', '\a', '\x21E', '\x2', '\x2', 
		'\x1A62', '\x1A5F', '\x3', '\x2', '\x2', '\x2', '\x1A62', '\x1A60', '\x3', 
		'\x2', '\x2', '\x2', '\x1A62', '\x1A63', '\x3', '\x2', '\x2', '\x2', '\x1A63', 
		'\x1A64', '\x3', '\x2', '\x2', '\x2', '\x1A64', '\x1A77', '\a', '\x8C', 
		'\x2', '\x2', '\x1A65', '\x1A6A', '\x5', '\x34E', '\x1A8', '\x2', '\x1A66', 
		'\x1A67', '\a', '\x307', '\x2', '\x2', '\x1A67', '\x1A69', '\x5', '\x34E', 
		'\x1A8', '\x2', '\x1A68', '\x1A66', '\x3', '\x2', '\x2', '\x2', '\x1A69', 
		'\x1A6C', '\x3', '\x2', '\x2', '\x2', '\x1A6A', '\x1A68', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6A', '\x1A6B', '\x3', '\x2', '\x2', '\x2', '\x1A6B', 
		'\x1A78', '\x3', '\x2', '\x2', '\x2', '\x1A6C', '\x1A6A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6D', '\x1A6E', '\a', 'U', '\x2', '\x2', '\x1A6E', '\x1A6F', 
		'\x5', '\x34C', '\x1A7', '\x2', '\x1A6F', '\x1A74', '\x5', '\x350', '\x1A9', 
		'\x2', '\x1A70', '\x1A71', '\a', '\x307', '\x2', '\x2', '\x1A71', '\x1A73', 
		'\x5', '\x350', '\x1A9', '\x2', '\x1A72', '\x1A70', '\x3', '\x2', '\x2', 
		'\x2', '\x1A73', '\x1A76', '\x3', '\x2', '\x2', '\x2', '\x1A74', '\x1A72', 
		'\x3', '\x2', '\x2', '\x2', '\x1A74', '\x1A75', '\x3', '\x2', '\x2', '\x2', 
		'\x1A75', '\x1A78', '\x3', '\x2', '\x2', '\x2', '\x1A76', '\x1A74', '\x3', 
		'\x2', '\x2', '\x2', '\x1A77', '\x1A65', '\x3', '\x2', '\x2', '\x2', '\x1A77', 
		'\x1A6D', '\x3', '\x2', '\x2', '\x2', '\x1A78', '\x34B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A79', '\x1A7D', '\x5', '\x47E', '\x240', '\x2', '\x1A7A', 
		'\x1A7D', '\x5', '\x2E6', '\x174', '\x2', '\x1A7B', '\x1A7D', '\x5', '\x470', 
		'\x239', '\x2', '\x1A7C', '\x1A79', '\x3', '\x2', '\x2', '\x2', '\x1A7C', 
		'\x1A7A', '\x3', '\x2', '\x2', '\x2', '\x1A7C', '\x1A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7D', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x1A7E', 
		'\x1A81', '\x5', '\x2E6', '\x174', '\x2', '\x1A7F', '\x1A81', '\x5', '\x46A', 
		'\x236', '\x2', '\x1A80', '\x1A7E', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x1A81', '\x1A82', '\x3', '\x2', 
		'\x2', '\x2', '\x1A82', '\x1A83', '\a', '\x2F0', '\x2', '\x2', '\x1A83', 
		'\x1A84', '\t', 'g', '\x2', '\x2', '\x1A84', '\x34F', '\x3', '\x2', '\x2', 
		'\x2', '\x1A85', '\x1A88', '\x5', '\x2E6', '\x174', '\x2', '\x1A86', '\x1A88', 
		'\x5', '\x46A', '\x236', '\x2', '\x1A87', '\x1A85', '\x3', '\x2', '\x2', 
		'\x2', '\x1A87', '\x1A86', '\x3', '\x2', '\x2', '\x2', '\x1A88', '\x1A89', 
		'\x3', '\x2', '\x2', '\x2', '\x1A89', '\x1A8C', '\a', '\x2F0', '\x2', 
		'\x2', '\x1A8A', '\x1A8D', '\x5', '\x352', '\x1AA', '\x2', '\x1A8B', '\x1A8D', 
		'\a', '\x1DB', '\x2', '\x2', '\x1A8C', '\x1A8A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8C', '\x1A8B', '\x3', '\x2', '\x2', '\x2', '\x1A8D', '\x351', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8E', '\x1A8F', '\t', 'h', '\x2', '\x2', 
		'\x1A8F', '\x353', '\x3', '\x2', '\x2', '\x2', '\x1A90', '\x1A93', '\a', 
		'\x201', '\x2', '\x2', '\x1A91', '\x1A94', '\x5', '\x46A', '\x236', '\x2', 
		'\x1A92', '\x1A94', '\x5', '\x33E', '\x1A0', '\x2', '\x1A93', '\x1A91', 
		'\x3', '\x2', '\x2', '\x2', '\x1A93', '\x1A92', '\x3', '\x2', '\x2', '\x2', 
		'\x1A94', '\x1A9E', '\x3', '\x2', '\x2', '\x2', '\x1A95', '\x1A96', '\a', 
		'\x1FC', '\x2', '\x2', '\x1A96', '\x1A9B', '\x5', '\x358', '\x1AD', '\x2', 
		'\x1A97', '\x1A98', '\a', '\x307', '\x2', '\x2', '\x1A98', '\x1A9A', '\x5', 
		'\x358', '\x1AD', '\x2', '\x1A99', '\x1A97', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9A', '\x1A9D', '\x3', '\x2', '\x2', '\x2', '\x1A9B', '\x1A99', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9B', '\x1A9C', '\x3', '\x2', '\x2', '\x2', '\x1A9C', 
		'\x1A9F', '\x3', '\x2', '\x2', '\x2', '\x1A9D', '\x1A9B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9E', '\x1A95', '\x3', '\x2', '\x2', '\x2', '\x1A9E', 
		'\x1A9F', '\x3', '\x2', '\x2', '\x2', '\x1A9F', '\x355', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA0', '\x1AA3', '\a', '\x1D7', '\x2', '\x2', '\x1AA1', 
		'\x1AA4', '\x5', '\x46A', '\x236', '\x2', '\x1AA2', '\x1AA4', '\x5', '\x33E', 
		'\x1A0', '\x2', '\x1AA3', '\x1AA1', '\x3', '\x2', '\x2', '\x2', '\x1AA3', 
		'\x1AA2', '\x3', '\x2', '\x2', '\x2', '\x1AA3', '\x1AA4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA4', '\x1AAE', '\x3', '\x2', '\x2', '\x2', '\x1AA5', 
		'\x1AA6', '\a', '\x1FC', '\x2', '\x2', '\x1AA6', '\x1AAB', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1AA7', '\x1AA8', '\a', '\x307', '\x2', '\x2', '\x1AA8', 
		'\x1AAA', '\x5', '\x358', '\x1AD', '\x2', '\x1AA9', '\x1AA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAA', '\x1AAD', '\x3', '\x2', '\x2', '\x2', '\x1AAB', 
		'\x1AA9', '\x3', '\x2', '\x2', '\x2', '\x1AAB', '\x1AAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAC', '\x1AAF', '\x3', '\x2', '\x2', '\x2', '\x1AAD', 
		'\x1AAB', '\x3', '\x2', '\x2', '\x2', '\x1AAE', '\x1AA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAE', '\x1AAF', '\x3', '\x2', '\x2', '\x2', '\x1AAF', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\x1AB0', '\x1AB1', '\x5', '\x352', 
		'\x1AA', '\x2', '\x1AB1', '\x1AB2', '\a', '\x2F0', '\x2', '\x2', '\x1AB2', 
		'\x1AB3', '\x5', '\x34C', '\x1A7', '\x2', '\x1AB3', '\x359', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB4', '\x1AB5', '\a', '\x185', '\x2', '\x2', '\x1AB5', 
		'\x1AB6', '\x5', '\x46A', '\x236', '\x2', '\x1AB6', '\x35B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB7', '\x1AB8', '\a', '\x44', '\x2', '\x2', '\x1AB8', 
		'\x1AB9', '\x5', '\x46A', '\x236', '\x2', '\x1AB9', '\x35D', '\x3', '\x2', 
		'\x2', '\x2', '\x1ABA', '\x1ABF', '\a', '\xBC', '\x2', '\x2', '\x1ABB', 
		'\x1ABD', '\a', '\x171', '\x2', '\x2', '\x1ABC', '\x1ABB', '\x3', '\x2', 
		'\x2', '\x2', '\x1ABC', '\x1ABD', '\x3', '\x2', '\x2', '\x2', '\x1ABD', 
		'\x1ABE', '\x3', '\x2', '\x2', '\x2', '\x1ABE', '\x1AC0', '\a', '\xCD', 
		'\x2', '\x2', '\x1ABF', '\x1ABC', '\x3', '\x2', '\x2', '\x2', '\x1ABF', 
		'\x1AC0', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1AC1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC1', '\x1AC2', '\x5', '\x46A', '\x236', '\x2', '\x1AC2', 
		'\x1AC3', '\a', '\xFA', '\x2', '\x2', '\x1AC3', '\x1AC4', '\x5', '\x46C', 
		'\x237', '\x2', '\x1AC4', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x1AC5', 
		'\x1AC6', '\a', '\x17', '\x2', '\x2', '\x1AC6', '\x1AD3', '\x5', '\x2A6', 
		'\x154', '\x2', '\x1AC7', '\x1AC8', '\a', '\xAD', '\x2', '\x2', '\x1AC8', 
		'\x1AC9', '\x5', '\x2A6', '\x154', '\x2', '\x1AC9', '\x1ACC', '\x5', '\x2FE', 
		'\x180', '\x2', '\x1ACA', '\x1ACB', '\a', '\x220', '\x2', '\x2', '\x1ACB', 
		'\x1ACD', '\x5', '\x2A6', '\x154', '\x2', '\x1ACC', '\x1ACA', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACC', '\x1ACD', '\x3', '\x2', '\x2', '\x2', '\x1ACD', 
		'\x1AD0', '\x3', '\x2', '\x2', '\x2', '\x1ACE', '\x1ACF', '\a', '\xA2', 
		'\x2', '\x2', '\x1ACF', '\x1AD1', '\x5', '\x2A6', '\x154', '\x2', '\x1AD0', 
		'\x1ACE', '\x3', '\x2', '\x2', '\x2', '\x1AD0', '\x1AD1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD1', '\x1AD3', '\x3', '\x2', '\x2', '\x2', '\x1AD2', 
		'\x1AC5', '\x3', '\x2', '\x2', '\x2', '\x1AD2', '\x1AC7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD3', '\x361', '\x3', '\x2', '\x2', '\x2', '\x1AD4', 
		'\x1AD5', '\x5', '\x412', '\x20A', '\x2', '\x1AD5', '\x1AD7', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x1AD6', '\x1AD8', '\x5', '\x364', '\x1B3', '\x2', '\x1AD7', 
		'\x1AD6', '\x3', '\x2', '\x2', '\x2', '\x1AD7', '\x1AD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD8', '\x363', '\x3', '\x2', '\x2', '\x2', '\x1AD9', 
		'\x1ADA', '\x6', '\x1B3', '\xB4', '\x2', '\x1ADA', '\x1ADD', '\x5', '\x366', 
		'\x1B4', '\x2', '\x1ADB', '\x1ADD', '\x5', '\x378', '\x1BD', '\x2', '\x1ADC', 
		'\x1AD9', '\x3', '\x2', '\x2', '\x2', '\x1ADC', '\x1ADB', '\x3', '\x2', 
		'\x2', '\x2', '\x1ADD', '\x365', '\x3', '\x2', '\x2', '\x2', '\x1ADE', 
		'\x1ADF', '\a', '@', '\x2', '\x2', '\x1ADF', '\x1AE0', '\x5', '\x304', 
		'\x183', '\x2', '\x1AE0', '\x367', '\x3', '\x2', '\x2', '\x2', '\x1AE1', 
		'\x1AE3', '\a', '\x175', '\x2', '\x2', '\x1AE2', '\x1AE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE2', '\x1AE3', '\x3', '\x2', '\x2', '\x2', '\x1AE3', 
		'\x1AE4', '\x3', '\x2', '\x2', '\x2', '\x1AE4', '\x1AE5', '\a', '\x2DC', 
		'\x2', '\x2', '\x1AE5', '\x369', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1AE8', '\t', '(', '\x2', '\x2', '\x1AE7', '\x1AE9', '\x5', 'n', '\x38', 
		'\x2', '\x1AE8', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1AE8', '\x1AE9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE9', '\x1AEA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AEA', '\x1AEE', '\x5', '\x384', '\x1C3', '\x2', '\x1AEB', '\x1AED', 
		'\x5', '\x388', '\x1C5', '\x2', '\x1AEC', '\x1AEB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AED', '\x1AF0', '\x3', '\x2', '\x2', '\x2', '\x1AEE', '\x1AEC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AEE', '\x1AEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AEF', '\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1AF0', '\x1AEE', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF1', '\x1AF3', '\a', '\xCF', '\x2', '\x2', '\x1AF2', 
		'\x1AF4', '\x5', '\x198', '\xCD', '\x2', '\x1AF3', '\x1AF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF3', '\x1AF4', '\x3', '\x2', '\x2', '\x2', '\x1AF4', 
		'\x1AF6', '\x3', '\x2', '\x2', '\x2', '\x1AF5', '\x1AF7', '\x5', '\x41C', 
		'\x20F', '\x2', '\x1AF6', '\x1AF5', '\x3', '\x2', '\x2', '\x2', '\x1AF6', 
		'\x1AF7', '\x3', '\x2', '\x2', '\x2', '\x1AF7', '\x1AF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF8', '\x1AFC', '\x5', '\x384', '\x1C3', '\x2', '\x1AF9', 
		'\x1AFB', '\x5', '\x390', '\x1C9', '\x2', '\x1AFA', '\x1AF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFB', '\x1AFE', '\x3', '\x2', '\x2', '\x2', '\x1AFC', 
		'\x1AFA', '\x3', '\x2', '\x2', '\x2', '\x1AFC', '\x1AFD', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFD', '\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1AFE', 
		'\x1AFC', '\x3', '\x2', '\x2', '\x2', '\x1AFF', '\x1B01', '\a', '\x20D', 
		'\x2', '\x2', '\x1B00', '\x1B02', '\x5', '\x198', '\xCD', '\x2', '\x1B01', 
		'\x1B00', '\x3', '\x2', '\x2', '\x2', '\x1B01', '\x1B02', '\x3', '\x2', 
		'\x2', '\x2', '\x1B02', '\x1B04', '\x3', '\x2', '\x2', '\x2', '\x1B03', 
		'\x1B05', '\x5', '\x41C', '\x20F', '\x2', '\x1B04', '\x1B03', '\x3', '\x2', 
		'\x2', '\x2', '\x1B04', '\x1B05', '\x3', '\x2', '\x2', '\x2', '\x1B05', 
		'\x1B06', '\x3', '\x2', '\x2', '\x2', '\x1B06', '\x1B0A', '\x5', '\x384', 
		'\x1C3', '\x2', '\x1B07', '\x1B09', '\x5', '\x392', '\x1CA', '\x2', '\x1B08', 
		'\x1B07', '\x3', '\x2', '\x2', '\x2', '\x1B09', '\x1B0C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0A', '\x1B08', '\x3', '\x2', '\x2', '\x2', '\x1B0A', 
		'\x1B0B', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x1B32', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0C', '\x1B0A', '\x3', '\x2', '\x2', '\x2', '\x1B0D', 
		'\x1B0F', '\x5', '\x36C', '\x1B7', '\x2', '\x1B0E', '\x1B0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0E', '\x1B0F', '\x3', '\x2', '\x2', '\x2', '\x1B0F', 
		'\x1B2F', '\x3', '\x2', '\x2', '\x2', '\x1B10', '\x1B11', '\a', '\x1A6', 
		'\x2', '\x2', '\x1B11', '\x1B17', '\a', '\x10B', '\x2', '\x2', '\x1B12', 
		'\x1B14', '\a', '\x263', '\x2', '\x2', '\x1B13', '\x1B15', '\x5', '\x198', 
		'\xCD', '\x2', '\x1B14', '\x1B13', '\x3', '\x2', '\x2', '\x2', '\x1B14', 
		'\x1B15', '\x3', '\x2', '\x2', '\x2', '\x1B15', '\x1B17', '\x3', '\x2', 
		'\x2', '\x2', '\x1B16', '\x1B10', '\x3', '\x2', '\x2', '\x2', '\x1B16', 
		'\x1B12', '\x3', '\x2', '\x2', '\x2', '\x1B17', '\x1B19', '\x3', '\x2', 
		'\x2', '\x2', '\x1B18', '\x1B1A', '\x5', 'n', '\x38', '\x2', '\x1B19', 
		'\x1B18', '\x3', '\x2', '\x2', '\x2', '\x1B19', '\x1B1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1A', '\x1B1B', '\x3', '\x2', '\x2', '\x2', '\x1B1B', 
		'\x1B1F', '\x5', '\x384', '\x1C3', '\x2', '\x1B1C', '\x1B1E', '\x5', '\x388', 
		'\x1C5', '\x2', '\x1B1D', '\x1B1C', '\x3', '\x2', '\x2', '\x2', '\x1B1E', 
		'\x1B21', '\x3', '\x2', '\x2', '\x2', '\x1B1F', '\x1B1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1F', '\x1B20', '\x3', '\x2', '\x2', '\x2', '\x1B20', 
		'\x1B30', '\x3', '\x2', '\x2', '\x2', '\x1B21', '\x1B1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B22', '\x1B23', '\a', '\xC9', '\x2', '\x2', '\x1B23', 
		'\x1B25', '\a', '\x10B', '\x2', '\x2', '\x1B24', '\x1B26', '\x5', '\x41C', 
		'\x20F', '\x2', '\x1B25', '\x1B24', '\x3', '\x2', '\x2', '\x2', '\x1B25', 
		'\x1B26', '\x3', '\x2', '\x2', '\x2', '\x1B26', '\x1B27', '\x3', '\x2', 
		'\x2', '\x2', '\x1B27', '\x1B28', '\x5', '\x37C', '\x1BF', '\x2', '\x1B28', 
		'\x1B29', '\x5', '\x378', '\x1BD', '\x2', '\x1B29', '\x1B30', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2A', '\x1B2D', '\x5', '\x366', '\x1B4', '\x2', '\x1B2B', 
		'\x1B2C', '\x6', '\x1B6', '\xB5', '\x2', '\x1B2C', '\x1B2E', '\x5', '\x368', 
		'\x1B5', '\x2', '\x1B2D', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B2D', 
		'\x1B2E', '\x3', '\x2', '\x2', '\x2', '\x1B2E', '\x1B30', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2F', '\x1B16', '\x3', '\x2', '\x2', '\x2', '\x1B2F', 
		'\x1B22', '\x3', '\x2', '\x2', '\x2', '\x1B2F', '\x1B2A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B30', '\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1B31', 
		'\x1AE6', '\x3', '\x2', '\x2', '\x2', '\x1B31', '\x1AF1', '\x3', '\x2', 
		'\x2', '\x2', '\x1B31', '\x1AFF', '\x3', '\x2', '\x2', '\x2', '\x1B31', 
		'\x1B0E', '\x3', '\x2', '\x2', '\x2', '\x1B32', '\x36B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B33', '\x1B35', '\a', 'X', '\x2', '\x2', '\x1B34', '\x1B36', 
		'\x5', '\x46A', '\x236', '\x2', '\x1B35', '\x1B34', '\x3', '\x2', '\x2', 
		'\x2', '\x1B35', '\x1B36', '\x3', '\x2', '\x2', '\x2', '\x1B36', '\x36D', 
		'\x3', '\x2', '\x2', '\x2', '\x1B37', '\x1B5B', '\x5', '\x396', '\x1CC', 
		'\x2', '\x1B38', '\x1B3A', '\x5', '\x370', '\x1B9', '\x2', '\x1B39', '\x1B38', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3A', '\x1B3D', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3B', '\x1B39', '\x3', '\x2', '\x2', '\x2', '\x1B3B', '\x1B3C', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3C', '\x1B5C', '\x3', '\x2', '\x2', '\x2', '\x1B3D', 
		'\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B40', '\x6', '\x1B8', 
		'\xB6', '\x2', '\x1B3F', '\x1B41', '\x5', '\x3DC', '\x1EF', '\x2', '\x1B40', 
		'\x1B3F', '\x3', '\x2', '\x2', '\x2', '\x1B40', '\x1B41', '\x3', '\x2', 
		'\x2', '\x2', '\x1B41', '\x1B44', '\x3', '\x2', '\x2', '\x2', '\x1B42', 
		'\x1B43', '\a', '\xD3', '\x2', '\x2', '\x1B43', '\x1B45', '\a', '\xE', 
		'\x2', '\x2', '\x1B44', '\x1B42', '\x3', '\x2', '\x2', '\x2', '\x1B44', 
		'\x1B45', '\x3', '\x2', '\x2', '\x2', '\x1B45', '\x1B46', '\x3', '\x2', 
		'\x2', '\x2', '\x1B46', '\x1B47', '\a', '\x13', '\x2', '\x2', '\x1B47', 
		'\x1B49', '\x5', '\x304', '\x183', '\x2', '\x1B48', '\x1B4A', '\t', 'i', 
		'\x2', '\x2', '\x1B49', '\x1B48', '\x3', '\x2', '\x2', '\x2', '\x1B49', 
		'\x1B4A', '\x3', '\x2', '\x2', '\x2', '\x1B4A', '\x1B59', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4B', '\x1B4F', '\x6', '\x1B8', '\xB7', '\x2', '\x1B4C', 
		'\x1B4E', '\x5', '\x376', '\x1BC', '\x2', '\x1B4D', '\x1B4C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4E', '\x1B51', '\x3', '\x2', '\x2', '\x2', '\x1B4F', 
		'\x1B4D', '\x3', '\x2', '\x2', '\x2', '\x1B4F', '\x1B50', '\x3', '\x2', 
		'\x2', '\x2', '\x1B50', '\x1B5A', '\x3', '\x2', '\x2', '\x2', '\x1B51', 
		'\x1B4F', '\x3', '\x2', '\x2', '\x2', '\x1B52', '\x1B56', '\x6', '\x1B8', 
		'\xB8', '\x2', '\x1B53', '\x1B55', '\x5', '\x370', '\x1B9', '\x2', '\x1B54', 
		'\x1B53', '\x3', '\x2', '\x2', '\x2', '\x1B55', '\x1B58', '\x3', '\x2', 
		'\x2', '\x2', '\x1B56', '\x1B54', '\x3', '\x2', '\x2', '\x2', '\x1B56', 
		'\x1B57', '\x3', '\x2', '\x2', '\x2', '\x1B57', '\x1B5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B58', '\x1B56', '\x3', '\x2', '\x2', '\x2', '\x1B59', 
		'\x1B4B', '\x3', '\x2', '\x2', '\x2', '\x1B59', '\x1B52', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5A', '\x1B5C', '\x3', '\x2', '\x2', '\x2', '\x1B5B', 
		'\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B5B', '\x1B3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5C', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x1B5D', 
		'\x1B5F', '\a', '\x175', '\x2', '\x2', '\x1B5E', '\x1B5D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5E', '\x1B5F', '\x3', '\x2', '\x2', '\x2', '\x1B5F', 
		'\x1B60', '\x3', '\x2', '\x2', '\x2', '\x1B60', '\x1B92', '\x5', '\x494', 
		'\x24B', '\x2', '\x1B61', '\x1B62', '\x6', '\x1B9', '\xB9', '\x2', '\x1B62', 
		'\x1B63', '\a', '\x175', '\x2', '\x2', '\x1B63', '\x1B92', '\a', '\x2D2', 
		'\x2', '\x2', '\x1B64', '\x1B6C', '\a', '\x82', '\x2', '\x2', '\x1B65', 
		'\x1B6D', '\x5', '\x480', '\x241', '\x2', '\x1B66', '\x1B68', '\a', '\x176', 
		'\x2', '\x2', '\x1B67', '\x1B69', '\x5', '\x2D2', '\x16A', '\x2', '\x1B68', 
		'\x1B67', '\x3', '\x2', '\x2', '\x2', '\x1B68', '\x1B69', '\x3', '\x2', 
		'\x2', '\x2', '\x1B69', '\x1B6D', '\x3', '\x2', '\x2', '\x2', '\x1B6A', 
		'\x1B6B', '\x6', '\x1B9', '\xBA', '\x2', '\x1B6B', '\x1B6D', '\x5', '\x304', 
		'\x183', '\x2', '\x1B6C', '\x1B65', '\x3', '\x2', '\x2', '\x2', '\x1B6C', 
		'\x1B66', '\x3', '\x2', '\x2', '\x2', '\x1B6C', '\x1B6A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6D', '\x1B92', '\x3', '\x2', '\x2', '\x2', '\x1B6E', 
		'\x1B6F', '\a', '\x181', '\x2', '\x2', '\x1B6F', '\x1B70', '\a', '\x268', 
		'\x2', '\x2', '\x1B70', '\x1B72', '\a', '\x176', '\x2', '\x2', '\x1B71', 
		'\x1B73', '\x5', '\x2D2', '\x16A', '\x2', '\x1B72', '\x1B71', '\x3', '\x2', 
		'\x2', '\x2', '\x1B72', '\x1B73', '\x3', '\x2', '\x2', '\x2', '\x1B73', 
		'\x1B92', '\x3', '\x2', '\x2', '\x2', '\x1B74', '\x1B92', '\a', '\x1A', 
		'\x2', '\x2', '\x1B75', '\x1B76', '\a', '\x1F7', '\x2', '\x2', '\x1B76', 
		'\x1B77', '\a', '\x82', '\x2', '\x2', '\x1B77', '\x1B92', '\a', '\x275', 
		'\x2', '\x2', '\x1B78', '\x1B7A', '\a', '\x1A6', '\x2', '\x2', '\x1B79', 
		'\x1B78', '\x3', '\x2', '\x2', '\x2', '\x1B79', '\x1B7A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7A', '\x1B7B', '\x3', '\x2', '\x2', '\x2', '\x1B7B', 
		'\x1B92', '\a', '\x10B', '\x2', '\x2', '\x1B7C', '\x1B7E', '\a', '\x263', 
		'\x2', '\x2', '\x1B7D', '\x1B7F', '\a', '\x10B', '\x2', '\x2', '\x1B7E', 
		'\x1B7D', '\x3', '\x2', '\x2', '\x2', '\x1B7E', '\x1B7F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7F', '\x1B92', '\x3', '\x2', '\x2', '\x2', '\x1B80', 
		'\x1B81', '\a', 'M', '\x2', '\x2', '\x1B81', '\x1B92', '\x5', '\x48A', 
		'\x246', '\x2', '\x1B82', '\x1B92', '\x5', '\x3DC', '\x1EF', '\x2', '\x1B83', 
		'\x1B84', '\a', 'L', '\x2', '\x2', '\x1B84', '\x1B92', '\x5', '\x372', 
		'\x1BA', '\x2', '\x1B85', '\x1B86', '\a', '\x22B', '\x2', '\x2', '\x1B86', 
		'\x1B92', '\x5', '\x374', '\x1BB', '\x2', '\x1B87', '\x1B88', '\x6', '\x1B9', 
		'\xBB', '\x2', '\x1B88', '\x1B89', '\a', '\x2C5', '\x2', '\x2', '\x1B89', 
		'\x1B92', '\x5', '\x47C', '\x23F', '\x2', '\x1B8A', '\x1B8C', '\x6', '\x1B9', 
		'\xBC', '\x2', '\x1B8B', '\x1B8D', '\x5', '\x36C', '\x1B7', '\x2', '\x1B8C', 
		'\x1B8B', '\x3', '\x2', '\x2', '\x2', '\x1B8C', '\x1B8D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8D', '\x1B8E', '\x3', '\x2', '\x2', '\x2', '\x1B8E', 
		'\x1B92', '\x5', '\x366', '\x1B4', '\x2', '\x1B8F', '\x1B90', '\x6', '\x1B9', 
		'\xBD', '\x2', '\x1B90', '\x1B92', '\x5', '\x368', '\x1B5', '\x2', '\x1B91', 
		'\x1B5E', '\x3', '\x2', '\x2', '\x2', '\x1B91', '\x1B61', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B64', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B6E', '\x3', '\x2', '\x2', '\x2', '\x1B91', '\x1B74', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B75', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B79', '\x3', '\x2', '\x2', '\x2', '\x1B91', '\x1B7C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B80', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B82', '\x3', '\x2', '\x2', '\x2', '\x1B91', '\x1B83', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B85', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B87', '\x3', '\x2', '\x2', '\x2', '\x1B91', '\x1B8A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B8F', '\x3', '\x2', '\x2', '\x2', '\x1B92', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x1B93', '\x1B94', '\t', 'j', '\x2', 
		'\x2', '\x1B94', '\x373', '\x3', '\x2', '\x2', '\x2', '\x1B95', '\x1B96', 
		'\t', 'k', '\x2', '\x2', '\x1B96', '\x375', '\x3', '\x2', '\x2', '\x2', 
		'\x1B97', '\x1B99', '\a', '\x263', '\x2', '\x2', '\x1B98', '\x1B9A', '\a', 
		'\x10B', '\x2', '\x2', '\x1B99', '\x1B98', '\x3', '\x2', '\x2', '\x2', 
		'\x1B99', '\x1B9A', '\x3', '\x2', '\x2', '\x2', '\x1B9A', '\x1BA6', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9B', '\x1B9C', '\a', 'M', '\x2', '\x2', '\x1B9C', 
		'\x1BA6', '\x5', '\x486', '\x244', '\x2', '\x1B9D', '\x1B9F', '\x5', '\x2FA', 
		'\x17E', '\x2', '\x1B9E', '\x1B9D', '\x3', '\x2', '\x2', '\x2', '\x1B9E', 
		'\x1B9F', '\x3', '\x2', '\x2', '\x2', '\x1B9F', '\x1BA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA0', '\x1BA6', '\a', '\x17A', '\x2', '\x2', '\x1BA1', 
		'\x1BA3', '\a', '\x1A6', '\x2', '\x2', '\x1BA2', '\x1BA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA2', '\x1BA3', '\x3', '\x2', '\x2', '\x2', '\x1BA3', 
		'\x1BA4', '\x3', '\x2', '\x2', '\x2', '\x1BA4', '\x1BA6', '\a', '\x10B', 
		'\x2', '\x2', '\x1BA5', '\x1B97', '\x3', '\x2', '\x2', '\x2', '\x1BA5', 
		'\x1B9B', '\x3', '\x2', '\x2', '\x2', '\x1BA5', '\x1B9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA5', '\x1BA2', '\x3', '\x2', '\x2', '\x2', '\x1BA6', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\x1BA7', '\x1BA8', '\a', '\x1BD', 
		'\x2', '\x2', '\x1BA8', '\x1BAA', '\x5', '\x450', '\x229', '\x2', '\x1BA9', 
		'\x1BAB', '\x5', '\x46E', '\x238', '\x2', '\x1BAA', '\x1BA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1BAA', '\x1BAB', '\x3', '\x2', '\x2', '\x2', '\x1BAB', 
		'\x1BAE', '\x3', '\x2', '\x2', '\x2', '\x1BAC', '\x1BAD', '\a', '\x142', 
		'\x2', '\x2', '\x1BAD', '\x1BAF', '\t', 'l', '\x2', '\x2', '\x1BAE', '\x1BAC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BAE', '\x1BAF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BAF', '\x1BC0', '\x3', '\x2', '\x2', '\x2', '\x1BB0', '\x1BB1', '\a', 
		'\x181', '\x2', '\x2', '\x1BB1', '\x1BB2', '\a', '\x268', '\x2', '\x2', 
		'\x1BB2', '\x1BB6', '\x5', '\x37A', '\x1BE', '\x2', '\x1BB3', '\x1BB4', 
		'\a', '\x181', '\x2', '\x2', '\x1BB4', '\x1BB5', '\a', '\x87', '\x2', 
		'\x2', '\x1BB5', '\x1BB7', '\x5', '\x37A', '\x1BE', '\x2', '\x1BB6', '\x1BB3', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB6', '\x1BB7', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB7', '\x1BC1', '\x3', '\x2', '\x2', '\x2', '\x1BB8', '\x1BB9', '\a', 
		'\x181', '\x2', '\x2', '\x1BB9', '\x1BBA', '\a', '\x87', '\x2', '\x2', 
		'\x1BBA', '\x1BBE', '\x5', '\x37A', '\x1BE', '\x2', '\x1BBB', '\x1BBC', 
		'\a', '\x181', '\x2', '\x2', '\x1BBC', '\x1BBD', '\a', '\x268', '\x2', 
		'\x2', '\x1BBD', '\x1BBF', '\x5', '\x37A', '\x1BE', '\x2', '\x1BBE', '\x1BBB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BBE', '\x1BBF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BBF', '\x1BC1', '\x3', '\x2', '\x2', '\x2', '\x1BC0', '\x1BB0', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC0', '\x1BB8', '\x3', '\x2', '\x2', '\x2', '\x1BC0', 
		'\x1BC1', '\x3', '\x2', '\x2', '\x2', '\x1BC1', '\x379', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC2', '\x1BC8', '\t', '\x4', '\x2', '\x2', '\x1BC3', 
		'\x1BC4', '\a', '\x1FC', '\x2', '\x2', '\x1BC4', '\x1BC8', '\x5', '\x494', 
		'\x24B', '\x2', '\x1BC5', '\x1BC6', '\a', '\x177', '\x2', '\x2', '\x1BC6', 
		'\x1BC8', '\a', '\x5', '\x2', '\x2', '\x1BC7', '\x1BC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC7', '\x1BC3', '\x3', '\x2', '\x2', '\x2', '\x1BC7', 
		'\x1BC5', '\x3', '\x2', '\x2', '\x2', '\x1BC8', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC9', '\x1BCA', '\a', '\x30A', '\x2', '\x2', '\x1BCA', 
		'\x1BCF', '\x5', '\x37E', '\x1C0', '\x2', '\x1BCB', '\x1BCC', '\a', '\x307', 
		'\x2', '\x2', '\x1BCC', '\x1BCE', '\x5', '\x37E', '\x1C0', '\x2', '\x1BCD', 
		'\x1BCB', '\x3', '\x2', '\x2', '\x2', '\x1BCE', '\x1BD1', '\x3', '\x2', 
		'\x2', '\x2', '\x1BCF', '\x1BCD', '\x3', '\x2', '\x2', '\x2', '\x1BCF', 
		'\x1BD0', '\x3', '\x2', '\x2', '\x2', '\x1BD0', '\x1BD2', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD1', '\x1BCF', '\x3', '\x2', '\x2', '\x2', '\x1BD2', 
		'\x1BD3', '\a', '\x30B', '\x2', '\x2', '\x1BD3', '\x37D', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD4', '\x1BD6', '\x5', '\x46A', '\x236', '\x2', '\x1BD5', 
		'\x1BD7', '\x5', '\x39C', '\x1CF', '\x2', '\x1BD6', '\x1BD5', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD6', '\x1BD7', '\x3', '\x2', '\x2', '\x2', '\x1BD7', 
		'\x1BD9', '\x3', '\x2', '\x2', '\x2', '\x1BD8', '\x1BDA', '\x5', '\x14C', 
		'\xA7', '\x2', '\x1BD9', '\x1BD8', '\x3', '\x2', '\x2', '\x2', '\x1BD9', 
		'\x1BDA', '\x3', '\x2', '\x2', '\x2', '\x1BDA', '\x37F', '\x3', '\x2', 
		'\x2', '\x2', '\x1BDB', '\x1BDC', '\a', '\x30A', '\x2', '\x2', '\x1BDC', 
		'\x1BE1', '\x5', '\x382', '\x1C2', '\x2', '\x1BDD', '\x1BDE', '\a', '\x307', 
		'\x2', '\x2', '\x1BDE', '\x1BE0', '\x5', '\x382', '\x1C2', '\x2', '\x1BDF', 
		'\x1BDD', '\x3', '\x2', '\x2', '\x2', '\x1BE0', '\x1BE3', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE1', '\x1BDF', '\x3', '\x2', '\x2', '\x2', '\x1BE1', 
		'\x1BE2', '\x3', '\x2', '\x2', '\x2', '\x1BE2', '\x1BE4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE3', '\x1BE1', '\x3', '\x2', '\x2', '\x2', '\x1BE4', 
		'\x1BE5', '\a', '\x30B', '\x2', '\x2', '\x1BE5', '\x381', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE6', '\x1BEC', '\x5', '\x37E', '\x1C0', '\x2', '\x1BE7', 
		'\x1BE9', '\x5', '\x304', '\x183', '\x2', '\x1BE8', '\x1BEA', '\x5', '\x14C', 
		'\xA7', '\x2', '\x1BE9', '\x1BE8', '\x3', '\x2', '\x2', '\x2', '\x1BE9', 
		'\x1BEA', '\x3', '\x2', '\x2', '\x2', '\x1BEA', '\x1BEC', '\x3', '\x2', 
		'\x2', '\x2', '\x1BEB', '\x1BE6', '\x3', '\x2', '\x2', '\x2', '\x1BEB', 
		'\x1BE7', '\x3', '\x2', '\x2', '\x2', '\x1BEC', '\x383', '\x3', '\x2', 
		'\x2', '\x2', '\x1BED', '\x1BEE', '\x6', '\x1C3', '\xBE', '\x2', '\x1BEE', 
		'\x1BF2', '\x5', '\x380', '\x1C1', '\x2', '\x1BEF', '\x1BF0', '\x6', '\x1C3', 
		'\xBF', '\x2', '\x1BF0', '\x1BF2', '\x5', '\x37C', '\x1BF', '\x2', '\x1BF1', 
		'\x1BED', '\x3', '\x2', '\x2', '\x2', '\x1BF1', '\x1BEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF2', '\x385', '\x3', '\x2', '\x2', '\x2', '\x1BF3', 
		'\x1BF4', '\t', 'm', '\x2', '\x2', '\x1BF4', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF5', '\x1BF8', '\x5', '\x38A', '\x1C6', '\x2', '\x1BF6', '\x1BF8', 
		'\x5', '\x38E', '\x1C8', '\x2', '\x1BF7', '\x1BF5', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF7', '\x1BF6', '\x3', '\x2', '\x2', '\x2', '\x1BF8', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF9', '\x1BFB', '\a', '\x10A', '\x2', 
		'\x2', '\x1BFA', '\x1BFC', '\a', '\x2F0', '\x2', '\x2', '\x1BFB', '\x1BFA', 
		'\x3', '\x2', '\x2', '\x2', '\x1BFB', '\x1BFC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BFC', '\x1BFD', '\x3', '\x2', '\x2', '\x2', '\x1BFD', '\x1C03', '\x5', 
		'\x476', '\x23C', '\x2', '\x1BFE', '\x1BFF', '\a', 'M', '\x2', '\x2', 
		'\x1BFF', '\x1C03', '\x5', '\x48A', '\x246', '\x2', '\x1C00', '\x1C01', 
		'\x6', '\x1C6', '\xC0', '\x2', '\x1C01', '\x1C03', '\x5', '\x38C', '\x1C7', 
		'\x2', '\x1C02', '\x1BF9', '\x3', '\x2', '\x2', '\x2', '\x1C02', '\x1BFE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C02', '\x1C00', '\x3', '\x2', '\x2', '\x2', 
		'\x1C03', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x1C04', '\x1C05', '\t', 
		'n', '\x2', '\x2', '\x1C05', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x1C06', 
		'\x1C07', '\t', 'o', '\x2', '\x2', '\x1C07', '\x1C08', '\x5', '\x386', 
		'\x1C4', '\x2', '\x1C08', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1C0E', '\x5', '\x38A', '\x1C6', '\x2', '\x1C0A', '\x1C0B', '\a', '\x287', 
		'\x2', '\x2', '\x1C0B', '\x1C0C', '\a', '\x193', '\x2', '\x2', '\x1C0C', 
		'\x1C0E', '\x5', '\x46A', '\x236', '\x2', '\x1C0D', '\x1C09', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0D', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1C0E', 
		'\x391', '\x3', '\x2', '\x2', '\x2', '\x1C0F', '\x1C10', '\x5', '\x38A', 
		'\x1C6', '\x2', '\x1C10', '\x393', '\x3', '\x2', '\x2', '\x2', '\x1C11', 
		'\x1C12', '\x5', '\x396', '\x1CC', '\x2', '\x1C12', '\x1C13', '\a', '\x2', 
		'\x2', '\x3', '\x1C13', '\x395', '\x3', '\x2', '\x2', '\x2', '\x1C14', 
		'\x1C16', '\t', 'p', '\x2', '\x2', '\x1C15', '\x1C17', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x1C16', '\x1C15', '\x3', '\x2', '\x2', '\x2', '\x1C16', 
		'\x1C17', '\x3', '\x2', '\x2', '\x2', '\x1C17', '\x1C19', '\x3', '\x2', 
		'\x2', '\x2', '\x1C18', '\x1C1A', '\x5', '\x39E', '\x1D0', '\x2', '\x1C19', 
		'\x1C18', '\x3', '\x2', '\x2', '\x2', '\x1C19', '\x1C1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C1A', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C1B', 
		'\x1C21', '\a', '\x1B7', '\x2', '\x2', '\x1C1C', '\x1C1E', '\a', '\x94', 
		'\x2', '\x2', '\x1C1D', '\x1C1F', '\a', '\x1A2', '\x2', '\x2', '\x1C1E', 
		'\x1C1D', '\x3', '\x2', '\x2', '\x2', '\x1C1E', '\x1C1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C1F', '\x1C21', '\x3', '\x2', '\x2', '\x2', '\x1C20', 
		'\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C20', '\x1C1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C21', '\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x1C24', '\x5', '\x49C', '\x24F', '\x2', '\x1C23', '\x1C22', '\x3', '\x2', 
		'\x2', '\x2', '\x1C23', '\x1C24', '\x3', '\x2', '\x2', '\x2', '\x1C24', 
		'\x1C26', '\x3', '\x2', '\x2', '\x2', '\x1C25', '\x1C27', '\x5', '\x39E', 
		'\x1D0', '\x2', '\x1C26', '\x1C25', '\x3', '\x2', '\x2', '\x2', '\x1C26', 
		'\x1C27', '\x3', '\x2', '\x2', '\x2', '\x1C27', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C28', '\x1C2A', '\t', 'q', '\x2', '\x2', '\x1C29', '\x1C2B', 
		'\x5', '\x498', '\x24D', '\x2', '\x1C2A', '\x1C29', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2A', '\x1C2B', '\x3', '\x2', '\x2', '\x2', '\x1C2B', '\x1C2D', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2C', '\x1C2E', '\x5', '\x39E', '\x1D0', 
		'\x2', '\x1C2D', '\x1C2C', '\x3', '\x2', '\x2', '\x2', '\x1C2D', '\x1C2E', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2E', '\x1CA8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2F', '\x1C31', '\a', '\'', '\x2', '\x2', '\x1C30', '\x1C32', '\x5', 
		'\x39C', '\x1CF', '\x2', '\x1C31', '\x1C30', '\x3', '\x2', '\x2', '\x2', 
		'\x1C31', '\x1C32', '\x3', '\x2', '\x2', '\x2', '\x1C32', '\x1CA8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C33', '\x1CA8', '\t', 'r', '\x2', '\x2', '\x1C34', 
		'\x1C36', '\a', '>', '\x2', '\x2', '\x1C35', '\x1C37', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x1C36', '\x1C35', '\x3', '\x2', '\x2', '\x2', '\x1C36', 
		'\x1C37', '\x3', '\x2', '\x2', '\x2', '\x1C37', '\x1C39', '\x3', '\x2', 
		'\x2', '\x2', '\x1C38', '\x1C3A', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C39', 
		'\x1C38', '\x3', '\x2', '\x2', '\x2', '\x1C39', '\x1C3A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3A', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C3B', 
		'\x1C3D', '\x5', '\x398', '\x1CD', '\x2', '\x1C3C', '\x1C3E', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x1C3D', '\x1C3C', '\x3', '\x2', '\x2', '\x2', '\x1C3D', 
		'\x1C3E', '\x3', '\x2', '\x2', '\x2', '\x1C3E', '\x1C40', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3F', '\x1C41', '\a', '\"', '\x2', '\x2', '\x1C40', 
		'\x1C3F', '\x3', '\x2', '\x2', '\x2', '\x1C40', '\x1C41', '\x3', '\x2', 
		'\x2', '\x2', '\x1C41', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C42', 
		'\x1C44', '\a', '\"', '\x2', '\x2', '\x1C43', '\x1C45', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x1C44', '\x1C43', '\x3', '\x2', '\x2', '\x2', '\x1C44', 
		'\x1C45', '\x3', '\x2', '\x2', '\x2', '\x1C45', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C46', '\x1C47', '\a', '>', '\x2', '\x2', '\x1C47', '\x1C4A', 
		'\a', '\x27B', '\x2', '\x2', '\x1C48', '\x1C4A', '\a', '\x277', '\x2', 
		'\x2', '\x1C49', '\x1C46', '\x3', '\x2', '\x2', '\x2', '\x1C49', '\x1C48', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4A', '\x1C4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4B', '\x1C4D', '\x5', '\x39C', '\x1CF', '\x2', '\x1C4C', '\x1C4E', 
		'\x5', '\x3A0', '\x1D1', '\x2', '\x1C4D', '\x1C4C', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4D', '\x1C4E', '\x3', '\x2', '\x2', '\x2', '\x1C4E', '\x1CA8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4F', '\x1C50', '\a', '\x168', '\x2', 
		'\x2', '\x1C50', '\x1C5A', '\a', '\x277', '\x2', '\x2', '\x1C51', '\x1C5A', 
		'\a', '\x17D', '\x2', '\x2', '\x1C52', '\x1C53', '\a', '\x16B', '\x2', 
		'\x2', '\x1C53', '\x1C5A', '\a', '\x277', '\x2', '\x2', '\x1C54', '\x1C55', 
		'\a', '\x168', '\x2', '\x2', '\x1C55', '\x1C56', '\a', '>', '\x2', '\x2', 
		'\x1C56', '\x1C5A', '\a', '\x27B', '\x2', '\x2', '\x1C57', '\x1C58', '\a', 
		'\x16B', '\x2', '\x2', '\x1C58', '\x1C5A', '\a', '\x27B', '\x2', '\x2', 
		'\x1C59', '\x1C4F', '\x3', '\x2', '\x2', '\x2', '\x1C59', '\x1C51', '\x3', 
		'\x2', '\x2', '\x2', '\x1C59', '\x1C52', '\x3', '\x2', '\x2', '\x2', '\x1C59', 
		'\x1C54', '\x3', '\x2', '\x2', '\x2', '\x1C59', '\x1C57', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5A', '\x1C5B', '\x3', '\x2', '\x2', '\x2', '\x1C5B', 
		'\x1C5D', '\x5', '\x39C', '\x1CF', '\x2', '\x1C5C', '\x1C5E', '\a', '\"', 
		'\x2', '\x2', '\x1C5D', '\x1C5C', '\x3', '\x2', '\x2', '\x2', '\x1C5D', 
		'\x1C5E', '\x3', '\x2', '\x2', '\x2', '\x1C5E', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5F', '\x1C60', '\a', '\x276', '\x2', '\x2', '\x1C60', 
		'\x1CA8', '\x5', '\x39C', '\x1CF', '\x2', '\x1C61', '\x1C63', '\a', '\x292', 
		'\x2', '\x2', '\x1C62', '\x1C64', '\x5', '\x39C', '\x1CF', '\x2', '\x1C63', 
		'\x1C62', '\x3', '\x2', '\x2', '\x2', '\x1C63', '\x1C64', '\x3', '\x2', 
		'\x2', '\x2', '\x1C64', '\x1C66', '\x3', '\x2', '\x2', '\x2', '\x1C65', 
		'\x1C67', '\x5', '\x39E', '\x1D0', '\x2', '\x1C66', '\x1C65', '\x3', '\x2', 
		'\x2', '\x2', '\x1C66', '\x1C67', '\x3', '\x2', '\x2', '\x2', '\x1C67', 
		'\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C68', '\x1CA8', '\a', 'v', '\x2', 
		'\x2', '\x1C69', '\x1C6B', '\a', '\x24C', '\x2', '\x2', '\x1C6A', '\x1C6C', 
		'\x5', '\x3A8', '\x1D5', '\x2', '\x1C6B', '\x1C6A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6B', '\x1C6C', '\x3', '\x2', '\x2', '\x2', '\x1C6C', '\x1CA8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6D', '\x1C6F', '\a', '\x249', '\x2', 
		'\x2', '\x1C6E', '\x1C70', '\x5', '\x3A8', '\x1D5', '\x2', '\x1C6F', '\x1C6E', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6F', '\x1C70', '\x3', '\x2', '\x2', '\x2', 
		'\x1C70', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C71', '\x1C73', '\a', 
		's', '\x2', '\x2', '\x1C72', '\x1C74', '\x5', '\x3A8', '\x1D5', '\x2', 
		'\x1C73', '\x1C72', '\x3', '\x2', '\x2', '\x2', '\x1C73', '\x1C74', '\x3', 
		'\x2', '\x2', '\x2', '\x1C74', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C75', 
		'\x1CA8', '\a', '\x24D', '\x2', '\x2', '\x1C76', '\x1C78', '\a', ')', 
		'\x2', '\x2', '\x1C77', '\x1C79', '\x5', '\x39C', '\x1CF', '\x2', '\x1C78', 
		'\x1C77', '\x3', '\x2', '\x2', '\x2', '\x1C78', '\x1C79', '\x3', '\x2', 
		'\x2', '\x2', '\x1C79', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C7A', 
		'\x1CA8', '\t', 's', '\x2', '\x2', '\x1C7B', '\x1C7C', '\a', '\x127', 
		'\x2', '\x2', '\x1C7C', '\x1CA8', '\a', '\x276', '\x2', '\x2', '\x1C7D', 
		'\x1C81', '\a', '\x127', '\x2', '\x2', '\x1C7E', '\x1C7F', '\a', '>', 
		'\x2', '\x2', '\x1C7F', '\x1C82', '\a', '\x27B', '\x2', '\x2', '\x1C80', 
		'\x1C82', '\a', '\x277', '\x2', '\x2', '\x1C81', '\x1C7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C81', '\x1C80', '\x3', '\x2', '\x2', '\x2', '\x1C81', 
		'\x1C82', '\x3', '\x2', '\x2', '\x2', '\x1C82', '\x1C84', '\x3', '\x2', 
		'\x2', '\x2', '\x1C83', '\x1C85', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C84', 
		'\x1C83', '\x3', '\x2', '\x2', '\x2', '\x1C84', '\x1C85', '\x3', '\x2', 
		'\x2', '\x2', '\x1C85', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C86', 
		'\x1C88', '\a', '\x24F', '\x2', '\x2', '\x1C87', '\x1C89', '\x5', '\x3A0', 
		'\x1D1', '\x2', '\x1C88', '\x1C87', '\x3', '\x2', '\x2', '\x2', '\x1C88', 
		'\x1C89', '\x3', '\x2', '\x2', '\x2', '\x1C89', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8A', '\x1C8C', '\a', '\x246', '\x2', '\x2', '\x1C8B', 
		'\x1C8D', '\x5', '\x39C', '\x1CF', '\x2', '\x1C8C', '\x1C8B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8C', '\x1C8D', '\x3', '\x2', '\x2', '\x2', '\x1C8D', 
		'\x1C8F', '\x3', '\x2', '\x2', '\x2', '\x1C8E', '\x1C90', '\x5', '\x3A0', 
		'\x1D1', '\x2', '\x1C8F', '\x1C8E', '\x3', '\x2', '\x2', '\x2', '\x1C8F', 
		'\x1C90', '\x3', '\x2', '\x2', '\x2', '\x1C90', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C91', '\x1C93', '\a', '\x14E', '\x2', '\x2', '\x1C92', 
		'\x1C94', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C93', '\x1C92', '\x3', '\x2', 
		'\x2', '\x2', '\x1C93', '\x1C94', '\x3', '\x2', '\x2', '\x2', '\x1C94', 
		'\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C95', '\x1C97', '\a', '\x125', 
		'\x2', '\x2', '\x1C96', '\x1C98', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C97', 
		'\x1C96', '\x3', '\x2', '\x2', '\x2', '\x1C97', '\x1C98', '\x3', '\x2', 
		'\x2', '\x2', '\x1C98', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C99', 
		'\x1C9A', '\a', '\xA6', '\x2', '\x2', '\x1C9A', '\x1C9C', '\x5', '\x482', 
		'\x242', '\x2', '\x1C9B', '\x1C9D', '\x5', '\x3A0', '\x1D1', '\x2', '\x1C9C', 
		'\x1C9B', '\x3', '\x2', '\x2', '\x2', '\x1C9C', '\x1C9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9D', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1C9E', 
		'\x1C9F', '\a', '\x1FC', '\x2', '\x2', '\x1C9F', '\x1CA1', '\x5', '\x482', 
		'\x242', '\x2', '\x1CA0', '\x1CA2', '\x5', '\x3A0', '\x1D1', '\x2', '\x1CA1', 
		'\x1CA0', '\x3', '\x2', '\x2', '\x2', '\x1CA1', '\x1CA2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA2', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1CA3', 
		'\x1CA8', '\a', '\x1F7', '\x2', '\x2', '\x1CA4', '\x1CA5', '\x6', '\x1CC', 
		'\xC1', '\x2', '\x1CA5', '\x1CA8', '\a', '\x108', '\x2', '\x2', '\x1CA6', 
		'\x1CA8', '\t', 't', '\x2', '\x2', '\x1CA7', '\x1C14', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA7', '\x1C20', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C28', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C2F', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA7', '\x1C33', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C34', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA7', '\x1C3B', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C42', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C49', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C59', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C5F', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C61', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C68', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C69', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C71', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C75', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C76', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C7A', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C7B', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C7D', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C86', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C8A', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C91', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1C95', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1C99', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1C9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA7', '\x1CA3', '\x3', '\x2', '\x2', '\x2', '\x1CA7', 
		'\x1CA4', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1CA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA8', '\x397', '\x3', '\x2', '\x2', '\x2', '\x1CA9', 
		'\x1CAD', '\a', '\x16B', '\x2', '\x2', '\x1CAA', '\x1CAB', '\a', '\x168', 
		'\x2', '\x2', '\x1CAB', '\x1CAD', '\a', '>', '\x2', '\x2', '\x1CAC', '\x1CA9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CAC', '\x1CAA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CAD', '\x399', '\x3', '\x2', '\x2', '\x2', '\x1CAE', '\x1CB4', '\a', 
		'\x1B7', '\x2', '\x2', '\x1CAF', '\x1CB1', '\a', '\x94', '\x2', '\x2', 
		'\x1CB0', '\x1CB2', '\a', '\x1A2', '\x2', '\x2', '\x1CB1', '\x1CB0', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB1', '\x1CB2', '\x3', '\x2', '\x2', '\x2', '\x1CB2', 
		'\x1CB4', '\x3', '\x2', '\x2', '\x2', '\x1CB3', '\x1CAE', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB3', '\x1CAF', '\x3', '\x2', '\x2', '\x2', '\x1CB4', 
		'\x39B', '\x3', '\x2', '\x2', '\x2', '\x1CB5', '\x1CB8', '\a', '\x30A', 
		'\x2', '\x2', '\x1CB6', '\x1CB9', '\x5', '\x47C', '\x23F', '\x2', '\x1CB7', 
		'\x1CB9', '\a', '\x318', '\x2', '\x2', '\x1CB8', '\x1CB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB8', '\x1CB7', '\x3', '\x2', '\x2', '\x2', '\x1CB9', 
		'\x1CBA', '\x3', '\x2', '\x2', '\x2', '\x1CBA', '\x1CBB', '\a', '\x30B', 
		'\x2', '\x2', '\x1CBB', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x1CBC', 
		'\x1CBE', '\t', 'u', '\x2', '\x2', '\x1CBD', '\x1CBC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CBE', '\x1CBF', '\x3', '\x2', '\x2', '\x2', '\x1CBF', '\x1CBD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CBF', '\x1CC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC0', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x1CC1', '\x1CD0', '\x5', 
		'\x3A2', '\x1D2', '\x2', '\x1CC2', '\x1CD0', '\x5', '\x3A4', '\x1D3', 
		'\x2', '\x1CC3', '\x1CD0', '\a', '\x30', '\x2', '\x2', '\x1CC4', '\x1CC5', 
		'\x5', '\x2F8', '\x17D', '\x2', '\x1CC5', '\x1CC7', '\x5', '\x3AA', '\x1D6', 
		'\x2', '\x1CC6', '\x1CC8', '\a', '\"', '\x2', '\x2', '\x1CC7', '\x1CC6', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC7', '\x1CC8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC8', '\x1CD0', '\x3', '\x2', '\x2', '\x2', '\x1CC9', '\x1CCD', '\a', 
		'\"', '\x2', '\x2', '\x1CCA', '\x1CCB', '\x5', '\x2F8', '\x17D', '\x2', 
		'\x1CCB', '\x1CCC', '\x5', '\x3AA', '\x1D6', '\x2', '\x1CCC', '\x1CCE', 
		'\x3', '\x2', '\x2', '\x2', '\x1CCD', '\x1CCA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CCD', '\x1CCE', '\x3', '\x2', '\x2', '\x2', '\x1CCE', '\x1CD0', '\x3', 
		'\x2', '\x2', '\x2', '\x1CCF', '\x1CC1', '\x3', '\x2', '\x2', '\x2', '\x1CCF', 
		'\x1CC2', '\x3', '\x2', '\x2', '\x2', '\x1CCF', '\x1CC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CCF', '\x1CC4', '\x3', '\x2', '\x2', '\x2', '\x1CCF', 
		'\x1CC9', '\x3', '\x2', '\x2', '\x2', '\x1CD0', '\x3A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD1', '\x1CD3', '\a', '\x15', '\x2', '\x2', '\x1CD2', 
		'\x1CD4', '\a', '\"', '\x2', '\x2', '\x1CD3', '\x1CD2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD3', '\x1CD4', '\x3', '\x2', '\x2', '\x2', '\x1CD4', 
		'\x1CD8', '\x3', '\x2', '\x2', '\x2', '\x1CD5', '\x1CD6', '\a', '\"', 
		'\x2', '\x2', '\x1CD6', '\x1CD8', '\a', '\x15', '\x2', '\x2', '\x1CD7', 
		'\x1CD1', '\x3', '\x2', '\x2', '\x2', '\x1CD7', '\x1CD5', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD8', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x1CD9', 
		'\x1CDB', '\a', '\x260', '\x2', '\x2', '\x1CDA', '\x1CDC', '\a', '\"', 
		'\x2', '\x2', '\x1CDB', '\x1CDA', '\x3', '\x2', '\x2', '\x2', '\x1CDB', 
		'\x1CDC', '\x3', '\x2', '\x2', '\x2', '\x1CDC', '\x1CE0', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDD', '\x1CDE', '\a', '\"', '\x2', '\x2', '\x1CDE', 
		'\x1CE0', '\a', '\x260', '\x2', '\x2', '\x1CDF', '\x1CD9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDF', '\x1CDD', '\x3', '\x2', '\x2', '\x2', '\x1CE0', 
		'\x3A5', '\x3', '\x2', '\x2', '\x2', '\x1CE1', '\x1CE2', '\a', '\x30A', 
		'\x2', '\x2', '\x1CE2', '\x1CE3', '\x5', '\x478', '\x23D', '\x2', '\x1CE3', 
		'\x1CE4', '\a', '\x30B', '\x2', '\x2', '\x1CE4', '\x3A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE5', '\x1CE6', '\a', '\x30A', '\x2', '\x2', '\x1CE6', 
		'\x1CE7', '\a', '\x2ED', '\x2', '\x2', '\x1CE7', '\x1CE8', '\a', '\x30B', 
		'\x2', '\x2', '\x1CE8', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x1CE9', 
		'\x1CEE', '\x5', '\x49E', '\x250', '\x2', '\x1CEA', '\x1CEE', '\a', '\"', 
		'\x2', '\x2', '\x1CEB', '\x1CEC', '\x6', '\x1D6', '\xC2', '\x2', '\x1CEC', 
		'\x1CEE', '\a', '\x82', '\x2', '\x2', '\x1CED', '\x1CE9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CED', '\x1CEA', '\x3', '\x2', '\x2', '\x2', '\x1CED', 
		'\x1CEB', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x3AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEF', '\x1CF5', '\x5', '\x49E', '\x250', '\x2', '\x1CF0', 
		'\x1CF1', '\x6', '\x1D7', '\xC3', '\x2', '\x1CF1', '\x1CF5', '\a', '\x82', 
		'\x2', '\x2', '\x1CF2', '\x1CF3', '\x6', '\x1D7', '\xC4', '\x2', '\x1CF3', 
		'\x1CF5', '\a', '\"', '\x2', '\x2', '\x1CF4', '\x1CEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF4', '\x1CF0', '\x3', '\x2', '\x2', '\x2', '\x1CF4', 
		'\x1CF2', '\x3', '\x2', '\x2', '\x2', '\x1CF5', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF6', '\x1CFD', '\x5', '\x3B2', '\x1DA', '\x2', '\x1CF7', 
		'\x1CF9', '\a', '\x307', '\x2', '\x2', '\x1CF8', '\x1CF7', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF8', '\x1CF9', '\x3', '\x2', '\x2', '\x2', '\x1CF9', 
		'\x1CFA', '\x3', '\x2', '\x2', '\x2', '\x1CFA', '\x1CFC', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1CFB', '\x1CF8', '\x3', '\x2', '\x2', '\x2', '\x1CFC', 
		'\x1CFF', '\x3', '\x2', '\x2', '\x2', '\x1CFD', '\x1CFB', '\x3', '\x2', 
		'\x2', '\x2', '\x1CFD', '\x1CFE', '\x3', '\x2', '\x2', '\x2', '\x1CFE', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x1CFF', '\x1CFD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D00', '\x1D02', '\x5', '\x3B2', '\x1DA', '\x2', '\x1D01', 
		'\x1D00', '\x3', '\x2', '\x2', '\x2', '\x1D02', '\x1D03', '\x3', '\x2', 
		'\x2', '\x2', '\x1D03', '\x1D01', '\x3', '\x2', '\x2', '\x2', '\x1D03', 
		'\x1D04', '\x3', '\x2', '\x2', '\x2', '\x1D04', '\x3B1', '\x3', '\x2', 
		'\x2', '\x2', '\x1D05', '\x1D07', '\a', '\xA5', '\x2', '\x2', '\x1D06', 
		'\x1D08', '\a', '\x2F0', '\x2', '\x2', '\x1D07', '\x1D06', '\x3', '\x2', 
		'\x2', '\x2', '\x1D07', '\x1D08', '\x3', '\x2', '\x2', '\x2', '\x1D08', 
		'\x1D09', '\x3', '\x2', '\x2', '\x2', '\x1D09', '\x1D87', '\x5', '\x448', 
		'\x225', '\x2', '\x1D0A', '\x1D0B', '\x6', '\x1DA', '\xC5', '\x2', '\x1D0B', 
		'\x1D0D', '\a', '\x2D3', '\x2', '\x2', '\x1D0C', '\x1D0E', '\x5', '\x4A8', 
		'\x255', '\x2', '\x1D0D', '\x1D0C', '\x3', '\x2', '\x2', '\x2', '\x1D0D', 
		'\x1D0E', '\x3', '\x2', '\x2', '\x2', '\x1D0E', '\x1D11', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0F', '\x1D12', '\a', '\x17A', '\x2', '\x2', '\x1D10', 
		'\x1D12', '\x5', '\x49E', '\x250', '\x2', '\x1D11', '\x1D0F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D11', '\x1D10', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1D87', '\x3', '\x2', '\x2', '\x2', '\x1D13', '\x1D15', '\a', '\x145', 
		'\x2', '\x2', '\x1D14', '\x1D16', '\a', '\x2F0', '\x2', '\x2', '\x1D15', 
		'\x1D14', '\x3', '\x2', '\x2', '\x2', '\x1D15', '\x1D16', '\x3', '\x2', 
		'\x2', '\x2', '\x1D16', '\x1D17', '\x3', '\x2', '\x2', '\x2', '\x1D17', 
		'\x1D87', '\x5', '\x47A', '\x23E', '\x2', '\x1D18', '\x1D1A', '\a', '\x15A', 
		'\x2', '\x2', '\x1D19', '\x1D1B', '\a', '\x2F0', '\x2', '\x2', '\x1D1A', 
		'\x1D19', '\x3', '\x2', '\x2', '\x2', '\x1D1A', '\x1D1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1B', '\x1D1C', '\x3', '\x2', '\x2', '\x2', '\x1D1C', 
		'\x1D87', '\x5', '\x47A', '\x23E', '\x2', '\x1D1D', '\x1D1F', '\a', '\x1B', 
		'\x2', '\x2', '\x1D1E', '\x1D20', '\a', '\x2F0', '\x2', '\x2', '\x1D1F', 
		'\x1D1E', '\x3', '\x2', '\x2', '\x2', '\x1D1F', '\x1D20', '\x3', '\x2', 
		'\x2', '\x2', '\x1D20', '\x1D21', '\x3', '\x2', '\x2', '\x2', '\x1D21', 
		'\x1D87', '\x5', '\x476', '\x23C', '\x2', '\x1D22', '\x1D24', '\a', '\x198', 
		'\x2', '\x2', '\x1D23', '\x1D25', '\a', '\x2F0', '\x2', '\x2', '\x1D24', 
		'\x1D23', '\x3', '\x2', '\x2', '\x2', '\x1D24', '\x1D25', '\x3', '\x2', 
		'\x2', '\x2', '\x1D25', '\x1D26', '\x3', '\x2', '\x2', '\x2', '\x1D26', 
		'\x1D87', '\x5', '\x484', '\x243', '\x2', '\x1D27', '\x1D29', '\a', 'M', 
		'\x2', '\x2', '\x1D28', '\x1D2A', '\a', '\x2F0', '\x2', '\x2', '\x1D29', 
		'\x1D28', '\x3', '\x2', '\x2', '\x2', '\x1D29', '\x1D2A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2A', '\x1D2B', '\x3', '\x2', '\x2', '\x2', '\x1D2B', 
		'\x1D87', '\x5', '\x484', '\x243', '\x2', '\x1D2C', '\x1D2D', '\x6', '\x1DA', 
		'\xC6', '\x2', '\x1D2D', '\x1D2F', '\a', 'S', '\x2', '\x2', '\x1D2E', 
		'\x1D30', '\a', '\x2F0', '\x2', '\x2', '\x1D2F', '\x1D2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2F', '\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1D30', 
		'\x1D31', '\x3', '\x2', '\x2', '\x2', '\x1D31', '\x1D87', '\x5', '\x486', 
		'\x244', '\x2', '\x1D32', '\x1D33', '\x6', '\x1DA', '\xC7', '\x2', '\x1D33', 
		'\x1D35', '\a', '\xA0', '\x2', '\x2', '\x1D34', '\x1D36', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D35', '\x1D34', '\x3', '\x2', '\x2', '\x2', '\x1D35', 
		'\x1D36', '\x3', '\x2', '\x2', '\x2', '\x1D36', '\x1D37', '\x3', '\x2', 
		'\x2', '\x2', '\x1D37', '\x1D87', '\x5', '\x486', '\x244', '\x2', '\x1D38', 
		'\x1D3A', '\a', '\x1A', '\x2', '\x2', '\x1D39', '\x1D3B', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D3A', '\x1D39', '\x3', '\x2', '\x2', '\x2', '\x1D3A', 
		'\x1D3B', '\x3', '\x2', '\x2', '\x2', '\x1D3B', '\x1D3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3C', '\x1D87', '\x5', '\x47A', '\x23E', '\x2', '\x1D3D', 
		'\x1D3F', '\a', '\x191', '\x2', '\x2', '\x1D3E', '\x1D40', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D3F', '\x1D3E', '\x3', '\x2', '\x2', '\x2', '\x1D3F', 
		'\x1D40', '\x3', '\x2', '\x2', '\x2', '\x1D40', '\x1D41', '\x3', '\x2', 
		'\x2', '\x2', '\x1D41', '\x1D87', '\x5', '\x3B4', '\x1DB', '\x2', '\x1D42', 
		'\x1D44', '\t', 'v', '\x2', '\x2', '\x1D43', '\x1D45', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D44', '\x1D43', '\x3', '\x2', '\x2', '\x2', '\x1D44', 
		'\x1D45', '\x3', '\x2', '\x2', '\x2', '\x1D45', '\x1D46', '\x3', '\x2', 
		'\x2', '\x2', '\x1D46', '\x1D87', '\x5', '\x3B4', '\x1DB', '\x2', '\x1D47', 
		'\x1D49', '\t', 'w', '\x2', '\x2', '\x1D48', '\x1D4A', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D49', '\x1D48', '\x3', '\x2', '\x2', '\x2', '\x1D49', 
		'\x1D4A', '\x3', '\x2', '\x2', '\x2', '\x1D4A', '\x1D4B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4B', '\x1D87', '\x5', '\x476', '\x23C', '\x2', '\x1D4C', 
		'\x1D4E', '\a', '\x86', '\x2', '\x2', '\x1D4D', '\x1D4F', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D4E', '\x1D4D', '\x3', '\x2', '\x2', '\x2', '\x1D4E', 
		'\x1D4F', '\x3', '\x2', '\x2', '\x2', '\x1D4F', '\x1D50', '\x3', '\x2', 
		'\x2', '\x2', '\x1D50', '\x1D87', '\x5', '\x476', '\x23C', '\x2', '\x1D51', 
		'\x1D53', '\a', '\x1E8', '\x2', '\x2', '\x1D52', '\x1D54', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D53', '\x1D52', '\x3', '\x2', '\x2', '\x2', '\x1D53', 
		'\x1D54', '\x3', '\x2', '\x2', '\x2', '\x1D54', '\x1D55', '\x3', '\x2', 
		'\x2', '\x2', '\x1D55', '\x1D87', '\t', 'x', '\x2', '\x2', '\x1D56', '\x1D58', 
		'\a', '\x262', '\x2', '\x2', '\x1D57', '\x1D59', '\a', '\x2F0', '\x2', 
		'\x2', '\x1D58', '\x1D57', '\x3', '\x2', '\x2', '\x2', '\x1D58', '\x1D59', 
		'\x3', '\x2', '\x2', '\x2', '\x1D59', '\x1D5A', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5A', '\x1D5B', '\a', '\x30A', '\x2', '\x2', '\x1D5B', '\x1D5C', '\x5', 
		'\x452', '\x22A', '\x2', '\x1D5C', '\x1D5D', '\a', '\x30B', '\x2', '\x2', 
		'\x1D5D', '\x1D87', '\x3', '\x2', '\x2', '\x2', '\x1D5E', '\x1D87', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1D5F', '\x1D87', '\x5', '\x3B6', '\x1DC', 
		'\x2', '\x1D60', '\x1D62', '\a', '\xF5', '\x2', '\x2', '\x1D61', '\x1D63', 
		'\a', '\x2F0', '\x2', '\x2', '\x1D62', '\x1D61', '\x3', '\x2', '\x2', 
		'\x2', '\x1D62', '\x1D63', '\x3', '\x2', '\x2', '\x2', '\x1D63', '\x1D64', 
		'\x3', '\x2', '\x2', '\x2', '\x1D64', '\x1D87', '\t', 'y', '\x2', '\x2', 
		'\x1D65', '\x1D66', '\a', 'r', '\x2', '\x2', '\x1D66', '\x1D68', '\a', 
		'\x8D', '\x2', '\x2', '\x1D67', '\x1D69', '\a', '\x2F0', '\x2', '\x2', 
		'\x1D68', '\x1D67', '\x3', '\x2', '\x2', '\x2', '\x1D68', '\x1D69', '\x3', 
		'\x2', '\x2', '\x2', '\x1D69', '\x1D6A', '\x3', '\x2', '\x2', '\x2', '\x1D6A', 
		'\x1D87', '\x5', '\x486', '\x244', '\x2', '\x1D6B', '\x1D6C', '\a', '\xEE', 
		'\x2', '\x2', '\x1D6C', '\x1D6E', '\a', '\x8D', '\x2', '\x2', '\x1D6D', 
		'\x1D6F', '\a', '\x2F0', '\x2', '\x2', '\x1D6E', '\x1D6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6E', '\x1D6F', '\x3', '\x2', '\x2', '\x2', '\x1D6F', 
		'\x1D70', '\x3', '\x2', '\x2', '\x2', '\x1D70', '\x1D87', '\x5', '\x486', 
		'\x244', '\x2', '\x1D71', '\x1D77', '\a', '\x23E', '\x2', '\x2', '\x1D72', 
		'\x1D74', '\x6', '\x1DA', '\xC8', '\x2', '\x1D73', '\x1D75', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D74', '\x1D73', '\x3', '\x2', '\x2', '\x2', '\x1D74', 
		'\x1D75', '\x3', '\x2', '\x2', '\x2', '\x1D75', '\x1D78', '\x3', '\x2', 
		'\x2', '\x2', '\x1D76', '\x1D78', '\x3', '\x2', '\x2', '\x2', '\x1D77', 
		'\x1D72', '\x3', '\x2', '\x2', '\x2', '\x1D77', '\x1D76', '\x3', '\x2', 
		'\x2', '\x2', '\x1D78', '\x1D79', '\x3', '\x2', '\x2', '\x2', '\x1D79', 
		'\x1D87', '\x5', '\x46A', '\x236', '\x2', '\x1D7A', '\x1D7B', '\a', '\x22B', 
		'\x2', '\x2', '\x1D7B', '\x1D87', '\t', 'z', '\x2', '\x2', '\x1D7C', '\x1D7E', 
		'\a', 'V', '\x2', '\x2', '\x1D7D', '\x1D7F', '\a', '\x2F0', '\x2', '\x2', 
		'\x1D7E', '\x1D7D', '\x3', '\x2', '\x2', '\x2', '\x1D7E', '\x1D7F', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7F', '\x1D80', '\x3', '\x2', '\x2', '\x2', '\x1D80', 
		'\x1D87', '\x5', '\x486', '\x244', '\x2', '\x1D81', '\x1D83', '\a', '\x10A', 
		'\x2', '\x2', '\x1D82', '\x1D84', '\a', '\x2F0', '\x2', '\x2', '\x1D83', 
		'\x1D82', '\x3', '\x2', '\x2', '\x2', '\x1D83', '\x1D84', '\x3', '\x2', 
		'\x2', '\x2', '\x1D84', '\x1D85', '\x3', '\x2', '\x2', '\x2', '\x1D85', 
		'\x1D87', '\x5', '\x476', '\x23C', '\x2', '\x1D86', '\x1D05', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D0A', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D13', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D18', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D1D', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D22', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D27', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D2C', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D32', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D38', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D3D', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D42', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D47', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D4C', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D51', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D56', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D5E', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D5F', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D60', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D65', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D6B', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D71', '\x3', '\x2', 
		'\x2', '\x2', '\x1D86', '\x1D7A', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D7C', '\x3', '\x2', '\x2', '\x2', '\x1D86', '\x1D81', '\x3', '\x2', 
		'\x2', '\x2', '\x1D87', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x1D88', 
		'\x1D8B', '\x5', '\x476', '\x23C', '\x2', '\x1D89', '\x1D8B', '\a', '\x82', 
		'\x2', '\x2', '\x1D8A', '\x1D88', '\x3', '\x2', '\x2', '\x2', '\x1D8A', 
		'\x1D89', '\x3', '\x2', '\x2', '\x2', '\x1D8B', '\x3B5', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8C', '\x1D8E', '\a', '\x82', '\x2', '\x2', '\x1D8D', 
		'\x1D8C', '\x3', '\x2', '\x2', '\x2', '\x1D8D', '\x1D8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8E', '\x1D8F', '\x3', '\x2', '\x2', '\x2', '\x1D8F', 
		'\x1D91', '\a', 'G', '\x2', '\x2', '\x1D90', '\x1D92', '\a', '\x2F0', 
		'\x2', '\x2', '\x1D91', '\x1D90', '\x3', '\x2', '\x2', '\x2', '\x1D91', 
		'\x1D92', '\x3', '\x2', '\x2', '\x2', '\x1D92', '\x1D93', '\x3', '\x2', 
		'\x2', '\x2', '\x1D93', '\x1D94', '\x5', '\x3AC', '\x1D7', '\x2', '\x1D94', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x1D95', '\x1D97', '\a', '\x82', 
		'\x2', '\x2', '\x1D96', '\x1D95', '\x3', '\x2', '\x2', '\x2', '\x1D96', 
		'\x1D97', '\x3', '\x2', '\x2', '\x2', '\x1D97', '\x1D98', '\x3', '\x2', 
		'\x2', '\x2', '\x1D98', '\x1D9A', '\a', '\xA0', '\x2', '\x2', '\x1D99', 
		'\x1D9B', '\a', '\x2F0', '\x2', '\x2', '\x1D9A', '\x1D99', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9A', '\x1D9B', '\x3', '\x2', '\x2', '\x2', '\x1D9B', 
		'\x1D9C', '\x3', '\x2', '\x2', '\x2', '\x1D9C', '\x1D9D', '\x5', '\x484', 
		'\x243', '\x2', '\x1D9D', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x1D9E', 
		'\x1DA0', '\a', '\x82', '\x2', '\x2', '\x1D9F', '\x1D9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9F', '\x1DA0', '\x3', '\x2', '\x2', '\x2', '\x1DA0', 
		'\x1DA1', '\x3', '\x2', '\x2', '\x2', '\x1DA1', '\x1DA3', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x1DA2', '\x1DA4', '\a', '\x2F0', '\x2', '\x2', '\x1DA3', 
		'\x1DA2', '\x3', '\x2', '\x2', '\x2', '\x1DA3', '\x1DA4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA4', '\x1DA5', '\x3', '\x2', '\x2', '\x2', '\x1DA5', 
		'\x1DA6', '\x5', '\x3AA', '\x1D6', '\x2', '\x1DA6', '\x3BB', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA7', '\x1DA8', '\a', '\x197', '\x2', '\x2', '\x1DA8', 
		'\x1DA9', '\a', '/', '\x2', '\x2', '\x1DA9', '\x1DAC', '\x5', '\x3BE', 
		'\x1E0', '\x2', '\x1DAA', '\x1DAB', '\a', '\x196', '\x2', '\x2', '\x1DAB', 
		'\x1DAD', '\x5', '\x478', '\x23D', '\x2', '\x1DAC', '\x1DAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DAC', '\x1DAD', '\x3', '\x2', '\x2', '\x2', '\x1DAD', 
		'\x1DAF', '\x3', '\x2', '\x2', '\x2', '\x1DAE', '\x1DB0', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x1DAF', '\x1DAE', '\x3', '\x2', '\x2', '\x2', '\x1DAF', 
		'\x1DB0', '\x3', '\x2', '\x2', '\x2', '\x1DB0', '\x1DB2', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB1', '\x1DB3', '\x5', '\x3C4', '\x1E3', '\x2', '\x1DB2', 
		'\x1DB1', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB3', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x1DB4', 
		'\x1DB6', '\a', '\x117', '\x2', '\x2', '\x1DB5', '\x1DB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB5', '\x1DB6', '\x3', '\x2', '\x2', '\x2', '\x1DB6', 
		'\x1DB7', '\x3', '\x2', '\x2', '\x2', '\x1DB7', '\x1DB9', '\a', '\x10B', 
		'\x2', '\x2', '\x1DB8', '\x1DBA', '\x5', '\x3C2', '\x1E2', '\x2', '\x1DB9', 
		'\x1DB8', '\x3', '\x2', '\x2', '\x2', '\x1DB9', '\x1DBA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DBA', '\x1DBB', '\x3', '\x2', '\x2', '\x2', '\x1DBB', 
		'\x1DBD', '\a', '\x30A', '\x2', '\x2', '\x1DBC', '\x1DBE', '\x5', '\x46C', 
		'\x237', '\x2', '\x1DBD', '\x1DBC', '\x3', '\x2', '\x2', '\x2', '\x1DBD', 
		'\x1DBE', '\x3', '\x2', '\x2', '\x2', '\x1DBE', '\x1DBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DBF', '\x1DD6', '\a', '\x30B', '\x2', '\x2', '\x1DC0', 
		'\x1DC2', '\a', '\x117', '\x2', '\x2', '\x1DC1', '\x1DC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC1', '\x1DC2', '\x3', '\x2', '\x2', '\x2', '\x1DC2', 
		'\x1DC3', '\x3', '\x2', '\x2', '\x2', '\x1DC3', '\x1DC4', '\a', '\xDE', 
		'\x2', '\x2', '\x1DC4', '\x1DC5', '\a', '\x30A', '\x2', '\x2', '\x1DC5', 
		'\x1DC6', '\x5', '\x2B0', '\x159', '\x2', '\x1DC6', '\x1DC7', '\a', '\x30B', 
		'\x2', '\x2', '\x1DC7', '\x1DD6', '\x3', '\x2', '\x2', '\x2', '\x1DC8', 
		'\x1DD3', '\t', '{', '\x2', '\x2', '\x1DC9', '\x1DCA', '\a', '\x30A', 
		'\x2', '\x2', '\x1DCA', '\x1DCB', '\x5', '\x2B0', '\x159', '\x2', '\x1DCB', 
		'\x1DCC', '\a', '\x30B', '\x2', '\x2', '\x1DCC', '\x1DD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DCD', '\x1DCE', '\a', 'I', '\x2', '\x2', '\x1DCE', '\x1DD0', 
		'\a', '\x30A', '\x2', '\x2', '\x1DCF', '\x1DD1', '\x5', '\x46C', '\x237', 
		'\x2', '\x1DD0', '\x1DCF', '\x3', '\x2', '\x2', '\x2', '\x1DD0', '\x1DD1', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD1', '\x1DD2', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD2', '\x1DD4', '\a', '\x30B', '\x2', '\x2', '\x1DD3', '\x1DC9', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD3', '\x1DCD', '\x3', '\x2', '\x2', '\x2', '\x1DD4', 
		'\x1DD6', '\x3', '\x2', '\x2', '\x2', '\x1DD5', '\x1DB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD5', '\x1DC1', '\x3', '\x2', '\x2', '\x2', '\x1DD5', 
		'\x1DC8', '\x3', '\x2', '\x2', '\x2', '\x1DD6', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD7', '\x1DD8', '\a', '\x233', '\x2', '\x2', '\x1DD8', 
		'\x1DDA', '\a', '/', '\x2', '\x2', '\x1DD9', '\x1DDB', '\a', '\x117', 
		'\x2', '\x2', '\x1DDA', '\x1DD9', '\x3', '\x2', '\x2', '\x2', '\x1DDA', 
		'\x1DDB', '\x3', '\x2', '\x2', '\x2', '\x1DDB', '\x1DE6', '\x3', '\x2', 
		'\x2', '\x2', '\x1DDC', '\x1DDD', '\a', '\xDE', '\x2', '\x2', '\x1DDD', 
		'\x1DDE', '\a', '\x30A', '\x2', '\x2', '\x1DDE', '\x1DDF', '\x5', '\x2B0', 
		'\x159', '\x2', '\x1DDF', '\x1DE0', '\a', '\x30B', '\x2', '\x2', '\x1DE0', 
		'\x1DE7', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DE3', '\a', '\x10B', 
		'\x2', '\x2', '\x1DE2', '\x1DE4', '\x5', '\x3C2', '\x1E2', '\x2', '\x1DE3', 
		'\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DE3', '\x1DE4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE4', '\x1DE5', '\x3', '\x2', '\x2', '\x2', '\x1DE5', 
		'\x1DE7', '\x5', '\x46E', '\x238', '\x2', '\x1DE6', '\x1DDC', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE6', '\x1DE1', '\x3', '\x2', '\x2', '\x2', '\x1DE7', 
		'\x1DEA', '\x3', '\x2', '\x2', '\x2', '\x1DE8', '\x1DE9', '\a', '\x232', 
		'\x2', '\x2', '\x1DE9', '\x1DEB', '\x5', '\x478', '\x23D', '\x2', '\x1DEA', 
		'\x1DE8', '\x3', '\x2', '\x2', '\x2', '\x1DEA', '\x1DEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1DEB', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x1DEC', 
		'\x1DED', '\x6', '\x1E2', '\xC9', '\x2', '\x1DED', '\x1DEE', '\a', '\v', 
		'\x2', '\x2', '\x1DEE', '\x1DEF', '\a', '\x2F0', '\x2', '\x2', '\x1DEF', 
		'\x1DF0', '\x5', '\x478', '\x23D', '\x2', '\x1DF0', '\x3C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF1', '\x1DF2', '\a', '\x30A', '\x2', '\x2', '\x1DF2', 
		'\x1DF7', '\x5', '\x3C6', '\x1E4', '\x2', '\x1DF3', '\x1DF4', '\a', '\x307', 
		'\x2', '\x2', '\x1DF4', '\x1DF6', '\x5', '\x3C6', '\x1E4', '\x2', '\x1DF5', 
		'\x1DF3', '\x3', '\x2', '\x2', '\x2', '\x1DF6', '\x1DF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF7', '\x1DF5', '\x3', '\x2', '\x2', '\x2', '\x1DF7', 
		'\x1DF8', '\x3', '\x2', '\x2', '\x2', '\x1DF8', '\x1DFA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF9', '\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DFA', 
		'\x1DFB', '\a', '\x30B', '\x2', '\x2', '\x1DFB', '\x3C5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DFC', '\x1DFD', '\a', '\x197', '\x2', '\x2', '\x1DFD', 
		'\x1E08', '\x5', '\x46A', '\x236', '\x2', '\x1DFE', '\x1DFF', '\a', '\x274', 
		'\x2', '\x2', '\x1DFF', '\x1E00', '\a', '\x113', '\x2', '\x2', '\x1E00', 
		'\x1E03', '\a', '\x247', '\x2', '\x2', '\x1E01', '\x1E04', '\x5', '\x3CE', 
		'\x1E8', '\x2', '\x1E02', '\x1E04', '\a', '\x14B', '\x2', '\x2', '\x1E03', 
		'\x1E01', '\x3', '\x2', '\x2', '\x2', '\x1E03', '\x1E02', '\x3', '\x2', 
		'\x2', '\x2', '\x1E04', '\x1E09', '\x3', '\x2', '\x2', '\x2', '\x1E05', 
		'\x1E06', '\a', '\x274', '\x2', '\x2', '\x1E06', '\x1E07', '\a', '\xFD', 
		'\x2', '\x2', '\x1E07', '\x1E09', '\x5', '\x3C8', '\x1E5', '\x2', '\x1E08', 
		'\x1DFE', '\x3', '\x2', '\x2', '\x2', '\x1E08', '\x1E05', '\x3', '\x2', 
		'\x2', '\x2', '\x1E08', '\x1E09', '\x3', '\x2', '\x2', '\x2', '\x1E09', 
		'\x1E0D', '\x3', '\x2', '\x2', '\x2', '\x1E0A', '\x1E0C', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\x1E0B', '\x1E0A', '\x3', '\x2', '\x2', '\x2', '\x1E0C', 
		'\x1E0F', '\x3', '\x2', '\x2', '\x2', '\x1E0D', '\x1E0B', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0D', '\x1E0E', '\x3', '\x2', '\x2', '\x2', '\x1E0E', 
		'\x1E1B', '\x3', '\x2', '\x2', '\x2', '\x1E0F', '\x1E0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E10', '\x1E11', '\a', '\x30A', '\x2', '\x2', '\x1E11', 
		'\x1E16', '\x5', '\x3CC', '\x1E7', '\x2', '\x1E12', '\x1E13', '\a', '\x307', 
		'\x2', '\x2', '\x1E13', '\x1E15', '\x5', '\x3CC', '\x1E7', '\x2', '\x1E14', 
		'\x1E12', '\x3', '\x2', '\x2', '\x2', '\x1E15', '\x1E18', '\x3', '\x2', 
		'\x2', '\x2', '\x1E16', '\x1E14', '\x3', '\x2', '\x2', '\x2', '\x1E16', 
		'\x1E17', '\x3', '\x2', '\x2', '\x2', '\x1E17', '\x1E19', '\x3', '\x2', 
		'\x2', '\x2', '\x1E18', '\x1E16', '\x3', '\x2', '\x2', '\x2', '\x1E19', 
		'\x1E1A', '\a', '\x30B', '\x2', '\x2', '\x1E1A', '\x1E1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1B', '\x1E10', '\x3', '\x2', '\x2', '\x2', '\x1E1B', 
		'\x1E1C', '\x3', '\x2', '\x2', '\x2', '\x1E1C', '\x3C7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1D', '\x1E2A', '\x5', '\x3CE', '\x1E8', '\x2', '\x1E1E', 
		'\x1E1F', '\a', '\x30A', '\x2', '\x2', '\x1E1F', '\x1E24', '\x5', '\x3CE', 
		'\x1E8', '\x2', '\x1E20', '\x1E21', '\a', '\x307', '\x2', '\x2', '\x1E21', 
		'\x1E23', '\x5', '\x3CE', '\x1E8', '\x2', '\x1E22', '\x1E20', '\x3', '\x2', 
		'\x2', '\x2', '\x1E23', '\x1E26', '\x3', '\x2', '\x2', '\x2', '\x1E24', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1E24', '\x1E25', '\x3', '\x2', 
		'\x2', '\x2', '\x1E25', '\x1E27', '\x3', '\x2', '\x2', '\x2', '\x1E26', 
		'\x1E24', '\x3', '\x2', '\x2', '\x2', '\x1E27', '\x1E28', '\a', '\x30B', 
		'\x2', '\x2', '\x1E28', '\x1E2A', '\x3', '\x2', '\x2', '\x2', '\x1E29', 
		'\x1E1D', '\x3', '\x2', '\x2', '\x2', '\x1E29', '\x1E1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2A', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x1E2B', 
		'\x1E2D', '\a', '\x23E', '\x2', '\x2', '\x1E2C', '\x1E2E', '\a', '\x2F0', 
		'\x2', '\x2', '\x1E2D', '\x1E2C', '\x3', '\x2', '\x2', '\x2', '\x1E2D', 
		'\x1E2E', '\x3', '\x2', '\x2', '\x2', '\x1E2E', '\x1E2F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2F', '\x1E4E', '\x5', '\x46A', '\x236', '\x2', '\x1E30', 
		'\x1E32', '\a', '\x22B', '\x2', '\x2', '\x1E31', '\x1E30', '\x3', '\x2', 
		'\x2', '\x2', '\x1E31', '\x1E32', '\x3', '\x2', '\x2', '\x2', '\x1E32', 
		'\x1E33', '\x3', '\x2', '\x2', '\x2', '\x1E33', '\x1E35', '\a', '\xA5', 
		'\x2', '\x2', '\x1E34', '\x1E36', '\a', '\x2F0', '\x2', '\x2', '\x1E35', 
		'\x1E34', '\x3', '\x2', '\x2', '\x2', '\x1E35', '\x1E36', '\x3', '\x2', 
		'\x2', '\x2', '\x1E36', '\x1E37', '\x3', '\x2', '\x2', '\x2', '\x1E37', 
		'\x1E4E', '\x5', '\x448', '\x225', '\x2', '\x1E38', '\x1E3A', '\a', '\x172', 
		'\x2', '\x2', '\x1E39', '\x1E3B', '\a', '\x2F0', '\x2', '\x2', '\x1E3A', 
		'\x1E39', '\x3', '\x2', '\x2', '\x2', '\x1E3A', '\x1E3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3B', '\x1E3C', '\x3', '\x2', '\x2', '\x2', '\x1E3C', 
		'\x1E4E', '\x5', '\x478', '\x23D', '\x2', '\x1E3D', '\x1E3F', '\t', '|', 
		'\x2', '\x2', '\x1E3E', '\x1E40', '\a', '\x2F0', '\x2', '\x2', '\x1E3F', 
		'\x1E3E', '\x3', '\x2', '\x2', '\x2', '\x1E3F', '\x1E40', '\x3', '\x2', 
		'\x2', '\x2', '\x1E40', '\x1E41', '\x3', '\x2', '\x2', '\x2', '\x1E41', 
		'\x1E4E', '\x5', '\x478', '\x23D', '\x2', '\x1E42', '\x1E43', '\t', '}', 
		'\x2', '\x2', '\x1E43', '\x1E45', '\a', '\x8D', '\x2', '\x2', '\x1E44', 
		'\x1E46', '\a', '\x2F0', '\x2', '\x2', '\x1E45', '\x1E44', '\x3', '\x2', 
		'\x2', '\x2', '\x1E45', '\x1E46', '\x3', '\x2', '\x2', '\x2', '\x1E46', 
		'\x1E47', '\x3', '\x2', '\x2', '\x2', '\x1E47', '\x1E4E', '\x5', '\x48A', 
		'\x246', '\x2', '\x1E48', '\x1E4A', '\a', 'M', '\x2', '\x2', '\x1E49', 
		'\x1E4B', '\a', '\x2F0', '\x2', '\x2', '\x1E4A', '\x1E49', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4A', '\x1E4B', '\x3', '\x2', '\x2', '\x2', '\x1E4B', 
		'\x1E4C', '\x3', '\x2', '\x2', '\x2', '\x1E4C', '\x1E4E', '\x5', '\x48A', 
		'\x246', '\x2', '\x1E4D', '\x1E2B', '\x3', '\x2', '\x2', '\x2', '\x1E4D', 
		'\x1E31', '\x3', '\x2', '\x2', '\x2', '\x1E4D', '\x1E38', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4D', '\x1E3D', '\x3', '\x2', '\x2', '\x2', '\x1E4D', 
		'\x1E42', '\x3', '\x2', '\x2', '\x2', '\x1E4D', '\x1E48', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4E', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x1E4F', 
		'\x1E50', '\a', '\x233', '\x2', '\x2', '\x1E50', '\x1E54', '\x5', '\x49E', 
		'\x250', '\x2', '\x1E51', '\x1E53', '\x5', '\x3CA', '\x1E6', '\x2', '\x1E52', 
		'\x1E51', '\x3', '\x2', '\x2', '\x2', '\x1E53', '\x1E56', '\x3', '\x2', 
		'\x2', '\x2', '\x1E54', '\x1E52', '\x3', '\x2', '\x2', '\x2', '\x1E54', 
		'\x1E55', '\x3', '\x2', '\x2', '\x2', '\x1E55', '\x3CD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E56', '\x1E54', '\x3', '\x2', '\x2', '\x2', '\x1E57', 
		'\x1E58', '\a', '\x30A', '\x2', '\x2', '\x1E58', '\x1E5D', '\x5', '\x3D0', 
		'\x1E9', '\x2', '\x1E59', '\x1E5A', '\a', '\x307', '\x2', '\x2', '\x1E5A', 
		'\x1E5C', '\x5', '\x3D0', '\x1E9', '\x2', '\x1E5B', '\x1E59', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5C', '\x1E5F', '\x3', '\x2', '\x2', '\x2', '\x1E5D', 
		'\x1E5B', '\x3', '\x2', '\x2', '\x2', '\x1E5D', '\x1E5E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5E', '\x1E60', '\x3', '\x2', '\x2', '\x2', '\x1E5F', 
		'\x1E5D', '\x3', '\x2', '\x2', '\x2', '\x1E60', '\x1E61', '\a', '\x30B', 
		'\x2', '\x2', '\x1E61', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x1E62', 
		'\x1E65', '\x5', '\x2B0', '\x159', '\x2', '\x1E63', '\x1E65', '\a', '\x14B', 
		'\x2', '\x2', '\x1E64', '\x1E62', '\x3', '\x2', '\x2', '\x2', '\x1E64', 
		'\x1E63', '\x3', '\x2', '\x2', '\x2', '\x1E65', '\x3D1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E66', '\x1E67', '\a', '\x84', '\x2', '\x2', '\x1E67', 
		'\x1E68', '\a', '\x2F0', '\x2', '\x2', '\x1E68', '\x1E69', '\x5', '\x404', 
		'\x203', '\x2', '\x1E69', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x1E6A', 
		'\x1E6B', '\a', '\xE9', '\x2', '\x2', '\x1E6B', '\x1E6C', '\a', '\xB0', 
		'\x2', '\x2', '\x1E6C', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x1E6D', 
		'\x1E6E', '\a', '\xE9', '\x2', '\x2', '\x1E6E', '\x1E6F', '\x5', '\x2FA', 
		'\x17E', '\x2', '\x1E6F', '\x1E70', '\a', '\xB0', '\x2', '\x2', '\x1E70', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x1E71', '\x1E73', '\t', '~', '\x2', 
		'\x2', '\x1E72', '\x1E71', '\x3', '\x2', '\x2', '\x2', '\x1E72', '\x1E73', 
		'\x3', '\x2', '\x2', '\x2', '\x1E73', '\x1E74', '\x3', '\x2', '\x2', '\x2', 
		'\x1E74', '\x1E75', '\x5', '\x3DA', '\x1EE', '\x2', '\x1E75', '\x3D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E76', '\x1E77', '\x5', '\x456', '\x22C', 
		'\x2', '\x1E77', '\x1E78', '\x5', '\x3DE', '\x1F0', '\x2', '\x1E78', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1E79', '\x1E7A', '\a', 'G', '\x2', '\x2', 
		'\x1E7A', '\x1E7B', '\x5', '\x3AC', '\x1D7', '\x2', '\x1E7B', '\x3DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7C', '\x1E7E', '\x5', '\x396', '\x1CC', 
		'\x2', '\x1E7D', '\x1E7F', '\x5', '\x3DC', '\x1EF', '\x2', '\x1E7E', '\x1E7D', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7E', '\x1E7F', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7F', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x1E80', '\x1E81', '\a', 
		'\x30A', '\x2', '\x2', '\x1E81', '\x1E82', '\x5', '\x424', '\x213', '\x2', 
		'\x1E82', '\x1E83', '\a', '\x307', '\x2', '\x2', '\x1E83', '\x1E84', '\x5', 
		'\x424', '\x213', '\x2', '\x1E84', '\x1E85', '\a', '\x30B', '\x2', '\x2', 
		'\x1E85', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x1E86', '\x1E8B', '\x5', 
		'\x434', '\x21B', '\x2', '\x1E87', '\x1E88', '\a', '\x307', '\x2', '\x2', 
		'\x1E88', '\x1E8A', '\x5', '\x434', '\x21B', '\x2', '\x1E89', '\x1E87', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8A', '\x1E8D', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8B', '\x1E89', '\x3', '\x2', '\x2', '\x2', '\x1E8B', '\x1E8C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8C', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x1E8D', 
		'\x1E8B', '\x3', '\x2', '\x2', '\x2', '\x1E8E', '\x1E93', '\x5', '\x3E6', 
		'\x1F4', '\x2', '\x1E8F', '\x1E90', '\a', '\x307', '\x2', '\x2', '\x1E90', 
		'\x1E92', '\x5', '\x3E6', '\x1F4', '\x2', '\x1E91', '\x1E8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E92', '\x1E95', '\x3', '\x2', '\x2', '\x2', '\x1E93', 
		'\x1E91', '\x3', '\x2', '\x2', '\x2', '\x1E93', '\x1E94', '\x3', '\x2', 
		'\x2', '\x2', '\x1E94', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x1E95', 
		'\x1E93', '\x3', '\x2', '\x2', '\x2', '\x1E96', '\x1E97', '\x5', '\x418', 
		'\x20D', '\x2', '\x1E97', '\x1E9A', '\a', '\x2F0', '\x2', '\x2', '\x1E98', 
		'\x1E9B', '\x5', '\x2A6', '\x154', '\x2', '\x1E99', '\x1E9B', '\a', '\x82', 
		'\x2', '\x2', '\x1E9A', '\x1E98', '\x3', '\x2', '\x2', '\x2', '\x1E9A', 
		'\x1E99', '\x3', '\x2', '\x2', '\x2', '\x1E9B', '\x3E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9C', '\x1E9D', '\x5', '\x2F8', '\x17D', '\x2', '\x1E9D', 
		'\x1E9E', '\x5', '\x3AA', '\x1D6', '\x2', '\x1E9E', '\x3E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9F', '\x1EA1', '\a', 'I', '\x2', '\x2', '\x1EA0', '\x1EA2', 
		'\x5', '\x3EC', '\x1F7', '\x2', '\x1EA1', '\x1EA0', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA2', '\x1EA3', '\x3', '\x2', '\x2', '\x2', '\x1EA3', '\x1EA1', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA3', '\x1EA4', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA4', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x1EA5', '\x1EA6', '\a', 
		'\x245', '\x2', '\x2', '\x1EA6', '\x1EA7', '\a', '/', '\x2', '\x2', '\x1EA7', 
		'\x1EB2', '\x5', '\x486', '\x244', '\x2', '\x1EA8', '\x1EAA', '\a', '\x18A', 
		'\x2', '\x2', '\x1EA9', '\x1EA8', '\x3', '\x2', '\x2', '\x2', '\x1EA9', 
		'\x1EAA', '\x3', '\x2', '\x2', '\x2', '\x1EAA', '\x1EAB', '\x3', '\x2', 
		'\x2', '\x2', '\x1EAB', '\x1EAC', '\a', '\x9F', '\x2', '\x2', '\x1EAC', 
		'\x1EAD', '\a', '/', '\x2', '\x2', '\x1EAD', '\x1EB2', '\x5', '\x486', 
		'\x244', '\x2', '\x1EAE', '\x1EAF', '\a', '\xA9', '\x2', '\x2', '\x1EAF', 
		'\x1EB0', '\a', '/', '\x2', '\x2', '\x1EB0', '\x1EB2', '\x5', '\x486', 
		'\x244', '\x2', '\x1EB1', '\x1EA5', '\x3', '\x2', '\x2', '\x2', '\x1EB1', 
		'\x1EA9', '\x3', '\x2', '\x2', '\x2', '\x1EB1', '\x1EAE', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB2', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x1EB3', 
		'\x1EB5', '\a', '\x118', '\x2', '\x2', '\x1EB4', '\x1EB6', '\x5', '\x3F0', 
		'\x1F9', '\x2', '\x1EB5', '\x1EB4', '\x3', '\x2', '\x2', '\x2', '\x1EB6', 
		'\x1EB7', '\x3', '\x2', '\x2', '\x2', '\x1EB7', '\x1EB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB7', '\x1EB8', '\x3', '\x2', '\x2', '\x2', '\x1EB8', 
		'\x3EF', '\x3', '\x2', '\x2', '\x2', '\x1EB9', '\x1EBA', '\t', '\x7F', 
		'\x2', '\x2', '\x1EBA', '\x1EBB', '\a', '/', '\x2', '\x2', '\x1EBB', '\x1EBC', 
		'\x5', '\x486', '\x244', '\x2', '\x1EBC', '\x3F1', '\x3', '\x2', '\x2', 
		'\x2', '\x1EBD', '\x1EC2', '\x5', '\x404', '\x203', '\x2', '\x1EBE', '\x1EBF', 
		'\a', '\x307', '\x2', '\x2', '\x1EBF', '\x1EC1', '\x5', '\x404', '\x203', 
		'\x2', '\x1EC0', '\x1EBE', '\x3', '\x2', '\x2', '\x2', '\x1EC1', '\x1EC4', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC2', '\x1EC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC2', '\x1EC3', '\x3', '\x2', '\x2', '\x2', '\x1EC3', '\x3F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC4', '\x1EC2', '\x3', '\x2', '\x2', '\x2', '\x1EC5', 
		'\x1ECA', '\x5', '\x3F8', '\x1FD', '\x2', '\x1EC6', '\x1EC7', '\a', '\x307', 
		'\x2', '\x2', '\x1EC7', '\x1EC9', '\x5', '\x3F8', '\x1FD', '\x2', '\x1EC8', 
		'\x1EC6', '\x3', '\x2', '\x2', '\x2', '\x1EC9', '\x1ECC', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECA', '\x1EC8', '\x3', '\x2', '\x2', '\x2', '\x1ECA', 
		'\x1ECB', '\x3', '\x2', '\x2', '\x2', '\x1ECB', '\x3F5', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECC', '\x1ECA', '\x3', '\x2', '\x2', '\x2', '\x1ECD', 
		'\x1ED2', '\x5', '\x3FA', '\x1FE', '\x2', '\x1ECE', '\x1ECF', '\a', '\x307', 
		'\x2', '\x2', '\x1ECF', '\x1ED1', '\x5', '\x3FA', '\x1FE', '\x2', '\x1ED0', 
		'\x1ECE', '\x3', '\x2', '\x2', '\x2', '\x1ED1', '\x1ED4', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED2', '\x1ED0', '\x3', '\x2', '\x2', '\x2', '\x1ED2', 
		'\x1ED3', '\x3', '\x2', '\x2', '\x2', '\x1ED3', '\x3F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED4', '\x1ED2', '\x3', '\x2', '\x2', '\x2', '\x1ED5', 
		'\x1EF0', '\x5', '\x404', '\x203', '\x2', '\x1ED6', '\x1EEE', '\a', '\xE8', 
		'\x2', '\x2', '\x1ED7', '\x1EDA', '\a', '/', '\x2', '\x2', '\x1ED8', '\x1ED9', 
		'\x6', '\x1FD', '\xCA', '\x2', '\x1ED9', '\x1EDB', '\a', '\x198', '\x2', 
		'\x2', '\x1EDA', '\x1ED8', '\x3', '\x2', '\x2', '\x2', '\x1EDA', '\x1EDB', 
		'\x3', '\x2', '\x2', '\x2', '\x1EDB', '\x1EDC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EDC', '\x1EEF', '\x5', '\x486', '\x244', '\x2', '\x1EDD', '\x1EDE', 
		'\a', '\x287', '\x2', '\x2', '\x1EDE', '\x1EE4', '\x5', '\x49E', '\x250', 
		'\x2', '\x1EDF', '\x1EE0', '\a', '\x13', '\x2', '\x2', '\x1EE0', '\x1EE5', 
		'\x5', '\x488', '\x245', '\x2', '\x1EE1', '\x1EE2', '\x6', '\x1FD', '\xCB', 
		'\x2', '\x1EE2', '\x1EE3', '\a', '/', '\x2', '\x2', '\x1EE3', '\x1EE5', 
		'\x5', '\x486', '\x244', '\x2', '\x1EE4', '\x1EDF', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE4', '\x1EE1', '\x3', '\x2', '\x2', '\x2', '\x1EE4', '\x1EE5', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE5', '\x1EEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE6', '\x1EE9', '\x6', '\x1FD', '\xCC', '\x2', '\x1EE7', '\x1EE8', 
		'\a', '\x287', '\x2', '\x2', '\x1EE8', '\x1EEA', '\x5', '\x49E', '\x250', 
		'\x2', '\x1EE9', '\x1EE7', '\x3', '\x2', '\x2', '\x2', '\x1EE9', '\x1EEA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EEA', '\x1EEB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EEB', '\x1EEC', '\a', '/', '\x2', '\x2', '\x1EEC', '\x1EED', '\a', 
		'\x2E0', '\x2', '\x2', '\x1EED', '\x1EEF', '\a', '\x198', '\x2', '\x2', 
		'\x1EEE', '\x1ED7', '\x3', '\x2', '\x2', '\x2', '\x1EEE', '\x1EDD', '\x3', 
		'\x2', '\x2', '\x2', '\x1EEE', '\x1EE6', '\x3', '\x2', '\x2', '\x2', '\x1EEF', 
		'\x1EF1', '\x3', '\x2', '\x2', '\x2', '\x1EF0', '\x1ED6', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF0', '\x1EF1', '\x3', '\x2', '\x2', '\x2', '\x1EF1', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x1EF2', '\x1F0F', '\x5', '\x404', 
		'\x203', '\x2', '\x1EF3', '\x1F0A', '\a', '\xE8', '\x2', '\x2', '\x1EF4', 
		'\x1EF5', '\a', '\x287', '\x2', '\x2', '\x1EF5', '\x1EF7', '\x5', '\x49E', 
		'\x250', '\x2', '\x1EF6', '\x1EF4', '\x3', '\x2', '\x2', '\x2', '\x1EF6', 
		'\x1EF7', '\x3', '\x2', '\x2', '\x2', '\x1EF7', '\x1EF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF8', '\x1EF9', '\a', '/', '\x2', '\x2', '\x1EF9', '\x1EFC', 
		'\x5', '\x486', '\x244', '\x2', '\x1EFA', '\x1EFB', '\a', '\x1CC', '\x2', 
		'\x2', '\x1EFB', '\x1EFD', '\x5', '\x486', '\x244', '\x2', '\x1EFC', '\x1EFA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EFC', '\x1EFD', '\x3', '\x2', '\x2', '\x2', 
		'\x1EFD', '\x1EFF', '\x3', '\x2', '\x2', '\x2', '\x1EFE', '\x1F00', '\x5', 
		'\x3FC', '\x1FF', '\x2', '\x1EFF', '\x1EFE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EFF', '\x1F00', '\x3', '\x2', '\x2', '\x2', '\x1F00', '\x1F0B', '\x3', 
		'\x2', '\x2', '\x2', '\x1F01', '\x1F02', '\a', '\x287', '\x2', '\x2', 
		'\x1F02', '\x1F08', '\x5', '\x49E', '\x250', '\x2', '\x1F03', '\x1F04', 
		'\a', '\x13', '\x2', '\x2', '\x1F04', '\x1F06', '\x5', '\x488', '\x245', 
		'\x2', '\x1F05', '\x1F07', '\x5', '\x3FC', '\x1FF', '\x2', '\x1F06', '\x1F05', 
		'\x3', '\x2', '\x2', '\x2', '\x1F06', '\x1F07', '\x3', '\x2', '\x2', '\x2', 
		'\x1F07', '\x1F09', '\x3', '\x2', '\x2', '\x2', '\x1F08', '\x1F03', '\x3', 
		'\x2', '\x2', '\x2', '\x1F08', '\x1F09', '\x3', '\x2', '\x2', '\x2', '\x1F09', 
		'\x1F0B', '\x3', '\x2', '\x2', '\x2', '\x1F0A', '\x1EF6', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0A', '\x1F01', '\x3', '\x2', '\x2', '\x2', '\x1F0A', 
		'\x1F0B', '\x3', '\x2', '\x2', '\x2', '\x1F0B', '\x1F10', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0C', '\x1F0E', '\x5', '\x3FE', '\x200', '\x2', '\x1F0D', 
		'\x1F0C', '\x3', '\x2', '\x2', '\x2', '\x1F0D', '\x1F0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0E', '\x1F10', '\x3', '\x2', '\x2', '\x2', '\x1F0F', 
		'\x1EF3', '\x3', '\x2', '\x2', '\x2', '\x1F0F', '\x1F0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F10', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x1F11', 
		'\x1F12', '\a', '\x2D9', '\x2', '\x2', '\x1F12', '\x1F13', '\a', 'g', 
		'\x2', '\x2', '\x1F13', '\x1F14', '\a', '\x198', '\x2', '\x2', '\x1F14', 
		'\x3FD', '\x3', '\x2', '\x2', '\x2', '\x1F15', '\x1F16', '\a', '\x8F', 
		'\x2', '\x2', '\x1F16', '\x1F17', '\a', '\x2DA', '\x2', '\x2', '\x1F17', 
		'\x1F18', '\a', '\x198', '\x2', '\x2', '\x1F18', '\x3FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F19', '\x1F1A', '\a', '\x1CC', '\x2', '\x2', '\x1F1A', 
		'\x1F1B', '\x5', '\x486', '\x244', '\x2', '\x1F1B', '\x401', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1C', '\x1F20', '\x5', '\x49E', '\x250', '\x2', '\x1F1D', 
		'\x1F1E', '\a', '\x311', '\x2', '\x2', '\x1F1E', '\x1F21', '\x5', '\x49E', 
		'\x250', '\x2', '\x1F1F', '\x1F21', '\a', '\x312', '\x2', '\x2', '\x1F20', 
		'\x1F1D', '\x3', '\x2', '\x2', '\x2', '\x1F20', '\x1F1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F20', '\x1F21', '\x3', '\x2', '\x2', '\x2', '\x1F21', 
		'\x403', '\x3', '\x2', '\x2', '\x2', '\x1F22', '\x1F28', '\x5', '\x402', 
		'\x202', '\x2', '\x1F23', '\x1F25', '\a', 'k', '\x2', '\x2', '\x1F24', 
		'\x1F26', '\x5', '\x4A6', '\x254', '\x2', '\x1F25', '\x1F24', '\x3', '\x2', 
		'\x2', '\x2', '\x1F25', '\x1F26', '\x3', '\x2', '\x2', '\x2', '\x1F26', 
		'\x1F28', '\x3', '\x2', '\x2', '\x2', '\x1F27', '\x1F22', '\x3', '\x2', 
		'\x2', '\x2', '\x1F27', '\x1F23', '\x3', '\x2', '\x2', '\x2', '\x1F28', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x1F29', '\x1F2A', '\a', '\x115', 
		'\x2', '\x2', '\x1F2A', '\x1F2B', '\x5', '\x484', '\x243', '\x2', '\x1F2B', 
		'\x407', '\x3', '\x2', '\x2', '\x2', '\x1F2C', '\x1F2F', '\x5', '\x406', 
		'\x204', '\x2', '\x1F2D', '\x1F2F', '\x5', '\x168', '\xB5', '\x2', '\x1F2E', 
		'\x1F2C', '\x3', '\x2', '\x2', '\x2', '\x1F2E', '\x1F2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2F', '\x409', '\x3', '\x2', '\x2', '\x2', '\x1F30', 
		'\x1F31', '\t', '\x80', '\x2', '\x2', '\x1F31', '\x40B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F32', '\x1F33', '\t', '\x81', '\x2', '\x2', '\x1F33', 
		'\x40D', '\x3', '\x2', '\x2', '\x2', '\x1F34', '\x1F35', '\x6', '\x208', 
		'\xCD', '\x2', '\x1F35', '\x1F36', '\a', '\x197', '\x2', '\x2', '\x1F36', 
		'\x1F37', '\x5', '\x46E', '\x238', '\x2', '\x1F37', '\x40F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F38', '\x1F3E', '\x5', '\x474', '\x23B', '\x2', '\x1F39', 
		'\x1F3B', '\x5', '\x470', '\x239', '\x2', '\x1F3A', '\x1F3C', '\x5', '\x474', 
		'\x23B', '\x2', '\x1F3B', '\x1F3A', '\x3', '\x2', '\x2', '\x2', '\x1F3B', 
		'\x1F3C', '\x3', '\x2', '\x2', '\x2', '\x1F3C', '\x1F3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3D', '\x1F38', '\x3', '\x2', '\x2', '\x2', '\x1F3D', 
		'\x1F39', '\x3', '\x2', '\x2', '\x2', '\x1F3E', '\x411', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3F', '\x1F40', '\x6', '\x20A', '\xCE', '\x2', '\x1F40', 
		'\x1F44', '\x5', '\x46A', '\x236', '\x2', '\x1F41', '\x1F42', '\x6', '\x20A', 
		'\xCF', '\x2', '\x1F42', '\x1F44', '\x5', '\x410', '\x209', '\x2', '\x1F43', 
		'\x1F3F', '\x3', '\x2', '\x2', '\x2', '\x1F43', '\x1F41', '\x3', '\x2', 
		'\x2', '\x2', '\x1F44', '\x413', '\x3', '\x2', '\x2', '\x2', '\x1F45', 
		'\x1F46', '\x5', '\x46A', '\x236', '\x2', '\x1F46', '\x415', '\x3', '\x2', 
		'\x2', '\x2', '\x1F47', '\x1F48', '\a', '\x30A', '\x2', '\x2', '\x1F48', 
		'\x1F4D', '\x5', '\x414', '\x20B', '\x2', '\x1F49', '\x1F4A', '\a', '\x307', 
		'\x2', '\x2', '\x1F4A', '\x1F4C', '\x5', '\x414', '\x20B', '\x2', '\x1F4B', 
		'\x1F49', '\x3', '\x2', '\x2', '\x2', '\x1F4C', '\x1F4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4D', '\x1F4B', '\x3', '\x2', '\x2', '\x2', '\x1F4D', 
		'\x1F4E', '\x3', '\x2', '\x2', '\x2', '\x1F4E', '\x1F50', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4F', '\x1F4D', '\x3', '\x2', '\x2', '\x2', '\x1F50', 
		'\x1F51', '\a', '\x30B', '\x2', '\x2', '\x1F51', '\x417', '\x3', '\x2', 
		'\x2', '\x2', '\x1F52', '\x1F53', '\x5', '\x410', '\x209', '\x2', '\x1F53', 
		'\x419', '\x3', '\x2', '\x2', '\x2', '\x1F54', '\x1F57', '\x5', '\x418', 
		'\x20D', '\x2', '\x1F55', '\x1F57', '\x5', '\x420', '\x211', '\x2', '\x1F56', 
		'\x1F54', '\x3', '\x2', '\x2', '\x2', '\x1F56', '\x1F55', '\x3', '\x2', 
		'\x2', '\x2', '\x1F57', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x1F58', 
		'\x1F59', '\x5', '\x46A', '\x236', '\x2', '\x1F59', '\x41D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5A', '\x1F5B', '\x5', '\x410', '\x209', '\x2', '\x1F5B', 
		'\x41F', '\x3', '\x2', '\x2', '\x2', '\x1F5C', '\x1F5D', '\x5', '\x46A', 
		'\x236', '\x2', '\x1F5D', '\x1F61', '\a', '\x306', '\x2', '\x2', '\x1F5E', 
		'\x1F5F', '\x5', '\x46A', '\x236', '\x2', '\x1F5F', '\x1F60', '\a', '\x306', 
		'\x2', '\x2', '\x1F60', '\x1F62', '\x3', '\x2', '\x2', '\x2', '\x1F61', 
		'\x1F5E', '\x3', '\x2', '\x2', '\x2', '\x1F61', '\x1F62', '\x3', '\x2', 
		'\x2', '\x2', '\x1F62', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F63', 
		'\x1F64', '\a', '\x2FA', '\x2', '\x2', '\x1F64', '\x421', '\x3', '\x2', 
		'\x2', '\x2', '\x1F65', '\x1F66', '\x5', '\x46A', '\x236', '\x2', '\x1F66', 
		'\x423', '\x3', '\x2', '\x2', '\x2', '\x1F67', '\x1F68', '\x5', '\x46A', 
		'\x236', '\x2', '\x1F68', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1F69', 
		'\x1F6A', '\x5', '\x470', '\x239', '\x2', '\x1F6A', '\x427', '\x3', '\x2', 
		'\x2', '\x2', '\x1F6B', '\x1F6C', '\x5', '\x470', '\x239', '\x2', '\x1F6C', 
		'\x429', '\x3', '\x2', '\x2', '\x2', '\x1F6D', '\x1F6E', '\x5', '\x470', 
		'\x239', '\x2', '\x1F6E', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x1F6F', 
		'\x1F70', '\x5', '\x470', '\x239', '\x2', '\x1F70', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F71', '\x1F72', '\x5', '\x470', '\x239', '\x2', '\x1F72', 
		'\x42F', '\x3', '\x2', '\x2', '\x2', '\x1F73', '\x1F74', '\x5', '\x470', 
		'\x239', '\x2', '\x1F74', '\x431', '\x3', '\x2', '\x2', '\x2', '\x1F75', 
		'\x1F78', '\x5', '\x470', '\x239', '\x2', '\x1F76', '\x1F78', '\x5', '\x474', 
		'\x23B', '\x2', '\x1F77', '\x1F75', '\x3', '\x2', '\x2', '\x2', '\x1F77', 
		'\x1F76', '\x3', '\x2', '\x2', '\x2', '\x1F78', '\x433', '\x3', '\x2', 
		'\x2', '\x2', '\x1F79', '\x1F7C', '\x5', '\x470', '\x239', '\x2', '\x1F7A', 
		'\x1F7C', '\x5', '\x474', '\x23B', '\x2', '\x1F7B', '\x1F79', '\x3', '\x2', 
		'\x2', '\x2', '\x1F7B', '\x1F7A', '\x3', '\x2', '\x2', '\x2', '\x1F7C', 
		'\x435', '\x3', '\x2', '\x2', '\x2', '\x1F7D', '\x1F7E', '\x5', '\x46A', 
		'\x236', '\x2', '\x1F7E', '\x437', '\x3', '\x2', '\x2', '\x2', '\x1F7F', 
		'\x1F80', '\x5', '\x46A', '\x236', '\x2', '\x1F80', '\x439', '\x3', '\x2', 
		'\x2', '\x2', '\x1F81', '\x1F82', '\x5', '\x46A', '\x236', '\x2', '\x1F82', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x1F83', '\x1F84', '\x5', '\x46A', 
		'\x236', '\x2', '\x1F84', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x1F85', 
		'\x1F86', '\x5', '\x470', '\x239', '\x2', '\x1F86', '\x43F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F87', '\x1F88', '\x5', '\x470', '\x239', '\x2', '\x1F88', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x1F89', '\x1F8A', '\x5', '\x46A', 
		'\x236', '\x2', '\x1F8A', '\x443', '\x3', '\x2', '\x2', '\x2', '\x1F8B', 
		'\x1F8C', '\x5', '\x49E', '\x250', '\x2', '\x1F8C', '\x445', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8D', '\x1F8E', '\x5', '\x49E', '\x250', '\x2', '\x1F8E', 
		'\x447', '\x3', '\x2', '\x2', '\x2', '\x1F8F', '\x1F90', '\x5', '\x49E', 
		'\x250', '\x2', '\x1F90', '\x449', '\x3', '\x2', '\x2', '\x2', '\x1F91', 
		'\x1F94', '\x5', '\x470', '\x239', '\x2', '\x1F92', '\x1F94', '\x5', '\x474', 
		'\x23B', '\x2', '\x1F93', '\x1F91', '\x3', '\x2', '\x2', '\x2', '\x1F93', 
		'\x1F92', '\x3', '\x2', '\x2', '\x2', '\x1F94', '\x44B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F95', '\x1F96', '\x5', '\x424', '\x213', '\x2', '\x1F96', 
		'\x1F97', '\x5', '\x474', '\x23B', '\x2', '\x1F97', '\x44D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F98', '\x1FA0', '\x5', '\x46A', '\x236', '\x2', '\x1F99', 
		'\x1F9A', '\a', '\x306', '\x2', '\x2', '\x1F9A', '\x1FA1', '\a', '\x2FA', 
		'\x2', '\x2', '\x1F9B', '\x1F9E', '\x5', '\x474', '\x23B', '\x2', '\x1F9C', 
		'\x1F9D', '\a', '\x306', '\x2', '\x2', '\x1F9D', '\x1F9F', '\a', '\x2FA', 
		'\x2', '\x2', '\x1F9E', '\x1F9C', '\x3', '\x2', '\x2', '\x2', '\x1F9E', 
		'\x1F9F', '\x3', '\x2', '\x2', '\x2', '\x1F9F', '\x1FA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA0', '\x1F99', '\x3', '\x2', '\x2', '\x2', '\x1FA0', 
		'\x1F9B', '\x3', '\x2', '\x2', '\x2', '\x1FA0', '\x1FA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA1', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x1FA2', 
		'\x1FA5', '\x5', '\x470', '\x239', '\x2', '\x1FA3', '\x1FA5', '\x5', '\x474', 
		'\x23B', '\x2', '\x1FA4', '\x1FA2', '\x3', '\x2', '\x2', '\x2', '\x1FA4', 
		'\x1FA3', '\x3', '\x2', '\x2', '\x2', '\x1FA5', '\x451', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA6', '\x1FAB', '\x5', '\x450', '\x229', '\x2', '\x1FA7', 
		'\x1FA8', '\a', '\x307', '\x2', '\x2', '\x1FA8', '\x1FAA', '\x5', '\x450', 
		'\x229', '\x2', '\x1FA9', '\x1FA7', '\x3', '\x2', '\x2', '\x2', '\x1FAA', 
		'\x1FAD', '\x3', '\x2', '\x2', '\x2', '\x1FAB', '\x1FA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAB', '\x1FAC', '\x3', '\x2', '\x2', '\x2', '\x1FAC', 
		'\x453', '\x3', '\x2', '\x2', '\x2', '\x1FAD', '\x1FAB', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAE', '\x1FB3', '\x5', '\x44E', '\x228', '\x2', '\x1FAF', 
		'\x1FB0', '\a', '\x307', '\x2', '\x2', '\x1FB0', '\x1FB2', '\x5', '\x44E', 
		'\x228', '\x2', '\x1FB1', '\x1FAF', '\x3', '\x2', '\x2', '\x2', '\x1FB2', 
		'\x1FB5', '\x3', '\x2', '\x2', '\x2', '\x1FB3', '\x1FB1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB3', '\x1FB4', '\x3', '\x2', '\x2', '\x2', '\x1FB4', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x1FB5', '\x1FB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB6', '\x1FB7', '\x5', '\x46A', '\x236', '\x2', '\x1FB7', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x1FB8', '\x1FBB', '\x5', '\x468', 
		'\x235', '\x2', '\x1FB9', '\x1FBB', '\x5', '\x4B6', '\x25C', '\x2', '\x1FBA', 
		'\x1FB8', '\x3', '\x2', '\x2', '\x2', '\x1FBA', '\x1FB9', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBB', '\x459', '\x3', '\x2', '\x2', '\x2', '\x1FBC', 
		'\x1FBD', '\x5', '\x458', '\x22D', '\x2', '\x1FBD', '\x45B', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBE', '\x1FC1', '\x5', '\x468', '\x235', '\x2', '\x1FBF', 
		'\x1FC1', '\x5', '\x4BC', '\x25F', '\x2', '\x1FC0', '\x1FBE', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC0', '\x1FBF', '\x3', '\x2', '\x2', '\x2', '\x1FC1', 
		'\x45D', '\x3', '\x2', '\x2', '\x2', '\x1FC2', '\x1FC3', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1FC3', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x1FC4', 
		'\x1FC5', '\x5', '\x46A', '\x236', '\x2', '\x1FC5', '\x461', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC6', '\x1FC7', '\x5', '\x484', '\x243', '\x2', '\x1FC7', 
		'\x463', '\x3', '\x2', '\x2', '\x2', '\x1FC8', '\x1FC9', '\x5', '\x46A', 
		'\x236', '\x2', '\x1FC9', '\x465', '\x3', '\x2', '\x2', '\x2', '\x1FCA', 
		'\x1FCB', '\x5', '\x46A', '\x236', '\x2', '\x1FCB', '\x467', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCC', '\x1FD0', '\t', '\x82', '\x2', '\x2', '\x1FCD', 
		'\x1FCE', '\x6', '\x235', '\xD0', '\x2', '\x1FCE', '\x1FD0', '\a', '\x320', 
		'\x2', '\x2', '\x1FCF', '\x1FCC', '\x3', '\x2', '\x2', '\x2', '\x1FCF', 
		'\x1FCD', '\x3', '\x2', '\x2', '\x2', '\x1FD0', '\x469', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD1', '\x1FD4', '\x5', '\x468', '\x235', '\x2', '\x1FD2', 
		'\x1FD4', '\x5', '\x4B0', '\x259', '\x2', '\x1FD3', '\x1FD1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD3', '\x1FD2', '\x3', '\x2', '\x2', '\x2', '\x1FD4', 
		'\x46B', '\x3', '\x2', '\x2', '\x2', '\x1FD5', '\x1FDA', '\x5', '\x46A', 
		'\x236', '\x2', '\x1FD6', '\x1FD7', '\a', '\x307', '\x2', '\x2', '\x1FD7', 
		'\x1FD9', '\x5', '\x46A', '\x236', '\x2', '\x1FD8', '\x1FD6', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD9', '\x1FDC', '\x3', '\x2', '\x2', '\x2', '\x1FDA', 
		'\x1FD8', '\x3', '\x2', '\x2', '\x2', '\x1FDA', '\x1FDB', '\x3', '\x2', 
		'\x2', '\x2', '\x1FDB', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x1FDC', 
		'\x1FDA', '\x3', '\x2', '\x2', '\x2', '\x1FDD', '\x1FDE', '\a', '\x30A', 
		'\x2', '\x2', '\x1FDE', '\x1FDF', '\x5', '\x46C', '\x237', '\x2', '\x1FDF', 
		'\x1FE0', '\a', '\x30B', '\x2', '\x2', '\x1FE0', '\x46F', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE1', '\x1FE3', '\x5', '\x46A', '\x236', '\x2', '\x1FE2', 
		'\x1FE4', '\x5', '\x474', '\x23B', '\x2', '\x1FE3', '\x1FE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE3', '\x1FE4', '\x3', '\x2', '\x2', '\x2', '\x1FE4', 
		'\x471', '\x3', '\x2', '\x2', '\x2', '\x1FE5', '\x1FEA', '\x5', '\x46A', 
		'\x236', '\x2', '\x1FE6', '\x1FE8', '\x5', '\x474', '\x23B', '\x2', '\x1FE7', 
		'\x1FE9', '\x5', '\x474', '\x23B', '\x2', '\x1FE8', '\x1FE7', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE8', '\x1FE9', '\x3', '\x2', '\x2', '\x2', '\x1FE9', 
		'\x1FEB', '\x3', '\x2', '\x2', '\x2', '\x1FEA', '\x1FE6', '\x3', '\x2', 
		'\x2', '\x2', '\x1FEA', '\x1FEB', '\x3', '\x2', '\x2', '\x2', '\x1FEB', 
		'\x1FF1', '\x3', '\x2', '\x2', '\x2', '\x1FEC', '\x1FED', '\x6', '\x23A', 
		'\xD1', '\x2', '\x1FED', '\x1FEE', '\x5', '\x474', '\x23B', '\x2', '\x1FEE', 
		'\x1FEF', '\x5', '\x474', '\x23B', '\x2', '\x1FEF', '\x1FF1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF0', '\x1FE5', '\x3', '\x2', '\x2', '\x2', '\x1FF0', 
		'\x1FEC', '\x3', '\x2', '\x2', '\x2', '\x1FF1', '\x473', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF2', '\x1FF3', '\a', '\x306', '\x2', '\x2', '\x1FF3', 
		'\x1FF4', '\x5', '\x46A', '\x236', '\x2', '\x1FF4', '\x475', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF5', '\x1FF6', '\t', '\x83', '\x2', '\x2', '\x1FF6', 
		'\x477', '\x3', '\x2', '\x2', '\x2', '\x1FF7', '\x1FF8', '\t', '\x84', 
		'\x2', '\x2', '\x1FF8', '\x479', '\x3', '\x2', '\x2', '\x2', '\x1FF9', 
		'\x1FFA', '\t', '\x85', '\x2', '\x2', '\x1FFA', '\x47B', '\x3', '\x2', 
		'\x2', '\x2', '\x1FFB', '\x2001', '\a', '\x2ED', '\x2', '\x2', '\x1FFC', 
		'\x1FFD', '\x6', '\x23F', '\xD2', '\x2', '\x1FFD', '\x2001', '\a', '\x316', 
		'\x2', '\x2', '\x1FFE', '\x2001', '\a', '\x2EF', '\x2', '\x2', '\x1FFF', 
		'\x2001', '\a', '\x2EE', '\x2', '\x2', '\x2000', '\x1FFB', '\x3', '\x2', 
		'\x2', '\x2', '\x2000', '\x1FFC', '\x3', '\x2', '\x2', '\x2', '\x2000', 
		'\x1FFE', '\x3', '\x2', '\x2', '\x2', '\x2000', '\x1FFF', '\x3', '\x2', 
		'\x2', '\x2', '\x2001', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x2002', 
		'\x200C', '\x5', '\x48A', '\x246', '\x2', '\x2003', '\x200C', '\x5', '\x490', 
		'\x249', '\x2', '\x2004', '\x200C', '\x5', '\x496', '\x24C', '\x2', '\x2005', 
		'\x200C', '\x5', '\x494', '\x24B', '\x2', '\x2006', '\x200C', '\x5', '\x492', 
		'\x24A', '\x2', '\x2007', '\x2009', '\a', '\x31C', '\x2', '\x2', '\x2008', 
		'\x2007', '\x3', '\x2', '\x2', '\x2', '\x2008', '\x2009', '\x3', '\x2', 
		'\x2', '\x2', '\x2009', '\x200A', '\x3', '\x2', '\x2', '\x2', '\x200A', 
		'\x200C', '\t', '\x86', '\x2', '\x2', '\x200B', '\x2002', '\x3', '\x2', 
		'\x2', '\x2', '\x200B', '\x2003', '\x3', '\x2', '\x2', '\x2', '\x200B', 
		'\x2004', '\x3', '\x2', '\x2', '\x2', '\x200B', '\x2005', '\x3', '\x2', 
		'\x2', '\x2', '\x200B', '\x2006', '\x3', '\x2', '\x2', '\x2', '\x200B', 
		'\x2008', '\x3', '\x2', '\x2', '\x2', '\x200C', '\x47F', '\x3', '\x2', 
		'\x2', '\x2', '\x200D', '\x2013', '\x5', '\x47E', '\x240', '\x2', '\x200E', 
		'\x200F', '\a', '\x2F8', '\x2', '\x2', '\x200F', '\x2013', '\x5', '\x476', 
		'\x23C', '\x2', '\x2010', '\x2011', '\a', '\x2F9', '\x2', '\x2', '\x2011', 
		'\x2013', '\x5', '\x476', '\x23C', '\x2', '\x2012', '\x200D', '\x3', '\x2', 
		'\x2', '\x2', '\x2012', '\x200E', '\x3', '\x2', '\x2', '\x2', '\x2012', 
		'\x2010', '\x3', '\x2', '\x2', '\x2', '\x2013', '\x481', '\x3', '\x2', 
		'\x2', '\x2', '\x2014', '\x2015', '\a', '\x30A', '\x2', '\x2', '\x2015', 
		'\x201A', '\x5', '\x486', '\x244', '\x2', '\x2016', '\x2017', '\a', '\x307', 
		'\x2', '\x2', '\x2017', '\x2019', '\x5', '\x486', '\x244', '\x2', '\x2018', 
		'\x2016', '\x3', '\x2', '\x2', '\x2', '\x2019', '\x201C', '\x3', '\x2', 
		'\x2', '\x2', '\x201A', '\x2018', '\x3', '\x2', '\x2', '\x2', '\x201A', 
		'\x201B', '\x3', '\x2', '\x2', '\x2', '\x201B', '\x201D', '\x3', '\x2', 
		'\x2', '\x2', '\x201C', '\x201A', '\x3', '\x2', '\x2', '\x2', '\x201D', 
		'\x201E', '\a', '\x30B', '\x2', '\x2', '\x201E', '\x483', '\x3', '\x2', 
		'\x2', '\x2', '\x201F', '\x2023', '\a', '\x321', '\x2', '\x2', '\x2020', 
		'\x2021', '\x6', '\x243', '\xD3', '\x2', '\x2021', '\x2023', '\a', '\x320', 
		'\x2', '\x2', '\x2022', '\x201F', '\x3', '\x2', '\x2', '\x2', '\x2022', 
		'\x2020', '\x3', '\x2', '\x2', '\x2', '\x2023', '\x485', '\x3', '\x2', 
		'\x2', '\x2', '\x2024', '\x2028', '\x5', '\x484', '\x243', '\x2', '\x2025', 
		'\x2028', '\a', '\x316', '\x2', '\x2', '\x2026', '\x2028', '\a', '\x317', 
		'\x2', '\x2', '\x2027', '\x2024', '\x3', '\x2', '\x2', '\x2', '\x2027', 
		'\x2025', '\x3', '\x2', '\x2', '\x2', '\x2027', '\x2026', '\x3', '\x2', 
		'\x2', '\x2', '\x2028', '\x487', '\x3', '\x2', '\x2', '\x2', '\x2029', 
		'\x202D', '\x5', '\x484', '\x243', '\x2', '\x202A', '\x202B', '\x6', '\x245', 
		'\xD4', '\x2', '\x202B', '\x202D', '\a', '\x316', '\x2', '\x2', '\x202C', 
		'\x2029', '\x3', '\x2', '\x2', '\x2', '\x202C', '\x202A', '\x3', '\x2', 
		'\x2', '\x2', '\x202D', '\x489', '\x3', '\x2', '\x2', '\x2', '\x202E', 
		'\x2030', '\a', '\x31C', '\x2', '\x2', '\x202F', '\x202E', '\x3', '\x2', 
		'\x2', '\x2', '\x202F', '\x2030', '\x3', '\x2', '\x2', '\x2', '\x2030', 
		'\x2031', '\x3', '\x2', '\x2', '\x2', '\x2031', '\x2034', '\x5', '\x484', 
		'\x243', '\x2', '\x2032', '\x2034', '\a', '\x31E', '\x2', '\x2', '\x2033', 
		'\x202F', '\x3', '\x2', '\x2', '\x2', '\x2033', '\x2032', '\x3', '\x2', 
		'\x2', '\x2', '\x2034', '\x2038', '\x3', '\x2', '\x2', '\x2', '\x2035', 
		'\x2037', '\x5', '\x484', '\x243', '\x2', '\x2036', '\x2035', '\x3', '\x2', 
		'\x2', '\x2', '\x2037', '\x203A', '\x3', '\x2', '\x2', '\x2', '\x2038', 
		'\x2036', '\x3', '\x2', '\x2', '\x2', '\x2038', '\x2039', '\x3', '\x2', 
		'\x2', '\x2', '\x2039', '\x48B', '\x3', '\x2', '\x2', '\x2', '\x203A', 
		'\x2038', '\x3', '\x2', '\x2', '\x2', '\x203B', '\x203C', '\x5', '\x484', 
		'\x243', '\x2', '\x203C', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x203D', 
		'\x2042', '\x5', '\x484', '\x243', '\x2', '\x203E', '\x203F', '\a', '\x307', 
		'\x2', '\x2', '\x203F', '\x2041', '\x5', '\x484', '\x243', '\x2', '\x2040', 
		'\x203E', '\x3', '\x2', '\x2', '\x2', '\x2041', '\x2044', '\x3', '\x2', 
		'\x2', '\x2', '\x2042', '\x2040', '\x3', '\x2', '\x2', '\x2', '\x2042', 
		'\x2043', '\x3', '\x2', '\x2', '\x2', '\x2043', '\x48F', '\x3', '\x2', 
		'\x2', '\x2', '\x2044', '\x2042', '\x3', '\x2', '\x2', '\x2', '\x2045', 
		'\x2046', '\t', '\x85', '\x2', '\x2', '\x2046', '\x491', '\x3', '\x2', 
		'\x2', '\x2', '\x2047', '\x2048', '\t', '\x87', '\x2', '\x2', '\x2048', 
		'\x493', '\x3', '\x2', '\x2', '\x2', '\x2049', '\x204A', '\t', '\x88', 
		'\x2', '\x2', '\x204A', '\x495', '\x3', '\x2', '\x2', '\x2', '\x204B', 
		'\x204C', '\a', 'v', '\x2', '\x2', '\x204C', '\x2052', '\a', '\x321', 
		'\x2', '\x2', '\x204D', '\x204E', '\a', '\x24C', '\x2', '\x2', '\x204E', 
		'\x2052', '\a', '\x321', '\x2', '\x2', '\x204F', '\x2050', '\a', '\x249', 
		'\x2', '\x2', '\x2050', '\x2052', '\a', '\x321', '\x2', '\x2', '\x2051', 
		'\x204B', '\x3', '\x2', '\x2', '\x2', '\x2051', '\x204D', '\x3', '\x2', 
		'\x2', '\x2', '\x2051', '\x204F', '\x3', '\x2', '\x2', '\x2', '\x2052', 
		'\x497', '\x3', '\x2', '\x2', '\x2', '\x2053', '\x2056', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x2054', '\x2056', '\x5', '\x49C', '\x24F', '\x2', '\x2055', 
		'\x2053', '\x3', '\x2', '\x2', '\x2', '\x2055', '\x2054', '\x3', '\x2', 
		'\x2', '\x2', '\x2056', '\x499', '\x3', '\x2', '\x2', '\x2', '\x2057', 
		'\x2058', '\x5', '\x49C', '\x24F', '\x2', '\x2058', '\x49B', '\x3', '\x2', 
		'\x2', '\x2', '\x2059', '\x205A', '\a', '\x30A', '\x2', '\x2', '\x205A', 
		'\x205B', '\a', '\x2ED', '\x2', '\x2', '\x205B', '\x205C', '\a', '\x307', 
		'\x2', '\x2', '\x205C', '\x205D', '\a', '\x2ED', '\x2', '\x2', '\x205D', 
		'\x205E', '\a', '\x30B', '\x2', '\x2', '\x205E', '\x49D', '\x3', '\x2', 
		'\x2', '\x2', '\x205F', '\x2062', '\x5', '\x46A', '\x236', '\x2', '\x2060', 
		'\x2062', '\x5', '\x484', '\x243', '\x2', '\x2061', '\x205F', '\x3', '\x2', 
		'\x2', '\x2', '\x2061', '\x2060', '\x3', '\x2', '\x2', '\x2', '\x2062', 
		'\x49F', '\x3', '\x2', '\x2', '\x2', '\x2063', '\x2066', '\x5', '\x468', 
		'\x235', '\x2', '\x2064', '\x2066', '\x5', '\x4BE', '\x260', '\x2', '\x2065', 
		'\x2063', '\x3', '\x2', '\x2', '\x2', '\x2065', '\x2064', '\x3', '\x2', 
		'\x2', '\x2', '\x2066', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x2067', 
		'\x206A', '\x5', '\x45C', '\x22F', '\x2', '\x2068', '\x206A', '\x5', '\x484', 
		'\x243', '\x2', '\x2069', '\x2067', '\x3', '\x2', '\x2', '\x2', '\x2069', 
		'\x2068', '\x3', '\x2', '\x2', '\x2', '\x206A', '\x4A3', '\x3', '\x2', 
		'\x2', '\x2', '\x206B', '\x206E', '\x5', '\x47C', '\x23F', '\x2', '\x206C', 
		'\x206E', '\x5', '\x468', '\x235', '\x2', '\x206D', '\x206B', '\x3', '\x2', 
		'\x2', '\x2', '\x206D', '\x206C', '\x3', '\x2', '\x2', '\x2', '\x206E', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x206F', '\x2070', '\a', '\x30A', 
		'\x2', '\x2', '\x2070', '\x2071', '\a', '\x30B', '\x2', '\x2', '\x2071', 
		'\x4A7', '\x3', '\x2', '\x2', '\x2', '\x2072', '\x2073', '\t', '\x89', 
		'\x2', '\x2', '\x2073', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x2074', 
		'\x2075', '\t', '\x8A', '\x2', '\x2', '\x2075', '\x4AB', '\x3', '\x2', 
		'\x2', '\x2', '\x2076', '\x2077', '\a', '\xD8', '\x2', '\x2', '\x2077', 
		'\x207D', '\a', '\x306', '\x2', '\x2', '\x2078', '\x2079', '\a', '\x11E', 
		'\x2', '\x2', '\x2079', '\x207D', '\a', '\x306', '\x2', '\x2', '\x207A', 
		'\x207B', '\a', '\x1F8', '\x2', '\x2', '\x207B', '\x207D', '\a', '\x306', 
		'\x2', '\x2', '\x207C', '\x2076', '\x3', '\x2', '\x2', '\x2', '\x207C', 
		'\x2078', '\x3', '\x2', '\x2', '\x2', '\x207C', '\x207A', '\x3', '\x2', 
		'\x2', '\x2', '\x207D', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x207E', 
		'\x207F', '\a', '\x294', '\x2', '\x2', '\x207F', '\x2089', '\a', '\x306', 
		'\x2', '\x2', '\x2080', '\x2081', '\a', '\x2A3', '\x2', '\x2', '\x2081', 
		'\x2089', '\a', '\x306', '\x2', '\x2', '\x2082', '\x2083', '\a', '\xD8', 
		'\x2', '\x2', '\x2083', '\x2089', '\a', '\x306', '\x2', '\x2', '\x2084', 
		'\x2085', '\a', '\x11E', '\x2', '\x2', '\x2085', '\x2089', '\a', '\x306', 
		'\x2', '\x2', '\x2086', '\x2087', '\a', '\x1F8', '\x2', '\x2', '\x2087', 
		'\x2089', '\a', '\x306', '\x2', '\x2', '\x2088', '\x207E', '\x3', '\x2', 
		'\x2', '\x2', '\x2088', '\x2080', '\x3', '\x2', '\x2', '\x2', '\x2088', 
		'\x2082', '\x3', '\x2', '\x2', '\x2', '\x2088', '\x2084', '\x3', '\x2', 
		'\x2', '\x2', '\x2088', '\x2086', '\x3', '\x2', '\x2', '\x2', '\x2089', 
		'\x4AF', '\x3', '\x2', '\x2', '\x2', '\x208A', '\x2092', '\x6', '\x259', 
		'\xD5', '\x2', '\x208B', '\x2093', '\x5', '\x4B6', '\x25C', '\x2', '\x208C', 
		'\x2093', '\x5', '\x4C2', '\x262', '\x2', '\x208D', '\x2093', '\a', '\xAF', 
		'\x2', '\x2', '\x208E', '\x208F', '\x6', '\x259', '\xD6', '\x2', '\x208F', 
		'\x2093', '\a', '\x200', '\x2', '\x2', '\x2090', '\x2091', '\x6', '\x259', 
		'\xD7', '\x2', '\x2091', '\x2093', '\a', '\x2CC', '\x2', '\x2', '\x2092', 
		'\x208B', '\x3', '\x2', '\x2', '\x2', '\x2092', '\x208C', '\x3', '\x2', 
		'\x2', '\x2', '\x2092', '\x208D', '\x3', '\x2', '\x2', '\x2', '\x2092', 
		'\x208E', '\x3', '\x2', '\x2', '\x2', '\x2092', '\x2090', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x209C', '\x3', '\x2', '\x2', '\x2', '\x2094', 
		'\x209A', '\x5', '\x4BA', '\x25E', '\x2', '\x2095', '\x209A', '\x5', '\x4B2', 
		'\x25A', '\x2', '\x2096', '\x209A', '\x5', '\x4B4', '\x25B', '\x2', '\x2097', 
		'\x209A', '\x5', '\x4B8', '\x25D', '\x2', '\x2098', '\x209A', '\x5', '\x4C0', 
		'\x261', '\x2', '\x2099', '\x2094', '\x3', '\x2', '\x2', '\x2', '\x2099', 
		'\x2095', '\x3', '\x2', '\x2', '\x2', '\x2099', '\x2096', '\x3', '\x2', 
		'\x2', '\x2', '\x2099', '\x2097', '\x3', '\x2', '\x2', '\x2', '\x2099', 
		'\x2098', '\x3', '\x2', '\x2', '\x2', '\x209A', '\x209C', '\x3', '\x2', 
		'\x2', '\x2', '\x209B', '\x208A', '\x3', '\x2', '\x2', '\x2', '\x209B', 
		'\x2099', '\x3', '\x2', '\x2', '\x2', '\x209C', '\x4B1', '\x3', '\x2', 
		'\x2', '\x2', '\x209D', '\x209E', '\t', '\x8B', '\x2', '\x2', '\x209E', 
		'\x4B3', '\x3', '\x2', '\x2', '\x2', '\x209F', '\x20A0', '\t', '\x8C', 
		'\x2', '\x2', '\x20A0', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x20A1', 
		'\x20AC', '\x6', '\x25C', '\xD8', '\x2', '\x20A2', '\x20AD', '\x5', '\x4C4', 
		'\x263', '\x2', '\x20A3', '\x20AD', '\a', '\xAC', '\x2', '\x2', '\x20A4', 
		'\x20AD', '\a', '\xBE', '\x2', '\x2', '\x20A5', '\x20AD', '\a', '\x173', 
		'\x2', '\x2', '\x20A6', '\x20AD', '\a', '\x1A9', '\x2', '\x2', '\x20A7', 
		'\x20AD', '\a', '\x1AD', '\x2', '\x2', '\x20A8', '\x20AD', '\a', '\x1C5', 
		'\x2', '\x2', '\x20A9', '\x20AD', '\a', '\x1CD', '\x2', '\x2', '\x20AA', 
		'\x20AD', '\a', '\x2C7', '\x2', '\x2', '\x20AB', '\x20AD', '\a', '\x237', 
		'\x2', '\x2', '\x20AC', '\x20A2', '\x3', '\x2', '\x2', '\x2', '\x20AC', 
		'\x20A3', '\x3', '\x2', '\x2', '\x2', '\x20AC', '\x20A4', '\x3', '\x2', 
		'\x2', '\x2', '\x20AC', '\x20A5', '\x3', '\x2', '\x2', '\x2', '\x20AC', 
		'\x20A6', '\x3', '\x2', '\x2', '\x2', '\x20AC', '\x20A7', '\x3', '\x2', 
		'\x2', '\x2', '\x20AC', '\x20A8', '\x3', '\x2', '\x2', '\x2', '\x20AC', 
		'\x20A9', '\x3', '\x2', '\x2', '\x2', '\x20AC', '\x20AA', '\x3', '\x2', 
		'\x2', '\x2', '\x20AC', '\x20AB', '\x3', '\x2', '\x2', '\x2', '\x20AD', 
		'\x20B4', '\x3', '\x2', '\x2', '\x2', '\x20AE', '\x20B2', '\x5', '\x4BA', 
		'\x25E', '\x2', '\x20AF', '\x20B2', '\x5', '\x4B8', '\x25D', '\x2', '\x20B0', 
		'\x20B2', '\x5', '\x4C0', '\x261', '\x2', '\x20B1', '\x20AE', '\x3', '\x2', 
		'\x2', '\x2', '\x20B1', '\x20AF', '\x3', '\x2', '\x2', '\x2', '\x20B1', 
		'\x20B0', '\x3', '\x2', '\x2', '\x2', '\x20B2', '\x20B4', '\x3', '\x2', 
		'\x2', '\x2', '\x20B3', '\x20A1', '\x3', '\x2', '\x2', '\x2', '\x20B3', 
		'\x20B1', '\x3', '\x2', '\x2', '\x2', '\x20B4', '\x4B7', '\x3', '\x2', 
		'\x2', '\x2', '\x20B5', '\x20B6', '\t', '\x8D', '\x2', '\x2', '\x20B6', 
		'\x4B9', '\x3', '\x2', '\x2', '\x2', '\x20B7', '\x20BB', '\t', '\x8E', 
		'\x2', '\x2', '\x20B8', '\x20B9', '\x6', '\x25E', '\xD9', '\x2', '\x20B9', 
		'\x20BB', '\t', '\x8F', '\x2', '\x2', '\x20BA', '\x20B7', '\x3', '\x2', 
		'\x2', '\x2', '\x20BA', '\x20B8', '\x3', '\x2', '\x2', '\x2', '\x20BB', 
		'\x4BB', '\x3', '\x2', '\x2', '\x2', '\x20BC', '\x20BF', '\x6', '\x25F', 
		'\xDA', '\x2', '\x20BD', '\x20C0', '\x5', '\x4C4', '\x263', '\x2', '\x20BE', 
		'\x20C0', '\x5', '\x4C2', '\x262', '\x2', '\x20BF', '\x20BD', '\x3', '\x2', 
		'\x2', '\x2', '\x20BF', '\x20BE', '\x3', '\x2', '\x2', '\x2', '\x20C0', 
		'\x20C7', '\x3', '\x2', '\x2', '\x2', '\x20C1', '\x20C5', '\x5', '\x4BA', 
		'\x25E', '\x2', '\x20C2', '\x20C5', '\x5', '\x4B4', '\x25B', '\x2', '\x20C3', 
		'\x20C5', '\x5', '\x4C0', '\x261', '\x2', '\x20C4', '\x20C1', '\x3', '\x2', 
		'\x2', '\x2', '\x20C4', '\x20C2', '\x3', '\x2', '\x2', '\x2', '\x20C4', 
		'\x20C3', '\x3', '\x2', '\x2', '\x2', '\x20C5', '\x20C7', '\x3', '\x2', 
		'\x2', '\x2', '\x20C6', '\x20BC', '\x3', '\x2', '\x2', '\x2', '\x20C6', 
		'\x20C4', '\x3', '\x2', '\x2', '\x2', '\x20C7', '\x4BD', '\x3', '\x2', 
		'\x2', '\x2', '\x20C8', '\x20CD', '\x5', '\x4BA', '\x25E', '\x2', '\x20C9', 
		'\x20CD', '\x5', '\x4B2', '\x25A', '\x2', '\x20CA', '\x20CD', '\x5', '\x4B4', 
		'\x25B', '\x2', '\x20CB', '\x20CD', '\x5', '\x4B8', '\x25D', '\x2', '\x20CC', 
		'\x20C8', '\x3', '\x2', '\x2', '\x2', '\x20CC', '\x20C9', '\x3', '\x2', 
		'\x2', '\x2', '\x20CC', '\x20CA', '\x3', '\x2', '\x2', '\x2', '\x20CC', 
		'\x20CB', '\x3', '\x2', '\x2', '\x2', '\x20CD', '\x4BF', '\x3', '\x2', 
		'\x2', '\x2', '\x20CE', '\x20CF', '\t', '\x8A', '\x2', '\x2', '\x20CF', 
		'\x4C1', '\x3', '\x2', '\x2', '\x2', '\x20D0', '\x20D6', '\t', '\x90', 
		'\x2', '\x2', '\x20D1', '\x20D2', '\x6', '\x262', '\xDB', '\x2', '\x20D2', 
		'\x20D6', '\a', '\x200', '\x2', '\x2', '\x20D3', '\x20D4', '\x6', '\x262', 
		'\xDC', '\x2', '\x20D4', '\x20D6', '\a', '\xEC', '\x2', '\x2', '\x20D5', 
		'\x20D0', '\x3', '\x2', '\x2', '\x2', '\x20D5', '\x20D1', '\x3', '\x2', 
		'\x2', '\x2', '\x20D5', '\x20D3', '\x3', '\x2', '\x2', '\x2', '\x20D6', 
		'\x4C3', '\x3', '\x2', '\x2', '\x2', '\x20D7', '\x20E1', '\t', '\x91', 
		'\x2', '\x2', '\x20D8', '\x20D9', '\x6', '\x263', '\xDD', '\x2', '\x20D9', 
		'\x20E1', '\a', '\x200', '\x2', '\x2', '\x20DA', '\x20DB', '\x6', '\x263', 
		'\xDE', '\x2', '\x20DB', '\x20E1', '\t', '\x92', '\x2', '\x2', '\x20DC', 
		'\x20DD', '\x6', '\x263', '\xDF', '\x2', '\x20DD', '\x20E1', '\t', '\x93', 
		'\x2', '\x2', '\x20DE', '\x20DF', '\x6', '\x263', '\xE0', '\x2', '\x20DF', 
		'\x20E1', '\a', '\x296', '\x2', '\x2', '\x20E0', '\x20D7', '\x3', '\x2', 
		'\x2', '\x2', '\x20E0', '\x20D8', '\x3', '\x2', '\x2', '\x2', '\x20E0', 
		'\x20DA', '\x3', '\x2', '\x2', '\x2', '\x20E0', '\x20DC', '\x3', '\x2', 
		'\x2', '\x2', '\x20E0', '\x20DE', '\x3', '\x2', '\x2', '\x2', '\x20E1', 
		'\x4C5', '\x3', '\x2', '\x2', '\x2', '\x465', '\x4C9', '\x4CD', '\x4D0', 
		'\x4D2', '\x4F6', '\x4FE', '\x503', '\x513', '\x51A', '\x521', '\x524', 
		'\x52B', '\x530', '\x533', '\x538', '\x53E', '\x540', '\x544', '\x548', 
		'\x551', '\x555', '\x55A', '\x560', '\x567', '\x56B', '\x570', '\x575', 
		'\x57C', '\x57F', '\x585', '\x588', '\x58F', '\x599', '\x59E', '\x5A3', 
		'\x5AB', '\x5B1', '\x5B5', '\x5BA', '\x5C3', '\x5C9', '\x5CF', '\x5D5', 
		'\x5DE', '\x5E4', '\x5ED', '\x5FB', '\x5FF', '\x605', '\x609', '\x60F', 
		'\x613', '\x618', '\x61B', '\x621', '\x627', '\x62D', '\x631', '\x636', 
		'\x63A', '\x63E', '\x646', '\x648', '\x655', '\x65D', '\x665', '\x669', 
		'\x686', '\x696', '\x699', '\x6A2', '\x6A7', '\x6AD', '\x6B2', '\x6B6', 
		'\x6BB', '\x6BF', '\x6C3', '\x6C7', '\x6CB', '\x6CF', '\x6D1', '\x6DC', 
		'\x6E4', '\x6ED', '\x6F2', '\x6F5', '\x6FA', '\x701', '\x709', '\x70D', 
		'\x712', '\x719', '\x71E', '\x723', '\x72B', '\x72F', '\x734', '\x737', 
		'\x73A', '\x73D', '\x744', '\x74B', '\x74F', '\x767', '\x76B', '\x771', 
		'\x778', '\x77B', '\x77F', '\x786', '\x789', '\x78C', '\x78F', '\x798', 
		'\x79F', '\x7A4', '\x7A7', '\x7AA', '\x7B0', '\x7B6', '\x7B9', '\x7BE', 
		'\x7C8', '\x7CB', '\x7D1', '\x7D7', '\x7E1', '\x7E4', '\x7EC', '\x7F2', 
		'\x7FD', '\x800', '\x805', '\x818', '\x81B', '\x81E', '\x824', '\x827', 
		'\x829', '\x82F', '\x839', '\x843', '\x846', '\x849', '\x84E', '\x854', 
		'\x861', '\x865', '\x86A', '\x873', '\x884', '\x897', '\x8A0', '\x8A3', 
		'\x8AB', '\x8B0', '\x8B4', '\x8BB', '\x8C0', '\x8CF', '\x8D3', '\x8D9', 
		'\x8DF', '\x8E5', '\x8EB', '\x8F1', '\x8F6', '\x8FA', '\x902', '\x908', 
		'\x90E', '\x913', '\x916', '\x919', '\x922', '\x925', '\x930', '\x93C', 
		'\x945', '\x949', '\x952', '\x955', '\x95B', '\x95D', '\x961', '\x968', 
		'\x975', '\x97C', '\x982', '\x985', '\x996', '\x9AA', '\x9AE', '\x9B4', 
		'\x9BA', '\x9C0', '\x9C5', '\x9CC', '\x9D3', '\x9D8', '\x9DB', '\x9DF', 
		'\x9E3', '\x9E8', '\x9EC', '\x9F0', '\x9F6', '\x9FB', '\x9FE', '\xA02', 
		'\xA08', '\xA0C', '\xA10', '\xA18', '\xA20', '\xA29', '\xA32', '\xA3F', 
		'\xA42', '\xA46', '\xA4C', '\xA54', '\xA59', '\xA5C', '\xA5F', '\xA62', 
		'\xA65', '\xA67', '\xA6D', '\xA6F', '\xA7E', '\xA84', '\xA8B', '\xA8E', 
		'\xA90', '\xA92', '\xA9C', '\xA9E', '\xAA2', '\xAA5', '\xAA8', '\xAAC', 
		'\xAB1', '\xAB7', '\xABA', '\xABD', '\xAC3', '\xAC6', '\xACF', '\xAD8', 
		'\xADC', '\xAE0', '\xAE6', '\xAEB', '\xAF0', '\xAF5', '\xAF9', '\xAFF', 
		'\xB0A', '\xB0D', '\xB12', '\xB18', '\xB1B', '\xB1E', '\xB21', '\xB24', 
		'\xB32', '\xB35', '\xB39', '\xB3D', '\xB43', '\xB48', '\xB4C', '\xB51', 
		'\xB54', '\xB58', '\xB5E', '\xB62', '\xB66', '\xB6F', '\xB74', '\xB78', 
		'\xB7C', '\xB7F', '\xB83', '\xB86', '\xB88', '\xB8C', '\xB92', '\xB96', 
		'\xB98', '\xB9C', '\xBA0', '\xBA4', '\xBAB', '\xBAD', '\xBB6', '\xBBC', 
		'\xBC1', '\xBC4', '\xBC7', '\xBCA', '\xBCD', '\xBD1', '\xBE0', '\xBE4', 
		'\xBEA', '\xBED', '\xBF0', '\xBF6', '\xBFB', '\xBFF', '\xC02', '\xC0A', 
		'\xC0C', '\xC19', '\xC25', '\xC2A', '\xC2D', '\xC30', '\xC35', '\xC3B', 
		'\xC4B', '\xC5F', '\xC68', '\xC6C', '\xC73', '\xC78', '\xC81', '\xC88', 
		'\xC93', '\xC9A', '\xCA3', '\xCAC', '\xCB8', '\xCBD', '\xCC4', '\xCC8', 
		'\xCCE', '\xCD3', '\xCD8', '\xCDC', '\xCE2', '\xCE8', '\xCEA', '\xCED', 
		'\xCF1', '\xCFB', '\xD00', '\xD05', '\xD0C', '\xD15', '\xD1D', '\xD22', 
		'\xD26', '\xD2C', '\xD2F', '\xD32', '\xD36', '\xD3A', '\xD44', '\xD48', 
		'\xD4B', '\xD4E', '\xD53', '\xD59', '\xD5D', '\xD63', '\xD66', '\xD68', 
		'\xD6D', '\xD79', '\xD82', '\xD8F', '\xD92', '\xD97', '\xD9E', '\xDA2', 
		'\xDA6', '\xDA8', '\xDB6', '\xDBD', '\xDC6', '\xDCC', '\xDD5', '\xDD9', 
		'\xDDD', '\xDE7', '\xDE9', '\xDF1', '\xDF8', '\xDFD', '\xE01', '\xE05', 
		'\xE08', '\xE0E', '\xE11', '\xE14', '\xE1A', '\xE21', '\xE26', '\xE2A', 
		'\xE2D', '\xE30', '\xE33', '\xE35', '\xE39', '\xE41', '\xE47', '\xE4B', 
		'\xE50', '\xE53', '\xE56', '\xE59', '\xE5B', '\xE60', '\xE69', '\xE76', 
		'\xE78', '\xE7C', '\xE82', '\xE85', '\xE88', '\xE8E', '\xE95', '\xE97', 
		'\xE9F', '\xEA5', '\xEAA', '\xEAD', '\xEB4', '\xEB6', '\xEBF', '\xEC8', 
		'\xED1', '\xED9', '\xEDD', '\xEE4', '\xEE7', '\xEE9', '\xEF1', '\xEF7', 
		'\xF01', '\xF08', '\xF66', '\xF6A', '\xF70', '\xF7E', '\xF86', '\xF89', 
		'\xF95', '\xF9A', '\xFA0', '\xFA7', '\xFAE', '\xFB5', '\xFBC', '\xFC3', 
		'\xFCA', '\xFCD', '\xFD4', '\xFDC', '\xFE4', '\xFEE', '\xFF4', '\xFF8', 
		'\xFFC', '\x1001', '\x1004', '\x1006', '\x100F', '\x1015', '\x101C', '\x1021', 
		'\x1026', '\x102B', '\x102E', '\x1035', '\x1042', '\x1048', '\x104E', 
		'\x1055', '\x105D', '\x1063', '\x106F', '\x1071', '\x1077', '\x107B', 
		'\x107D', '\x1081', '\x108E', '\x1094', '\x109C', '\x10A7', '\x10AB', 
		'\x10B8', '\x10BF', '\x10C5', '\x10CC', '\x10CE', '\x10D8', '\x10E0', 
		'\x10E3', '\x10E8', '\x10EC', '\x10F2', '\x10F5', '\x10FA', '\x1105', 
		'\x1107', '\x1113', '\x1118', '\x1120', '\x1126', '\x1128', '\x112A', 
		'\x1130', '\x113C', '\x1141', '\x1143', '\x1147', '\x114D', '\x1150', 
		'\x1153', '\x115D', '\x115F', '\x1165', '\x116C', '\x1172', '\x117C', 
		'\x1180', '\x1185', '\x1196', '\x11A6', '\x11AB', '\x11B3', '\x11BB', 
		'\x11C0', '\x11C6', '\x11C9', '\x11CB', '\x11D4', '\x11DA', '\x11E0', 
		'\x11E2', '\x11E6', '\x11F1', '\x11FB', '\x1200', '\x1205', '\x120A', 
		'\x1212', '\x1216', '\x121B', '\x1224', '\x1230', '\x123E', '\x1247', 
		'\x1249', '\x1250', '\x1257', '\x125B', '\x1261', '\x1269', '\x1270', 
		'\x1274', '\x127A', '\x1281', '\x1284', '\x128D', '\x1293', '\x1298', 
		'\x12AF', '\x12B2', '\x12C2', '\x12C7', '\x12CA', '\x12CE', '\x12D1', 
		'\x12DF', '\x12E5', '\x12EA', '\x12ED', '\x12EF', '\x12F3', '\x12F8', 
		'\x12FA', '\x1306', '\x130C', '\x1322', '\x1326', '\x1328', '\x1330', 
		'\x1334', '\x133D', '\x1347', '\x134E', '\x1351', '\x1355', '\x1358', 
		'\x135B', '\x135F', '\x1362', '\x1366', '\x1369', '\x136E', '\x1371', 
		'\x1376', '\x1379', '\x137F', '\x1383', '\x1389', '\x138C', '\x1395', 
		'\x1397', '\x139D', '\x13A1', '\x13A4', '\x13A7', '\x13AB', '\x13B1', 
		'\x13B4', '\x13B7', '\x13C1', '\x13C5', '\x13CE', '\x13D1', '\x13D6', 
		'\x13D9', '\x13DC', '\x13E0', '\x13E3', '\x13E8', '\x13EC', '\x13F4', 
		'\x1401', '\x1413', '\x1418', '\x141D', '\x1425', '\x142B', '\x142D', 
		'\x1431', '\x1434', '\x1442', '\x144C', '\x1450', '\x1458', '\x145B', 
		'\x145F', '\x1469', '\x146D', '\x1474', '\x1479', '\x1481', '\x1486', 
		'\x148C', '\x1493', '\x1498', '\x149E', '\x14A5', '\x14AF', '\x14B1', 
		'\x14B9', '\x14BE', '\x14C2', '\x14C5', '\x14CC', '\x14D1', '\x14D5', 
		'\x14E0', '\x14E8', '\x14EC', '\x14EF', '\x14F2', '\x14F6', '\x14FA', 
		'\x14FF', '\x1505', '\x1509', '\x1514', '\x1517', '\x151A', '\x151D', 
		'\x1525', '\x1529', '\x152E', '\x1536', '\x153E', '\x1544', '\x1556', 
		'\x1560', '\x1566', '\x1574', '\x1577', '\x157B', '\x1586', '\x1588', 
		'\x1591', '\x159D', '\x159F', '\x15A6', '\x15AC', '\x15B2', '\x15BA', 
		'\x15C5', '\x15C9', '\x15E6', '\x15E8', '\x15F0', '\x15F4', '\x1605', 
		'\x160C', '\x161A', '\x1626', '\x162C', '\x1633', '\x1636', '\x1658', 
		'\x1660', '\x1662', '\x166E', '\x1673', '\x1679', '\x1681', '\x1688', 
		'\x168E', '\x1693', '\x1699', '\x169E', '\x16A3', '\x16A9', '\x16AE', 
		'\x16B4', '\x16BC', '\x16C4', '\x16CC', '\x16D4', '\x16D9', '\x16DF', 
		'\x16E4', '\x16E8', '\x16EC', '\x16F1', '\x16F3', '\x1706', '\x170A', 
		'\x1711', '\x171D', '\x1720', '\x1724', '\x1729', '\x172E', '\x1732', 
		'\x173C', '\x1745', '\x1747', '\x174A', '\x1753', '\x175A', '\x1767', 
		'\x176C', '\x1773', '\x1779', '\x1793', '\x17B2', '\x17C6', '\x17CC', 
		'\x17D0', '\x17EB', '\x17F7', '\x1804', '\x1808', '\x180C', '\x1828', 
		'\x1860', '\x186A', '\x186E', '\x187A', '\x187F', '\x188C', '\x18A0', 
		'\x18A4', '\x18B5', '\x18B8', '\x18BD', '\x18C0', '\x18C9', '\x18CD', 
		'\x18D3', '\x18D9', '\x18DD', '\x18E8', '\x18EE', '\x18F0', '\x18F7', 
		'\x18FE', '\x1902', '\x1909', '\x190E', '\x1912', '\x1917', '\x191B', 
		'\x191F', '\x1924', '\x1929', '\x192B', '\x192F', '\x193C', '\x1940', 
		'\x1943', '\x1947', '\x194B', '\x194F', '\x1954', '\x1958', '\x195C', 
		'\x1965', '\x1967', '\x196E', '\x1974', '\x197C', '\x1991', '\x1996', 
		'\x199D', '\x19B4', '\x19C4', '\x19CE', '\x19D2', '\x19D9', '\x19DC', 
		'\x19E7', '\x19F0', '\x19F3', '\x19FA', '\x19FF', '\x1A19', '\x1A1F', 
		'\x1A25', '\x1A29', '\x1A33', '\x1A37', '\x1A44', '\x1A50', '\x1A62', 
		'\x1A6A', '\x1A74', '\x1A77', '\x1A7C', '\x1A80', '\x1A87', '\x1A8C', 
		'\x1A93', '\x1A9B', '\x1A9E', '\x1AA3', '\x1AAB', '\x1AAE', '\x1ABC', 
		'\x1ABF', '\x1ACC', '\x1AD0', '\x1AD2', '\x1AD7', '\x1ADC', '\x1AE2', 
		'\x1AE8', '\x1AEE', '\x1AF3', '\x1AF6', '\x1AFC', '\x1B01', '\x1B04', 
		'\x1B0A', '\x1B0E', '\x1B14', '\x1B16', '\x1B19', '\x1B1F', '\x1B25', 
		'\x1B2D', '\x1B2F', '\x1B31', '\x1B35', '\x1B3B', '\x1B40', '\x1B44', 
		'\x1B49', '\x1B4F', '\x1B56', '\x1B59', '\x1B5B', '\x1B5E', '\x1B68', 
		'\x1B6C', '\x1B72', '\x1B79', '\x1B7E', '\x1B8C', '\x1B91', '\x1B99', 
		'\x1B9E', '\x1BA2', '\x1BA5', '\x1BAA', '\x1BAE', '\x1BB6', '\x1BBE', 
		'\x1BC0', '\x1BC7', '\x1BCF', '\x1BD6', '\x1BD9', '\x1BE1', '\x1BE9', 
		'\x1BEB', '\x1BF1', '\x1BF7', '\x1BFB', '\x1C02', '\x1C0D', '\x1C16', 
		'\x1C19', '\x1C1E', '\x1C20', '\x1C23', '\x1C26', '\x1C2A', '\x1C2D', 
		'\x1C31', '\x1C36', '\x1C39', '\x1C3D', '\x1C40', '\x1C44', '\x1C49', 
		'\x1C4D', '\x1C59', '\x1C5D', '\x1C63', '\x1C66', '\x1C6B', '\x1C6F', 
		'\x1C73', '\x1C78', '\x1C81', '\x1C84', '\x1C88', '\x1C8C', '\x1C8F', 
		'\x1C93', '\x1C97', '\x1C9C', '\x1CA1', '\x1CA7', '\x1CAC', '\x1CB1', 
		'\x1CB3', '\x1CB8', '\x1CBF', '\x1CC7', '\x1CCD', '\x1CCF', '\x1CD3', 
		'\x1CD7', '\x1CDB', '\x1CDF', '\x1CED', '\x1CF4', '\x1CF8', '\x1CFD', 
		'\x1D03', '\x1D07', '\x1D0D', '\x1D11', '\x1D15', '\x1D1A', '\x1D1F', 
		'\x1D24', '\x1D29', '\x1D2F', '\x1D35', '\x1D3A', '\x1D3F', '\x1D44', 
		'\x1D49', '\x1D4E', '\x1D53', '\x1D58', '\x1D62', '\x1D68', '\x1D6E', 
		'\x1D74', '\x1D77', '\x1D7E', '\x1D83', '\x1D86', '\x1D8A', '\x1D8D', 
		'\x1D91', '\x1D96', '\x1D9A', '\x1D9F', '\x1DA3', '\x1DAC', '\x1DAF', 
		'\x1DB2', '\x1DB5', '\x1DB9', '\x1DBD', '\x1DC1', '\x1DD0', '\x1DD3', 
		'\x1DD5', '\x1DDA', '\x1DE3', '\x1DE6', '\x1DEA', '\x1DF7', '\x1E03', 
		'\x1E08', '\x1E0D', '\x1E16', '\x1E1B', '\x1E24', '\x1E29', '\x1E2D', 
		'\x1E31', '\x1E35', '\x1E3A', '\x1E3F', '\x1E45', '\x1E4A', '\x1E4D', 
		'\x1E54', '\x1E5D', '\x1E64', '\x1E72', '\x1E7E', '\x1E8B', '\x1E93', 
		'\x1E9A', '\x1EA3', '\x1EA9', '\x1EB1', '\x1EB7', '\x1EC2', '\x1ECA', 
		'\x1ED2', '\x1EDA', '\x1EE4', '\x1EE9', '\x1EEE', '\x1EF0', '\x1EF6', 
		'\x1EFC', '\x1EFF', '\x1F06', '\x1F08', '\x1F0A', '\x1F0D', '\x1F0F', 
		'\x1F20', '\x1F25', '\x1F27', '\x1F2E', '\x1F3B', '\x1F3D', '\x1F43', 
		'\x1F4D', '\x1F56', '\x1F61', '\x1F77', '\x1F7B', '\x1F93', '\x1F9E', 
		'\x1FA0', '\x1FA4', '\x1FAB', '\x1FB3', '\x1FBA', '\x1FC0', '\x1FCF', 
		'\x1FD3', '\x1FDA', '\x1FE3', '\x1FE8', '\x1FEA', '\x1FF0', '\x2000', 
		'\x2008', '\x200B', '\x2012', '\x201A', '\x2022', '\x2027', '\x202C', 
		'\x202F', '\x2033', '\x2038', '\x2042', '\x2051', '\x2055', '\x2061', 
		'\x2065', '\x2069', '\x206D', '\x207C', '\x2088', '\x2092', '\x2099', 
		'\x209B', '\x20AC', '\x20B1', '\x20B3', '\x20BA', '\x20BF', '\x20C4', 
		'\x20C6', '\x20CC', '\x20D5', '\x20E0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parsers
